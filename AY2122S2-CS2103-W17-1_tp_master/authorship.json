[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103-W17-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S2-CS2103-W17-1/tp/actions)","lastModifiedDate":"2022-02-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"[![codecov](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp)","lastModifiedDate":"2022-02-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"## ContaX","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"* This application is aimed at professionals with many clients to help them to organise contacts, appointments and resources","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"* Usages:","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Management of contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Management of schedules","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"* Features:","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Detailed onboarding","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Add/Delete/Edit Contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Contact Tagging and Filtering","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Advanced command chaining/mass operations","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Add/Delete/Edit Appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"* For the detailed documentation of this project, see the **[ContaX Product Website](https://ay2122s2-cs2103-w17-1.github.io/tp/)**.","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2022-02-27"}],"authorContributionMap":{"dandaandaaaaaan":20,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"mainClassName \u003d \u0027seedu.contax.Main\u0027","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    archiveName \u003d \u0027contax.jar\u0027","lastModifiedDate":"2022-03-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sharpstorm":2,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"### Ho Zong Han","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"\u003cimg src\u003d\"images/sharpstorm.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"[[github](http://github.com/sharpstorm)]","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"[[portfolio](team/sharpstorm.md)]","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"* Responsibilities: Code Quality, Scheduling and Deadlines, Progress Tracking, In Charge of Appointments Subcomponent","lastModifiedDate":"2022-03-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"### Daniel Lee Min Qiang","lastModifiedDate":"2022-03-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"\u003cimg src\u003d\"images/dandaandaaaaaan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"[[github](https://github.com/dandaandaaaaaan)]","lastModifiedDate":"2022-03-01"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"[[portfolio](team/dandaandaaaaaan.md)]","lastModifiedDate":"2022-03-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"* Role: Developer","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"* Responsibilities: CI/CD and Workflow Management, Repository Administration, In Charge of Import/Export Subcomponent","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"### Ong Wei Xin","lastModifiedDate":"2022-02-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"\u003cimg src\u003d\"images/wei-xinn.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"[[github](https://github.com/wei-xinn)]","lastModifiedDate":"2022-02-22"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"[[portfolio](team/wei-xinn.md)]","lastModifiedDate":"2022-02-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"* Responsibilities: In Charge of User Onboarding Subcomponent","lastModifiedDate":"2022-03-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"### Kwan Hao Wei","lastModifiedDate":"2022-02-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"\u003cimg src\u003d\"images/kwanhw.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"[[github](http://github.com/kwanhw)]","lastModifiedDate":"2022-02-22"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"[[portfolio](team/kwanhw.md)]","lastModifiedDate":"2022-02-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2022-02-22"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"* Responsibilities: In Charge of Tag Management Subcomponent","lastModifiedDate":"2022-03-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"### Han Jiyao","lastModifiedDate":"2022-03-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"\u003cimg src\u003d\"images/hanjiyao.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"[[github](http://github.com/hanjiyao)]","lastModifiedDate":"2022-03-01"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"[[portfolio](team/hanjiyao.md)]","lastModifiedDate":"2022-03-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"-   Role: Developer","lastModifiedDate":"2022-02-22"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"-   Responsibilities: In Charge of Bulk Operations Subcomponent","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"sharpstorm":18,"Wei-Xinn":4,"KwanHW":5,"-":33}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c","lastModifiedDate":"2020-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. When CI runs, it will generate code coverage data (based on the tests run by CI) and upload that data to the CodeCov website, which in turn can provide you more info about the coverage of your testes. Here are the steps to set up CodeCov for a fork of this repository.","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup).","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your org (that contains the fork) to CodeCov.","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Wait for the next run of CI in your fork (or push a dummy commit to it to trigger CI) to confirm CI is able to upload generated coverage data to CodeCov. If CodeCov is not set up correctly, the CI run will fail with an error message that mentions CodeCov.","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp) in that page reflects the coverage of your project.","lastModifiedDate":"2022-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/MainApp.java).","lastModifiedDate":"2022-03-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadowJar`).","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"sharpstorm":2,"-":78}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/Main.java) and [`MainApp`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/MainApp.java). It is responsible for,","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/ui/Ui.java)","lastModifiedDate":"2022-03-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2022-03-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/logic/Logic.java)","lastModifiedDate":"2022-03-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"**API** : [`Model.java`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/model/Model.java)","lastModifiedDate":"2022-03-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"600\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"* stores the schedule data i.e., all `Appointment` objects (which are contained in a `DisjointAppointmentList` object).","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"* store the tag data i.e., all `Tag` objects (which are contained in a `UniqueTagList` object).","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S2-CS2103-W17-1/tp/tree/master/src/main/java/seedu/contax/storage/Storage.java)","lastModifiedDate":"2022-03-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"Classes used by multiple components are in the `seedu.contax.commons` package.","lastModifiedDate":"2022-03-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"### AddressBook and Schedule Subsystems","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"Departing from the 4-component architectural view of the system, the App can also be logically partitioned into 3 distinct subsystems based on functionality.","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"These subsystems are namely the:","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"* Address Book Subsystem","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"* Schedule Subsystem","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"* Command Parsing, Processing and Display Subsystem","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"\u003cimg src\u003d\"images/FunctionalSubsystemDiagram.png\" width\u003d\"600\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"Functionally, the Address Book and Schedule subsystem are near identical copies of each other, with the exception being the type of data being managed and the","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"logic specific to each type of data. They serve the the same purpose of storing and managing data related to Contacts and Appointments respectively, and are hence structured similarly across the 4 architectural components, with similar flows for equivalent operations (E.g. `deletePerson` and `deleteAppointment`).","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"As such, the detailed descriptions for the Address Book subsystem above can be translated to equivalents for the Schedule subsystem.","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"* Needs to manage a large number of contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"* Has a busy schedule with many appointments and meetings","lastModifiedDate":"2022-02-27"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"* Needs to know when he is free very quickly","lastModifiedDate":"2022-02-27"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"* May need documents or information related to contacts or meetings","lastModifiedDate":"2022-02-27"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"* Prefers keyboard over mouse interactions for on-the-go usage","lastModifiedDate":"2022-02-27"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"* Is reasonably comfortable using apps with text-based inputs","lastModifiedDate":"2022-02-27"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"* Currently uses excel for managing contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"**Value proposition**: Allows efficient management of a large list of contacts together with a schedule, providing an integrated solution for tracking work-related information.","lastModifiedDate":"2022-02-27"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"| Priority | As a …​                                     | I want to …​                                                                         | So that I can…​                                                     |","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |","lastModifiedDate":"2022-02-27"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | beginner user                              | see usage instructions and tutorials                                                | remember how to perform certain tasks                                  |","lastModifiedDate":"2022-02-27"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | new user on my first run of the App        | see examples and onboarding guides                                                  | quickly learn how to use the application                               |","lastModifiedDate":"2022-02-27"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | beginner user                              | see examples for all commands that can be used                                      | learn from them and modify them for my needs                           |","lastModifiedDate":"2022-02-27"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | add a new person to my address book                                                 | record their information                                               |","lastModifiedDate":"2022-02-27"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | list all the people in my address book                                              | see everyone in my address book                                        |","lastModifiedDate":"2022-02-27"},{"lineNumber":299,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name                                                               | locate details of persons without having to go through the entire list |","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | forgetful user                             | find a person by contact number, email or other attributes                          | find people even if I forget their name                                |","lastModifiedDate":"2022-02-27"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | delete a person in my address book                                                  | remove people if I no longer need to remember them                     |","lastModifiedDate":"2022-02-27"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | edit a person in my address book                                                    | update the information of various people when they change              |","lastModifiedDate":"2022-02-27"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user keeping track of many kinds of people | add tags to persons in my address book                                              | group multiple contacts together as a broader category                 |","lastModifiedDate":"2022-02-27"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | find a person by tags                                                               | easily find subgroups of persons within my address book                |","lastModifiedDate":"2022-02-27"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | new user                                   | import data from an Excel compatible format                                         | transfer my current list of persons from an Excel document             |","lastModifiedDate":"2022-02-27"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | seasoned user                              | export my address book to an Excel compatible format                                | share my address book in a widely known document format                |","lastModifiedDate":"2022-02-27"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | power user                                 | link documents to a person                                                          | easily locate related documents for a person                           |","lastModifiedDate":"2022-02-27"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | power user                                 | unlink documents from a person                                                      | remove documents no longer required for a person                       |","lastModifiedDate":"2022-02-27"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | create a new appointment in my schedule                                             | keep track of things that I need to do at different times              |","lastModifiedDate":"2022-02-27"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | list all appointments in my schedule                                                | have an overview of all scheduled events                               |","lastModifiedDate":"2022-02-27"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | user                                       | edit the details of an appointment                                                  | respond to any changes in my schedule                                  |","lastModifiedDate":"2022-02-27"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | delete an appointment                                                               | free up my schedule if events are cancelled                            |","lastModifiedDate":"2022-02-27"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | user                                       | find appointments within a range of dates                                           | plan my day(s) ahead of time                                           |","lastModifiedDate":"2022-02-27"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | user                                       | view all appointments on a calendar interface                                       | get an overview of all my appointments in the month                    |","lastModifiedDate":"2022-02-27"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | user                                       | search for appointments by a person\u0027s name                                          | find all appointments related to a particular person                   |","lastModifiedDate":"2022-02-27"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | user                                       | be reminded of things that are happening on a particular day                        | remember to attend them                                                |","lastModifiedDate":"2022-02-27"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | add a to-do list to an appointment                                                  | be reminded to make preparations for that appointment                  |","lastModifiedDate":"2022-02-27"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | view the to-do list of an appointment                                               | ensure that I am fully prepared for the appointment                    |","lastModifiedDate":"2022-02-27"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | indicate if a task in the to-do list of an appointment is done                      | keep track of the things that are already done                         |","lastModifiedDate":"2022-02-27"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | search for appointments by tags and other filters                                   | easily find appointments amongst my large address book                 |","lastModifiedDate":"2022-02-27"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | power user                                 | link documents to an appointment                                                    | easily find them to prepare for my appointment                         |","lastModifiedDate":"2022-02-27"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | seasoned user                              | export contact information to PDF                                                   | easily print mailing labels for contacts                               |","lastModifiedDate":"2022-02-27"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | seasoned user                              | directly edit the .json data file to add/edit persons                               | manage the address book faster                                         |","lastModifiedDate":"2022-02-27"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | seasoned user                              | export and import the .json file                                                    | easily transfer the data in ContaX across multiple users or devices    |","lastModifiedDate":"2022-02-27"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | seasoned user                              | export all my data files as backup                                                  | have a copy of the contact list and import it in case of data loss     |","lastModifiedDate":"2022-02-27"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | seasoned user                              | enter commands that perform an action on multiple contacts in a single step         | efficiently manage my address book                                     |","lastModifiedDate":"2022-02-27"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"| `* *  `  | seasoned user                              | enter commands that perform an action on multiple appointments in a single step     | efficiently manage my schedule                                         |","lastModifiedDate":"2022-02-27"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | seasoned user                              | customise the names and format of text-based commands                               | easily remember and use commands I need                                |","lastModifiedDate":"2022-02-27"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"| `* * *`  | seasoned user                              | batch multiple commands together                                                    | perform complex tasks in a single action                               |","lastModifiedDate":"2022-02-27"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"| `*    `  | seasoned user                              | add macros to chain multiple actions together as custom command                     | perform complex actions that I need in 1 command                       |","lastModifiedDate":"2022-02-27"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"Wei-Xinn"},"content":"(For all use cases below, the **System** is the `ContaX` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-02-28"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: List persons**","lastModifiedDate":"2022-02-28"},{"lineNumber":338,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":339,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":340,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":341,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to list persons","lastModifiedDate":"2022-02-28"},{"lineNumber":342,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX shows a list of persons","lastModifiedDate":"2022-02-28"},{"lineNumber":343,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":344,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":345,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":346,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Add a person**","lastModifiedDate":"2022-02-28"},{"lineNumber":347,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":348,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":349,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":350,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to add a person","lastModifiedDate":"2022-02-28"},{"lineNumber":351,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX adds the person","lastModifiedDate":"2022-02-28"},{"lineNumber":352,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":353,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":354,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":355,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-28"},{"lineNumber":356,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":357,"author":{"gitId":"Wei-Xinn"},"content":"* 1a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":358,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":359,"author":{"gitId":"Wei-Xinn"},"content":"    * 1a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":360,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":361,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":362,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":363,"author":{"gitId":"Wei-Xinn"},"content":"* 1b. A parameter given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":364,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":365,"author":{"gitId":"Wei-Xinn"},"content":"    * 1b1. ContaX shows an error message indicating that the given parameter is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":366,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":367,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":368,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":369,"author":{"gitId":"Wei-Xinn"},"content":"* 1c. The person already exists","lastModifiedDate":"2022-02-28"},{"lineNumber":370,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":371,"author":{"gitId":"Wei-Xinn"},"content":"    * 1c1. ContaX shows an error message indicating that the person already exists.","lastModifiedDate":"2022-02-28"},{"lineNumber":372,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":373,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"Wei-Xinn"},"content":"2.  ContaX shows a list of persons","lastModifiedDate":"2022-02-27"},{"lineNumber":381,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"Wei-Xinn"},"content":"4.  ContaX deletes the person","lastModifiedDate":"2022-02-27"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"Wei-Xinn"},"content":"* 2a. The list is empty","lastModifiedDate":"2022-02-28"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"Wei-Xinn"},"content":"* 3a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"Wei-Xinn"},"content":"    * 3a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":395,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":396,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-27"},{"lineNumber":397,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":398,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Edit a person**","lastModifiedDate":"2022-02-27"},{"lineNumber":399,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":400,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":401,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":402,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to list persons","lastModifiedDate":"2022-02-27"},{"lineNumber":403,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX shows a list of persons","lastModifiedDate":"2022-02-27"},{"lineNumber":404,"author":{"gitId":"Wei-Xinn"},"content":"3. User requests to modify a specific person and enters new values","lastModifiedDate":"2022-02-28"},{"lineNumber":405,"author":{"gitId":"Wei-Xinn"},"content":"4. ContaX edits the person accordingly","lastModifiedDate":"2022-02-27"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"Wei-Xinn"},"content":"* 3a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"Wei-Xinn"},"content":"    * 3a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":418,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":419,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-27"},{"lineNumber":420,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":421,"author":{"gitId":"Wei-Xinn"},"content":"* 3b. A parameter given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":422,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":423,"author":{"gitId":"Wei-Xinn"},"content":"    * 1b1. ContaX shows an error message indicating that the given parameter is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":424,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":425,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-27"},{"lineNumber":426,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":427,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":428,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: List appointments**","lastModifiedDate":"2022-02-28"},{"lineNumber":429,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":430,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":431,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":432,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to list appointments","lastModifiedDate":"2022-02-28"},{"lineNumber":433,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX shows a list of appointments","lastModifiedDate":"2022-02-28"},{"lineNumber":434,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":435,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":436,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":437,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Add an appointment**","lastModifiedDate":"2022-02-28"},{"lineNumber":438,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":439,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":440,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":441,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to add an appointment","lastModifiedDate":"2022-02-28"},{"lineNumber":442,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX adds the appointment","lastModifiedDate":"2022-02-28"},{"lineNumber":443,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":444,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":445,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":446,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-28"},{"lineNumber":447,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":448,"author":{"gitId":"Wei-Xinn"},"content":"* 1a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":449,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":450,"author":{"gitId":"Wei-Xinn"},"content":"    * 1a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":451,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":452,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":453,"author":{"gitId":"Wei-Xinn"},"content":"* 1b. A parameter given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":454,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":455,"author":{"gitId":"Wei-Xinn"},"content":"    * 1b1. ContaX shows an error message indicating that the given parameter is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":456,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":457,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":458,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":459,"author":{"gitId":"Wei-Xinn"},"content":"* 1c. The appointment timing overlaps with another appointment","lastModifiedDate":"2022-02-28"},{"lineNumber":460,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":461,"author":{"gitId":"Wei-Xinn"},"content":"    * 1c1. ContaX shows an error message indicating that the appointment cannot be created due to overlaps.","lastModifiedDate":"2022-02-28"},{"lineNumber":462,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":463,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":464,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":465,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Delete an appointment**","lastModifiedDate":"2022-02-28"},{"lineNumber":466,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":467,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":468,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":469,"author":{"gitId":"Wei-Xinn"},"content":"1.  User requests to list appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":470,"author":{"gitId":"Wei-Xinn"},"content":"2.  ContaX shows a list of appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":471,"author":{"gitId":"Wei-Xinn"},"content":"3.  User requests to delete a specific appointments in the list","lastModifiedDate":"2022-02-27"},{"lineNumber":472,"author":{"gitId":"Wei-Xinn"},"content":"4.  ContaX deletes the appointment","lastModifiedDate":"2022-02-27"},{"lineNumber":473,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":474,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":475,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":476,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":477,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":478,"author":{"gitId":"Wei-Xinn"},"content":"* 2a. The list is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":479,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":480,"author":{"gitId":"Wei-Xinn"},"content":"  Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":481,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":482,"author":{"gitId":"Wei-Xinn"},"content":"* 3a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":483,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":484,"author":{"gitId":"Wei-Xinn"},"content":"    * 3a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":485,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":486,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-27"},{"lineNumber":487,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":488,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Edit an appointment**","lastModifiedDate":"2022-02-28"},{"lineNumber":489,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":490,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":491,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":492,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to list appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":493,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX shows a list of appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":494,"author":{"gitId":"Wei-Xinn"},"content":"3. User requests to modify a specific appointment and enters new values","lastModifiedDate":"2022-02-28"},{"lineNumber":495,"author":{"gitId":"Wei-Xinn"},"content":"4. ContaX edits the appointment.","lastModifiedDate":"2022-02-27"},{"lineNumber":496,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":497,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":498,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":499,"author":{"gitId":"Wei-Xinn"},"content":"* 2a. The list is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":500,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":501,"author":{"gitId":"Wei-Xinn"},"content":"  Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":502,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":503,"author":{"gitId":"Wei-Xinn"},"content":"* 3a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":504,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":505,"author":{"gitId":"Wei-Xinn"},"content":"    * 3a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":506,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":507,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-27"},{"lineNumber":508,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":509,"author":{"gitId":"Wei-Xinn"},"content":"* 3b. A parameter given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":510,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":511,"author":{"gitId":"Wei-Xinn"},"content":"    * 3b1. ContaX shows an error message indicating that the given parameter is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":512,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":513,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case resumes at step 2.","lastModifiedDate":"2022-02-28"},{"lineNumber":514,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":515,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: Export address book**","lastModifiedDate":"2022-02-28"},{"lineNumber":516,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":517,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":518,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":519,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to export address book as file for ContaX","lastModifiedDate":"2022-02-28"},{"lineNumber":520,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX saves a CSV file to the disk according to the format requested by the user","lastModifiedDate":"2022-02-28"},{"lineNumber":521,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":522,"author":{"gitId":"Wei-Xinn"},"content":"   Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":523,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":524,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":525,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":526,"author":{"gitId":"Wei-Xinn"},"content":"* 1a. User requests to export address book as file for Google Contacts","lastModifiedDate":"2022-02-28"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"Wei-Xinn"},"content":"* 1b. User requests to export address book as file for Microsoft Outlook","lastModifiedDate":"2022-02-28"},{"lineNumber":531,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":532,"author":{"gitId":"Wei-Xinn"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2022-02-28"},{"lineNumber":533,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":534,"author":{"gitId":"Wei-Xinn"},"content":"**Use Case: Import CSV file**","lastModifiedDate":"2022-02-28"},{"lineNumber":535,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":536,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":537,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":538,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to import a CSV file","lastModifiedDate":"2022-02-28"},{"lineNumber":539,"author":{"gitId":"Wei-Xinn"},"content":"2. User selects the CSV file to import","lastModifiedDate":"2022-02-28"},{"lineNumber":540,"author":{"gitId":"Wei-Xinn"},"content":"3. ContactX imports the given CSV file","lastModifiedDate":"2022-02-28"},{"lineNumber":541,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":542,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":543,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":544,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":545,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":546,"author":{"gitId":"Wei-Xinn"},"content":"* 2a. Invalid CSV file selected","lastModifiedDate":"2022-02-28"},{"lineNumber":547,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":548,"author":{"gitId":"Wei-Xinn"},"content":"    * 2a1. ContaX shows an error message indicating that the CSV file selected is invalid.","lastModifiedDate":"2022-02-28"},{"lineNumber":549,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":550,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":551,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":552,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: User requests to perform a batch command**","lastModifiedDate":"2022-02-27"},{"lineNumber":553,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":554,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":555,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":556,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to perform a batch command which includes a condition","lastModifiedDate":"2022-02-27"},{"lineNumber":557,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX executes the command based on the given condition","lastModifiedDate":"2022-02-27"},{"lineNumber":558,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":559,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":560,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":561,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":562,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":563,"author":{"gitId":"Wei-Xinn"},"content":"* 1a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":564,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":565,"author":{"gitId":"Wei-Xinn"},"content":"    * 1a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":566,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":567,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":568,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":569,"author":{"gitId":"Wei-Xinn"},"content":"* 1b. There are no entries that matches the given condition","lastModifiedDate":"2022-02-28"},{"lineNumber":570,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":571,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":572,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":573,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: User requests to perform a command on a specified range**","lastModifiedDate":"2022-02-27"},{"lineNumber":574,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":575,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":576,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":577,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to perform a command to a specified range","lastModifiedDate":"2022-02-27"},{"lineNumber":578,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX executes the command based on the given range","lastModifiedDate":"2022-02-27"},{"lineNumber":579,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":580,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":581,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":582,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-27"},{"lineNumber":583,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":584,"author":{"gitId":"Wei-Xinn"},"content":"* * 1a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":585,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":586,"author":{"gitId":"Wei-Xinn"},"content":"    * 1a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":587,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":588,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":589,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":590,"author":{"gitId":"Wei-Xinn"},"content":"**Use case: User requests to chain multiple commands**","lastModifiedDate":"2022-02-28"},{"lineNumber":591,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":592,"author":{"gitId":"Wei-Xinn"},"content":"**MSS**","lastModifiedDate":"2022-02-27"},{"lineNumber":593,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":594,"author":{"gitId":"Wei-Xinn"},"content":"1. User requests to perform multiple commands by chaining them","lastModifiedDate":"2022-02-28"},{"lineNumber":595,"author":{"gitId":"Wei-Xinn"},"content":"2. ContaX starts from the first command","lastModifiedDate":"2022-02-28"},{"lineNumber":596,"author":{"gitId":"Wei-Xinn"},"content":"3. ContaX executes the command","lastModifiedDate":"2022-02-28"},{"lineNumber":597,"author":{"gitId":"Wei-Xinn"},"content":"4. If there is a subsequent chained command, ContaX repeats from step 3 on the next command","lastModifiedDate":"2022-02-28"},{"lineNumber":598,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":599,"author":{"gitId":"Wei-Xinn"},"content":"    Use case ends.","lastModifiedDate":"2022-02-28"},{"lineNumber":600,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":601,"author":{"gitId":"Wei-Xinn"},"content":"**Extensions**","lastModifiedDate":"2022-02-28"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":603,"author":{"gitId":"Wei-Xinn"},"content":"* 1a. The command given is in an invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":604,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":605,"author":{"gitId":"Wei-Xinn"},"content":"    * 1a1. ContaX shows an error message indicating that the given command is of invalid format.","lastModifiedDate":"2022-02-28"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":607,"author":{"gitId":"Wei-Xinn"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-27"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"sharpstorm"},"content":"4.  Should be intutitive for a first-time user to perform basic actions.","lastModifiedDate":"2022-03-01"},{"lineNumber":615,"author":{"gitId":"sharpstorm"},"content":"5.  The data file should be understandable to tech-savvy human readers.","lastModifiedDate":"2022-03-01"},{"lineNumber":616,"author":{"gitId":"sharpstorm"},"content":"6.  The system\u0027s design should follow the *Object-Oriented Paradigm (OOP)*.","lastModifiedDate":"2022-03-01"},{"lineNumber":617,"author":{"gitId":"sharpstorm"},"content":"7.  Should be packageable into a single JAR file.","lastModifiedDate":"2022-03-01"},{"lineNumber":618,"author":{"gitId":"sharpstorm"},"content":"8.  No initial setup should be required before running the application.","lastModifiedDate":"2022-03-01"},{"lineNumber":619,"author":{"gitId":"sharpstorm"},"content":"9.  Should function properly without an internet connection.","lastModifiedDate":"2022-03-01"},{"lineNumber":620,"author":{"gitId":"sharpstorm"},"content":"10. Graphical User Interface (GUI) should be properly displayed on screens with a minimum resolution of `1280x720`.","lastModifiedDate":"2022-03-01"},{"lineNumber":621,"author":{"gitId":"sharpstorm"},"content":"11. Graphical User Interface (GUI) should be properly displayed with `100%`, `125%` and `150%` text scaling configurations.","lastModifiedDate":"2022-03-01"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":627,"author":{"gitId":"sharpstorm"},"content":"* **Address Book**: The part of ContaX that keeps track of a list of Persons","lastModifiedDate":"2022-02-27"},{"lineNumber":628,"author":{"gitId":"sharpstorm"},"content":"* **Schedule**: The part of ContaX that keeps track of Appointments","lastModifiedDate":"2022-02-27"},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":653,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":655,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":656,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":658,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":668,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":671,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":676,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":677,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":679,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sharpstorm":80,"Wei-Xinn":240,"KwanHW":1,"-":360}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"   1. Run the `seedu.contax.Main` and try a few commands.","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"sharpstorm":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"   e.g. `seedu.contax.commons.StringUtilTest`","lastModifiedDate":"2022-03-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"   e.g. `seedu.contax.storage.StorageManagerTest`","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"   e.g. `seedu.contax.logic.LogicManagerTest`","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"sharpstorm":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"ContaX is a **desktop application for managing your Contacts and Schedule**. It is a powerful tool *optimized for use via a Command Line Interface* (CLI), while incorporating Graphical User Interface (GUI) elements to make it user-friendly. If you are able to type fast, ContaX is capable of helping you manage your contacts and schedule more efficiently than traditional GUI applications, allowing you to shift your focus to other things.","lastModifiedDate":"2022-02-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"Broadly speaking, ContaX consists of an *Address Book* for managing Contacts, and a *Schedule* for managing Appointments.","lastModifiedDate":"2022-02-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"1. Download the latest `ContaX.jar` from [here](https://github.com/AY2122S2-CS2103-W17-1/tp/releases).","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for ContaX.","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"### Common Date and Time Syntax","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-secondary\"\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"**:information_source: This section details the format(s) that date and time inputs are expected to be in.**\u003cbr\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"* All date inputs must conform to the following format: `dd-mm-yyyy`.","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"| Field | Description |","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"| - | - |","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"| `dd` | Day of the month. |","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"| `mm` | Numerical representation of the month, from `1` to `12`. |","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"| `yyyy` | Year in the full 4-digit format. |","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"* All time inputs must conform to the following format: `hh:mm`","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"| Field | Description |","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"| - | - |","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"| `hh` | Hour of the day, in 24-hour format. |","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"| `mm` | Minute of the hour, from `00` to `59`. |","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-02-21"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"### Onboarding guide","lastModifiedDate":"2022-02-27"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"#### Prompt on first run","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"When you run the program for the first time, you will be prompted to take a quick tour of the ContaX\u0027s basic functions guided through a series of step-by-step instructions. You will be taken to the onboarding guide window if you select yes. If you choose no, the prompt will just close.","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"![](images/OnboardingPrompt.png)","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"When going through the onboarding guide, instructions such as the one shown below will be displayed, and important areas will be highlighted.","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"![](images/OnboardingInstruction.jpg)","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"#### Basic features covered","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"The onboarding guide will cover the following:","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"- Add person","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"- List person","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"HanJiyao"},"content":"Format: `find KEYWORD [MORE_KEYWORDS] [by/SEARCH_TYPE]`","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"HanJiyao"},"content":"* `SEARCH_TYPE` must match one of the following:","lastModifiedDate":"2022-03-01"},{"lineNumber":168,"author":{"gitId":"HanJiyao"},"content":"  * Name","lastModifiedDate":"2022-03-01"},{"lineNumber":169,"author":{"gitId":"HanJiyao"},"content":"  * Address","lastModifiedDate":"2022-03-01"},{"lineNumber":170,"author":{"gitId":"HanJiyao"},"content":"  * Phone","lastModifiedDate":"2022-03-01"},{"lineNumber":171,"author":{"gitId":"HanJiyao"},"content":"  * Email","lastModifiedDate":"2022-03-01"},{"lineNumber":172,"author":{"gitId":"HanJiyao"},"content":"* If `SEARCH_TYPE` is not specified, default search type is by `Name`.","lastModifiedDate":"2022-03-01"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-03-01"},{"lineNumber":175,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2022-03-02"},{"lineNumber":176,"author":{"gitId":"HanJiyao"},"content":"* `find Garden by/address` lists all persons whose address contain the keyword \"Garden\"","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"HanJiyao"},"content":"* `find 87438807 by/phone` lists all persons whose phone number matches \"87438807\"","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2022-03-02"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2022-03-02"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":181,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"KwanHW"},"content":"### Creating a Tag : `addtag`","lastModifiedDate":"2022-02-28"},{"lineNumber":202,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":203,"author":{"gitId":"KwanHW"},"content":"Creates a new tag in ContaX.","lastModifiedDate":"2022-02-28"},{"lineNumber":204,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":205,"author":{"gitId":"KwanHW"},"content":"Format: `addtag n/TAGNAME`","lastModifiedDate":"2022-02-28"},{"lineNumber":206,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":207,"author":{"gitId":"KwanHW"},"content":"* The `TAGNAME` parameter **must** be specified, and can only contain alphanumeric characters and whitespaces.","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"KwanHW"},"content":"* If the `TAGNAME` already exists (case-insensitive), the tag will not be created.","lastModifiedDate":"2022-02-28"},{"lineNumber":209,"author":{"gitId":"KwanHW"},"content":"* All tag names will be converted to lowercase characters.","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":211,"author":{"gitId":"KwanHW"},"content":"Examples:","lastModifiedDate":"2022-02-28"},{"lineNumber":212,"author":{"gitId":"KwanHW"},"content":"* `addtag n/Potential Clients` Creates a tag named *potential clients* in the address book (if it does not exist).","lastModifiedDate":"2022-03-09"},{"lineNumber":213,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":214,"author":{"gitId":"KwanHW"},"content":"### Editing a Tag : `edittag`","lastModifiedDate":"2022-02-28"},{"lineNumber":215,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":216,"author":{"gitId":"KwanHW"},"content":"Edits an existing tag in ContaX.","lastModifiedDate":"2022-02-28"},{"lineNumber":217,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":218,"author":{"gitId":"KwanHW"},"content":"Format: `edittag INDEX t/NEW_TAGNAME`","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":220,"author":{"gitId":"KwanHW"},"content":"* All parameters **must** be specified.","lastModifiedDate":"2022-02-28"},{"lineNumber":221,"author":{"gitId":"KwanHW"},"content":"* The `INDEX` parameter **must be a positive integer**, and refers to the index number shown in the **displayed tag list**.","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"KwanHW"},"content":"* Changes the name of a tag at `INDEX` to `NEW_TAGNAME`.","lastModifiedDate":"2022-03-14"},{"lineNumber":223,"author":{"gitId":"KwanHW"},"content":"* An error will be thrown if either `INDEX` is invalid or `NEW_TAGNAME` already exists in ContaX.","lastModifiedDate":"2022-03-14"},{"lineNumber":224,"author":{"gitId":"KwanHW"},"content":"* An error will be thrown if the tag at `INDEX` has the same name as `NEW_TAGNAME`","lastModifiedDate":"2022-03-14"},{"lineNumber":225,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":226,"author":{"gitId":"KwanHW"},"content":"Examples:","lastModifiedDate":"2022-02-28"},{"lineNumber":227,"author":{"gitId":"KwanHW"},"content":"* `edittag 1 t/Prospective Clients` Changes the name of first tag in the list to *Prospective Clients*. ","lastModifiedDate":"2022-03-14"},{"lineNumber":228,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":229,"author":{"gitId":"KwanHW"},"content":"### Listing All Tags : `listtags`","lastModifiedDate":"2022-02-28"},{"lineNumber":230,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":231,"author":{"gitId":"KwanHW"},"content":"Shows a list of all tags in ContaX.","lastModifiedDate":"2022-02-28"},{"lineNumber":232,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":233,"author":{"gitId":"KwanHW"},"content":"Format: `listtags`","lastModifiedDate":"2022-02-28"},{"lineNumber":234,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":235,"author":{"gitId":"KwanHW"},"content":"**Example output**","lastModifiedDate":"2022-02-28"},{"lineNumber":236,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":237,"author":{"gitId":"KwanHW"},"content":"![List Tags](images/ListTag.png)","lastModifiedDate":"2022-02-28"},{"lineNumber":238,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":239,"author":{"gitId":"KwanHW"},"content":"### Deleting a Tag : `deletetag`","lastModifiedDate":"2022-02-28"},{"lineNumber":240,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":241,"author":{"gitId":"KwanHW"},"content":"Deletes the specified tag in ContaX.","lastModifiedDate":"2022-02-28"},{"lineNumber":242,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":243,"author":{"gitId":"KwanHW"},"content":"Format: `deletetag INDEX`","lastModifiedDate":"2022-03-09"},{"lineNumber":244,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":245,"author":{"gitId":"KwanHW"},"content":"* The `INDEX` parameter **must be a positive integer**, and refers to the index number shown in the **displayed tag list**.","lastModifiedDate":"2022-03-09"},{"lineNumber":246,"author":{"gitId":"KwanHW"},"content":"* When the tag is deleted, contacts that contain this tag will have the tag removed.","lastModifiedDate":"2022-02-28"},{"lineNumber":247,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":248,"author":{"gitId":"KwanHW"},"content":"Examples:","lastModifiedDate":"2022-02-28"},{"lineNumber":249,"author":{"gitId":"KwanHW"},"content":"* `deletetag 1` Deletes the first tag in the tag list and disassociates any contacts that contain the specified tag.","lastModifiedDate":"2022-03-09"},{"lineNumber":250,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":251,"author":{"gitId":"KwanHW"},"content":"### Finding Contacts by Tag : `findbytag`","lastModifiedDate":"2022-03-14"},{"lineNumber":252,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":253,"author":{"gitId":"KwanHW"},"content":"Finds persons whose tags match the given keyword.","lastModifiedDate":"2022-03-15"},{"lineNumber":254,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":255,"author":{"gitId":"KwanHW"},"content":"Format: `findbytag t/TAGNAME`","lastModifiedDate":"2022-03-14"},{"lineNumber":256,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":257,"author":{"gitId":"KwanHW"},"content":"* The `TAGNAME` parameter **must** be specified.","lastModifiedDate":"2022-02-28"},{"lineNumber":258,"author":{"gitId":"KwanHW"},"content":"* Search is case-insensitive e.g. `clients` is the same as `Clients`.","lastModifiedDate":"2022-02-28"},{"lineNumber":259,"author":{"gitId":"KwanHW"},"content":"* If there are no tags that contain that keyword, an empty list will be displayed.","lastModifiedDate":"2022-03-15"},{"lineNumber":260,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":261,"author":{"gitId":"KwanHW"},"content":"Examples:","lastModifiedDate":"2022-02-28"},{"lineNumber":262,"author":{"gitId":"KwanHW"},"content":"* `findbytag t/friends` Displays the contact information of contacts who have the *friends* tag.","lastModifiedDate":"2022-03-14"},{"lineNumber":263,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":264,"author":{"gitId":"KwanHW"},"content":"![Find Tags](images/FindTag.png)","lastModifiedDate":"2022-02-28"},{"lineNumber":265,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"### Creating an Appointment : `addappointment`","lastModifiedDate":"2022-03-14"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"Creates an appointment in the schedule.","lastModifiedDate":"2022-02-21"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"Format: `addappointment n/NAME d/DATE t/TIME l/DURATION [p/PERSON]`","lastModifiedDate":"2022-03-14"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"* Creates a new appointment with the specified parameters.","lastModifiedDate":"2022-02-21"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"* All parameters except `PERSON` **must** be specified.","lastModifiedDate":"2022-02-26"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"* The `NAME` parameter must be **non-empty**, and can only contain alphanumeric characters and the symbols `.,!@#$%\u0026*()-_\u003d+`.","lastModifiedDate":"2022-03-08"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"* The `DATE` parameter denotes the starting date, and **must conform to the [Common Date Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"* The `TIME` parameter denotes the starting time, and **must conform to the [Common Time Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"* The `DURATION` parameter is the duration of the appointment in *minutes*, and **must be a positive number**.","lastModifiedDate":"2022-02-21"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"* The `PERSON` parameter, if specified, **must be a positive integer**, and refers to the index number shown in the displayed person list.","lastModifiedDate":"2022-02-26"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:rotating_light: **Important Note:**","lastModifiedDate":"2022-02-25"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"The operation will fail if the appointment **overlaps** with another appointment.","lastModifiedDate":"2022-02-25"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"Examples:","lastModifiedDate":"2022-02-21"},{"lineNumber":284,"author":{"gitId":"sharpstorm"},"content":"* `addappointment n/Bi-Weekly Meeting d/14-02-2022 t/11:00 l/60` Creates a *one-hour* appointment named *\"Bi-Weekly Meeting\"* on *14th Feb 2022* at *11:00 AM*, associated with nobody in the contact list.","lastModifiedDate":"2022-03-14"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"* `addappointment n/Contract Signing With Charlie d/22-10-2022 t/16:30 p/1 l/300` Creates a *5-hour* appointment named *\"Contract Signing With Charlie\"* on *22nd Oct 2022* at *4:30 PM*, associated with the *first* person in the contact list.","lastModifiedDate":"2022-03-14"},{"lineNumber":286,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":287,"author":{"gitId":"sharpstorm"},"content":"### Listing All Appointments : `listappointments`","lastModifiedDate":"2022-03-14"},{"lineNumber":288,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":289,"author":{"gitId":"sharpstorm"},"content":"Shows a list of all appointments in the schedule.","lastModifiedDate":"2022-02-21"},{"lineNumber":290,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"Format: `listappointments`","lastModifiedDate":"2022-03-14"},{"lineNumber":292,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"**Example output**","lastModifiedDate":"2022-02-25"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"![List Appointments Result](images/ListAppointments.png)","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"### Deleting an Appointment : `deleteappointment`","lastModifiedDate":"2022-03-14"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":299,"author":{"gitId":"sharpstorm"},"content":"Deletes an appointment previously created in the schedule.","lastModifiedDate":"2022-02-21"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"Format: `deleteappointment INDEX`","lastModifiedDate":"2022-03-14"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"* Deletes the appointment that is at `INDEX` in the appointment list.","lastModifiedDate":"2022-02-21"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"* The `INDEX` parameter **must be a positive integer**, and refers to the index number shown in the **displayed appointment list**.","lastModifiedDate":"2022-02-21"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"Examples:","lastModifiedDate":"2022-02-21"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"* `deleteappointment 2` Deletes the *second* appointment in the list of appointments.","lastModifiedDate":"2022-03-14"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"### Editing an Appointment : `editappointment`","lastModifiedDate":"2022-03-14"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"Edits an appointment previously created in the schedule.","lastModifiedDate":"2022-02-21"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"Format: `editappointment INDEX [n/NAME] [d/DATE] [t/TIME] [p/PERSON] [l/DURATION]`","lastModifiedDate":"2022-03-14"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"* Edits the appointment that is at `INDEX` in the appointment list, setting the supplied parameter(s) to the supplied value(s).","lastModifiedDate":"2022-02-21"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"* The `INDEX` parameter **must be a positive integer**, and refers to the index number shown in the **displayed appointment list**.","lastModifiedDate":"2022-02-21"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"* At least one of the optional parameters must be supplied, otherwise the command will be ignored.","lastModifiedDate":"2022-02-25"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"* If supplied, the optional parameters must conform to the following rules:","lastModifiedDate":"2022-02-21"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"    * The `NAME` parameter must be non-empty, and can only contain alphanumeric characters and the symbols `.,!@#$%\u0026*()-_\u003d+`..","lastModifiedDate":"2022-03-08"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"    * The `DATE` parameter denotes the starting date, and **must conform to the [Common Date Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"    * The `TIME` parameter denotes the starting time, and **must conform to the [Common Time Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"    * The `PERSON` parameter must be a positive integer or the String `none`. If a positive integer is provided, it refers to the index number shown in the displayed person list. The string `none` is used to dissociate the person associated to the appointment.","lastModifiedDate":"2022-03-14"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"    * The `DURATION` parameter is the duration of the appointment in *minutes*, and **must be a positive number**.","lastModifiedDate":"2022-02-21"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:rotating_light: **Important Note:**","lastModifiedDate":"2022-02-25"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"The operation will fail if the modified appointment **overlaps** with another appointment.","lastModifiedDate":"2022-02-25"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"Examples:","lastModifiedDate":"2022-02-21"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"* `editappointment 6 l/300 p/none` Edits the *6th* appointment in the list of appointments to have a duration of *5 hours*, and removes the person associated with the appointment. No other properties are changed.","lastModifiedDate":"2022-03-14"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"* `editappointment 2 n/Call Juliet t/13:45 p/1` Edits the *second* appointment in the list of appointments to have the name *\"Call Juliet\"*, changes the time to *1:45 PM* and associates the appointment to the first person in the displayed persons list. No other properties are changed.","lastModifiedDate":"2022-03-14"},{"lineNumber":331,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":332,"author":{"gitId":"sharpstorm"},"content":"### Listing Appointments Within A Period : `appointmentsbetween`","lastModifiedDate":"2022-03-14"},{"lineNumber":333,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":334,"author":{"gitId":"sharpstorm"},"content":"Lists all appointments from a starting time to an ending time inclusive of both ends of the range.","lastModifiedDate":"2022-03-14"},{"lineNumber":335,"author":{"gitId":"sharpstorm"},"content":"It will list all appointments that contain any sub-range of the provided period.","lastModifiedDate":"2022-03-14"},{"lineNumber":336,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":337,"author":{"gitId":"sharpstorm"},"content":"Format: `appointmentsbetween sd/STARTDATE st/STARTTIME ed/ENDDATE et/ENDTIME`","lastModifiedDate":"2022-03-14"},{"lineNumber":338,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":339,"author":{"gitId":"sharpstorm"},"content":"* The starting time **must be before** the ending time.","lastModifiedDate":"2022-02-25"},{"lineNumber":340,"author":{"gitId":"sharpstorm"},"content":"* The `STARTDATE` parameter denotes the *starting date* of the period.","lastModifiedDate":"2022-02-21"},{"lineNumber":341,"author":{"gitId":"sharpstorm"},"content":"* The `STARTTIME` parameter denotes the *starting time* on the starting date for the period.","lastModifiedDate":"2022-02-21"},{"lineNumber":342,"author":{"gitId":"sharpstorm"},"content":"* The `ENDDATE` parameter denotes the *ending date* of the period.","lastModifiedDate":"2022-02-25"},{"lineNumber":343,"author":{"gitId":"sharpstorm"},"content":"* The `ENDTIME` parameter denotes the *ending time* on the ending date for the period.","lastModifiedDate":"2022-02-21"},{"lineNumber":344,"author":{"gitId":"sharpstorm"},"content":"* Both `STARTDATE` and `ENDDATE` **must conform to the [Common Date Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-25"},{"lineNumber":345,"author":{"gitId":"sharpstorm"},"content":"* Both `STARTTIME` and `ENDTIME` **must conform to the [Common Time Formats](#common-date-and-time-syntax)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":346,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":347,"author":{"gitId":"sharpstorm"},"content":"Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":348,"author":{"gitId":"sharpstorm"},"content":"* `appointmentsbetween sd/21-10-2022 st/12:00 ed/23-10-2022 et/17:00` Lists all appointments from *21 October 2022, 12 PM* to *23 October 2022, 5PM*.","lastModifiedDate":"2022-03-14"},{"lineNumber":349,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":350,"author":{"gitId":"sharpstorm"},"content":"**Example Output:**","lastModifiedDate":"2022-02-25"},{"lineNumber":351,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":352,"author":{"gitId":"sharpstorm"},"content":"![Appointments Between Wireframe](images/AppointmentsBetween.png)","lastModifiedDate":"2022-03-14"},{"lineNumber":353,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":354,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"dandaandaaaaaan"},"content":"ContaX contact data are saved in the hard disk automatically after any command that changes contact data in JSON format at `[JAR file location]/data/addressbook.json`.","lastModifiedDate":"2022-03-09"},{"lineNumber":363,"author":{"gitId":"dandaandaaaaaan"},"content":"Appointment data are saved in the hard disk automatically after any command that changes appointment data in JSON format at `[JAR file location]/data/schedule.json`.","lastModifiedDate":"2022-03-09"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"dandaandaaaaaan"},"content":"### Exporting the data: `exportcsv`","lastModifiedDate":"2022-02-27"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":367,"author":{"gitId":"dandaandaaaaaan"},"content":"Exports the current list of contacts as a CSV file that can be imported through ContaX or viewed separately via Microsoft Excel","lastModifiedDate":"2022-03-14"},{"lineNumber":368,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":369,"author":{"gitId":"dandaandaaaaaan"},"content":"Format: `exportcsv`","lastModifiedDate":"2022-03-14"},{"lineNumber":370,"author":{"gitId":"dandaandaaaaaan"},"content":"* Exports CSV as per ContaX format. This file can be imported by other instances of ContaX","lastModifiedDate":"2022-03-14"},{"lineNumber":371,"author":{"gitId":"dandaandaaaaaan"},"content":"* File will be saved on the directory `[JAR file location]/data/addressbook.csv`","lastModifiedDate":"2022-02-27"},{"lineNumber":372,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":373,"author":{"gitId":"dandaandaaaaaan"},"content":"Examples:","lastModifiedDate":"2022-02-27"},{"lineNumber":374,"author":{"gitId":"dandaandaaaaaan"},"content":"* `exportcsv`: Exports the current address book as a CSV file at `[JAR file location]/data/addressbook.csv`","lastModifiedDate":"2022-03-14"},{"lineNumber":375,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":377,"author":{"gitId":"dandaandaaaaaan"},"content":"ContaX contacts and appointments data are saved in the hard disk automatically after any command that changes contact data in JSON format at `[JAR file location]/data/addressbook.json` and `[JAR file location]/data/schedule.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-03-09"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":379,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":380,"author":{"gitId":"dandaandaaaaaan"},"content":"If your changes to the data file makes its format invalid, ContaX will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-02-27"},{"lineNumber":381,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":383,"author":{"gitId":"dandaandaaaaaan"},"content":"### Importing data","lastModifiedDate":"2022-02-27"},{"lineNumber":384,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":385,"author":{"gitId":"dandaandaaaaaan"},"content":"In order to import data from external sources into ContaX, there are the following options:","lastModifiedDate":"2022-02-27"},{"lineNumber":386,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":387,"author":{"gitId":"dandaandaaaaaan"},"content":"* Replacing `addressbook.json` or `schedule.json` file with a valid ContaX formatted generated by another system with ContaX","lastModifiedDate":"2022-03-09"},{"lineNumber":388,"author":{"gitId":"dandaandaaaaaan"},"content":"* [Simple CSV import (GUI-based option)](#simple-csv-import)","lastModifiedDate":"2022-02-28"},{"lineNumber":389,"author":{"gitId":"dandaandaaaaaan"},"content":"* [Advanced CSV import (Command based)](#advanced-csv-import--importcsv)","lastModifiedDate":"2022-02-28"},{"lineNumber":390,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":391,"author":{"gitId":"dandaandaaaaaan"},"content":"### Importing CSV Files: `importcsv`","lastModifiedDate":"2022-03-09"},{"lineNumber":392,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":393,"author":{"gitId":"dandaandaaaaaan"},"content":"Format: `importcsv f/FILEPATH [n/COLUMNNUM] [p/COLUMN_PERSON] [e/COLUMN_EMAIL] [a/COLUMN_ADDRESS] [t/COLUMN_TAGS]`","lastModifiedDate":"2022-03-09"},{"lineNumber":394,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":395,"author":{"gitId":"dandaandaaaaaan"},"content":"* Imported contacts will be appended to the current address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":396,"author":{"gitId":"dandaandaaaaaan"},"content":"* Each argument represents the corresponding attribute for a person.","lastModifiedDate":"2022-02-27"},{"lineNumber":397,"author":{"gitId":"dandaandaaaaaan"},"content":"  * n \u003d Name","lastModifiedDate":"2022-02-27"},{"lineNumber":398,"author":{"gitId":"dandaandaaaaaan"},"content":"  * p \u003d Phone","lastModifiedDate":"2022-02-27"},{"lineNumber":399,"author":{"gitId":"dandaandaaaaaan"},"content":"  * e \u003d Email","lastModifiedDate":"2022-02-27"},{"lineNumber":400,"author":{"gitId":"dandaandaaaaaan"},"content":"  * a \u003d Address","lastModifiedDate":"2022-02-27"},{"lineNumber":401,"author":{"gitId":"dandaandaaaaaan"},"content":"  * t \u003d Tagged","lastModifiedDate":"2022-02-27"},{"lineNumber":402,"author":{"gitId":"dandaandaaaaaan"},"content":"* If any argument is omitted, it will follow the next available column based on the default sequence of","lastModifiedDate":"2022-02-27"},{"lineNumber":403,"author":{"gitId":"dandaandaaaaaan"},"content":"  Name - Phone - Email - Address - Tagged","lastModifiedDate":"2022-02-27"},{"lineNumber":404,"author":{"gitId":"dandaandaaaaaan"},"content":"* This user guide will be updated later on with templates for importing for the following contact csv formats:","lastModifiedDate":"2022-02-27"},{"lineNumber":405,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Google Contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":406,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Outlook Contacts","lastModifiedDate":"2022-02-27"},{"lineNumber":407,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":408,"author":{"gitId":"dandaandaaaaaan"},"content":"Examples:","lastModifiedDate":"2022-02-27"},{"lineNumber":409,"author":{"gitId":"dandaandaaaaaan"},"content":"* `importcsv f/file.csv n/2 p/3 e/5 a/6 t/4`","lastModifiedDate":"2022-03-09"},{"lineNumber":410,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Reads from a CSV file treating the 2nd column as names, 3rd column as phone numbers, 5th column as email addresses, 4th column as tags.","lastModifiedDate":"2022-03-09"},{"lineNumber":411,"author":{"gitId":"dandaandaaaaaan"},"content":"* `importcsv f/file.csv n/2`","lastModifiedDate":"2022-03-09"},{"lineNumber":412,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Reads from CSV treating the 2nd column as names, 3rd column as phone numbers, 4th column as email addresses, 5th column as tags.","lastModifiedDate":"2022-03-09"},{"lineNumber":413,"author":{"gitId":"dandaandaaaaaan"},"content":"* `importcsv f/file.csv`","lastModifiedDate":"2022-03-09"},{"lineNumber":414,"author":{"gitId":"dandaandaaaaaan"},"content":"  * Reads from CSV with default ContaX format positions","lastModifiedDate":"2022-03-09"},{"lineNumber":415,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":416,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"HanJiyao"},"content":"### Operate on Contacts by Conditional Clause : `batch`","lastModifiedDate":"2022-03-01"},{"lineNumber":421,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":422,"author":{"gitId":"sharpstorm"},"content":"Performs operations on contacts in the address book that match the given condition.","lastModifiedDate":"2022-03-02"},{"lineNumber":423,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":424,"author":{"gitId":"HanJiyao"},"content":"Format: `batch COMMAND where/CONDITION`","lastModifiedDate":"2022-03-01"},{"lineNumber":425,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":426,"author":{"gitId":"sharpstorm"},"content":"* The allowed operations in `COMMAND` are","lastModifiedDate":"2022-03-02"},{"lineNumber":427,"author":{"gitId":"sharpstorm"},"content":"  * list","lastModifiedDate":"2022-03-02"},{"lineNumber":428,"author":{"gitId":"sharpstorm"},"content":"  * edit","lastModifiedDate":"2022-03-02"},{"lineNumber":429,"author":{"gitId":"sharpstorm"},"content":"  * delete","lastModifiedDate":"2022-03-02"},{"lineNumber":430,"author":{"gitId":"HanJiyao"},"content":"* The `CONDITION` field must conform to the following syntax: `TERM OP TERM`","lastModifiedDate":"2022-03-01"},{"lineNumber":431,"author":{"gitId":"HanJiyao"},"content":"  * Valid operators for the `OP` field are `\u003e`, `\u003c`, `\u003d`, `!\u003d`, `LIKE`","lastModifiedDate":"2022-03-01"},{"lineNumber":432,"author":{"gitId":"HanJiyao"},"content":"  * A `TERM` may be an attribute of a person or a constant value","lastModifiedDate":"2022-03-01"},{"lineNumber":433,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":434,"author":{"gitId":"HanJiyao"},"content":"Examples:","lastModifiedDate":"2022-03-01"},{"lineNumber":435,"author":{"gitId":"HanJiyao"},"content":"* `batch delete where/name LIKE A%`","lastModifiedDate":"2022-03-01"},{"lineNumber":436,"author":{"gitId":"HanJiyao"},"content":"  * Deletes all persons whose name start with A (case-sensitive)","lastModifiedDate":"2022-03-01"},{"lineNumber":437,"author":{"gitId":"sharpstorm"},"content":"* `batch edit p/87438806 where/phone \u003d 87438807 `","lastModifiedDate":"2022-03-02"},{"lineNumber":438,"author":{"gitId":"HanJiyao"},"content":"  * Edit contact with phone matches keyword 87438807 change to 87438806","lastModifiedDate":"2022-03-01"},{"lineNumber":439,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":440,"author":{"gitId":"HanJiyao"},"content":"### Operate on Contacts within Range : `range`","lastModifiedDate":"2022-03-01"},{"lineNumber":441,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":442,"author":{"gitId":"sharpstorm"},"content":"Perform actions on a group of contacts.","lastModifiedDate":"2022-03-02"},{"lineNumber":443,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":444,"author":{"gitId":"HanJiyao"},"content":"Format: `range COMMAND from/INDEX_FROM to/INDEX_TO`","lastModifiedDate":"2022-03-01"},{"lineNumber":445,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":446,"author":{"gitId":"sharpstorm"},"content":"* Performs the specified `COMMAND` on all contacts between the specified range of `INDEX_FROM` to `INDEX_TO` inclusive","lastModifiedDate":"2022-03-02"},{"lineNumber":447,"author":{"gitId":"sharpstorm"},"content":"* `COMMAND` must be a valid command. The allowed operations in `COMMAND` are","lastModifiedDate":"2022-03-02"},{"lineNumber":448,"author":{"gitId":"HanJiyao"},"content":"  * list","lastModifiedDate":"2022-03-01"},{"lineNumber":449,"author":{"gitId":"HanJiyao"},"content":"  * edit","lastModifiedDate":"2022-03-01"},{"lineNumber":450,"author":{"gitId":"HanJiyao"},"content":"  * delete","lastModifiedDate":"2022-03-01"},{"lineNumber":451,"author":{"gitId":"HanJiyao"},"content":"* The `INDEX_FROM` and `INDEX_TO` parameters must be **positive integers**, and refer to the index number shown in the **displayed contact list**","lastModifiedDate":"2022-03-01"},{"lineNumber":452,"author":{"gitId":"HanJiyao"},"content":"* `INDEX_FROM` must be less than `INDEX_TO` must be supplied, otherwise the command will perform no operation","lastModifiedDate":"2022-03-01"},{"lineNumber":453,"author":{"gitId":"HanJiyao"},"content":"* The resultant effect of the command is dependent on the performed action","lastModifiedDate":"2022-03-01"},{"lineNumber":454,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":455,"author":{"gitId":"HanJiyao"},"content":"Examples:","lastModifiedDate":"2022-03-01"},{"lineNumber":456,"author":{"gitId":"HanJiyao"},"content":"* `range edit e/johndoe@example.com from/6 to/10`","lastModifiedDate":"2022-03-01"},{"lineNumber":457,"author":{"gitId":"HanJiyao"},"content":"  * Sets the email address of the 6th to 10th contacts in the address book to `johndoe@example.com`","lastModifiedDate":"2022-03-01"},{"lineNumber":458,"author":{"gitId":"HanJiyao"},"content":"* `range delete from/2 to/3`","lastModifiedDate":"2022-03-01"},{"lineNumber":459,"author":{"gitId":"sharpstorm"},"content":"  * Deletes the 2nd and 3rd contacts in the address book","lastModifiedDate":"2022-03-02"},{"lineNumber":460,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":461,"author":{"gitId":"HanJiyao"},"content":"### Chaining Commands: `\u0026\u0026`","lastModifiedDate":"2022-03-01"},{"lineNumber":462,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":463,"author":{"gitId":"sharpstorm"},"content":"Perform multiple actions in a single command.","lastModifiedDate":"2022-03-02"},{"lineNumber":464,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":465,"author":{"gitId":"HanJiyao"},"content":"Format: `COMMAND_A \u0026\u0026 COMMAND_B`","lastModifiedDate":"2022-03-01"},{"lineNumber":466,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":467,"author":{"gitId":"sharpstorm"},"content":"* Calls multiple specified commands","lastModifiedDate":"2022-03-02"},{"lineNumber":468,"author":{"gitId":"HanJiyao"},"content":"* The syntax of `COMMAND_A` and `COMMAND_B` must be correct","lastModifiedDate":"2022-03-01"},{"lineNumber":469,"author":{"gitId":"HanJiyao"},"content":"* A valid command must be supplied before and after the `\u0026\u0026` operator, otherwise the command will fail","lastModifiedDate":"2022-03-01"},{"lineNumber":470,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":471,"author":{"gitId":"HanJiyao"},"content":"Examples:","lastModifiedDate":"2022-03-01"},{"lineNumber":472,"author":{"gitId":"sharpstorm"},"content":"* `editappointment 6 l/360 \u0026\u0026 listappointments`","lastModifiedDate":"2022-03-14"},{"lineNumber":473,"author":{"gitId":"sharpstorm"},"content":"    * Edits the 6th appointment in the list of appointments to have a duration of 6 hours. Then list all appointments in the Schedule","lastModifiedDate":"2022-03-02"},{"lineNumber":474,"author":{"gitId":"sharpstorm"},"content":"* `deleteappointment 2 \u0026\u0026 addappointment n/Contract Signing With Charlie d/22-10-2022 t/16:30 p/1 l/300`","lastModifiedDate":"2022-03-14"},{"lineNumber":475,"author":{"gitId":"HanJiyao"},"content":"    * Deletes the 2nd appointment in the list of appointments.","lastModifiedDate":"2022-03-01"},{"lineNumber":476,"author":{"gitId":"sharpstorm"},"content":"    * Then, create a 5-hour appointment named \"Contract Signing With Charlie\" on 22nd Oct 2022 at 4:30 PM, associated with the first person in the contact list","lastModifiedDate":"2022-03-02"},{"lineNumber":477,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":478,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":479,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"HanJiyao"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS] [by/SEARCH_TYPE]`\u003cbr\u003e e.g., `find James Jake by/name`","lastModifiedDate":"2022-03-09"},{"lineNumber":497,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"KwanHW"},"content":"**Add Tag** | `addtag n/TAGNAME` \u003cbr\u003e e.g., `addtag n/Potential Clients`","lastModifiedDate":"2022-02-28"},{"lineNumber":499,"author":{"gitId":"KwanHW"},"content":"**Edit Tag** | `edittag INDEX t/NEW_TAGNAME` \u003cbr\u003e e.g., `edittag 1 t/Prospective Clients`","lastModifiedDate":"2022-03-15"},{"lineNumber":500,"author":{"gitId":"KwanHW"},"content":"**List Tags** | `listtags`","lastModifiedDate":"2022-02-28"},{"lineNumber":501,"author":{"gitId":"KwanHW"},"content":"**Delete Tag** | `deletetag INDEX` \u003cbr\u003e e.g., `deletetag 1`","lastModifiedDate":"2022-03-09"},{"lineNumber":502,"author":{"gitId":"KwanHW"},"content":"**Find Contacts By Tag** | `findbytag t/TAGNAME` \u003cbr\u003e e.g., `findbytag t/friends`","lastModifiedDate":"2022-03-15"},{"lineNumber":503,"author":{"gitId":"sharpstorm"},"content":"**Add Appointment** | `addappointment n/NAME d/DATE t/TIME l/DURATION p/PERSON`\u003cbr\u003e e.g., `addappointment n/Call Bob d/14-02-2022 t/11:00 p/2 l/60`","lastModifiedDate":"2022-03-14"},{"lineNumber":504,"author":{"gitId":"sharpstorm"},"content":"**List Appointments** | `listappointments`","lastModifiedDate":"2022-03-14"},{"lineNumber":505,"author":{"gitId":"sharpstorm"},"content":"**Delete Appointment** | `deleteappointment INDEX`\u003cbr\u003e e.g., `deleteappointment 2`","lastModifiedDate":"2022-03-14"},{"lineNumber":506,"author":{"gitId":"sharpstorm"},"content":"**Edit Appointment** | `editappointment INDEX [n/NAME] [d/DATE] [t/TIME] [p/PERSON] [l/DURATION]`\u003cbr\u003e e.g., `editappointment 2 n/Call Juliet t/13:45`","lastModifiedDate":"2022-03-14"},{"lineNumber":507,"author":{"gitId":"sharpstorm"},"content":"**List Appointments Within Period** | `appointmentsbetween sd/STARTDATE st/STARTTIME ed/ENDDATE et/ENDTIME` \u003cbr\u003e e.g. `appointmentsbetween sd/21-10-2022 st/12:00 ed/23-10-2022 et/17:00`","lastModifiedDate":"2022-03-14"},{"lineNumber":508,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"dandaandaaaaaan"},"content":"**Export CSV** | `exportcsv`","lastModifiedDate":"2022-03-14"},{"lineNumber":510,"author":{"gitId":"dandaandaaaaaan"},"content":"**Import CSV** | `importcsv f/FILEPATH [n/COLUMNNUM] [p/COLUMN_PERSON] [e/COLUMN_EMAIL] [a/COLUMN_ADDRESS] [t/COLUMN_TAGS]` \u003cbr\u003e e.g., `importCSV n/2 p/3 e/5 a/6 t/4`","lastModifiedDate":"2022-03-09"},{"lineNumber":511,"author":{"gitId":"HanJiyao"},"content":"**Operate on Contacts by Conditional Clause** | `batch COMMAND where/CONDITION` \u003cbr\u003e e.g., `batch Edit p/87438806 where/ p/Phone \u003d 87438807`","lastModifiedDate":"2022-03-01"},{"lineNumber":512,"author":{"gitId":"HanJiyao"},"content":"**Operate on Contacts within Range** | `range COMMAND from/INDEX to/INDEX` \u003cbr\u003e e.g., `range edit e/johndoe@example.com from/6 to/10`","lastModifiedDate":"2022-03-01"},{"lineNumber":513,"author":{"gitId":"sharpstorm"},"content":"**Chaining Commands** | `chain COMMAND_A \u0026\u0026 COMMAND_B` \u003cbr\u003e e.g., `chain editappointment 6 l/360 \u0026\u0026 listappointments`","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"HanJiyao":53,"sharpstorm":140,"Wei-Xinn":16,"dandaandaaaaaan":48,"KwanHW":71,"-":185}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"    content: \"ContaX\";","lastModifiedDate":"2022-02-21"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"sharpstorm":1,"-":294}},{"path":"docs/diagrams/FunctionalSubsystemDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"@startuml","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"!include \u003coffice/Concepts/globe_internet\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"!include \u003coffice/Concepts/documents\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"!include \u003coffice/Users/user\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"!include style.puml","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"Package \" \"\u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"    Class \"Command Parsing, \\nProcessing and\\n Display Subsystem\" UI_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    Class \"LogicManager\" LOGIC_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    package \"Address Book Subsystem\"{","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"        Class \"AddressBook\" MODEL_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"        Class \"SerializableAddressBook\" STORAGE_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        Class \"Person\" MODEL_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    package \"Schedule Subsystem\"{","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        Class \" Schedule \" MODEL_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        Class \"SerializableSchedule\" STORAGE_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        Class \"Appointment\" MODEL_COLOR","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"Class \"\u003c$documents\u003e\" as File UI_COLOR_T2","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"\"AddressBook\" -[MODEL_COLOR]-\u003e \"Person\"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"\"AddressBook\" -[STORAGE_COLOR]-\u003e \"SerializableAddressBook\"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"\" Schedule \" -[MODEL_COLOR]-\u003e \"Appointment\"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"\" Schedule \" -[STORAGE_COLOR]-\u003e \"SerializableSchedule\"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"\"SerializableAddressBook\" -down[STORAGE_COLOR].\u003e File","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"\"SerializableSchedule\" .down[STORAGE_COLOR].\u003eFile","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"User ..\u003e \"Command Parsing, \\nProcessing and\\n Display Subsystem\"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"\"Command Parsing, \\nProcessing and\\n Display Subsystem\" -left[#blue]-\u003e \"LogicManager\"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"\"LogicManager\" -[#blue]-\u003e \"Schedule Subsystem\"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"\"LogicManager\" -[#blue]-\u003e \"Address Book Subsystem\"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"@enduml","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":35}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAddressBook\" as ReadOnlyAddressBook","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"Class Schedule","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"Class DisjointAppointmentList","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"Class Appointment","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"Class \" Name \"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"Class StartDateTime","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"Class Duration","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"Class UniqueTagList","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"ModelManager -right-\u003e \"1\" Schedule","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"AddressBook *--\u003e \"1\" UniqueTagList","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"UniqueTagList --\u003e \"~*\" Tag","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"Schedule *--\u003e \"1\" DisjointAppointmentList","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"DisjointAppointmentList --\u003e \"~* all\" Appointment","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"Appointment *--\u003e \" Name \"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"Appointment *--\u003e StartDateTime","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"Appointment *--\u003e Duration","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"Appointment -left-\u003e Person","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"sharpstorm":14,"KwanHW":4,"-":50}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAddressBookStorage\" as AddressBookStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"package \"Schedule Storage\" #F4F6F6{","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nScheduleStorage\" as ScheduleStorage","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"Class JsonScheduleStorage","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"Class JsonSerializableSchedule","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"StorageManager -down-\u003e \"1\" ScheduleStorage","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"JsonScheduleStorage .up.|\u003e ScheduleStorage","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"JsonScheduleStorage ..\u003e JsonSerializableSchedule","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"JsonSerializableSchedule --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"sharpstorm":12,"-":43}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"title: ContaX","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103-W17-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S2-CS2103-W17-1/tp/actions)","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"[![codecov](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2122S2-CS2103-W17-1/tp)","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"**ContaX is a desktop application for managing your Contacts and Schedule.** It is a powerful tool optimized for use via a Command Line Interface (CLI), while incorporating Graphical User Interface (GUI) elements to make it user-friendly.","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"* If you are interested in using ContaX, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"* If you are interested about developing ContaX, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"* This project is based on the [AddressBook-Level3 project](https://github.com/se-edu/addressbook-level3) created by the [SE-EDU initiative](https://se-education.org/)","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"sharpstorm":7,"-":13}},{"path":"docs/team/dandaandaaaaaan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"layout: page","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"title: Daniel\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"### Project: ContacX","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"ContacX is for professionals who have many clients, current and prospective, who may possibly work with sensitive personal information and documents related to each of those clients. They have busy schedules with many appointments \u0026 meetings, and must be able to find available time slots in their schedules quickly.","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"ContacX will allow for efficient management of a large list of contacts, allowing the mental workload of remembering people and related scheduled tasks to be offloaded. It will also provide an efficient way of efficiently organizing resources, while having minimal downtime with seamless transition from existing solutions.","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-22"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"* **New Feature**: Added the import and export features for `csv` and `json`","lastModifiedDate":"2022-02-22"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    * What it does: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    * Justification: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    * Highlights: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    * Credits: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Code contributed**: `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Project management**:","lastModifiedDate":"2022-02-22"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-22"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    * User Guide:","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-22"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Community**:","lastModifiedDate":"2022-02-22"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"* **Tools**:","lastModifiedDate":"2022-02-22"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"}],"authorContributionMap":{"dandaandaaaaaan":37}},{"path":"docs/team/hanjiyao.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"---","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"layout: page","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"title: Jiyao\u0027s Project Portfolio Page","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"---","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"### Project: ContaX","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"ContacX is for professionals who have many clients, current and prospective, who may possibly work with sensitive personal information and documents related to each of those clients. They have busy schedules with many appointments \u0026 meetings, and must be able to find available time slots in their schedules quickly.","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"ContacX will allow for efficient management of a large list of contacts, allowing the mental workload of remembering people and related scheduled tasks to be offloaded. It will also provide an efficient way of efficiently organizing resources, while having minimal downtime with seamless transition from existing solutions.","lastModifiedDate":"2022-03-01"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-03-01"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"* **New Feature**: Bulk Operations","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"  * What it does: `To be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"  * Justification: `To be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"  * Highlights: `To be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"  * Credits: `To be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"* **Code contributed**: `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"* **Project management**:","lastModifiedDate":"2022-03-01"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-03-01"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"* **Documentation**:","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"  * User Guide:","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    * `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"  * Developer Guide:","lastModifiedDate":"2022-03-01"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    * `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"* **Community**:","lastModifiedDate":"2022-03-01"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-03-01"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"* **Tools**:","lastModifiedDate":"2022-03-01"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"sharpstorm":38}},{"path":"docs/team/kwanhw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"---","lastModifiedDate":"2022-02-22"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"layout: page","lastModifiedDate":"2022-02-22"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"title: Kwan Hao Wei\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-22"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"---","lastModifiedDate":"2022-02-22"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"### Project: ContaX","lastModifiedDate":"2022-02-22"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"ContacX is for professionals who have many clients, current and prospective, who may possibly work with sensitive personal information and documents related to each of those clients. They have busy schedules with many appointments \u0026 meetings, and must be able to find available time slots in their schedules quickly.","lastModifiedDate":"2022-02-22"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"ContacX will allow for efficient management of a large list of contacts, allowing the mental workload of remembering people and related scheduled tasks to be offloaded. It will also provide an efficient way of efficiently organizing resources, while having minimal downtime with seamless transition from existing solutions.","lastModifiedDate":"2022-02-22"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-22"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"* **New Feature**: Added ability to create and manage tags","lastModifiedDate":"2022-02-22"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    * What it does: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    * Justification: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    * Highlights: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    * Credits: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"* **Code contributed**: `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"* **Project management**:","lastModifiedDate":"2022-02-22"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-22"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-22"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    * User Guide:","lastModifiedDate":"2022-02-22"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-22"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"* **Community**:","lastModifiedDate":"2022-02-22"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"* **Tools**:","lastModifiedDate":"2022-02-22"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"}],"authorContributionMap":{"KwanHW":38}},{"path":"docs/team/sharpstorm.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"layout: page","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"title: Zong Han\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"### Project: ContaX","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"ContacX is for professionals who have many clients, current and prospective, who may possibly work with sensitive personal information and documents related to each of those clients. They have busy schedules with many appointments \u0026 meetings, and must be able to find available time slots in their schedules quickly.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"ContacX will allow for efficient management of a large list of contacts, allowing the mental workload of remembering people and related scheduled tasks to be offloaded. It will also provide an efficient way of efficiently organizing resources, while having minimal downtime with seamless transition from existing solutions.","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"* **New Feature**: Added the ability to create and manage appointments","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"  * What it does: `To be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"  * Justification: `To be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"  * Highlights: `To be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"  * Credits: `To be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"* **Code contributed**: `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"* **Project management**:","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"  * User Guide:","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"  * Developer Guide:","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"* **Community**:","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"* **Tools**:","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"sharpstorm":38}},{"path":"docs/team/wei-xinn.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"---","lastModifiedDate":"2022-02-22"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"layout: page","lastModifiedDate":"2022-02-22"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"title: Wei Xin\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-22"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"---","lastModifiedDate":"2022-02-22"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"### Project: ContaX","lastModifiedDate":"2022-02-22"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"ContacX is for professionals who have many clients, current and prospective, who may possibly work with sensitive personal information and documents related to each of those clients. They have busy schedules with many appointments \u0026 meetings, and must be able to find available time slots in their schedules quickly.","lastModifiedDate":"2022-02-22"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"ContacX will allow for efficient management of a large list of contacts, allowing the mental workload of remembering people and related scheduled tasks to be offloaded. It will also provide an efficient way of efficiently organizing resources, while having minimal downtime with seamless transition from existing solutions.","lastModifiedDate":"2022-02-22"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-22"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"* **New Feature**: Onboarding guide for new users","lastModifiedDate":"2022-02-22"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"  * What it does: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"  * Justification: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"  * Highlights: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"  * Credits: `To be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"* **Code contributed**: `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"* **Project management**:","lastModifiedDate":"2022-02-22"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-22"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-22"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"  * User Guide:","lastModifiedDate":"2022-02-22"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"  * Developer Guide:","lastModifiedDate":"2022-02-22"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"* **Community**:","lastModifiedDate":"2022-02-22"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-22"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-02-22"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"* **Tools**:","lastModifiedDate":"2022-02-22"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"  * `to be added soon`","lastModifiedDate":"2022-02-22"}],"authorContributionMap":{"Wei-Xinn":38}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/contax/logic/command` directory.","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"Create a `RemarkCommandParser` class in the `seedu.contax.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2022-03-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"Create a new `Remark` in `seedu.contax.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2022-03-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"Simply add the following to [`seedu.contax.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-03-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"sharpstorm":7,"-":394}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"The `address` field in `Person` is actually an instance of the `seedu.contax.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sharpstorm":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.contax.logic.Logic`.","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"A quick look at the `seedu.contax.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2022-03-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sharpstorm":2,"-":299}},{"path":"src/main/java/seedu/contax/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.FileUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"sharpstorm":3,"-":61}},{"path":"src/main/java/seedu/contax/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"sharpstorm":1,"-":24}},{"path":"src/main/java/seedu/contax/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Config;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Version;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.ConfigUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.Logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.LogicManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.AddressBookStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonScheduleStorage;","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.ScheduleStorage;","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.Storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.StorageManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.UserPrefsStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.ui.Ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.ui.UiManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        ScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(userPrefs.getScheduleFilePath());","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        storage \u003d new StorageManager(addressBookStorage, scheduleStorage, userPrefsStorage);","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"        boolean isFirstRun \u003d model.getAddressBook().equals(SampleDataUtil.getSampleAddressBook());","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"        ui \u003d new UiManager(logic, isFirstRun);","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and schedule,","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     * and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        Optional\u003cReadOnlySchedule\u003e scheduleOptional;","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlyAddressBook initialAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlySchedule initialSchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"            initialAddressBook \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"            initialAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            initialAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"            scheduleOptional \u003d storage.readSchedule(initialAddressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            if (scheduleOptional.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"                logger.info(\"Data file not found. Will be starting with an empty Schedule\");","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"            initialSchedule \u003d scheduleOptional.orElse(new Schedule());","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Schedule\");","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule\");","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        return new ModelManager(initialAddressBook, initialSchedule, userPrefs);","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":51,"Wei-Xinn":2,"-":153}},{"path":"src/main/java/seedu/contax/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":62}},{"path":"src/main/java/seedu/contax/commons/core/GuiListContentType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-12"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents the types of models that can be displayed by the UI.","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public enum GuiListContentType {","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    PERSON,","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"    APPOINTMENT,","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"    TAG,","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /* Special value indicating that the content list should retain its current configuration */","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    UNCHANGED","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":11,"KwanHW":1}},{"path":"src/main/java/seedu/contax/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":78}},{"path":"src/main/java/seedu/contax/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":111}},{"path":"src/main/java/seedu/contax/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The tag index provided is invalid\";","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_TAGS_LISTED_OVERVIEW \u003d \"%d tags listed!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"The date provided is invalid!\";","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_INVALID_TIME \u003d \"The time provided is invalid!\";","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"\u003d/ provided is invalid\";","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"HanJiyao":2,"sharpstorm":6,"KwanHW":2,"-":11}},{"path":"src/main/java/seedu/contax/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":115}},{"path":"src/main/java/seedu/contax/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core.index;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"sharpstorm":1,"-":53}},{"path":"src/main/java/seedu/contax/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":10}},{"path":"src/main/java/seedu/contax/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":1,"-":20}},{"path":"src/main/java/seedu/contax/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.MainApp;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":2,"-":40}},{"path":"src/main/java/seedu/contax/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":1,"-":34}},{"path":"src/main/java/seedu/contax/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Config;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":3,"-":20}},{"path":"src/main/java/seedu/contax/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * Provides parsing services for dates and times used in the application.","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"public class DateUtil {","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public static final String DATE_PATTERN \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public static final String TIME_PATTERN \u003d \"HH:mm\";","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * Parses a date input string to a {@code LocalDate} object.","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * @param input The input date string to parse.","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * @return An Optional container that contains a LocalDate object if parsing was successful, or an empty","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     *         Optional container if parsing was unsuccessful.","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public static Optional\u003cLocalDate\u003e parseDate(String input) {","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(input);","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(LocalDate.parse(input, dateFormatter));","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            return Optional.empty();","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     * Parses a time input string to a {@code LocalTime} object.","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     * @param input The input time string to parse.","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * @return An Optional container that contains a LocalTime object if parsing was successful, or an empty","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     *         Optional container if parsing was unsuccessful.","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    public static Optional\u003cLocalTime\u003e parseTime(String input) {","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(input);","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(TIME_PATTERN);","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            return Optional.of(LocalTime.parse(input, timeFormatter));","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            return Optional.empty();","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     * Returns a {@code LocalDateTime} which contains the date of {@code date} and only the hour and minute","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     * fields of {@code time}. The other time fields are zeroed.","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * @param date The LocalDate to combine into a LocalDateTime.","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     * @param time The LocalTime from which the hour and minute field should be extracted.","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @return A LocalDateTime object with both the fields of {@code date} and {@code time}.","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    public static LocalDateTime combineDateTime(LocalDate date, LocalTime time) {","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(date);","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(time);","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime dateWithZeroedTime \u003d date.atStartOfDay();","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        return dateWithZeroedTime.withHour(time.getHour()).withMinute(time.getMinute());","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     * Returns a modified copy of {@code baselineDateTime} with the date fields changed to the date of","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     * {@code date}.","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     * @param baselineDateTime The reference LocalDateTime object to modify.","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * @param date The date the new LocalDateTime object is updated to.","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * @return A LocalDateTime object with the date fields of {@code date}.","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    public static LocalDateTime updateDate(LocalDateTime baselineDateTime, LocalDate date) {","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(baselineDateTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(date);","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baselineWithDateRemoved \u003d","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"                baselineDateTime.withDayOfMonth(1).withMonth(1).withYear(1970);","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        return baselineWithDateRemoved.withYear(date.getYear())","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"                .withMonth(date.getMonthValue()).withDayOfMonth(date.getDayOfMonth());","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     * Returns a modified copy of {@code baselineDateTime} with the hour and minute fields changed to the","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"     * corresponding values of {@code time}.","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     * @param baselineDateTime The reference LocalDateTime object to modify.","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"     * @param time The time the new LocalDateTime object is updated to.","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"     * @return A LocalDateTime object with the hour and minute fields of {@code time}.","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    public static LocalDateTime updateTime(LocalDateTime baselineDateTime, LocalTime time) {","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(baselineDateTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(time);","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        return baselineDateTime.withHour(time.getHour()).withMinute(time.getMinute());","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if {@code dateTime1} is chronologically before or equal to {@code dateTime2}.","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"     * @param dateTime1 The date time to compare.","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"     * @param dateTime2 The reference date time being compared against.","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"     * @return True if {@code dateTime1} is chronologically before or equal to {@code dateTime2},","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"     *         False otherwise.","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    public static boolean isBeforeOrEqual(LocalDateTime dateTime1, LocalDateTime dateTime2) {","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(dateTime1);","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(dateTime2);","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        return dateTime1.equals(dateTime2) || dateTime1.isBefore(dateTime2);","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if {@code dateTime1} is chronologically after or equal to {@code dateTime2}.","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"     * @param dateTime1 The date time to compare.","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"     * @param dateTime2 The reference date time being compared against.","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"     * @return True if {@code dateTime1} is chronologically after or equal to {@code dateTime2},","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"     *         False otherwise.","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"    public static boolean isAfterOrEqual(LocalDateTime dateTime1, LocalDateTime dateTime2) {","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(dateTime1);","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(dateTime2);","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        return dateTime1.equals(dateTime2) || dateTime1.isAfter(dateTime2);","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":135}},{"path":"src/main/java/seedu/contax/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":82}},{"path":"src/main/java/seedu/contax/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":3,"-":140}},{"path":"src/main/java/seedu/contax/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(word);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"HanJiyao":24,"sharpstorm":2,"-":66}},{"path":"src/main/java/seedu/contax/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.CommandResult;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * @see seedu.contax.model.Model#getAddressBook()","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    /** Returns an unmodifiable view of the list of appointments */","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"    /** Returns an unmodifiable view of the filtered list of tags */","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"    ObservableList\u003cTag\u003e getFilteredTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     * Returns the user prefs\u0027 schedule file path.","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"sharpstorm":17,"KwanHW":5,"-":42}},{"path":"src/main/java/seedu/contax/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.CommandResult;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.AddressBookParser;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.Storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            storage.saveSchedule(model.getSchedule());","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"    public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        return model.getFilteredTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        return model.getScheduleFilePath();","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"sharpstorm":24,"KwanHW":6,"-":69}},{"path":"src/main/java/seedu/contax/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":" * Adds an appointment to the schedule.","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public static final String COMMAND_WORD \u003d \"addappointment\";","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the schedule. \"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME + \"TIME \"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DURATION + \"DURATION \"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_PERSON + \"PERSON] \"","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_NAME + \"Contract Signing With Charlie \"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE + \"22-10-2022 \"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME + \"16:30 \"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DURATION + \"300 \"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_PERSON + \"1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_OVERLAPPING_APPOINTMENT \u003d \"This appointment will overlap with an\"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            + \"existing appointment\";","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    private final Appointment toAdd;","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    private final Index personIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public AddAppointmentCommand(Appointment appointment, Index personIndex) {","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        this.toAdd \u003d appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        this.personIndex \u003d personIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        Appointment updatedAppointment \u003d toAdd;","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        if (personIndex !\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"            if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            Person person \u003d lastShownPersonList.get(personIndex.getZeroBased());","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            updatedAppointment \u003d toAdd.withPerson(person);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        if (model.hasOverlappingAppointment(updatedAppointment)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"            throw new CommandException(MESSAGE_OVERLAPPING_APPOINTMENT);","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(updatedAppointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedAppointment));","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd)","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 Objects.equals(personIndex, ((AddAppointmentCommand) other).personIndex));","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":88}},{"path":"src/main/java/seedu/contax/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":9,"-":58}},{"path":"src/main/java/seedu/contax/logic/commands/AddTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" * Adds a tag to the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"public class AddTagCommand extends Command {","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    public static final String COMMAND_WORD \u003d \"addtag\";","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Adds a tag in ContaX. \"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"TAGNAME \\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Potential Clients\";","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %s\";","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in the address book\";","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    private final Tag toAdd;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"     * Creates an AddTagCommand to add teh specified {@code Tag}.","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"     * @param tag The specified tag to be added.","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    public AddTagCommand(Tag tag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        toAdd \u003d tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        if (model.hasTag(toAdd)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        // Add tag to the model","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        model.addTag(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof AddTagCommand)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        return ((AddTagCommand) o).toAdd.equals(toAdd);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"KwanHW":61}},{"path":"src/main/java/seedu/contax/logic/commands/AppointmentsBetweenCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.DateRangePredicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" * Lists all Appointments within a period.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentsBetweenCommand extends Command {","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public static final String COMMAND_WORD \u003d \"appointmentsbetween\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists appointments within a period. \"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE_START + \"STARTDATE \"","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME_START + \"STARTTIME \"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE_END + \"ENDDATE \"","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME_END + \"ENDTIME \"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE_START + \"22-10-2022 \"","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME_START + \"12:30 \"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DATE_END + \"22-10-2022 \"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_TIME_END + \"16:30\";","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed appointments from %s to %s.\";","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_START_DATE_INVALID \u003d \"The start date provided is invalid!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_START_TIME_INVALID \u003d \"The start time provided is invalid!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_END_DATE_INVALID \u003d \"The end date provided is invalid!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_END_TIME_INVALID \u003d \"The end time provided is invalid!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_END_BEFORE_START \u003d \"The end date time provided is before the\"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            + \" start date time!\";","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    private static final String DATETIME_DISPLAY_FORMAT \u003d \"dd LLL yyyy hh:mm a\";","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    private final LocalDateTime rangeStart;","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    private final LocalDateTime rangeEnd;","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     * Constructs an {@code AppointmentsBetweenCommand} object.","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * @param rangeStart","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     * @param rangeEnd","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentsBetweenCommand(LocalDateTime rangeStart, LocalDateTime rangeEnd) {","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(rangeStart);","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(rangeEnd);","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        this.rangeStart \u003d rangeStart;","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        this.rangeEnd \u003d rangeEnd;","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(new DateRangePredicate(rangeStart, rangeEnd));","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATETIME_DISPLAY_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                String.format(MESSAGE_SUCCESS, rangeStart.format(formatter), rangeEnd.format(formatter)),","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.APPOINTMENT);","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof AppointmentsBetweenCommand // instanceof handles nulls","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 rangeStart.equals(((AppointmentsBetweenCommand) other).rangeStart)","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 rangeEnd.equals(((AppointmentsBetweenCommand) other).rangeEnd));","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":77}},{"path":"src/main/java/seedu/contax/logic/commands/BatchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EQUALS;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_SEARCH_TYPE;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.AddressBookParser;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":" * Batch edit or delete a person identified using base on string \u003d/ provided.","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"public class BatchCommand extends Command {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"    public static final String COMMAND_WORD \u003d \"batch\";","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Perform command in batch \\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"            + \"COMMAND (must be valid command without index) \"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_SEARCH_TYPE + \"SEARCH_TYPE \"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_EQUALS + \"VALUE \\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"            + \"Example: \" + COMMAND_WORD + \" edit \"","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_ADDRESS + \"new address \"","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_SEARCH_TYPE + \"phone \"","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_EQUALS + \"123 \";","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"    private final String commandInput;","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    private final SearchType searchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"    private final String userInput;","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"     * Creates an BatchCommand base on specified {@code commandInput} {@code searchType} and {@code userInput}.","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"     * @param commandInput              details to word of command","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"     * @param searchType                search type of field apply matcher","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"     * @param userInput                 regex provided by user","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"    public BatchCommand(String commandInput, SearchType searchType, String userInput) {","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(commandInput);","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(searchType);","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        this.commandInput \u003d commandInput;","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        this.searchType \u003d searchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"        this.userInput \u003d userInput.trim();","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        List\u003cIndex\u003e indexList \u003d matchInputStringToIndex(model, searchType, userInput);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"        if (indexList.size() \u003d\u003d 0) {","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"            return new CommandResult(COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"                    + \": No result matching \\\"\" + userInput + \"\\\"\");","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"        List\u003cCommandResult\u003e commandResultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        for (Index index: indexList) {","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"            AddressBookParser addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"            try {","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"                String commandText \u003d ParserUtil.parseAndCreateNewCommand(","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"                        commandInput, Integer.toString(index.getOneBased()));","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"                Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"                commandResultList.add(command.execute(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"HanJiyao"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"HanJiyao"},"content":"                throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BatchCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"HanJiyao"},"content":"        StringBuilder resultOutput \u003d new StringBuilder();","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"HanJiyao"},"content":"        for (CommandResult result: commandResultList) {","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"HanJiyao"},"content":"            resultOutput.append(result.getFeedbackToUser()).append(\"\\n\");","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"HanJiyao"},"content":"        return new CommandResult(resultOutput.toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"HanJiyao"},"content":"    private List\u003cIndex\u003e matchInputStringToIndex(Model model, SearchType searchType, String userInput)","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"HanJiyao"},"content":"            throws CommandException {","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"HanJiyao"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"HanJiyao"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"HanJiyao"},"content":"        for (int i \u003d 0; i \u003c personList.size(); i++) {","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"HanJiyao"},"content":"            Person person \u003d personList.get(i);","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"HanJiyao"},"content":"            Index index \u003d Index.fromZeroBased(i);","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"HanJiyao"},"content":"            String targetField;","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"HanJiyao"},"content":"            switch (searchType.searchType) {","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"HanJiyao"},"content":"            case SearchType.TYPE_PHONE:","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"HanJiyao"},"content":"                targetField \u003d person.getPhone().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"HanJiyao"},"content":"                break;","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"HanJiyao"},"content":"            case SearchType.TYPE_EMAIL:","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"HanJiyao"},"content":"                targetField \u003d person.getEmail().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"HanJiyao"},"content":"                break;","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"HanJiyao"},"content":"            case SearchType.TYPE_ADDRESS:","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"HanJiyao"},"content":"                targetField \u003d person.getAddress().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"HanJiyao"},"content":"                break;","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"HanJiyao"},"content":"            default:","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"HanJiyao"},"content":"                targetField \u003d person.getName().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"HanJiyao"},"content":"                break;","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"HanJiyao"},"content":"            if (!targetField.isEmpty() \u0026\u0026 targetField.equals(userInput)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"HanJiyao"},"content":"                indexList.add(index);","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"HanJiyao"},"content":"        return indexList;","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"HanJiyao"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"HanJiyao"},"content":"                || (other instanceof BatchCommand // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 commandInput.equals(((BatchCommand) other).commandInput)","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 searchType.equals(((BatchCommand) other).searchType)","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 userInput.equals(((BatchCommand) other).userInput));","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":126}},{"path":"src/main/java/seedu/contax/logic/commands/ChainCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":" * Adds chain command.","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"public class ChainCommand extends Command {","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"    public static final String COMMAND_WORD \u003d \"chain\";","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": [Command] \u0026\u0026 [Command]\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    private final List\u003cCommand\u003e commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"     * Creates Commands list","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    public ChainCommand(List\u003cCommand\u003e userCommands) {","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(userCommands);","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"        commands \u003d userCommands;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        for (Command command:commands) {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"            command.execute(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        return commands.get(commands.size() - 1).execute(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"        if (other instanceof ChainCommand) {","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"            for (int i \u003d 0; i \u003c commands.size(); i++) {","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"                if (!commands.get(i).equals(((ChainCommand) other).commands.get(i))) {","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"                    return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"                }","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":45}},{"path":"src/main/java/seedu/contax/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":3,"-":20}},{"path":"src/main/java/seedu/contax/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":3,"-":17}},{"path":"src/main/java/seedu/contax/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private final GuiListContentType uiContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult(String feedbackToUser, GuiListContentType contentType, boolean showHelp, boolean exit) {","lastModifiedDate":"2022-03-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        this.uiContentType \u003d requireNonNull(contentType);","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * and other fields set to their default value. The contents the list shows defaults to {@code UNCHANGED}.","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        this(feedbackToUser, GuiListContentType.UNCHANGED, false, false);","lastModifiedDate":"2022-03-12"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and the","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * {@code contentType} to display in the content list.","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult(String feedbackToUser, GuiListContentType contentType) {","lastModifiedDate":"2022-03-12"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        this(feedbackToUser, contentType, false, false);","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code showHelp} and","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     * {@code exit}. The contents the list shows defaults to {@code UNCHANGED}.","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        this(feedbackToUser, GuiListContentType.UNCHANGED, showHelp, exit);","lastModifiedDate":"2022-03-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    public GuiListContentType getUiContentType() {","lastModifiedDate":"2022-03-12"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        return uiContentType;","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 uiContentType.equals(otherCommandResult.uiContentType)","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        return Objects.hash(feedbackToUser, uiContentType, showHelp, exit);","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":28,"-":68}},{"path":"src/main/java/seedu/contax/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" * Deletes an appointment identified using it\u0027s displayed index from the schedule.","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public static final String COMMAND_WORD \u003d \"deleteappointment\";","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"            + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d appointmentList.size()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentToDelete \u003d appointmentList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":53}},{"path":"src/main/java/seedu/contax/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":6,"-":47}},{"path":"src/main/java/seedu/contax/logic/commands/DeleteTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" * Deletes a tag identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"public class DeleteTagCommand extends Command {","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    public static final String COMMAND_WORD \u003d \"deletetag\";","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"            + \" : Deletes the tag identified by tag name (case-insensitive).\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"            + \"Deleting this tag will also remove contacts who have this tag.\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %s\";","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public DeleteTagCommand(Index targetIndex) {","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        List\u003cTag\u003e tagList \u003d model.getFilteredTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d tagList.size()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        Tag tagToDelete \u003d tagList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        model.deleteTag(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof DeleteTagCommand)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        return ((DeleteTagCommand) o).targetIndex.equals(targetIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":59}},{"path":"src/main/java/seedu/contax/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.CollectionUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.OverlappingAppointmentException;","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":" * Edits the details of an existing appointment in the schedule.","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public static final String COMMAND_WORD \u003d \"editappointment\";","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \"","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_TIME + \"TIME] \"","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_DURATION + \"DURATION] \"","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            + \"[\" + PREFIX_PERSON + \"PERSON]\\n\"","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_NAME + \"Product Meeting with John \"","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_DURATION + \"60 \"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            + PREFIX_PERSON + \"2\";","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"No fields supplied, nothing was changed.\";","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_OVERLAPPING_APPOINTMENT \u003d \"The new appointment will overlap with\"","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            + \" another appointment in the schedule!\";","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    private final Index index;","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     * Creates an {@code EditAppointmentCommand} object.","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     * @param index of the appointment in the list of appointments to edit.","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with.","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(index);","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e appointmentsList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        List\u003cPerson\u003e personsList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        if (index.getZeroBased() \u003e\u003d appointmentsList.size()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"            return new CommandResult(MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        boolean isPersonIndexInvalid \u003d editAppointmentDescriptor.getPersonIndex()","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"                .map(index -\u003e index.getZeroBased() \u003e\u003d personsList.size()).orElse(false);","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        if (isPersonIndexInvalid) {","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentToEdit \u003d appointmentsList.get(index.getZeroBased());","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit,","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"                model.getFilteredPersonList(), editAppointmentDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            model.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        } catch (OverlappingAppointmentException ex) {","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            throw new CommandException(MESSAGE_OVERLAPPING_APPOINTMENT);","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     * Creates and returns an {@code Appointment} with the details of {@code appointmentToEdit}","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"     * edited with {@code editAppointmentDescriptor}.","lastModifiedDate":"2022-03-13"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"     * Relies on the execute method to check that editAppointmentDescriptor\u0027s person index is valid.","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"                                                  List\u003cPerson\u003e personList,","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"                                                  EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-03-13"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2022-03-13"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        Name updatedName \u003d editAppointmentDescriptor.getName().orElse(appointmentToEdit.getName());","lastModifiedDate":"2022-03-13"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        Duration updatedDuration \u003d editAppointmentDescriptor.getDuration()","lastModifiedDate":"2022-03-13"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"                .orElse(appointmentToEdit.getDuration());","lastModifiedDate":"2022-03-13"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime updatedStartDateTime \u003d appointmentToEdit.getStartDateTime();","lastModifiedDate":"2022-03-13"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        if (editAppointmentDescriptor.isDateTimeUpdated()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"            // Final modifier is required for lambda expressions","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"            final LocalDateTime originalDateTime \u003d appointmentToEdit.getStartDateTime().value;","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"            final LocalDateTime updatedDate \u003d editAppointmentDescriptor.getStartDate()","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"                    .map(date -\u003e DateUtil.updateDate(originalDateTime, date)).orElse(originalDateTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"            LocalDateTime updatedDateTime \u003d editAppointmentDescriptor.getStartTime()","lastModifiedDate":"2022-03-13"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"                    .map(time -\u003e DateUtil.updateTime(updatedDate, time)).orElse(updatedDate);","lastModifiedDate":"2022-03-13"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"            updatedStartDateTime \u003d new StartDateTime(updatedDateTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        Person updatedPerson \u003d appointmentToEdit.getPerson();","lastModifiedDate":"2022-03-13"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        if (editAppointmentDescriptor.isPersonModified()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"            updatedPerson \u003d editAppointmentDescriptor.getPersonIndex()","lastModifiedDate":"2022-03-13"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"                    .map(index -\u003e personList.get(index.getZeroBased())).orElse(null);","lastModifiedDate":"2022-03-13"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"        return new Appointment(updatedName, updatedStartDateTime, updatedDuration, updatedPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-13"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-13"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-13"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-03-13"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-13"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2022-03-13"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"            return false;","lastModifiedDate":"2022-03-13"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        // state check","lastModifiedDate":"2022-03-13"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2022-03-13"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        return index.equals(e.index)","lastModifiedDate":"2022-03-13"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2022-03-13"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2022-03-13"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2022-03-13"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"        private Name name;","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        private LocalDate startDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"        private LocalTime startTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        private Duration duration;","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        private Index personIndex;","lastModifiedDate":"2022-03-13"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        private boolean isPersonModified;","lastModifiedDate":"2022-03-13"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"        public EditAppointmentDescriptor() {","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"            this.isPersonModified \u003d false;","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"        /**","lastModifiedDate":"2022-03-13"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"         * Copy constructor.","lastModifiedDate":"2022-03-13"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"         */","lastModifiedDate":"2022-03-13"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2022-03-13"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"            setName(toCopy.name);","lastModifiedDate":"2022-03-13"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"            setStartDate(toCopy.startDate);","lastModifiedDate":"2022-03-13"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"            setStartTime(toCopy.startTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"            setDuration(toCopy.duration);","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"            // Does not use setPersonIndex to prevent incorrectly setting the isPersonModified flag","lastModifiedDate":"2022-03-13"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"            this.personIndex \u003d toCopy.personIndex;","lastModifiedDate":"2022-03-13"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"            this.isPersonModified \u003d toCopy.isPersonModified;","lastModifiedDate":"2022-03-13"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        /**","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2022-03-13"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"         */","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"            return CollectionUtil.isAnyNonNull(name, startDate, startTime, duration) || isPersonModified;","lastModifiedDate":"2022-03-13"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        /**","lastModifiedDate":"2022-03-13"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"         * Returns true if either {@code startDate} or {@code startTime} is to be modified.","lastModifiedDate":"2022-03-13"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"         *","lastModifiedDate":"2022-03-13"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"         * @return true if either startDate or startTime is to be modified;","lastModifiedDate":"2022-03-13"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"         */","lastModifiedDate":"2022-03-13"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"        public boolean isDateTimeUpdated() {","lastModifiedDate":"2022-03-13"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"            return startDate !\u003d null || startTime !\u003d null;","lastModifiedDate":"2022-03-13"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"        /**","lastModifiedDate":"2022-03-13"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"         * Returns true if {@code setPersonIndex} has been called after this object was created.","lastModifiedDate":"2022-03-13"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"         *","lastModifiedDate":"2022-03-13"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"         * @return true is setPersonIndex has been called.","lastModifiedDate":"2022-03-13"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"         */","lastModifiedDate":"2022-03-13"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"        public boolean isPersonModified() {","lastModifiedDate":"2022-03-13"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"            return isPersonModified;","lastModifiedDate":"2022-03-13"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        public void setName(Name name) {","lastModifiedDate":"2022-03-13"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"            this.name \u003d name;","lastModifiedDate":"2022-03-13"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2022-03-13"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2022-03-13"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"        public void setStartDate(LocalDate startDate) {","lastModifiedDate":"2022-03-13"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"            this.startDate \u003d startDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        public Optional\u003cLocalDate\u003e getStartDate() {","lastModifiedDate":"2022-03-13"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(startDate);","lastModifiedDate":"2022-03-13"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        public void setStartTime(LocalTime startTime) {","lastModifiedDate":"2022-03-13"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"            this.startTime \u003d startTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"        public Optional\u003cLocalTime\u003e getStartTime() {","lastModifiedDate":"2022-03-13"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(startTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"        public void setDuration(Duration duration) {","lastModifiedDate":"2022-03-13"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"            this.duration \u003d duration;","lastModifiedDate":"2022-03-13"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"        public Optional\u003cDuration\u003e getDuration() {","lastModifiedDate":"2022-03-13"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(duration);","lastModifiedDate":"2022-03-13"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"        public void setPersonIndex(Index person) {","lastModifiedDate":"2022-03-13"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"            this.personIndex \u003d person;","lastModifiedDate":"2022-03-13"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"            this.isPersonModified \u003d true;","lastModifiedDate":"2022-03-13"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"        public Optional\u003cIndex\u003e getPersonIndex() {","lastModifiedDate":"2022-03-13"},{"lineNumber":250,"author":{"gitId":"sharpstorm"},"content":"            return Optional.ofNullable(personIndex);","lastModifiedDate":"2022-03-13"},{"lineNumber":251,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":252,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":253,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":254,"author":{"gitId":"sharpstorm"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-03-13"},{"lineNumber":255,"author":{"gitId":"sharpstorm"},"content":"            // short circuit if same object","lastModifiedDate":"2022-03-13"},{"lineNumber":256,"author":{"gitId":"sharpstorm"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-13"},{"lineNumber":257,"author":{"gitId":"sharpstorm"},"content":"                return true;","lastModifiedDate":"2022-03-13"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-03-13"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2022-03-13"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"                return false;","lastModifiedDate":"2022-03-13"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"            // state check","lastModifiedDate":"2022-03-13"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2022-03-13"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2022-03-13"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"                    \u0026\u0026 getStartDate().equals(e.getStartDate())","lastModifiedDate":"2022-03-13"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"                    \u0026\u0026 getStartTime().equals(e.getStartTime())","lastModifiedDate":"2022-03-13"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"                    \u0026\u0026 getDuration().equals(e.getDuration())","lastModifiedDate":"2022-03-13"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"                    \u0026\u0026 getPersonIndex().equals(e.getPersonIndex())","lastModifiedDate":"2022-03-13"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"                    \u0026\u0026 (isPersonModified \u003d\u003d e.isPersonModified);","lastModifiedDate":"2022-03-13"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":276}},{"path":"src/main/java/seedu/contax/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.CollectionUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2017-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"sharpstorm":18,"-":208}},{"path":"src/main/java/seedu/contax/logic/commands/EditTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":" * Edits the details of an existing tag in the address book.","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"public class EditTagCommand extends Command {","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"    public static final String COMMAND_WORD \u003d \"edittag\";","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the specified tag.\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"            + \"Parameters: INDEX t/NEW_TAGNAME\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + \"t/Prospective Clients\";","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited Tag: %s\";","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_TAG_EXISTS \u003d \"Specified tag name already exists in the address book.\";","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    private final Index index;","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    private final EditTagDescriptor editTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"     * @param index The specified index to update the tag","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"     * @param editTagDescriptor Details to edit the tag with","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"    public EditTagCommand(Index index, EditTagDescriptor editTagDescriptor) {","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(index);","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(editTagDescriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        this.editTagDescriptor \u003d editTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"     * Creates and returns a {@code Tag} with the details of {@code tagToEdit} edited with {@code editTagDescriptor}.","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"     * Depends on the execute method to check that editTagDescriptor\u0027s tag index is valid.","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    private static Tag createEditedTag(Tag tagToEdit, EditTagDescriptor editTagDescriptor) {","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        assert tagToEdit !\u003d null;","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        Name newTagName \u003d editTagDescriptor.getTagName().orElse(tagToEdit.getTagName());","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        // If the names are the name, no need to create a new tag","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"        if (newTagName.equals(tagToEdit.getTagNameString())) {","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"            return tagToEdit;","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        return new Tag(newTagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"        List\u003cTag\u003e tagList \u003d model.getFilteredTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        if (index.getZeroBased() \u003e\u003d tagList.size()) {","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        Tag tagToEdit \u003d tagList.get(index.getZeroBased());","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"        Tag editedTag \u003d createEditedTag(tagToEdit, editTagDescriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"        // Checks if the specified tag name already exists in the address book.","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"        if (model.hasTag(editedTag)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"            throw new CommandException(MESSAGE_TAG_EXISTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        model.setTag(tagToEdit, editedTag);","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, editedTag));","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof EditTagCommand)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand e \u003d ((EditTagCommand) o);","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"        return e.index.equals(index) \u0026\u0026 e.editTagDescriptor.equals(editTagDescriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"     * Stores the details to edit the tag with.","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"    public static class EditTagDescriptor {","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"        private Name tagName;","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"        public EditTagDescriptor() {","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"KwanHW"},"content":"        public Optional\u003cName\u003e getTagName() {","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"KwanHW"},"content":"            return Optional.ofNullable(tagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"        public void setTagName(String tagName) {","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"            this.tagName \u003d new Name(tagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"            if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"                return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"            if (!(o instanceof EditTagDescriptor)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"                return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"            EditTagDescriptor e \u003d (EditTagDescriptor) o;","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"            return e.getTagName().equals(getTagName());","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":128}},{"path":"src/main/java/seedu/contax/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"sharpstorm":2,"-":17}},{"path":"src/main/java/seedu/contax/logic/commands/ExportCsvCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.storage.CsvManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":" * Exports current address book manually to data/addressbook.csv","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ExportCsvCommand extends Command {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_WORD \u003d \"exportcsv\";","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports contacts to CSV file\"","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Exported successfully\";","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Export failed. Please try again\";","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String EXPORT_FILEPATH \u003d \"data/addressbook.csv\";","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String filePath;","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ExportCsvCommand() {","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.filePath \u003d EXPORT_FILEPATH;","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ExportCsvCommand(String filePath) {","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        CsvManager csvManager \u003d new CsvManager(model, (csvData) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"            List\u003cPerson\u003e listOfPersons \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"            for (Person person : listOfPersons) {","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"                String[] lineDat \u003d new String[5];","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"                lineDat[0] \u003d person.getName().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"                lineDat[1] \u003d person.getPhone().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                lineDat[2] \u003d person.getEmail().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"                if (person.getAddress().toString().contains(\",\")) {","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"                    lineDat[3] \u003d \"\\\"\" + person.getAddress().toString() + \"\\\"\";","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"                } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"                    lineDat[3] \u003d person.getAddress().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"                Set\u003cTag\u003e personTags \u003d person.getTags();","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"                StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"                for (Tag tag : personTags) {","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"                    sb.append(tag.getTagName() + \";\");","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"                lineDat[4] \u003d sb.toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"                csvData.add(lineDat);","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"            return csvData;","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        });","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        boolean exportCsv \u003d csvManager.exportCsv(filePath);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (exportCsv) {","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CommandResult(MESSAGE_FAILURE);","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"dandaandaaaaaan":63}},{"path":"src/main/java/seedu/contax/logic/commands/FindByTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.TagNameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":" * Finds and lists all tags in address book whose name contains any of the argument keywords.","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"public class FindByTagCommand extends Command {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    public static final String COMMAND_WORD \u003d \"findbytag\";","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Finds all persons who contains the specified tag.\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"            + \"Parameters: t/TAGNAME\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"            + \"Example: \" + COMMAND_WORD + \" t/friends\";","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    private final TagNameContainsKeywordsPredicate predicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public FindByTagCommand(TagNameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"                model.getFilteredPersonList().size()), GuiListContentType.PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof FindByTagCommand)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        return ((FindByTagCommand) o).predicate.equals(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":47}},{"path":"src/main/java/seedu/contax/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.ContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    private final ContainsKeywordsPredicate predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"    public FindCommand(ContainsKeywordsPredicate predicate) {","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"HanJiyao":4,"sharpstorm":6,"-":34}},{"path":"src/main/java/seedu/contax/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":2,"-":19}},{"path":"src/main/java/seedu/contax/logic/commands/ImportCsvCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_FILE;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.storage.CsvManager;","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":" * Imports CSV files into the address book based on specified column indicators","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ImportCsvCommand extends Command {","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_WORD \u003d \"importcsv\";","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports contacts from CSV file\"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"            + PREFIX_FILE + \"FILEPATH \"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"[\" + PREFIX_NAME + \"NAME_POSITION]\"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE_POSITION]\"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL_POSITION]\"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS_POSITION]\"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"[\" + PREFIX_TAG + \"TAG_POSITION]...\\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"            + PREFIX_FILE + \"/data/file.csv\";","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_NO_FILE_FOUND \u003d \"File not found: %s\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Imported successfully\";","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_SKIPPED_LINES \u003d \"Lines skipped (either bad formatting or duplicates): %s\";","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final IndexedCsvFile toImport;","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates an ImportCsvCommand to import with specified {@code params}","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ImportCsvCommand(IndexedCsvFile params) {","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        requireNonNull(params);","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.toImport \u003d params;","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        //process file","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"            CsvManager manager \u003d new CsvManager(model, (currentLineNumber, importedPerson) -\u003e {","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"                try {","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"                    Person toAddPerson \u003d personParser(importedPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"                    model.addPerson(toAddPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"                    return true;","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"                } catch (ParseException | DuplicatePersonException e) {","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"                    return false;","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"            });","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"            return outputStringBuilder(manager.importCsv(toImport));","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new CommandException(String.format(MESSAGE_NO_FILE_FOUND, toImport.getFilePath()));","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Person personParser(String[] importedPerson) throws ParseException {","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        Name toAddName \u003d ParserUtil.parseName(importedPerson[toImport.getNamePositionIndex()]);","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"        Phone toAddPhone \u003d ParserUtil.parsePhone(importedPerson[toImport.getPhonePositionIndex()]);","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        Email toAddEmail \u003d ParserUtil.parseEmail(importedPerson[toImport.getEmailPositionIndex()]);","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        Address toAddAddress \u003d ParserUtil.parseAddress(importedPerson[toImport.getAddressPositionIndex()]","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"                .replace(\"\\\"\", \"\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"        String[] tags;","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        Set\u003cTag\u003e toAddTag;","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"            tags \u003d importedPerson[toImport.getTagPositionIndex()].split(\";\");","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"            toAddTag \u003d ParserUtil.parseTags(Arrays.asList(tags));","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"            toAddTag \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        return new Person(toAddName, toAddPhone, toAddEmail, toAddAddress, toAddTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"    private CommandResult outputStringBuilder(List\u003cInteger\u003e skippedLines) {","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (skippedLines.size() \u003e 0) {","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"            String skippedLinesString \u003d \"\";","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"            for (int i \u003d 0; i \u003c skippedLines.size(); i++) {","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"                skippedLinesString +\u003d skippedLines.get(i);","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"                if (i !\u003d skippedLines.size() - 1) {","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"                    skippedLinesString +\u003d \", \";","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CommandResult(String.format(\"%s\\n%s\", MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"                    String.format(MESSAGE_SKIPPED_LINES, skippedLinesString)));","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2022-03-13"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"                || (other instanceof ImportCsvCommand // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 toImport.equals(((ImportCsvCommand) other).toImport));","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"dandaandaaaaaan":117}},{"path":"src/main/java/seedu/contax/logic/commands/ListAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Lists all appointments in the schedule to the user.","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class ListAppointmentCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public static final String COMMAND_WORD \u003d \"listappointments\";","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(MESSAGE_SUCCESS, GuiListContentType.APPOINTMENT);","lastModifiedDate":"2022-03-12"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":25}},{"path":"src/main/java/seedu/contax/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(MESSAGE_SUCCESS, GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":5,"-":20}},{"path":"src/main/java/seedu/contax/logic/commands/ListTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":" * Lists all tags in the address book to the user.","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"public class ListTagCommand extends Command {","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"    public static final String COMMAND_WORD \u003d \"listtags\";","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tags\";","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        model.updateFilteredTagList(Model.PREDICATE_SHOW_ALL_TAGS);","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        return new CommandResult(MESSAGE_SUCCESS, GuiListContentType.TAG);","lastModifiedDate":"2022-03-12"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"sharpstorm":2,"KwanHW":21}},{"path":"src/main/java/seedu/contax/logic/commands/RangeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_RANGE_FROM;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_RANGE_TO;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.AddressBookParser;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":" * Range edit or delete a person identified using it\u0027s displayed from index and to index from the address book.","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"public class RangeCommand extends Command {","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"    public static final String COMMAND_WORD \u003d \"range\";","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Perform command in range\"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"            + \"by the index number used in the displayed person list. \\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"            + \"COMMAND (must be valid command without index) \"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_RANGE_FROM + \"FROM \"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_RANGE_TO + \"TO \\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"            + \"Example: \" + COMMAND_WORD + \" edit \"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_PHONE + \"12345678 \"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"            + PREFIX_ADDRESS + \"new address \";","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"    private final Index fromIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"    private final Index toIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    private final String commandInput;","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"     * @param fromIndex              of the person in the filtered person list to edit","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"     * @param toIndex                of the person in the filtered person list to edit","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"     * @param commandInput           details to word of command","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"    public RangeCommand(Index fromIndex, Index toIndex, String commandInput) {","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(fromIndex);","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(toIndex);","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        this.fromIndex \u003d fromIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        this.toIndex \u003d toIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        this.commandInput \u003d commandInput.trim();","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        if (fromIndex.getZeroBased() \u003e toIndex.getZeroBased()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        List\u003cCommandResult\u003e commandResultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        for (int i \u003d toIndex.getOneBased(); i \u003e\u003d fromIndex.getOneBased(); i--) {","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"            AddressBookParser addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"            try {","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"                String commandText \u003d ParserUtil.parseAndCreateNewCommand(commandInput, Integer.toString(i));","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"                Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"                commandResultList.add(command.execute(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"                return new CommandResult(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        StringBuilder resultOutput \u003d new StringBuilder();","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"        for (CommandResult result: commandResultList) {","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"            resultOutput.append(result.getFeedbackToUser()).append(\"\\n\");","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"        return new CommandResult(resultOutput.toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"HanJiyao"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"HanJiyao"},"content":"                || (other instanceof RangeCommand // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 fromIndex.equals(((RangeCommand) other).fromIndex)","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 toIndex.equals(((RangeCommand) other).toIndex)","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 commandInput.equals(((RangeCommand) other).commandInput)","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"HanJiyao"},"content":"            );","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"HanJiyao":88}},{"path":"src/main/java/seedu/contax/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"sharpstorm":1,"-":16}},{"path":"src/main/java/seedu/contax/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * and returns an AddAppointmentCommand object for execution.","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                        PREFIX_PERSON);","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_DURATION)","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        Name name \u003d ParserUtil.parseAppointmentName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime startDateTime \u003d ParserUtil.parseStartDateTime(argMultimap.getValue(PREFIX_DATE).get(),","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        Index personIndex \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_PERSON).isPresent()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        return new AddAppointmentCommand(new Appointment(name, startDateTime, duration, null),","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"                personIndex);","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":53}},{"path":"src/main/java/seedu/contax/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"sharpstorm":16,"-":34}},{"path":"src/main/java/seedu/contax/logic/parser/AddTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.AddTagCommand;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" * Parses input arguments and creates a new AddTagCommand object.","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"     * Parses the given {@code String} of arguments in the context of AddTagCommand and returns an AddTagCommand for","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"     * execution.","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"     * @param args The {@code String} of arguments to be parsed.","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"     * @return AddTagCommand with the appropriate parameters.","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    public AddTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        if (!Name.isValidName(argMultimap.getValue(PREFIX_NAME).get())) {","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        return new AddTagCommand(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":1,"KwanHW":36}},{"path":"src/main/java/seedu/contax/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.AddTagCommand;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AppointmentsBetweenCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.BatchCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.ChainCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.DeleteTagCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ExportCsvCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.FindByTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.FindCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ListAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ListCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.ListTagCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.RangeCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"        case RangeCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"            return new RangeCommandParser().parse(arguments);","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"        // Import CSV Command","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        case ImportCsvCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new ImportCsvParser().parse(arguments);","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        // Export CSV Command","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        case ExportCsvCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new ExportCsvCommand();","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"        // Appointment commands","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        case ListAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            return new ListAppointmentCommand();","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        case EditAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        case AppointmentsBetweenCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"            return new AppointmentsBetweenCommandParser().parse(arguments);","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"        // Tag management commands","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"        case AddTagCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"            return new AddTagCommandParser().parse(arguments);","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"        case ListTagCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"            return new ListTagCommand();","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"        case EditTagCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"            return new EditTagCommandParser().parse(arguments);","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"        case DeleteTagCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"            return new DeleteTagCommandParser().parse(arguments);","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"        case FindByTagCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"            return new FindByTagCommandParser().parse(arguments);","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"        // Command chaining","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"        case ChainCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"            return new ChainCommandParser().parse(arguments);","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"HanJiyao"},"content":"        // Batch Command","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"HanJiyao"},"content":"        case BatchCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"HanJiyao"},"content":"            return new BatchCommandParser().parse(arguments);","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":137,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"HanJiyao":10,"sharpstorm":33,"dandaandaaaaaan":10,"KwanHW":27,"-":63}},{"path":"src/main/java/seedu/contax/logic/parser/AppointmentsBetweenCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AppointmentsBetweenCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" * Parses input arguments and creates a new AppointmentsBetweenCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentsBetweenCommandParser implements Parser\u003cAppointmentsBetweenCommand\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * Parses the given {@code String} of arguments in the context of the AppointmentsBetweenCommand","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * and returns an AppointmentsBetweenCommand object for execution.","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentsBetweenCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE_START, PREFIX_TIME_START,","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                        PREFIX_DATE_END, PREFIX_TIME_END);","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_DATE_START, PREFIX_TIME_START, PREFIX_DATE_END,","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"                PREFIX_TIME_END) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                    AppointmentsBetweenCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        LocalDate startDate \u003d argMultimap.getValue(PREFIX_DATE_START).flatMap(DateUtil::parseDate)","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(AppointmentsBetweenCommand.MESSAGE_START_DATE_INVALID));","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        LocalTime startTime \u003d argMultimap.getValue(PREFIX_TIME_START).flatMap(DateUtil::parseTime)","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(AppointmentsBetweenCommand.MESSAGE_START_TIME_INVALID));","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        LocalDate endDate \u003d argMultimap.getValue(PREFIX_DATE_END).flatMap(DateUtil::parseDate)","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(AppointmentsBetweenCommand.MESSAGE_END_DATE_INVALID));","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        LocalTime endTime \u003d argMultimap.getValue(PREFIX_TIME_END).flatMap(DateUtil::parseTime)","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(AppointmentsBetweenCommand.MESSAGE_END_TIME_INVALID));","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime startDateTime \u003d DateUtil.combineDateTime(startDate, startTime);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime endDateTime \u003d DateUtil.combineDateTime(endDate, endTime);","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        if (endDateTime.isBefore(startDateTime)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(AppointmentsBetweenCommand.MESSAGE_END_BEFORE_START);","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        return new AppointmentsBetweenCommand(startDateTime, endDateTime);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":58}},{"path":"src/main/java/seedu/contax/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in this ArgumentMultimap.","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public boolean arePrefixesPresent(Prefix... prefixes) {","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isPresent());","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"sharpstorm":9,"-":59}},{"path":"src/main/java/seedu/contax/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"sharpstorm":1,"-":147}},{"path":"src/main/java/seedu/contax/logic/parser/BatchCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EQUALS;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_SEARCH_TYPE;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.BatchCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"public class BatchCommandParser implements Parser\u003cBatchCommand\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"     * Parses the given {@code String} of arguments in the context of the BatchCommandParser","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"     * and returns an BatchCommand object for execution.","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"    public BatchCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SEARCH_TYPE, PREFIX_EQUALS);","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        String commandInput \u003d argMultimap.getPreamble();","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_SEARCH_TYPE, PREFIX_EQUALS)","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"            || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"                    BatchCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        return new BatchCommand(","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"                commandInput.trim(),","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"                new SearchType(argMultimap.getValue(PREFIX_SEARCH_TYPE).get().toLowerCase()),","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"                argMultimap.getValue(PREFIX_EQUALS).get()","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        );","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":37}},{"path":"src/main/java/seedu/contax/logic/parser/ChainCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.ChainCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"public class ChainCommandParser implements Parser\u003cChainCommand\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"     * Parses the given {@code String} of arguments in the context of the multiple commands","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"     * and returns a Command object for execution.","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    public ChainCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"        if (!args.contains(\"\u0026\u0026\")) {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChainCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"        String[] parsedArgs \u003d args.split(\"\u0026\u0026\");","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"        AddressBookParser addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        List\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        for (String arg: parsedArgs) {","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"            Command command \u003d addressBookParser.parseCommand(arg);","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"            commandList.add(command);","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        return new ChainCommand(commandList);","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":31}},{"path":"src/main/java/seedu/contax/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    /* Prefix definition for import CSV */","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    /* Prefix definition for advanced commands */","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"    public static final Prefix PREFIX_SEARCH_TYPE \u003d new Prefix(\"by/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"    public static final Prefix PREFIX_RANGE_FROM \u003d new Prefix(\"from/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    public static final Prefix PREFIX_RANGE_TO \u003d new Prefix(\"to/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"    public static final Prefix PREFIX_EQUALS \u003d new Prefix(\"\u003d/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    /* Prefix definitions for Appointments */","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"l/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"sd/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_TIME_START \u003d new Prefix(\"st/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"ed/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public static final Prefix PREFIX_TIME_END \u003d new Prefix(\"et/\");","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"HanJiyao":5,"sharpstorm":9,"dandaandaaaaaan":6,"-":14}},{"path":"src/main/java/seedu/contax/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * and returns a DeleteAppointmentCommand object for execution.","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":29}},{"path":"src/main/java/seedu/contax/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"sharpstorm":5,"-":24}},{"path":"src/main/java/seedu/contax/logic/parser/DeleteTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.DeleteTagCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":" * Parses input arguments and creates a new {@code DeleteTagCommand} object.","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"     * Parses the given {@code String} of arguments in the context of DeleteTagCommand.","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"     * @param args The argument string to parse.","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"     * @return DeleteTagCommand if the argument contains a valid index.","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"        try {","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"            return new DeleteTagCommand(index);","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":29}},{"path":"src/main/java/seedu/contax/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":" * Parses input arguments and creates a new EditAppointmentCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public static final String KEYWORD_REMOVE_PERSON \u003d \"none\";","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * and returns an EditAppointmentCommand object for execution.","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE,","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                PREFIX_TIME, PREFIX_DURATION, PREFIX_PERSON);","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        Index index;","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            editAppointmentDescriptor.setName(","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"                    ParserUtil.parseAppointmentName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            LocalDate dateObject \u003d DateUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get())","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                    .orElseThrow(() -\u003e new ParseException(Messages.MESSAGE_INVALID_DATE));","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            editAppointmentDescriptor.setStartDate(dateObject);","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            LocalTime timeObject \u003d DateUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get())","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"                    .orElseThrow(() -\u003e new ParseException(Messages.MESSAGE_INVALID_TIME));","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            editAppointmentDescriptor.setStartTime(timeObject);","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            editAppointmentDescriptor.setDuration(","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"                    ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_PERSON).isPresent()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            String newPersonValue \u003d argMultimap.getValue(PREFIX_PERSON).get();","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            editAppointmentDescriptor.setPersonIndex(newPersonValue.equalsIgnoreCase(KEYWORD_REMOVE_PERSON)","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"                    ? null : ParserUtil.parseIndex(newPersonValue));","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":79}},{"path":"src/main/java/seedu/contax/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"sharpstorm":12,"-":70}},{"path":"src/main/java/seedu/contax/logic/parser/EditTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand.EditTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" * Parses input arguments and creates a new EditTagCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"     * Parses the given {@code String} of arguments in the context of EditTagCommand and returns an EditTagCommand","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"     * object for execution.","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public EditTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        // Unlike the other edit commands, Tag only contains the tag name field. Hence, if the new tag name and/or","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        // index is not present,the command must be wrong","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        if (argumentMultimap.getValue(PREFIX_TAG).isEmpty() || argumentMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        if (!Name.isValidName(argumentMultimap.getValue(PREFIX_TAG).get())) {","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        Index index;","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor editTagDescriptor \u003d new EditTagDescriptor();","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        editTagDescriptor.setTagName(argumentMultimap.getValue(PREFIX_TAG).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        return new EditTagCommand(index, editTagDescriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":51}},{"path":"src/main/java/seedu/contax/logic/parser/FindByTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.FindByTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.TagNameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" * Parses input arguments and creates a new FindByTagCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"public class FindByTagCommandParser implements Parser\u003cFindByTagCommand\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"     * Parses the given {@code String} of arguments in the context of FindByTagCommand and returns a FindByTagCommand","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"     * object for execution.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"    public FindByTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"        if (argumentMultimap.getValue(PREFIX_TAG).isEmpty() || !argumentMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindByTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        // Guarantees the keyword string is valid","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        if (!Name.isValidName(argumentMultimap.getValue(PREFIX_TAG).get())) {","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"                new TagNameContainsKeywordsPredicate(argumentMultimap.getValue(PREFIX_TAG).get());","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        return new FindByTagCommand(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":36}},{"path":"src/main/java/seedu/contax/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_SEARCH_TYPE;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.FindCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.AddressContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.EmailContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.PhoneContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_SEARCH_TYPE);","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        String[] outputKeywords \u003d argMultimap.getPreamble().trim().split(\"\\\\s+\");","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.getValue(PREFIX_SEARCH_TYPE).isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(outputKeywords)));","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"            SearchType type \u003d ParserUtil.parseSearchType(argMultimap.getValue(PREFIX_SEARCH_TYPE).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            switch (type.searchType) {","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            case SearchType.TYPE_PHONE:","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"                return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(outputKeywords)));","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            case SearchType.TYPE_EMAIL:","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"                return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(outputKeywords)));","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            case SearchType.TYPE_ADDRESS:","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"                return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(outputKeywords)));","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"            default:","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(outputKeywords)));","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"HanJiyao":15,"sharpstorm":14,"-":23}},{"path":"src/main/java/seedu/contax/logic/parser/ImportCsvParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_FILE;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":" * Parses input arguments and creates a new ImportCsvCommand object","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ImportCsvParser implements Parser\u003cImportCsvCommand\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCsvCommand","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * and returns a ImportCsvCommand object for execution.","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ImportCsvCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"                PREFIX_FILE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_FILE)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCsvCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        File file \u003d ParserUtil.parseCsvFilePath(argMultimap.getValue(PREFIX_FILE).get());","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        //check if file exists, else throw exception","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        int namePosition \u003d 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        int phonePosition \u003d 2;","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        int emailPosition \u003d 3;","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        int addressPosition \u003d 4;","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        int tagPosition \u003d 5;","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.arePrefixesPresent(PREFIX_NAME)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"            namePosition \u003d ParserUtil.parseCsvPositions(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.arePrefixesPresent(PREFIX_PHONE)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"            phonePosition \u003d ParserUtil.parseCsvPositions(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.arePrefixesPresent(PREFIX_EMAIL)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"            emailPosition \u003d ParserUtil.parseCsvPositions(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.arePrefixesPresent(PREFIX_ADDRESS)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"            addressPosition \u003d ParserUtil.parseCsvPositions(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        if (argMultimap.arePrefixesPresent(PREFIX_TAG)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"            tagPosition \u003d ParserUtil.parseCsvPositions(argMultimap.getValue(PREFIX_TAG).get());","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Check if all the positions are distinct","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        HashSet\u003cInteger\u003e positionHashSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        positionHashSet.add(namePosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        checkDuplicateAndAdd(positionHashSet, phonePosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"        checkDuplicateAndAdd(positionHashSet, emailPosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        checkDuplicateAndAdd(positionHashSet, addressPosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        checkDuplicateAndAdd(positionHashSet, tagPosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile indexedCsvFileObject \u003d new IndexedCsvFile(file, namePosition, phonePosition,","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"                emailPosition, addressPosition, tagPosition);","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        return new ImportCsvCommand(indexedCsvFileObject);","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Checks if the integer doesn\u0027t exist, add to {@code HashSet}, else throw {@code ParseException}","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Used to check for duplicate positions","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void checkDuplicateAndAdd(HashSet\u003cInteger\u003e hashSet, int position) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (!hashSet.contains(position)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            hashSet.add(position);","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new ParseException(IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":6,"dandaandaaaaaan":81}},{"path":"src/main/java/seedu/contax/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"sharpstorm":3,"-":13}},{"path":"src/main/java/seedu/contax/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"     * Leading and trailing whitespaces will be trimmed and converted to lowercase.","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"        // All tags will be in lowercase","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"        String trimmedTag \u003d tag.trim().toLowerCase();","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"            throw new ParseException(seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Parses a {@code String filePath} into a {@code Path}.","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws ParseException if the given {@code filePath} is invalid.","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static File parseCsvFilePath(String filePath) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"dandaandaaaaaan"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"dandaandaaaaaan"},"content":"        String trimmedFilePath \u003d filePath.trim();","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (!IndexedCsvFile.isValidFilePath(trimmedFilePath)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new ParseException(IndexedCsvFile.FILE_PATH_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"dandaandaaaaaan"},"content":"        return new File(trimmedFilePath);","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Parses a {@String position} into an {@code integer}.","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":155,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws ParseException","lastModifiedDate":"2022-03-07"},{"lineNumber":156,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":157,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static int parseCsvPositions(String positionString) throws ParseException {","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"dandaandaaaaaan"},"content":"        requireNonNull(positionString);","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"dandaandaaaaaan"},"content":"        String trimmedPosition \u003d positionString.trim();","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":161,"author":{"gitId":"dandaandaaaaaan"},"content":"            int finalPosition \u003d Integer.parseInt(trimmedPosition);","lastModifiedDate":"2022-03-07"},{"lineNumber":162,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (finalPosition \u003c 1) {","lastModifiedDate":"2022-03-07"},{"lineNumber":163,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new ParseException(IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":165,"author":{"gitId":"dandaandaaaaaan"},"content":"            return finalPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":166,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-03-07"},{"lineNumber":167,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new ParseException(IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":169,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":170,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"HanJiyao"},"content":"     * Parses a {@code String searchType} into an {@code type}.","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"HanJiyao"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"HanJiyao"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"HanJiyao"},"content":"     * @throws ParseException if the given {@code type} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"HanJiyao"},"content":"    public static SearchType parseSearchType(String type) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(type);","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"HanJiyao"},"content":"        String trimmedName \u003d type.trim();","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"HanJiyao"},"content":"        if (!SearchType.isValidType(trimmedName)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"HanJiyao"},"content":"            throw new ParseException(SearchType.SEARCH_TYPE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"HanJiyao"},"content":"        return new SearchType(trimmedName);","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"    public static seedu.contax.model.appointment.Name parseAppointmentName(String name)","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"            throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(name);","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        if (!seedu.contax.model.appointment.Name.isValidName(trimmedName)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(seedu.contax.model.appointment.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"        return new seedu.contax.model.appointment.Name(trimmedName);","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"     * Parses a {@code String date} and @{String time} into a {@code StartDateTime}.","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"     * Parses the date according to the format dd-MM-yyyy.","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"     * Parses the time according to the format HH:mm.","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the given {@code date} or {@code time} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"    public static StartDateTime parseStartDateTime(String date, String time) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(date, time);","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"        LocalDate dateObject \u003d DateUtil.parseDate(date)","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(StartDateTime.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2022-03-13"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"        LocalTime timeObject \u003d DateUtil.parseTime(time)","lastModifiedDate":"2022-03-13"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"                .orElseThrow(() -\u003e new ParseException(StartDateTime.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2022-03-13"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime combinedDateTime \u003d DateUtil.combineDateTime(dateObject, timeObject);","lastModifiedDate":"2022-03-13"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"        return new StartDateTime(combinedDateTime);","lastModifiedDate":"2022-03-13"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"     * Parses a {@code String duration} into a {@code Duration}.","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"     * @throws ParseException if the given {@code date} or {@code time} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"    public static Duration parseDuration(String duration) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(duration);","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        int convertedDuration;","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"            convertedDuration \u003d Integer.parseInt(duration);","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        if (!Duration.isValidDuration(convertedDuration)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"        return new Duration(convertedDuration);","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":242,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":243,"author":{"gitId":"HanJiyao"},"content":"     * Parses a {@code String commandInput} into a {@code output} that command with index.","lastModifiedDate":"2022-03-15"},{"lineNumber":244,"author":{"gitId":"HanJiyao"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":245,"author":{"gitId":"HanJiyao"},"content":"     * @throws ParseException if the given {@code commandInput} is empty.","lastModifiedDate":"2022-03-15"},{"lineNumber":246,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":247,"author":{"gitId":"HanJiyao"},"content":"    public static String parseAndCreateNewCommand(String commandInput, String index) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":248,"author":{"gitId":"HanJiyao"},"content":"        if (commandInput.trim().isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":249,"author":{"gitId":"HanJiyao"},"content":"            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":250,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":251,"author":{"gitId":"HanJiyao"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2022-03-15"},{"lineNumber":252,"author":{"gitId":"HanJiyao"},"content":"        commandInput \u003d commandInput.trim();","lastModifiedDate":"2022-03-15"},{"lineNumber":253,"author":{"gitId":"HanJiyao"},"content":"        String[] splitCommand \u003d commandInput.split(\" \");","lastModifiedDate":"2022-03-15"},{"lineNumber":254,"author":{"gitId":"HanJiyao"},"content":"        output.append(splitCommand[0]).append(\" \").append(index).append(\" \");","lastModifiedDate":"2022-03-15"},{"lineNumber":255,"author":{"gitId":"HanJiyao"},"content":"        if (commandInput.contains(\" \")) {","lastModifiedDate":"2022-03-15"},{"lineNumber":256,"author":{"gitId":"HanJiyao"},"content":"            output.append(commandInput.substring(splitCommand[0].length()));","lastModifiedDate":"2022-03-15"},{"lineNumber":257,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":258,"author":{"gitId":"HanJiyao"},"content":"        return output.toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":259,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"HanJiyao":35,"sharpstorm":72,"dandaandaaaaaan":37,"KwanHW":4,"-":112}},{"path":"src/main/java/seedu/contax/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"sharpstorm":1,"-":38}},{"path":"src/main/java/seedu/contax/logic/parser/RangeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_RANGE_FROM;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_RANGE_TO;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.RangeCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":" * Parses input arguments and creates a new RangeCommandParser object","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"public class RangeCommandParser implements Parser\u003cRangeCommand\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"     * Parses the given {@code String} of arguments in the context of the RangeCommandParser","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"     * and returns an RangeEditCommandParser object for execution.","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    public RangeCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RANGE_FROM, PREFIX_RANGE_TO);","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        String commandInput \u003d args.split(\"from/\")[0];","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"        Index fromIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        Index toIndex;","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        if (argMultimap.getValue(PREFIX_RANGE_FROM).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_RANGE_TO).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"            fromIndex \u003d Index.fromOneBased(Integer.parseInt(argMultimap.getValue(PREFIX_RANGE_FROM).get()));","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"            toIndex \u003d Index.fromOneBased(Integer.parseInt(argMultimap.getValue(PREFIX_RANGE_TO).get()));","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"            if (fromIndex.getZeroBased() \u003e toIndex.getZeroBased()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"                throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"        } else {","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RangeCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"        return new RangeCommand(fromIndex, toIndex, commandInput);","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"HanJiyao":44}},{"path":"src/main/java/seedu/contax/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"sharpstorm":2,"-":15}},{"path":"src/main/java/seedu/contax/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.UniquePersonList;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.UniqueTagList;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * Wraps all data at the address-book level.","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" * Duplicates are not allowed (by .isSamePerson comparison).","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    private final UniqueTagList tags;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html.","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        tags \u003d new UniqueTagList();","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}.","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"    public void setTags(List\u003cTag\u003e tags) {","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        this.tags.setTags(tags);","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        setTags(newData.getTagList());","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"        addTagsNotInList(p);","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"        addTagsNotInList(editedPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"    //// tag-level operations","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"     * Returns true if a matching {@code tag} exists in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"     * @param tag The tag specified tag to search.","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"     * @return true if the tag exists in the tags list.","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"    public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"        return tags.contains(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"     * Adds the given tag into the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"     * Tag must not already exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"    public void addTag(Tag tag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"        tags.add(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"     * Deletes the given tag from the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"     * The supplied tag must already exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"    public void removeTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"KwanHW"},"content":"        removeTagFromPersons(tagToDelete);","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"KwanHW"},"content":"        tags.remove(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":138,"author":{"gitId":"KwanHW"},"content":"     * Replaces the given {@code target} with {@code editedTag}.","lastModifiedDate":"2022-03-13"},{"lineNumber":139,"author":{"gitId":"KwanHW"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":140,"author":{"gitId":"KwanHW"},"content":"     * {@code editedTag} must not be the same as another existing tag in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":141,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":142,"author":{"gitId":"KwanHW"},"content":"    public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":143,"author":{"gitId":"KwanHW"},"content":"        tags.setTag(target, editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":144,"author":{"gitId":"KwanHW"},"content":"        setPersonsWithTag(target, editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":145,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":146,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":147,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":148,"author":{"gitId":"KwanHW"},"content":"     * Disassociates the specified tag from all persons in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":149,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"KwanHW"},"content":"    private void removeTagFromPersons(Tag tagToDelete) {","lastModifiedDate":"2022-03-14"},{"lineNumber":151,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tagToDelete);","lastModifiedDate":"2022-03-13"},{"lineNumber":152,"author":{"gitId":"KwanHW"},"content":"        List\u003cPerson\u003e persons \u003d getPersonList().filtered(person -\u003e person.hasTag(tagToDelete));","lastModifiedDate":"2022-03-14"},{"lineNumber":153,"author":{"gitId":"KwanHW"},"content":"        for (int i \u003d 0; i \u003c persons.size(); i++) {","lastModifiedDate":"2022-03-13"},{"lineNumber":154,"author":{"gitId":"KwanHW"},"content":"            Person oldPerson \u003d persons.get(i);","lastModifiedDate":"2022-03-13"},{"lineNumber":155,"author":{"gitId":"KwanHW"},"content":"            setPerson(oldPerson, oldPerson.withoutTag(tagToDelete));","lastModifiedDate":"2022-03-13"},{"lineNumber":156,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":157,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":158,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":159,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":160,"author":{"gitId":"KwanHW"},"content":"     * Adds tags in {@code persons} that do not exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":161,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":162,"author":{"gitId":"KwanHW"},"content":"    private void addTagsNotInList(Person person) {","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(person);","lastModifiedDate":"2022-03-13"},{"lineNumber":164,"author":{"gitId":"KwanHW"},"content":"        Set\u003cTag\u003e tagSet \u003d person.getTags();","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"        for (Tag personTag : tagSet) {","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"KwanHW"},"content":"            if (!tags.contains(personTag)) {","lastModifiedDate":"2022-03-13"},{"lineNumber":167,"author":{"gitId":"KwanHW"},"content":"                addTag(personTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":168,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":169,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":172,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":173,"author":{"gitId":"KwanHW"},"content":"     * Replaces {@code target} with {@code editedTag} in all persons of the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":174,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":175,"author":{"gitId":"KwanHW"},"content":"    private void setPersonsWithTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":176,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-13"},{"lineNumber":177,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":178,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":179,"author":{"gitId":"KwanHW"},"content":"        List\u003cPerson\u003e persons \u003d getPersonList();","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"KwanHW"},"content":"        for (int i \u003d 0; i \u003c persons.size(); i++) {","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"KwanHW"},"content":"            Person person \u003d persons.get(i);","lastModifiedDate":"2022-03-14"},{"lineNumber":182,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"KwanHW"},"content":"            if (!person.hasTag(target)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"KwanHW"},"content":"                continue;","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"KwanHW"},"content":"            Person editedPerson \u003d person.withoutTag(target).withTag(editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"KwanHW"},"content":"            setPerson(person, editedPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":189,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"KwanHW"},"content":"        String numPersons \u003d persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2022-03-09"},{"lineNumber":197,"author":{"gitId":"KwanHW"},"content":"        String numTags \u003d tags.asUnmodifiableObservableList().size() + \" tags\";","lastModifiedDate":"2022-03-07"},{"lineNumber":198,"author":{"gitId":"KwanHW"},"content":"        return numPersons + \" | \" + numTags;","lastModifiedDate":"2022-03-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":206,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":207,"author":{"gitId":"KwanHW"},"content":"    public ObservableList\u003cTag\u003e getTagList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":208,"author":{"gitId":"KwanHW"},"content":"        return tags.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":209,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":210,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":215,"author":{"gitId":"KwanHW"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2022-03-09"},{"lineNumber":216,"author":{"gitId":"KwanHW"},"content":"                \u0026\u0026 tags.equals(((AddressBook) other).tags));","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":221,"author":{"gitId":"KwanHW"},"content":"        return Objects.hash(persons, tags);","lastModifiedDate":"2022-03-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":7,"KwanHW":108,"-":108}},{"path":"src/main/java/seedu/contax/model/IndexedCsvFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"public class IndexedCsvFile {","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String FILE_PATH_CONSTRAINTS \u003d \"File path should point to a .csv file\";","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Positions should be integers above 0\";","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String FILE_VALIDATION_REGEX \u003d \"(.*?)\\\\.(csv)$\";","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String MESSAGE_CLASHING_POSITIONS \u003d \"Some of the positions specified clash with each other. \\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Default Positions: Name - Column 1, Phone - Column 2, Email - Column 3, Address - Column 4\"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Tags - Column 5\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final File filePath;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final int namePosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final int phonePosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final int emailPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final int addressPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private final int tagPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a new ImportCsv object to contain import parameters","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    public IndexedCsvFile(File filePath, int namePosition, int phonePosition, int emailPosition,","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"                          int addressPosition, int tagPosition) {","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        requireAllNonNull(filePath, namePosition, phonePosition, emailPosition, addressPosition, tagPosition);","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        checkArgument(isValidFilePath(filePath.getPath()), FILE_VALIDATION_REGEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.namePosition \u003d namePosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.phonePosition \u003d phonePosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.emailPosition \u003d emailPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.addressPosition \u003d addressPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.tagPosition \u003d tagPosition;","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        return filePath.getPath();","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static boolean isValidFilePath(String test) {","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        return test.matches(FILE_VALIDATION_REGEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    public int getNamePositionIndex() {","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        return namePosition - 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    public int getPhonePositionIndex() {","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        return phonePosition - 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    public int getEmailPositionIndex() {","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        return emailPosition - 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"    public int getAddressPositionIndex() {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        return addressPosition - 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"    public int getTagPositionIndex() {","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"        return tagPosition - 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Returns true if both IndexedCsvFile have the same filepath and position fields.","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"     * This defines a stronger notion of equality between two IndexedCsvFile objects.","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (!(other instanceof IndexedCsvFile)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile otherObject \u003d (IndexedCsvFile) other;","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        return otherObject.getFilePath().equals(getFilePath())","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 otherObject.getNamePositionIndex() \u003d\u003d getNamePositionIndex()","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 otherObject.getPhonePositionIndex() \u003d\u003d getPhonePositionIndex()","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 otherObject.getEmailPositionIndex() \u003d\u003d (getEmailPositionIndex())","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 otherObject.getAddressPositionIndex() \u003d\u003d (getAddressPositionIndex())","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u0026\u0026 otherObject.getTagPositionIndex() \u003d\u003d (getTagPositionIndex());","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"dandaandaaaaaan":89}},{"path":"src/main/java/seedu/contax/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /** {@code Predicate} that always evaluates to true */","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"    // Tag management","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"     * Returns true if a matching {@code tag} exists in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"    boolean hasTag(Tag tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"     * Adds the given tag into the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"     * Tag must not already exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"KwanHW"},"content":"    void addTag(Tag tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"     * Deletes the given tag from the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"     * The supplied tag must already exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"    void deleteTag(Tag tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"     * Replaces the given {@code target} with {@code editedTag}.","lastModifiedDate":"2022-03-13"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"     * {@code editedTag} must not be the same as another existing tag in the address book.","lastModifiedDate":"2022-03-13"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"    void setTag(Tag target, Tag editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"     * Updates the filter of the filtered tag list to the filter given by {@code predicate}.","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"    /** Returns an unmodifiable view of the filtered tag list. */","lastModifiedDate":"2022-03-15"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"    ObservableList\u003cTag\u003e getFilteredTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"    // Appointments","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"     * Returns the user prefs\u0027 schedule file path.","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"     * Sets the user prefs\u0027 schedule file path.","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"    void setScheduleFilePath(Path scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"     * Replaces schedule data with the data in {@code schedule}.","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    void setSchedule(ReadOnlySchedule schedule);","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"    /** Returns the Schedule */","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    ReadOnlySchedule getSchedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if a matching {@code appointment} exists in the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if an overlapping {@code appointment} exists in the schedule.","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"     * See {@link Appointment#isOverlapping(Appointment)} for the overlap checking logic.","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"    boolean hasOverlappingAppointment(Appointment appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"     * Deletes the given appointment from the schedule.","lastModifiedDate":"2022-03-14"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"     * The supplied appointment must exist in the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"    void deleteAppointment(Appointment appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"     * Adds the given appointment into the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"     * An overlapping {@code appointment} must not already exist in the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2022-03-07"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"     * {@code target} must exist in the schedule.","lastModifiedDate":"2022-03-14"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"     * The appointment {@code editedAppointment} must not overlap with an existing appointment in the","lastModifiedDate":"2022-03-07"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"     * schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":178,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"sharpstorm":64,"KwanHW":40,"-":84}},{"path":"src/main/java/seedu/contax/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    private final FilteredList\u003cTag\u003e filteredTags;","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * Initializes a ModelManager with the given addressBook, schedule and userPrefs.","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlySchedule schedule,","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                        ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(addressBook, schedule, userPrefs);","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                + \" , schedule: \" + schedule","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                + \" and user prefs \" + userPrefs);","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        this.schedule \u003d new Schedule(schedule);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.schedule.getAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        filteredTags \u003d new FilteredList\u003c\u003e(this.addressBook.getTagList());","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * Initializes an empty ModelManager.","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        this(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        return userPrefs.getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"    public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        userPrefs.setScheduleFilePath(scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        // Delete Successful, dissociate target with any appointments.","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        // The list of matching appointments is cloned because the list iterator is destroyed upon","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        // any modification to the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e oldAppointments \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"                schedule.getAppointmentList()","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"                        .filtered(appointment -\u003e target.equals(appointment.getPerson())));","lastModifiedDate":"2022-03-20"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        oldAppointments.forEach(appointment -\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"            setAppointment(appointment, appointment.withPerson(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        // Update success, update appointments with target.","lastModifiedDate":"2022-03-09"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        // The list of matching appointments is cloned because the list iterator is destroyed upon","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        // any modification to the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e oldAppointments \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"                schedule.getAppointmentList()","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"                        .filtered(appointment -\u003e target.equals(appointment.getPerson())));","lastModifiedDate":"2022-03-20"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        oldAppointments.forEach(appointment -\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"            setAppointment(appointment, appointment.withPerson(editedPerson));","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":162,"author":{"gitId":"KwanHW"},"content":"    // Tag management","lastModifiedDate":"2022-03-07"},{"lineNumber":163,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":164,"author":{"gitId":"KwanHW"},"content":"    public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":166,"author":{"gitId":"KwanHW"},"content":"        return addressBook.hasTag(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":167,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":168,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":169,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":170,"author":{"gitId":"KwanHW"},"content":"    public void addTag(Tag tag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":171,"author":{"gitId":"KwanHW"},"content":"        addressBook.addTag(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":172,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":173,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":174,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"KwanHW"},"content":"    public void deleteTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"KwanHW"},"content":"        addressBook.removeTag(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"KwanHW"},"content":"    public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(editedTag);","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"KwanHW"},"content":"        addressBook.setTag(target, editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":205,"author":{"gitId":"KwanHW"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":206,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":207,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":208,"author":{"gitId":"KwanHW"},"content":"    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":209,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":210,"author":{"gitId":"KwanHW"},"content":"        filteredTags.setPredicate(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":211,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":212,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"KwanHW"},"content":"     * Returns an unmodifiable view of the {@code Tag} backed by the internal list of {@code versionedAddressBook}.","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":217,"author":{"gitId":"KwanHW"},"content":"    public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"KwanHW"},"content":"        return filteredTags;","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"    public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        this.schedule.resetData(schedule);","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"    public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-07"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"        return schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        return schedule.hasAppointment(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"    public boolean hasOverlappingAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"        return schedule.hasOverlappingAppointment(appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"        schedule.removeAppointment(appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":250,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":251,"author":{"gitId":"sharpstorm"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":252,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":253,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":254,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":255,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":256,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":257,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"        schedule.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"     * Returns an unmodifiable view of the list of {@code Appointments} backed by the internal list of","lastModifiedDate":"2022-03-14"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"     * {@code schedule}","lastModifiedDate":"2022-03-14"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"        return filteredAppointments;","lastModifiedDate":"2022-03-14"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 schedule.equals(other.schedule)","lastModifiedDate":"2022-03-07"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-03-14"},{"lineNumber":297,"author":{"gitId":"KwanHW"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments)","lastModifiedDate":"2022-03-14"},{"lineNumber":298,"author":{"gitId":"KwanHW"},"content":"                \u0026\u0026 filteredTags.equals(other.filteredTags);","lastModifiedDate":"2022-03-14"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":114,"KwanHW":48,"-":139}},{"path":"src/main/java/seedu/contax/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Unmodifiable view of an address book.","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    ObservableList\u003cTag\u003e getTagList();","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":3,"KwanHW":2,"-":14}},{"path":"src/main/java/seedu/contax/model/ReadOnlySchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Unmodifiable view of a schedule.","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public interface ReadOnlySchedule {","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     * Returns an unmodifiable view of the list of appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * This list will not contain any overlapping appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":17}},{"path":"src/main/java/seedu/contax/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"sharpstorm":4,"-":14}},{"path":"src/main/java/seedu/contax/model/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.DisjointAppointmentList;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Wraps all data at the Schedule level.","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * Overlapping appointments are not allowed, which is enforced by {@link DisjointAppointmentList}.","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"public class Schedule implements ReadOnlySchedule {","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private final DisjointAppointmentList appointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Constructs an empty {@code Schedule}.","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public Schedule() {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        appointments \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * Creates a Schedule using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public Schedule(ReadOnlySchedule toBeCopied) {","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        this();","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the contents of the appointment list with {@code appointments}.","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     * {@code appointments} must not contain overlapping appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * Resets the existing data of this {@code Schedule} to {@code newData}.","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    public void resetData(ReadOnlySchedule newData) {","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(newData);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if an appointment that is equals to {@code target} exists in the schedule.","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    public boolean hasAppointment(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        return appointments.contains(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if an appointment that overlaps with {@code target} exists in the schedule.","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    public boolean hasOverlappingAppointment(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        return appointments.containsOverlapping(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"     * Adds an appointment to the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * There must not exist any appointment in the schedule that overlaps with {@code target}.","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public void addAppointment(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        appointments.add(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * {@code target} must exist in the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * The appointment {@code editedAppointment} must not overlap with an existing appointment in the","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     * schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     * Removes {@code target} from this {@code Schedule}.","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * {@code target} must exist in the schedule.","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        appointments.remove(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        return appointments.size() + \" appointments\";","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof Schedule // instanceof handles nulls","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 appointments.equals(((Schedule) other).appointments));","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        return appointments.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":118}},{"path":"src/main/java/seedu/contax/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    private Path scheduleFilePath \u003d Paths.get(\"data\" , \"schedule.json\");","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        setScheduleFilePath(newUserPrefs.getScheduleFilePath());","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        return scheduleFilePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        this.scheduleFilePath \u003d scheduleFilePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 scheduleFilePath.equals(o.scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        sb.append(\"\\nAddress Book data file location : \" + addressBookFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        sb.append(\"\\nSchedule data file location: \" + scheduleFilePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":21,"-":82}},{"path":"src/main/java/seedu/contax/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Represents an appointment in the schedule.","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    // Appointment identification fields","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private final StartDateTime startDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    // Data fields","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private final Name name;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private final Duration duration;","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private final Person person;","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * Constructs an {@code Appointment}.","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * The fields {@code name, startDateTime, duration} must be present and not null.","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * The {@code person} argument is optional, and may be null.","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * @param name A valid Appointment Name.","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * @param startDateTime A valid Appointment Starting DateTime.","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * @param duration A valid Appointment Duration.","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     * @param person A valid Person or null.","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public Appointment(Name name, StartDateTime startDateTime, Duration duration, Person person) {","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(name, startDateTime, duration);","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    public Name getName() {","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        return this.name;","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public StartDateTime getStartDateTime() {","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        return this.startDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        return this.duration;","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public Person getPerson() {","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        return person;","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * Creates a new {@code Appointment} instance with the supplied {@code Person} object.","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @param newPerson The person object to replace the current associated person.","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     * @return A new immutable instance of Appointment with the updated Person.","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public Appointment withPerson(Person newPerson) {","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        return new Appointment(name, startDateTime, duration, newPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * Returns the ending DateTime of this appointment.","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * @return The end DateTime of this appointment.","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        return getStartDateTime().value.plusMinutes(getDuration().value);","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if both appointments overlap, that is, the start time of an appointment is strictly before","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"     * the (start time + duration) of the other appointment. Note that false will be returned if the start","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"     * time of the other appointment is exactly the end time of this appointment.","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"     * @param other The other {@code Appointment} to compare against.","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"     * @return True if both appointments overlap, otherwise false.","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    public boolean isOverlapping(Appointment other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(other);","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        if (this.equals(other)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime otherStartDateTime \u003d other.getStartDateTime().value;","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime selfStartDateTime \u003d getStartDateTime().value;","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        if (otherStartDateTime.isAfter(selfStartDateTime.minusSeconds(1))) {","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"            // In this case, other.startDateTime is after this.startDateTime.","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            return otherStartDateTime.isBefore(getEndDateTime());","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        // other.startDateTime is strictly before this.startDateTime, need to check if other.endDateTime","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        // overflows into this.startDateTime","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        return (other.getEndDateTime().isAfter(selfStartDateTime));","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if both appointments have the same name and data fields.","lastModifiedDate":"2022-03-06"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"     * This defines a stronger notion of equality between two appointments.","lastModifiedDate":"2022-03-06"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-06"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-06"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-03-06"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2022-03-06"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"            return false;","lastModifiedDate":"2022-03-06"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        Appointment otherPerson \u003d (Appointment) other;","lastModifiedDate":"2022-03-06"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2022-03-06"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 otherPerson.getStartDateTime().equals(getStartDateTime())","lastModifiedDate":"2022-03-06"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 otherPerson.getDuration().equals(getDuration())","lastModifiedDate":"2022-03-06"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 Objects.equals(otherPerson.getPerson(), getPerson());","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-06"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        return Objects.hash(name, startDateTime, duration, person);","lastModifiedDate":"2022-03-06"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-06"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        return getName()","lastModifiedDate":"2022-03-06"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"                + \"; Start Date Time: \"","lastModifiedDate":"2022-03-06"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"                + getStartDateTime()","lastModifiedDate":"2022-03-06"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"                + \"; Duration: \"","lastModifiedDate":"2022-03-06"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"                + getDuration()","lastModifiedDate":"2022-03-06"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"                + \"; Person: \"","lastModifiedDate":"2022-03-06"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"                + getPerson();","lastModifiedDate":"2022-03-06"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    public int compareTo(Appointment o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        return this.getStartDateTime().compareTo(o.getStartDateTime());","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":146}},{"path":"src/main/java/seedu/contax/model/appointment/DateRangePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * Tests that a {@code Appointment} falls between the given date time range.","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * It returns true if the appointment being tested contains some sub-range of the predicate\u0027s date range.","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class DateRangePredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private final LocalDateTime start;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    private final LocalDateTime end;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a DateRangePredicate object.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * @param start The start of the range to filter.","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param end The end of the range to filter.","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public DateRangePredicate(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(start);","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(end);","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        this.start \u003d start;","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        this.end \u003d end;","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime appointmentStart \u003d appointment.getStartDateTime().value;","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime appointmentEnd \u003d appointment.getEndDateTime();","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        return (DateUtil.isBeforeOrEqual(appointmentStart, start) \u0026\u0026 DateUtil.isAfterOrEqual(appointmentEnd, end))","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"                || (DateUtil.isAfterOrEqual(appointmentStart, start) \u0026\u0026 DateUtil.isBeforeOrEqual(appointmentEnd, end))","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"                || (DateUtil.isAfterOrEqual(appointmentStart, start) \u0026\u0026 DateUtil.isBeforeOrEqual(appointmentStart, end))","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                || (DateUtil.isAfterOrEqual(appointmentEnd, start) \u0026\u0026 DateUtil.isBeforeOrEqual(appointmentEnd, end));","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":42}},{"path":"src/main/java/seedu/contax/model/appointment/DisjointAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.OverlappingAppointmentException;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" * A list of appointments that enforces that its elements cannot have overlapping periods and does not allow","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * nulls. This check is performed using {@link Appointment#isOverlapping(Appointment)}, and will be performed","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" * upon any modification to the list. It also enforces a chronological ordering of the appointments in the","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":" * list, done by sorting {@link Appointment#getStartDateTime()} since appointments are disjoint.","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" *","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" * Note that {@link #remove(Appointment)} uses Appointment#equals(Object) to find the target appointment to","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":" * remove.","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"public class DisjointAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private final ObservableList\u003cAppointment\u003e appointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private final ObservableList\u003cAppointment\u003e readOnlyAppointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code DisjointAppointmentList}.","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public DisjointAppointmentList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        this.appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        this.readOnlyAppointments \u003d FXCollections.unmodifiableObservableList(this.appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the entire list of appointments with {@code appointments}.","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * @param appointments The new list of appointments to use.","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        if (!isAppointmentListDisjoint(appointments)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            throw new OverlappingAppointmentException();","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        this.appointments.setAll(appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        this.appointments.sort(Appointment::compareTo);","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the entire list of appointments with {@code toCopy}.","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     * @param toCopy The {@code DisjointAppointmentList} from which the list of appointments should be","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     *               created from.","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments(DisjointAppointmentList toCopy) {","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(toCopy);","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        this.appointments.setAll(toCopy.appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if the list of appointments contains {@code target}.","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * @param target The {@code appointment} object to check.","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * @return True if the list of appointments contains {@code target}, otherwise false.","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    public boolean contains(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        return this.appointments.contains(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if the list of appointments contains some appointment that overlaps with {@code target}.","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"     * @param target The {@code appointment} object to check against.","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"     * @return True if the list of appointments contains some appointment that overlaps with {@code target},","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"     *         otherwise false.","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    public boolean containsOverlapping(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        long overlappingAppointmentCount \u003d appointments.stream().filter((appointment) -\u003e (","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"                appointment.isOverlapping(target))).count();","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        return overlappingAppointmentCount \u003e 0;","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     * Adds the appointment {@code target} to this list of appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"     * @param target The {@code appointment} object to add to the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    public void add(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        if (contains(target)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"            throw new OverlappingAppointmentException();","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        // Check for overlapping appointments","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        long overlappingAppointmentCount \u003d appointments.stream().filter((appointment) -\u003e (","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"                appointment.isOverlapping(target))).count();","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        if (overlappingAppointmentCount \u003e 0) {","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"            throw new OverlappingAppointmentException();","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        appointments.add(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        shiftAppointmentToPosition(appointments.size() - 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"     * Replaces the appointment {@code target} in the list with {@code newAppointment}.","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"     * {@code newAppointment} must not overlap with any appointment in the list excluding {@code target}.","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"     * @param target The {@code Appointment} to replace.","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"     * @param newAppointment The {@code Appointment} to replace {@code target} with.","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"     * @throws AppointmentNotFoundException If {@code target} cannot be found in the list.","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment(Appointment target, Appointment newAppointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        requireAllNonNull(target, newAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        int indexOfTarget \u003d appointments.indexOf(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        if (indexOfTarget \u003c 0) {","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        long clashing \u003d appointments.stream().filter((appointment) -\u003e (","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"                appointment.isOverlapping(newAppointment) \u0026\u0026 !appointment.equals(target))).count();","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        if (clashing \u003e 0) {","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"            throw new OverlappingAppointmentException();","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        appointments.set(indexOfTarget, newAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        shiftAppointmentToPosition(indexOfTarget);","lastModifiedDate":"2022-03-14"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"     * Removes the appointment {@code target} from the list of appointments.","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"     * @param target The appointment to remove from the list.","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"     * @throws AppointmentNotFoundException If {@code target} cannot be found in the list.","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"    public void remove(Appointment target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        int indexOfTarget \u003d appointments.indexOf(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        if (indexOfTarget \u003c 0) {","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        appointments.remove(indexOfTarget);","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"     * Returns the number of appointments in this list.","lastModifiedDate":"2022-03-07"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"     * @return The number of appointments in this list.","lastModifiedDate":"2022-03-07"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"    public int size() {","lastModifiedDate":"2022-03-07"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        return this.appointments.size();","lastModifiedDate":"2022-03-07"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"     * Returns a read-only {@code ObservableList} of the appointments in this list.","lastModifiedDate":"2022-03-07"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"     * @return A Read-Only list of appointments in this list.","lastModifiedDate":"2022-03-07"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"        return readOnlyAppointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2022-03-07"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"        return appointments.iterator();","lastModifiedDate":"2022-03-07"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-07"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof DisjointAppointmentList // instanceof handles nulls","lastModifiedDate":"2022-03-07"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 appointments.equals(((DisjointAppointmentList) other).appointments));","lastModifiedDate":"2022-03-07"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        return appointments.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if there are overlapping appointments in the supplied list.","lastModifiedDate":"2022-03-07"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"     * @param target The list to check for overlapping appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"     * @return True if there are overlapping appointments, false otherwise.","lastModifiedDate":"2022-03-07"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"    private boolean isAppointmentListDisjoint(List\u003cAppointment\u003e target) {","lastModifiedDate":"2022-03-07"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 0; i \u003c target.size() - 1; i++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"            for (int j \u003d i + 1; j \u003c target.size(); j++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"                if (target.get(i).isOverlapping(target.get(j))) {","lastModifiedDate":"2022-03-07"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"                    return false;","lastModifiedDate":"2022-03-07"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"                }","lastModifiedDate":"2022-03-07"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"     * Performs the shifting operation in insertion sort, omitting the insert into list component of","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"     * insertion sort, and shifts the appointment at the given {@code index} into its sorted position.","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"     * Note that this function may only be called if only the given appointment at {@code index} is out","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"     * of position.","lastModifiedDate":"2022-03-14"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"     * @param index The appointment to shift into place. This must be a valid index in the appointments list.","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"    private void shiftAppointmentToPosition(int index) {","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c appointments.size());","lastModifiedDate":"2022-03-15"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"        Appointment target \u003d appointments.get(index);","lastModifiedDate":"2022-03-14"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        int otherIndex \u003d index;","lastModifiedDate":"2022-03-14"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"        // Determine direction","lastModifiedDate":"2022-03-14"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"        if (index - 1 \u003e\u003d 0 \u0026\u0026 target.compareTo(appointments.get(index - 1)) \u003c 0) {","lastModifiedDate":"2022-03-14"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"            // target \u003c index - 1, shift left","lastModifiedDate":"2022-03-14"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"            otherIndex \u003d index - 1;","lastModifiedDate":"2022-03-14"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"            while (otherIndex \u003e\u003d 0 \u0026\u0026 target.compareTo(appointments.get(otherIndex)) \u003c 0) {","lastModifiedDate":"2022-03-14"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"                appointments.set(otherIndex + 1, appointments.get(otherIndex)); // Right Shift","lastModifiedDate":"2022-03-14"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"                otherIndex--;","lastModifiedDate":"2022-03-14"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"            appointments.set(otherIndex + 1, target);","lastModifiedDate":"2022-03-14"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        } else if (index + 1 \u003c appointments.size() \u0026\u0026 target.compareTo(appointments.get(index + 1)) \u003e 0) {","lastModifiedDate":"2022-03-14"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"            // target \u003e index + 1","lastModifiedDate":"2022-03-14"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"            otherIndex \u003d index + 1;","lastModifiedDate":"2022-03-14"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"            while (otherIndex \u003c appointments.size() \u0026\u0026 target.compareTo(appointments.get(otherIndex)) \u003e 0) {","lastModifiedDate":"2022-03-14"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"                appointments.set(otherIndex - 1, appointments.get(otherIndex)); // Left Shift","lastModifiedDate":"2022-03-14"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"                otherIndex++;","lastModifiedDate":"2022-03-14"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"            appointments.set(otherIndex - 1, target);","lastModifiedDate":"2022-03-14"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":245}},{"path":"src/main/java/seedu/contax/model/appointment/Duration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" * Represents an {@link Appointment}\u0027s duration in minutes in the schedule.","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Guarantees: Immutable; is valid declared as in {@link #isValidDuration(int)}.","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public class Duration {","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration should be a positive integer\";","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public final int value;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code Duration}.","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * @param duration A valid duration, as defined in {@link #isValidDuration(int)}.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public Duration(int duration) {","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        this.value \u003d duration;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if a given integer is a valid duration.","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * A duration is considered valid if it is a positive integer.","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     * @param test The integer to test.","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * @return A boolean indicating if the test integer supplied is a valid duration.","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public static boolean isValidDuration(int test) {","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        return test \u003e 0;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        return String.format(\"%d Minutes\", value);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof Duration // instanceof handles nulls","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 value \u003d\u003d ((Duration) other).value); // state check","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return Integer.hashCode(value);","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":51}},{"path":"src/main/java/seedu/contax/model/appointment/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Represents an {@link Appointment}\u0027s name in the schedule.","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Guarantees: Immutable; is valid declared as in {@link #isValidName(String)}.","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"public class Name {","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"            \"Names should only contain alphanumeric characters, spaces, the symbols .,!@#$%\u0026*()\"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"                    + \"and it should not be blank\";","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    /*","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALIDATION_REGEX \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"            \"[\\\\p{Alnum}.,!@#$%\u0026*()\\\\-_\u003d+][\\\\p{Alnum} .,!@#$%\u0026*()\\\\-_\u003d+]*\";","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public final String name;","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * @param name A valid name, as defined in {@link #isValidName(String)}.","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public Name(String name) {","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(name);","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     * A name is considered valid if it is a non-empty string with only alphanumeric characters,","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     * whitespaces, the symbols .,!@#$%\u0026*() and does not begin with a whitespace.","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     * @return A boolean indicating if the test string supplied is a valid name.","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return name;","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 name.equals(((Name) other).name)); // state check","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        return name.hashCode();","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":63}},{"path":"src/main/java/seedu/contax/model/appointment/StartDateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" * Represents an {@link Appointment}\u0027s starting DateTime in the schedule.","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Guarantees: Immutable; is always a valid {@link LocalDateTime}; Seconds field is always zeroed.","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class StartDateTime implements Comparable\u003cStartDateTime\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    public static final String DATETIME_FORMAT \u003d \"dd-MM-yyyy HH:mm\";","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public static final DateTimeFormatter DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATETIME_FORMAT);","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime has to be valid\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public final LocalDateTime value;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code StartDateTime}.","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param dateTime Any non-null DateTime object.","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public StartDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        this.value \u003d dateTime.withSecond(0).withNano(0);","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        return DATETIME_FORMATTER.format(value);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof StartDateTime // instanceof handles nulls","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 value.equals(((StartDateTime) other).value)); // state check","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        return value.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public int compareTo(StartDateTime o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        return this.value.compareTo(o.value);","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":50}},{"path":"src/main/java/seedu/contax/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"        super(\"Operation could not find the supplied appointment\");","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":10}},{"path":"src/main/java/seedu/contax/model/appointment/exceptions/OverlappingAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Signals that the operation will result in overlapping Appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" * Appointments are overlapping if an appointment starts before the other appointment ends.","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"public class OverlappingAppointmentException extends RuntimeException {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"    public OverlappingAppointmentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"        super(\"Operation would result in overlapping appointments\");","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":11}},{"path":"src/main/java/seedu/contax/model/onboarding/OnboardingStep.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.model.onboarding;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.function.BiFunction;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.function.Function;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.onboarding.OnboardingCommandBox;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":" * The model that is responsible for storing actions for the OnbordingWindow","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingStep {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"    private String displayMessage;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStory.OverlayOption overlayOption;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStory.HighlightOption highlightOption;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStory.PositionOption positionOption;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"    private int eventType;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"    private double messageHeight;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"    private double messageWidth;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"    private String command;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"    private boolean isCommandCustom;","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"    private BiFunction\u003cModel, OnboardingCommandBox, String\u003e commandInstruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"    private Function\u003cModel, String\u003e labelInstruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates an OnboardingStep object","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"     * @param message message to display","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height height of label","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width width of label","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"     * @param overlay overlay option","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"     * @param position position option for label","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"     * @param highlight highlight option","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"     * @param eventType trigger event type","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"     * @param command command to validate","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"     * @param commandInstruction command instruction to run","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"     * @param instruction instruction to run","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"     * @param isCommandCustom if user input is allowed to be custom","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep(String message,","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"                          double height,","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"                          double width,","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"                          OnboardingStory.OverlayOption overlay,","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"                          OnboardingStory.PositionOption position,","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"                          OnboardingStory.HighlightOption highlight,","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"                          int eventType,","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"                          String command,","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"                          BiFunction\u003cModel, OnboardingCommandBox, String\u003e commandInstruction,","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"                          Function\u003cModel, String\u003e instruction,","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"                          boolean isCommandCustom) {","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"        this.displayMessage \u003d message;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"        this.eventType \u003d eventType;","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"        this.messageHeight \u003d height;","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"        this.messageWidth \u003d width;","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"        this.overlayOption \u003d overlay;","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"        this.positionOption \u003d position;","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"        this.highlightOption \u003d highlight;","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"        this.commandInstruction \u003d commandInstruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"        this.labelInstruction \u003d instruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"        this.isCommandCustom \u003d isCommandCustom;","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"    public int getEventType() {","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"        return eventType;","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"    public String getDisplayMessage() {","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"        return displayMessage;","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStory.OverlayOption getOverlayOption() {","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"        return overlayOption;","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStory.HighlightOption getHighlightOption() {","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"        return highlightOption;","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStory.PositionOption getPositionOption() {","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"        return positionOption;","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"    public double getMessageHeight() {","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"        return messageHeight;","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"    public double getMessageWidth() {","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"Wei-Xinn"},"content":"        return messageWidth;","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"    public BiFunction\u003cModel, OnboardingCommandBox, String\u003e getCommandInstruction() {","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"        return commandInstruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"Wei-Xinn"},"content":"    public String getCommand() {","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"Wei-Xinn"},"content":"        return command;","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"    public Function\u003cModel, String\u003e getLabelInstruction() {","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"        return labelInstruction;","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"    public boolean isCommandCustom() {","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"        return isCommandCustom;","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"    public void setEventType(OnboardingStory.PositionOption type) {","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"        positionOption \u003d type;","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"Wei-Xinn"},"content":"    public void setDisplayMessage(String msg) {","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage \u003d msg;","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"Wei-Xinn"},"content":"    public void setCommand(String cmd) {","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"Wei-Xinn"},"content":"        command \u003d cmd;","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"Wei-Xinn"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"Wei-Xinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"Wei-Xinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"Wei-Xinn"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"Wei-Xinn"},"content":"        if (!(other instanceof OnboardingStep)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"Wei-Xinn"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep otherStep \u003d (OnboardingStep) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"Wei-Xinn"},"content":"        return otherStep.getEventType() \u003d\u003d getEventType()","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getDisplayMessage().equals(getDisplayMessage())","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 otherStep.getOverlayOption() \u003d\u003d getOverlayOption()","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getMessageHeight() \u003d\u003d getMessageHeight()","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getMessageWidth() \u003d\u003d getMessageWidth()","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getHighlightOption() \u003d\u003d getHighlightOption()","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getPositionOption() \u003d\u003d getPositionOption()","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getCommand().equals(getCommand())","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getLabelInstruction() \u003d\u003d getLabelInstruction()","lastModifiedDate":"2022-03-15"},{"lineNumber":143,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.isCommandCustom() \u003d\u003d isCommandCustom()","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"Wei-Xinn"},"content":"                \u0026\u0026 otherStep.getCommandInstruction() \u003d\u003d getCommandInstruction();","lastModifiedDate":"2022-03-15"},{"lineNumber":145,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"Wei-Xinn"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"Wei-Xinn"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"Wei-Xinn"},"content":"        return Objects.hash(eventType, displayMessage, overlayOption,","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"Wei-Xinn"},"content":"                messageHeight, messageWidth, highlightOption,","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"Wei-Xinn"},"content":"                positionOption, commandInstruction, command, labelInstruction, isCommandCustom);","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":1,"Wei-Xinn":152}},{"path":"src/main/java/seedu/contax/model/onboarding/OnboardingStory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.model.onboarding;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":" * Represents an onboarding guide story, which is made up of a sequence of OnboardingSteps","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingStory {","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"    public enum HighlightOption {","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"        CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"        COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"        PERSON_LIST","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"    public enum PositionOption {","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"        CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"        MENU_BAR_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"        COMMAND_BOX_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"        RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        PERSON_LIST_MIDDLE","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"    public enum OverlayOption {","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"        ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"        SHOW_MENU_BAR,","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"        SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"        SHOW_PERSON_LIST","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    private ArrayList\u003cOnboardingStep\u003e story;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStory() {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"        story \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    public void addStory(OnboardingStep os) {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"        story.add(os);","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep getStep(int index) {","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"        return story.get(index);","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"    public ArrayList\u003cOnboardingStep\u003e getStory() {","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"        return story;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"    public int getSize() {","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"        return story.size();","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"        if (!(other instanceof OnboardingStory)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory otherStory \u003d (OnboardingStory) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"        return story.equals(otherStory.getStory());","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"        return Objects.hash(story);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":71}},{"path":"src/main/java/seedu/contax/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":2,"-":55}},{"path":"src/main/java/seedu/contax/model/person/AddressContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":" * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given.","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"public class AddressContainsKeywordsPredicate extends ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"        super(keywords);","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"        return super.getKeywords().stream()","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().toString(), keyword));","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 super.getKeywords().equals(((AddressContainsKeywordsPredicate) other).getKeywords())); // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":29}},{"path":"src/main/java/seedu/contax/model/person/ContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":" * Tests that an attribute of a {@code Person} matches any of the keywords given.","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"public abstract class ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    public List\u003cString\u003e getKeywords() {","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"        return keywords;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":21}},{"path":"src/main/java/seedu/contax/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":2,"-":69}},{"path":"src/main/java/seedu/contax/model/person/EmailContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":" * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given.","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"public class EmailContainsKeywordsPredicate extends ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"        super(keywords);","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"        return super.getKeywords().stream()","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().toString(), keyword));","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 super.getKeywords().equals(((EmailContainsKeywordsPredicate) other).getKeywords())); // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":29}},{"path":"src/main/java/seedu/contax/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":2,"-":57}},{"path":"src/main/java/seedu/contax/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"public class NameContainsKeywordsPredicate extends ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"        super(keywords);","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"        return super.getKeywords().stream()","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 super.getKeywords().equals(((NameContainsKeywordsPredicate) other).getKeywords())); // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"HanJiyao":4,"sharpstorm":2,"-":23}},{"path":"src/main/java/seedu/contax/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"     * Adds a tag to the person.","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"     * @param tag The specified tag to add.","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"     * @return The updated person with the added tag.","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"    public Person withTag(Tag tag) {","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        HashSet\u003cTag\u003e updatedTag \u003d new HashSet\u003c\u003e(Set.copyOf(tags));","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"        updatedTag.add(tag);","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"        return new Person(name, phone, email, address, updatedTag);","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"     * Removes a tag from the person.","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"     * @param tag The specified tag to remove.","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"     * @return The updated person with the removed tag.","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"    public Person withoutTag(Tag tag) {","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        HashSet\u003cTag\u003e updatedTag \u003d new HashSet\u003c\u003e(Set.copyOf(tags));","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"        updatedTag.remove(tag);","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        return new Person(name, phone, email, address, updatedTag);","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"     * Returns true if the specified tag exists in the {@code person}.","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"    public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        return tags.contains(tag);","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":3,"KwanHW":29,"-":120}},{"path":"src/main/java/seedu/contax/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"            \"Phone numbers should only contain numbers and country code (optional), and \"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"at least 3 digits long\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String VALIDATION_REGEX \u003d \"^([0|\\\\+[0-9]{1,5}])?([1-9][0-9]{2,})$\";","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":2,"dandaandaaaaaan":3,"-":49}},{"path":"src/main/java/seedu/contax/model/person/PhoneContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given.","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"public class PhoneContainsKeywordsPredicate extends ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"        super(keywords);","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"        return super.getKeywords().stream()","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().toString(), keyword));","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"                \u0026\u0026 super.getKeywords().equals(((PhoneContainsKeywordsPredicate) other).getKeywords())); // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":29}},{"path":"src/main/java/seedu/contax/model/person/TagNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"public class TagNameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    private String keyword;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public TagNameContainsKeywordsPredicate(String keyword) {","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    public String getKeyword() {","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        return this.keyword;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     * Returns true if there exists a {@code Tag} in {@code Person} which matches the specified keyword.","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        for (Tag tag : tags) {","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"            if (tag.getTagNameString().contains(keyword)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"                return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof TagNameContainsKeywordsPredicate)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        return ((TagNameContainsKeywordsPredicate) o).getKeyword().equals(keyword);","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"KwanHW":47}},{"path":"src/main/java/seedu/contax/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":4,"-":133}},{"path":"src/main/java/seedu/contax/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"sharpstorm":1,"-":10}},{"path":"src/main/java/seedu/contax/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person.exceptions;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"sharpstorm":1,"-":5}},{"path":"src/main/java/seedu/contax/model/tag/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":" * Represents a Tag\u0027s name in the address book.","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":" * Guarantees: Immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"public class Name {","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should only contain alphanumeric characters and \"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"            + \"spaces.\";","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Alnum}+[ ]?)+\";","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    private final String name;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"     * @param name A valid name, as defined in {@link #isValidName(String)}.","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    public Name(String name) {","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(name);","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        this.name \u003d name.toLowerCase();","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public static boolean isValidName(String name) {","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        return name.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public String toString() {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        return name;","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        return name.hashCode();","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof Name)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"        return ((Name) o).name.equals(this.name);","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":54}},{"path":"src/main/java/seedu/contax/model/tag/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":" * Tests that a {@code Tag}\u0027s {@code Name} matches the keyword given.","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cTag\u003e {","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    private String keyword;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public NameContainsKeywordsPredicate(String keyword) {","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    public String getKeyword() {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        return this.keyword;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    public boolean test(Tag tag) {","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"        return tag.getTagNameString().contains(keyword);","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        return ((NameContainsKeywordsPredicate) o).getKeyword().equals(keyword);","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":36}},{"path":"src/main/java/seedu/contax/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    public final Name tagName;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        this.tagName \u003d new Name(tagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"     * Constructs a {@code Tag} with a given {@code Name} object.","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    public Tag(Name tagName) {","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"     * Returns the tag name in {@code String} form.","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"    public String getTagNameString() {","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        return tagName.toString();","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"     * Returns the tag name as a {@code Name} object.","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"    public Name getTagName() {","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        return tagName;","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        return Name.isValidName(test);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"     * Checks if both tags have the same name.","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"     * This defines a weaker notion of equality between two tags.","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"     * @param otherTag The specified tag to check.","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"     * @return true if both tags are the same.","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"    public boolean isSameTag(Tag otherTag) {","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        if (otherTag \u003d\u003d this) {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"        return otherTag !\u003d null \u0026\u0026 otherTag.getTagName().equals(tagName);","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        return \u0027[\u0027 + tagName.toString() + \u0027]\u0027;","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sharpstorm":1,"KwanHW":40,"-":44}},{"path":"src/main/java/seedu/contax/model/tag/UniqueTagList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.exceptions.DuplicateTagException;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.exceptions.TagNotFoundException;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" * A list of tags that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":" * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and updating of tags","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":" * uses Tag#isSameTag(Tag) for equality so as to ensure that the tag is being added or updated is unique in terms of","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":" * identity in the UniqueTagList. However, the removal of a tag uses Tag#equals(Object) so as to ensure that the tag","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":" * with exactly the same fields will be removed.","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"     * Checks the list if it contains an equivalent tag as the given argument.","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"     * @param toCheck The tag to check","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"     * @return true if there exists an equivalent tag in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    public boolean contains(Tag toCheck) {","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"     * Adds a tag to the list. The specified tag must not already exist in the list.","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"     * @param toAdd The specified tag to add","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    public void add(Tag toAdd) {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"            throw new DuplicateTagException();","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"     * Removes a tag from the list. If the tag does not exist in the list, a {@code TagNotFoundException} is thrown.","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"     * @param toRemove The specified tag to remove.","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public void remove(Tag toRemove) {","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"            throw new TagNotFoundException();","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"    public void setTags(UniqueTagList replacement) {","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"    public void setTags(List\u003cTag\u003e tags) {","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(tags);","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        if (!tagsAreUnique(tags)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"            throw new DuplicateTagException();","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        internalList.setAll(tags);","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"     * Replaces the specified {@code target} tag with {@code editedTag}.","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"    public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        requireNonNull(editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        // Checks if Tags are the same","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        if (target.equals(editedTag)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"            return;","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"        // Checks if edited Tag exists","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"        if (contains(editedTag)) {","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"            throw new DuplicateTagException();","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        int targetIndex \u003d internalList.indexOf(target);","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"        internalList.set(targetIndex, editedTag);","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"KwanHW"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"    public Iterator\u003cTag\u003e iterator() {","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"    private boolean tagsAreUnique(List\u003cTag\u003e tags) {","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"        for (int i \u003d 0; i \u003c tags.size(); i++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"            for (int j \u003d i + 1; j \u003c tags.size(); j++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"KwanHW"},"content":"                if (tags.get(i).isSameTag(tags.get(j))) {","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"KwanHW"},"content":"                    return false;","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"KwanHW"},"content":"                }","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"        return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof UniqueTagList)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"        return ((UniqueTagList) o).internalList.equals(internalList);","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"KwanHW":132}},{"path":"src/main/java/seedu/contax/model/tag/exceptions/DuplicateTagException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag.exceptions;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":" * Signals that the operation will result in duplicate Tags (Tags are considered duplicates if they have the same","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":" * identity)","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"public class DuplicateTagException extends RuntimeException {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"    public DuplicateTagException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"        super(\"Operation would result in duplicate tags.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"KwanHW":11}},{"path":"src/main/java/seedu/contax/model/tag/exceptions/TagNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag.exceptions;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":" * Signals that the operation is unable to find the specified tag.","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"public class TagNotFoundException extends RuntimeException{","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":7}},{"path":"src/main/java/seedu/contax/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"    public static Tag[] getSampleTags() {","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        return new Tag[] {","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"            new Tag(\"friends\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"            new Tag(\"colleagues\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"            new Tag(\"neighbours\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"            new Tag(\"family\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"            new Tag(\"classmates\")","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"        };","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        for (Tag sampleTag : getSampleTags()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"            sampleAb.addTag(sampleTag);","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"sharpstorm":9,"KwanHW":14,"-":51}},{"path":"src/main/java/seedu/contax/model/util/SearchType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.util;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":" * Represents a Utility of search type.","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidType(String)} (String)}","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"public class SearchType {","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"    public static final String SEARCH_TYPE_CONSTRAINTS \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"            \"Search type should only be name, address, phone, or email\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public static final String TYPE_NAME \u003d \"name\";","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public static final String TYPE_ADDRESS \u003d \"address\";","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public static final String TYPE_PHONE \u003d \"phone\";","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public static final String TYPE_EMAIL \u003d \"email\";","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public static final String[] VALIDATION_TYPE \u003d {TYPE_NAME, TYPE_ADDRESS, TYPE_PHONE, TYPE_EMAIL};","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    public final String searchType;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"     * @param type A valid search type.","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"    public SearchType(String type) {","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(type);","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        checkArgument(isValidType(type.toLowerCase()), SEARCH_TYPE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        searchType \u003d type.toLowerCase();","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"    public static boolean isValidType(String test) {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"        requireNonNull(test);","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        return Arrays.asList(VALIDATION_TYPE).contains(test.toLowerCase());","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    public String toString() {","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        return this.searchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        return this.searchType.hashCode();","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        if (!(o instanceof SearchType)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return ((SearchType) o).searchType.equals(this.searchType);","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"HanJiyao":36,"sharpstorm":32}},{"path":"src/main/java/seedu/contax/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * Represents a storage for {@link seedu.contax.model.AddressBook}.","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":4,"-":41}},{"path":"src/main/java/seedu/contax/storage/CsvManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.function.BiFunction;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":" * Manager to handle import/export csv logic","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"public class CsvManager {","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String CSV_HEADER \u003d \"Name,Phone,Email,Address,Tagged\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Model model;","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private BiFunction\u003cInteger, String[], Boolean\u003e lineAction;","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    private UnaryOperator\u003cList\u003cString[]\u003e\u003e csvLines;","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CsvManager(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.model \u003d model;","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a CsvManager to import to specified {@code model}","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CsvManager(Model model, BiFunction\u003cInteger, String[], Boolean\u003e lineAction) {","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.model \u003d model;","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.lineAction \u003d lineAction;","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a CsvManager to import to specified {@code model}","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CsvManager(Model model, UnaryOperator\u003cList\u003cString[]\u003e\u003e csvLines) {","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.model \u003d model;","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.csvLines \u003d csvLines;","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Imports a given {@code IndexedCsvFile} to a {@code model}","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param csvFile File to be imported","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return CommandResult upon success","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws IOException if reading from file fails","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    // Return list of skipped lines","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    public List\u003cInteger\u003e importCsv(IndexedCsvFile csvFile) throws IOException {","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        BufferedReader importedCsvReader \u003d new BufferedReader(new FileReader(csvFile.getFilePath()));","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        String line \u003d \"\";","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        ArrayList\u003cInteger\u003e skippedLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        int lineCounter \u003d 0;","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        //skip first line as it contains headers","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        importedCsvReader.readLine();","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        while ((line \u003d importedCsvReader.readLine()) !\u003d null) {","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"            lineCounter++;","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] importedPerson \u003d line.split(\",(?\u003d([^\\\"]|\\\"[^\\\"]*\\\")*$)\");","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            boolean successful \u003d lineAction.apply(lineCounter, importedPerson);","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (!successful) {","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"                skippedLines.add(lineCounter);","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        importedCsvReader.close();","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        return skippedLines;","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Exports the current address book into a pre-defined CSV file","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return True if operation is successful, false otherwise","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    public boolean exportCsv(String filePath) {","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            File exportedCsvFile \u003d new File(filePath);","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"            exportedCsvFile.createNewFile();","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"            BufferedWriter exportedCsvWriter \u003d new BufferedWriter(new FileWriter(exportedCsvFile));","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"            exportedCsvWriter.write(CSV_HEADER);","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"            exportedCsvWriter.newLine();","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"            List\u003cString[]\u003e csvData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"            csvData \u003d csvLines.apply(csvData);","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"            for (String[] line : csvData) {","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"                exportedCsvWriter.write(String.join(\",\", line));","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"                exportedCsvWriter.newLine();","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"            exportedCsvWriter.flush();","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"            exportedCsvWriter.close();","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"            return true;","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"            return false;","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"dandaandaaaaaan":100}},{"path":"src/main/java/seedu/contax/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"class JsonAdaptedAppointment {","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_DATETIME_MESSAGE \u003d \"Appointment\u0027s StartDateTime is invalid!\";","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_DURATION_MESSAGE \u003d \"Appointment\u0027s Duration is not a positive integer!\";","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_PERSON_MESSAGE \u003d \"Appointment\u0027s person cannot be found!\";","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public static final String DATETIME_FORMAT \u003d \"yyyy-MM-dd\u0027T\u0027HH:mm:ss\"; // ISO-8601 Specification","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private static final DateTimeFormatter DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATETIME_FORMAT);","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private final String name;","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    private final String startDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private final int duration;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private final String person;","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"name\") String name,","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                                  @JsonProperty(\"startDateTime\") String startDateTime,","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                                  @JsonProperty(\"duration\") int duration,","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                                  @JsonProperty(\"person\") String person) {","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        name \u003d source.getName().name;","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        startDateTime \u003d DATETIME_FORMATTER.format(source.getStartDateTime().value);","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        duration \u003d source.getDuration().value;","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        person \u003d (source.getPerson() !\u003d null) ? source.getPerson().getName().fullName : null;","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @param addressBook The current up-to-date address book for matching the person field in appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     * @throws IllegalValueException If there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public Appointment toModelType(ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"                    Name.class.getSimpleName()));","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        if (startDateTime \u003d\u003d null) {","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                    StartDateTime.class.getSimpleName()));","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime dateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"            dateTime \u003d LocalDateTime.parse(startDateTime, DATETIME_FORMATTER);","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"            throw new IllegalValueException(INVALID_DATETIME_MESSAGE);","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        final StartDateTime modelStartDateTime \u003d new StartDateTime(dateTime);","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        if (duration \u003c\u003d 0) {","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"            throw new IllegalValueException(INVALID_DURATION_MESSAGE);","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        final Duration modelDuration \u003d new Duration(duration);","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        Person modelPerson \u003d null;","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        if (person !\u003d null) {","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"            modelPerson \u003d addressBook.getPersonList().stream()","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"                    .filter(x -\u003e x.getName().fullName.equals(person))","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"                    .findFirst().orElseThrow(() -\u003e new IllegalValueException(INVALID_PERSON_MESSAGE));","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        return new Appointment(modelName, modelStartDateTime, modelDuration, modelPerson);","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":106}},{"path":"src/main/java/seedu/contax/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":8,"-":101}},{"path":"src/main/java/seedu/contax/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        tagName \u003d source.getTagNameString();","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public String getTagNameString() {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        if (!Name.isValidName(tagName)) {","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof JsonAdaptedTag)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        return ((JsonAdaptedTag) o).getTagNameString().equals(tagName);","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":3,"KwanHW":17,"-":41}},{"path":"src/main/java/seedu/contax/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.FileUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.JsonUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":7,"-":73}},{"path":"src/main/java/seedu/contax/storage/JsonScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.FileUtil;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.JsonUtil;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" * A class to access Schedule data stored as a json file on the hard disk.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"public class JsonScheduleStorage implements ScheduleStorage {","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleStorage.class);","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private Path filePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public JsonScheduleStorage(Path filePath) {","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        return filePath;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException {","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        return readSchedule(filePath, addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * Similar to {@link #readSchedule(ReadOnlyAddressBook)}.","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @param filePath The Location of the data. Cannot be null.","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * @param addressBook An up-to-date copy of the AddressBook for finding persons associated to","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     *                    appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     * @throws DataConversionException If the file is not in the correct format.","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException {","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        Optional\u003cJsonSerializableSchedule\u003e jsonSchedule \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"                filePath, JsonSerializableSchedule.class);","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        if (jsonSchedule.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            return Optional.empty();","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            return Optional.of(jsonSchedule.get().toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        saveSchedule(schedule, filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     * Similar to {@link #saveSchedule(ReadOnlySchedule)}.","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(schedule);","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableSchedule(schedule), filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":87}},{"path":"src/main/java/seedu/contax/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag list contains duplicate tag(s).\";","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        tags.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        for (JsonAdaptedTag jsonAdaptedTag: tags) {","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"            Tag tag \u003d jsonAdaptedTag.toModelType();","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"            if (addressBook.hasTag(tag)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"            addressBook.addTag(tag);","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"            // Load tags that were not added from tag list","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"            addMissingTags(person, addressBook);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"    public void addMissingTags(Person person, AddressBook addressbook) {","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        for (Tag personTag : person.getTags()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"            boolean isTagMissing \u003d !addressbook.hasTag(personTag);","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"            if (isTagMissing) {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"                addressbook.addTag(new Tag(personTag.getTagNameString()));","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":5,"KwanHW":24,"-":55}},{"path":"src/main/java/seedu/contax/storage/JsonSerializableSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-20"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-20"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.OverlappingAppointmentException;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":" * An Immutable Schedule that is serializable to JSON format.","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"@JsonRootName(value \u003d \"schedule\")","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"class JsonSerializableSchedule {","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public static final String MESSAGE_OVERLAPPING_APPOINTMENT \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            \"Schedule contains overlapping appointments.\";","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonSerializableSchedule.class);","lastModifiedDate":"2022-03-20"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private static final String MESSAGE_SKIP_APPOINTMENT \u003d \"Appointment cannot be inflated, skipping record\";","lastModifiedDate":"2022-03-20"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Constructs a {@code JsonSerializableSchedule} with the given appointments.","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public JsonSerializableSchedule(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * Converts a given {@code ReadOnlySchedule} into this class for Jackson use.","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @param source Future changes to this will not affect the created {@code JsonSerializableSchedule}.","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public JsonSerializableSchedule(ReadOnlySchedule source) {","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * Converts this schedule into the model\u0027s {@code Schedule} object.","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"     * @param addressBook An up-to-date {@code AddressBook} address for looking up Persons associated with","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     *                    Appointments.","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     * @throws IllegalValueException If there were any data constraints violated.","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    public Schedule toModelType(ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        Schedule schedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            try {","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"                Appointment appointment \u003d jsonAdaptedAppointment.toModelType(addressBook);","lastModifiedDate":"2022-03-20"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"                schedule.addAppointment(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            } catch (OverlappingAppointmentException ex) {","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                throw new IllegalValueException(MESSAGE_OVERLAPPING_APPOINTMENT);","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            } catch (IllegalValueException ex) {","lastModifiedDate":"2022-03-20"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"                LOGGER.info(MESSAGE_SKIP_APPOINTMENT);","lastModifiedDate":"2022-03-20"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        return schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":74}},{"path":"src/main/java/seedu/contax/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.JsonUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":5,"-":42}},{"path":"src/main/java/seedu/contax/storage/ScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Represents a storage for {@link seedu.contax.model.Schedule}.","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public interface ScheduleStorage {","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * Returns Schedule data as a {@link ReadOnlySchedule}.","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * @param addressBook An up-to-date copy of the AddressBook for finding persons associated to","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     *                    appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * @throws DataConversionException If the data in storage is not in the expected format.","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If there was any problem when reading from the storage.","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * @see #getScheduleFilePath()","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     * Saves the given {@link ReadOnlySchedule} to the storage.","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * @param schedule Cannot be null.","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If there was any problem writing to the file.","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     * @see #saveSchedule(ReadOnlySchedule)","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":52}},{"path":"src/main/java/seedu/contax/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"public interface Storage extends AddressBookStorage, ScheduleStorage, UserPrefsStorage {","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule(ReadOnlyAddressBook addressbook)","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"sharpstorm":17,"-":26}},{"path":"src/main/java/seedu/contax/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private ScheduleStorage scheduleStorage;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code ScheduleStorage}","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * and {@code UserPrefStorage}.","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, ScheduleStorage scheduleStorage,","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"                          UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        this.scheduleStorage \u003d scheduleStorage;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        logger.fine(\"Attempting to read data from address book file: \" + filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        logger.fine(\"Attempting to write to address book data file: \" + filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        return scheduleStorage.getScheduleFilePath();","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        return readSchedule(scheduleStorage.getScheduleFilePath(), addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        logger.fine(\"Attempting to read data from schedule file: \" + filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        return scheduleStorage.readSchedule(filePath, addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        saveSchedule(schedule, scheduleStorage.getScheduleFilePath());","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        scheduleStorage.saveSchedule(schedule, filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":45,"-":68}},{"path":"src/main/java/seedu/contax/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Represents a storage for {@link seedu.contax.model.UserPrefs}.","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * Saves the given {@link seedu.contax.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":6,"-":30}},{"path":"src/main/java/seedu/contax/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * An UI component that displays the information in an {@code Appointment}.","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    private static final String DATE_FORMAT \u003d \"dd LLL yyyy\";","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    private static final String TIME_FORMAT \u003d \"hh:mm a\";","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public final int displayedIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public final Appointment appointmentModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    private Label id;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private Label name;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    private Label startDate;","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private Label startTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    private Label endDate;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    private Label endTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    private Label personName;","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    private Label personAddress;","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    private Label withLabel;","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@code AppointmentCard} with the given {@code Appointment} and index to display.","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentCard(Appointment appointmentModel, int displayedIndex) {","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        super(FXML);","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        this.appointmentModel \u003d appointmentModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        this.displayedIndex \u003d displayedIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        name.setText(appointmentModel.getName().name);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime startDateTime \u003d appointmentModel.getStartDateTime().value;","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime endDateTime \u003d appointmentModel.getEndDateTime();","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        startDate.setText(startDateTime.format(DATE_FORMATTER));","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        startTime.setText(startDateTime.format(TIME_FORMATTER));","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        endDate.setText(endDateTime.format(DATE_FORMATTER));","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        endTime.setText(endDateTime.format(TIME_FORMATTER));","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        if (appointmentModel.getPerson() !\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            withLabel.setVisible(true);","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            Person p \u003d appointmentModel.getPerson();","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"            personName.setText(p.getName().fullName);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            personAddress.setText(p.getAddress().value);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            withLabel.setVisible(false);","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            personName.setText(\"\");","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"            personAddress.setText(\"\");","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                || (other instanceof AppointmentCard // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 appointmentModel.equals(((AppointmentCard) other).appointmentModel)","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 displayedIndex \u003d\u003d ((AppointmentCard) other).displayedIndex);","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":82}},{"path":"src/main/java/seedu/contax/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" * Panel containing a list of appointments.","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@code AppointmentListPanel} with the given appointment {@code ObservableList}.","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        super(FXML);","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListPanel.AppointmentListViewCell());","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     * Custom {@code ListCell} that displays the graphics of an {@code Appointment} using","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * an {@code AppointmentCard}.","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                setGraphic(null);","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"                setText(null);","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":50}},{"path":"src/main/java/seedu/contax/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.CommandResult;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"         * @see seedu.contax.logic.Logic#execute(String)","lastModifiedDate":"2022-03-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"sharpstorm":5,"-":80}},{"path":"src/main/java/seedu/contax/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";","lastModifiedDate":"2019-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":2,"-":100}},{"path":"src/main/java/seedu/contax/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.Logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.CommandResult;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.onboarding.OnboardingPrompt;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    private TagListPanel tagListPanel;","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    private StatusBarFooter statusBarFooter;","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingPrompt onboardingPrompt;","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    // Flag indicating the type of model currently being displayed in the contentList","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    private GuiListContentType currentListType;","lastModifiedDate":"2022-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"    private MenuItem onboardingMenuItem;","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    private StackPane contentListPanelPlaceholder;","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingPrompt \u003d new OnboardingPrompt(primaryStage);","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"        setAccelerator(onboardingMenuItem, KeyCombination.valueOf(\"F2\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getAppointmentList());","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"        tagListPanel \u003d new TagListPanel(logic.getFilteredTagList());","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        changeListContentType(GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"     * Changes the type of model being displayed in the content list.","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"     * @param contentType The type of content the UI should display.","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"    private void changeListContentType(GuiListContentType contentType) {","lastModifiedDate":"2022-03-12"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        if (contentType \u003d\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"            contentListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"            return;","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        if (contentType.equals(GuiListContentType.UNCHANGED) || contentType.equals(currentListType)) {","lastModifiedDate":"2022-03-12"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"            return;","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"        contentListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        currentListType \u003d contentType;","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"        if (contentType \u003d\u003d GuiListContentType.PERSON) {","lastModifiedDate":"2022-03-12"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"            contentListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"        } else if (contentType \u003d\u003d GuiListContentType.APPOINTMENT) {","lastModifiedDate":"2022-03-12"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"            contentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"        } else if (contentType \u003d\u003d GuiListContentType.TAG) {","lastModifiedDate":"2022-03-12"},{"lineNumber":177,"author":{"gitId":"KwanHW"},"content":"            contentListPanelPlaceholder.getChildren().add(tagListPanel.getRoot());","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"        changeFooterContentType(contentType);","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"     * Changes the footer save file location path to the corresponding file path for the type of model being","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"     * displayed in the content list.","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"     * @param contentType The type of content the UI is currently displaying.","lastModifiedDate":"2022-03-14"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"    private void changeFooterContentType(GuiListContentType contentType) {","lastModifiedDate":"2022-03-14"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        if (contentType \u003d\u003d GuiListContentType.PERSON || contentType \u003d\u003d GuiListContentType.TAG) {","lastModifiedDate":"2022-03-14"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"            statusBarFooter.setSaveLocation(logic.getAddressBookFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        } else if (contentType \u003d\u003d GuiListContentType.APPOINTMENT) {","lastModifiedDate":"2022-03-14"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"            statusBarFooter.setSaveLocation(logic.getScheduleFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":208,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"Wei-Xinn"},"content":"     * Sets and opens the onboarding guide window and hides the main window","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":212,"author":{"gitId":"Wei-Xinn"},"content":"    public void handleOnboarding() {","lastModifiedDate":"2022-03-07"},{"lineNumber":213,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingPrompt.show();","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":215,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"     * @see seedu.contax.logic.Logic#execute(String)","lastModifiedDate":"2022-03-05"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"            changeListContentType(commandResult.getUiContentType());","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":61,"Wei-Xinn":15,"KwanHW":3,"-":184}},{"path":"src/main/java/seedu/contax/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"                .sorted(Comparator.comparing(Tag::getTagNameString))","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.getTagNameString())));","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"sharpstorm":2,"KwanHW":3,"-":73}},{"path":"src/main/java/seedu/contax/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":3,"-":46}},{"path":"src/main/java/seedu/contax/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":1,"-":27}},{"path":"src/main/java/seedu/contax/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        setSaveLocation(saveLocation);","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * Sets the content of the {@code saveLocationStatus} label.","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * @param saveLocation The path that should be displayed in the footer.","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public void setSaveLocation(Path saveLocation) {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":10,"-":27}},{"path":"src/main/java/seedu/contax/ui/TagCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":" * An UI components that displays the information in an {@code Tag}.","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"public class TagCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    private static final String FXML \u003d \"TagListCard.fxml\";","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    public final int displayedIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    public final Tag tagModel;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    @FXML","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    private Label id;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    @FXML","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    private Label tagName;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"     * Creates a {@code TagCard} with the given {@code Tag} and index to display.","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"     * @param tagModel The specified tag to display.","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"     * @param displayedIndex The index of the tag to be displayed.","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public TagCard(Tag tagModel, int displayedIndex) {","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        super(FXML);","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        this.displayedIndex \u003d displayedIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        this.tagModel \u003d tagModel;","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        tagName.setText(tagModel.getTagNameString());","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        if (!(o instanceof TagCard)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        return ((TagCard) o).tagModel.equals(tagModel);","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":49}},{"path":"src/main/java/seedu/contax/ui/TagListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" * Panel containing a list of tags.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"public class TagListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    private static final String FXML \u003d \"TagListPanel.fxml\";","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    @FXML","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    private ListView\u003cTag\u003e tagListView;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"     * Creates a {@code TagListPanel} with the given tag {@code ObservableList}.","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"     * @param tagList The specified tag list to be displayed.","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    public TagListPanel(ObservableList\u003cTag\u003e tagList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        super(FXML);","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        tagListView.setItems(tagList);","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        tagListView.setCellFactory(tagView -\u003e new TagListViewCell());","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    class TagListViewCell extends ListCell\u003cTag\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        protected void updateItem(Tag tag, boolean empty) {","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"            super.updateItem(tag, empty);","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"            if (empty || tag \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"                setGraphic(null);","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"                setText(null);","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"                setGraphic(new TagCard(tag, getIndex() + 1).getRoot());","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":46}},{"path":"src/main/java/seedu/contax/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"    /** Indicates the first run of the App*/","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"    void setFirstRun();","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"sharpstorm":1,"Wei-Xinn":3,"-":12}},{"path":"src/main/java/seedu/contax/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.MainApp;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.StringUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.Logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"    private boolean isFirstRun;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    public UiManager(Logic logic, boolean isFirstRun) {","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"        this.isFirstRun \u003d isFirstRun;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"            if (isFirstRun) {","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"                mainWindow.handleOnboarding();","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"    public void setFirstRun() {","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"        isFirstRun \u003d true;","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":5,"Wei-Xinn":10,"-":82}},{"path":"src/main/java/seedu/contax/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.MainApp;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"sharpstorm":2,"-":86}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingCommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.UiPart;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingCommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String FXML \u003d \"onboarding/OnboardingCommandBox.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"    private TextField commandTextField;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingCommandBox() {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"        super(FXML);","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setStyle(\"-fx-border-width: 5px\");","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"    public void highlight() {","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setStyle(\"-fx-border-color: yellow; -fx-border-width: 5px\");","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    public void unhighlight() {","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setStyle(\"-fx-border-color: #383838; -fx-border-width: 5px\");","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"    public void disable() {","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setDisable(true);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    public void enable() {","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setDisable(false);","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"    public void clear() {","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"        commandTextField.setText(\"\");","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"    public String getText() {","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"        return commandTextField.getText();","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":52}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingInstruction.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.binding.DoubleBinding;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.property.DoubleProperty;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.property.ReadOnlyDoubleProperty;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.UiPart;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingInstruction extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String FXML \u003d \"onboarding/OnboardingInstruction.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    private Label instruction;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates a label to contain instructions for the onboarding guide","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingInstruction() {","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        super(FXML);","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"    public void show() {","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setVisible(true);","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    public void hide() {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setVisible(false);","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    public String getText() {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"        return instruction.getText();","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"    public void setText(String text) {","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setText(text);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"     * Translate and bind the instructionLabel to the given DoubleProperty x and y","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"     * @param x x to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"     * @param y y to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"    public void translate(DoubleProperty x, DoubleProperty y) {","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setManaged(false);","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutXProperty().bind(x);","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutYProperty().bind(y);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"     * Translate and bind the instructionLabel to the given DoubleBinding x and y","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"     * @param x x to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"     * @param y y to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    public void translate(DoubleBinding x, DoubleBinding y) {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setManaged(false);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutXProperty().bind(x);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutYProperty().bind(y);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"     * Sets the instructionLabel to the center and binds it","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height height of the window","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width width of the window","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"    public void setCenter(ReadOnlyDoubleProperty height, ReadOnlyDoubleProperty width) {","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.setManaged(false);","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutXProperty().bind(width.subtract(instruction.getWidth()).divide(2));","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.layoutYProperty().bind(height.subtract(instruction.getHeight()).divide(2));","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"     * Sets the size of instructionLabel relative to the window","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height relative height","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width relative width","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"     * @param heightProperty height of window","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"     * @param widthProperty width of window","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"    public void setSize(double height, double width, ReadOnlyDoubleProperty heightProperty,","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"                        ReadOnlyDoubleProperty widthProperty) {","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.maxHeightProperty().bind(heightProperty.multiply(height));","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.minHeightProperty().bind(heightProperty.multiply(height));","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.prefHeightProperty().bind(heightProperty.multiply(height));","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.maxWidthProperty().bind(widthProperty.multiply(width));","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.minWidthProperty().bind(widthProperty.multiply(width));","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"        instruction.prefWidthProperty().bind(widthProperty.multiply(width));","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":90}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingPrompt.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.commons.core.LogsCenter;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.HelpWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.UiPart;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingPrompt extends UiPart\u003cStage\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String FXML \u003d \"onboarding/OnboardingPrompt.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String DISPLAY_MESSAGE \u003d \"Welcome to ContaX!\\nWill you like to take a quick tour?\";","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"    private Stage mainWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingWindow onboardingWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"    private Label displayMessage;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    private Button yesButton;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    private Button noButton;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates a prompt to onboarding guide","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"     * @param root stage to use as for root of prompt","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"     * @param mainWindow stage of the mainWindow","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingPrompt(Stage root, Stage mainWindow) {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        super(FXML, root);","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage.setText(DISPLAY_MESSAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingWindow \u003d new OnboardingWindow(mainWindow);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage.minHeightProperty().bind(mainWindow.heightProperty().multiply(0.1));","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage.minWidthProperty().bind(mainWindow.widthProperty().multiply(0.3));","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"        displayMessage.setAlignment(Pos.CENTER);","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates a new onboarding guide.","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingPrompt(Stage mainWindow) {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"        this(new Stage(), mainWindow);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"     * Show the onboarding guide prompt","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"    public void show() {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"        logger.fine(\"Showing onboarding prompt.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().show();","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setX(mainWindow.getX() + (mainWindow.getWidth() - getRoot().getWidth()) / 2);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setY(mainWindow.getY() + (mainWindow.getHeight() - getRoot().getHeight()) / 2);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"     * Handles the event when the yes button is clicked","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"    public void handleYes() {","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingWindow.setSize(mainWindow.getHeight(), mainWindow.getWidth());","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingWindow.translate(mainWindow.getX(), mainWindow.getY());","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"        onboardingWindow.show();","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"        mainWindow.hide();","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().hide();","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"     * Handles the event when the no button is clicked","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"    public void handleNo() {","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().hide();","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":87}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingStoryManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.logic.parser.AddressBookParser;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStep;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStory;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingStoryManager {","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String CLICK_CONTINUE \u003d \"\\n\\nClick any where to continue...\";","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String CLICK_EXIT \u003d \"\\n\\nClick any where to exit Quick Tour...\";","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String INVALID_COMMAND \u003d \"Invalid format! \"","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"            + \"Follow the format \u0027add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS\u0027\"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"            + \"\\n\\nExample: add n/Johnny p/91234567 e/Johnny@j.com a/Johnny street\";","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"    private static final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStory story;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStep previousStep;","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    private int currStep \u003d 0;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    private ArrayList\u003cPerson\u003e personList;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"     * Constructs a manager to manage Onboarding Guide stories","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStoryManager() {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"        personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"        createPersons();","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        createStories();","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingInstruction is \u003d new OnboardingInstruction();","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"     * Adds a general display step, where the instruction label with the give message,","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"     * which is centered and the overlay covers everything.","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"     * @param story story to add to","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"     * @param message display message","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"    private void addGeneralDisplayStep(OnboardingStory story, String message) {","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"        story.addStory(new OnboardingStep(message,","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"                0.25, 0.5, OnboardingStory.OverlayOption.ALL, OnboardingStory.PositionOption.CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"    private void createStories() {","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory test \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"        addGeneralDisplayStep(test, \"Welcome to a quick tour of ContaX\" + CLICK_CONTINUE);","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"        addGeneralDisplayStep(test, \"You will now be guided through\\nthe basic features of ContaX\" + CLICK_CONTINUE);","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"This is the command box.\\nYour commands will go here\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP, OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"        addGeneralDisplayStep(test, \"Now lets try adding a person.\" + CLICK_CONTINUE);","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"                \"Follow the format \u0027add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS\u0027\"","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"                        + \"\\n\\nExample: add n/Johnny p/91234567 e/Johnny@j.com a/Johnny street\"","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"                        + \"\\n\\nHit enter when you are done\",","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5,","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX, 1,","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"                \"null123null123null\", ((model, commandBox) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"                            if (commandBox.getText().length() \u003e 0) {","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"                                Command command \u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"                                try {","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"                                    command \u003d parser.parseCommand(commandBox.getText());","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"                                } catch (ParseException e) {","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"                                    return INVALID_COMMAND;","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"                                }","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"                                if (!(command instanceof AddCommand)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"Wei-Xinn"},"content":"                                    return \"Please use a add command\";","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"Wei-Xinn"},"content":"                                }","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"                                try {","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"                                    command.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"                                } catch (CommandException e) {","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"Wei-Xinn"},"content":"                                    if (e.getMessage().equals(AddCommand.MESSAGE_DUPLICATE_PERSON)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"Wei-Xinn"},"content":"                                        return \"Person name already exists! Add someone else\";","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"Wei-Xinn"},"content":"                                    }","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"                                }","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"                            }","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"                            return null;","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"                        }), null, true));","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"                \"Great! %s is now added into the system!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL, OnboardingStory.PositionOption.CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, null, (model) -\u003e String.format(\"Great! %s is now added into the system!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"                        OnboardingUtil.getLatestPersonName(model)), false));","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Lets try to find %s\u0027s record!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL, OnboardingStory.PositionOption.CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL, 0,","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"                null, null, (model) -\u003e String.format(\"Lets try to find %s\u0027s record!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"                        OnboardingUtil.getLatestPersonName(model)), false));","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Type \u0027find %s\u0027 and hit enter\",","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"Wei-Xinn"},"content":"                0.1, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP, OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"Wei-Xinn"},"content":"                1, \"find %s\", null, (model) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"Wei-Xinn"},"content":"            this.modifyCurrentStepCommand(String.format(\"find %s\", OnboardingUtil.getLatestPersonName(model)));","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"Wei-Xinn"},"content":"            return String.format(\"Type \u0027find %s\u0027 and hit enter!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"Wei-Xinn"},"content":"                    OnboardingUtil.getLatestPersonName(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"Wei-Xinn"},"content":"        }, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":127,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Great! Here is %s\u0027s record!\",","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_PERSON_LIST,","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.PERSON_LIST_MIDDLE, OnboardingStory.HighlightOption.PERSON_LIST,","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, (model, commandBox) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"Wei-Xinn"},"content":"            Person lastPerson \u003d OnboardingUtil.getLatestPerson(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"Wei-Xinn"},"content":"            model.updateFilteredPersonList((p) -\u003e p.isSamePerson(lastPerson));","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"Wei-Xinn"},"content":"            return null;","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"Wei-Xinn"},"content":"        }, (model) -\u003e String.format(\"Great! Here is %s\u0027s record!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingUtil.getLatestPersonName(model)), false));","lastModifiedDate":"2022-03-15"},{"lineNumber":137,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Now lets try to remove %s\u0027s record!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL, OnboardingStory.PositionOption.CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL, 0, null, null, (","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"Wei-Xinn"},"content":"                        model) -\u003e String.format(\"Now lets try to remove %s\u0027s record!!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"Wei-Xinn"},"content":"                                OnboardingUtil.getLatestPersonName(model)), false));","lastModifiedDate":"2022-03-15"},{"lineNumber":143,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Type \u0027delete 1\u0027 and hit enter\",","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":146,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX, 1, \"delete 1\", null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":149,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Great, the record is gone!\",","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_PERSON_LIST,","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.PERSON_LIST_MIDDLE, OnboardingStory.HighlightOption.PERSON_LIST,","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, (model, commandBox) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":153,"author":{"gitId":"Wei-Xinn"},"content":"            Person lastPerson \u003d OnboardingUtil.getLatestPerson(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"Wei-Xinn"},"content":"            model.deletePerson(lastPerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"Wei-Xinn"},"content":"            return null; }, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":157,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Now lets try to list all persons.\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-14"},{"lineNumber":158,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL, OnboardingStory.PositionOption.CENTER,","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":162,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Type \u0027list\u0027 and hit enter\",","lastModifiedDate":"2022-03-14"},{"lineNumber":163,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX, 1, \"list\", null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":167,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"Great!\" + CLICK_CONTINUE,","lastModifiedDate":"2022-03-14"},{"lineNumber":168,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_PERSON_LIST,","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.MENU_BAR_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.PERSON_LIST, 0, null, (model, commandBox) -\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"Wei-Xinn"},"content":"            model.updateFilteredPersonList(unused -\u003e true);","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"Wei-Xinn"},"content":"            return null;","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"Wei-Xinn"},"content":"        }, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":175,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(\"End of Quick Tour!\" + CLICK_EXIT,","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.CENTER, OnboardingStory.HighlightOption.CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"Wei-Xinn"},"content":"                0, null, null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"Wei-Xinn"},"content":"        test.addStory(new OnboardingStep(null,","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"Wei-Xinn"},"content":"                0, 0.1, null,","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.CENTER, null, 0, null,","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"Wei-Xinn"},"content":"                null, null, false));","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"Wei-Xinn"},"content":"        story \u003d test;","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"Wei-Xinn"},"content":"     * Populates peronList with persons.","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"Wei-Xinn"},"content":"     * These person instances are for use in the Onboarding Guide","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"Wei-Xinn"},"content":"    private void createPersons() {","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"Wei-Xinn"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"Wei-Xinn"},"content":"        Person p \u003d new Person(new Name(\"Johnny\"), new Phone(\"91234567\"),","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"Wei-Xinn"},"content":"                new Email(\"johnny@jj.com\"), new Address(\"Johnny Street\"), tags);","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"Wei-Xinn"},"content":"        personList.add(p);","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"Wei-Xinn"},"content":"    public boolean isAtlast() {","lastModifiedDate":"2022-03-14"},{"lineNumber":200,"author":{"gitId":"Wei-Xinn"},"content":"        return currStep \u003d\u003d story.getSize() - 1;","lastModifiedDate":"2022-03-14"},{"lineNumber":201,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":202,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":203,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"Wei-Xinn"},"content":"     * Returns the OnboardingStep object at the first index of story","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"Wei-Xinn"},"content":"     * @return The first OnboardingStep of story","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep start() {","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"Wei-Xinn"},"content":"        previousStep \u003d story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"Wei-Xinn"},"content":"        return story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"Wei-Xinn"},"content":"     * resets this manager","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"Wei-Xinn"},"content":"    public void reset() {","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"Wei-Xinn"},"content":"        currStep \u003d 0;","lastModifiedDate":"2022-03-14"},{"lineNumber":217,"author":{"gitId":"Wei-Xinn"},"content":"        createStories();","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"Wei-Xinn"},"content":"    public void modifyCurrentStepCommand(String newCommand) {","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"Wei-Xinn"},"content":"        story.getStep(currStep).setCommand(newCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":223,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":224,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"Wei-Xinn"},"content":"     * Handler for mouse click event.","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"Wei-Xinn"},"content":"     * @return Returns the OnboardingStep object at the current step","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep handleMouseClick() {","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"Wei-Xinn"},"content":"        if (currStep \u003e story.getSize() - 1) {","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"Wei-Xinn"},"content":"            return null;","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"Wei-Xinn"},"content":"        if (previousStep.getEventType() \u003d\u003d 0) {","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"Wei-Xinn"},"content":"            previousStep \u003d story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"Wei-Xinn"},"content":"            return story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"Wei-Xinn"},"content":"        return null;","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"Wei-Xinn"},"content":"     * Handler for Enter keypress event","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"Wei-Xinn"},"content":"     * @return Returns the OnboardingStep object at the current step","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep handleEnter() {","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"Wei-Xinn"},"content":"        if (currStep \u003e story.getSize() - 1) {","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"Wei-Xinn"},"content":"            return null;","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"Wei-Xinn"},"content":"        if (previousStep.getEventType() \u003d\u003d 1) {","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"Wei-Xinn"},"content":"            previousStep \u003d story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"Wei-Xinn"},"content":"            return story.getStep(currStep);","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"Wei-Xinn"},"content":"        return null;","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"Wei-Xinn"},"content":"    public void stepFront() {","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"Wei-Xinn"},"content":"        currStep +\u003d 1;","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"Wei-Xinn"},"content":"     * Get the OnboardingStep at the next index","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"Wei-Xinn"},"content":"     * @return Returns the next OnboardingStep object","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingStep getNextStep() {","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"Wei-Xinn"},"content":"        previousStep \u003d story.getStep(currStep + 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"Wei-Xinn"},"content":"        return story.getStep(currStep + 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":265,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":266}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":" * This class provides utilities functions for the onboarding window.","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingUtil {","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"     * Populates the given Model with the sample data","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"     * @param model the Model to be populated","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"    public static void populateWithSample(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"        Person[] samplePersons \u003d SampleDataUtil.getSamplePersons();","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"        for (Person p : samplePersons) {","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"            model.addPerson(p);","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"     * Returns the last Person in the given Model","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"     * @param model the Model to be searched","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"     * @return Person object of the last person","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    public static Person getLatestPerson(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"        int lastIndex \u003d model.getFilteredPersonList().size() - 1;","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"        lastIndex \u003d lastIndex \u003c 0 ? 0 : lastIndex;","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"        return model.getFilteredPersonList().get(lastIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"     * Returns the name string of the last person in the given Model","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"     * @param model the UniquePersonList to be searched","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"     * @return name of the last person","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"    public static String getLatestPersonName(Model model) {","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        return getLatestPerson(model).getName().toString();","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"Wei-Xinn":45}},{"path":"src/main/java/seedu/contax/ui/onboarding/OnboardingWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.control.MenuBar;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStep;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStory;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.PersonListPanel;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.UiPart;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":" * The Onboarding Window. Provides a step-by-step guide for first time users","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":" * on the basic functions of ContaX.","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String FXML \u003d \"onboarding/OnboardingWindow.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"    private Stage stage;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"    private Stage mainWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingStoryManager storyManager;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"    private Overlay overlay;","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingCommandBox commandBox;","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    private OnboardingInstruction instructionLabel;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    private Model model;","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    private String errorMessage;","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane parentPane;","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"    private VBox personList;","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"    private StackPane labelPlaceholder;","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"    private MenuBar menuBar;","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"     * Creates a OnboardingWindow","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"     * @param root Stage to use as the root of the OnboardingWindow.","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"     * @param mainWindow The window that OnboardingWindow was opened from","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingWindow(Stage root, Stage mainWindow) {","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"        super(FXML, root);","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"        stage \u003d root;","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"        this.overlay \u003d new Overlay();","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"        this.commandBox \u003d new OnboardingCommandBox();","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"        this.instructionLabel \u003d new OnboardingInstruction();","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"        this.storyManager \u003d new OnboardingStoryManager();","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"        this.model \u003d new ModelManager();","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingUtil.populateWithSample(model);","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"        fillInner();","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"        initStoryManager(storyManager);","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"    public OnboardingWindow(Stage mainWindow) {","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"        this(new Stage(), mainWindow);","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"     * Shows this window","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"    public void show() {","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().show();","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"        processInstructionPosition(OnboardingStory.PositionOption.CENTER);","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"Wei-Xinn"},"content":"     * Hides this window","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"    public void hide() {","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"        storyManager.reset();","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"        processStep(storyManager.start());","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"        mainWindow.show();","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"Wei-Xinn"},"content":"        stage.hide();","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"     * Set this window size to the given height and width.","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height height to set to","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width width to set to","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"    public void setSize(double height, double width) {","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setHeight(height);","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setWidth(width);","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"     * Translate the this window to the given x and y.","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"     * @param x x to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"     * @param y y to translate to","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"    public void translate(double x, double y) {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setX(x);","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"Wei-Xinn"},"content":"        getRoot().setY(y);","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"Wei-Xinn"},"content":"     * Fills up the placeholders in this window.","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"Wei-Xinn"},"content":"    private void fillInner() {","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"Wei-Xinn"},"content":"        labelPlaceholder.getChildren().add(overlay.getRoot());","lastModifiedDate":"2022-03-13"},{"lineNumber":125,"author":{"gitId":"Wei-Xinn"},"content":"        labelPlaceholder.getChildren().add(instructionLabel.getRoot());","lastModifiedDate":"2022-03-13"},{"lineNumber":126,"author":{"gitId":"Wei-Xinn"},"content":"        personListPanel \u003d new PersonListPanel(model.getFilteredPersonList());","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"Wei-Xinn"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2022-03-13"},{"lineNumber":128,"author":{"gitId":"Wei-Xinn"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2022-03-13"},{"lineNumber":129,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":130,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":131,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"Wei-Xinn"},"content":"     * Displays an overlay over this window which covers every Node, except the given Node.","lastModifiedDate":"2022-03-13"},{"lineNumber":133,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"Wei-Xinn"},"content":"     * Option as follows:","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- Overlay.showOverlay.BOTH: both overlays visible","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- Overlay.showOverlay.BOTTOM: shows only the bottom overlay","lastModifiedDate":"2022-03-15"},{"lineNumber":137,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- Overlay.showOverlay.TOP: shows only the top overlay","lastModifiedDate":"2022-03-15"},{"lineNumber":138,"author":{"gitId":"Wei-Xinn"},"content":"     * @param node Node to be excluded from the overlay","lastModifiedDate":"2022-03-13"},{"lineNumber":139,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"Wei-Xinn"},"content":"    private void showOnly(Region node, Overlay.ShowOverlay option) {","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"Wei-Xinn"},"content":"        overlay.showOnly(node.layoutXProperty(), node.layoutYProperty(),","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"Wei-Xinn"},"content":"                node.heightProperty(), node.widthProperty(),","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"Wei-Xinn"},"content":"                parentPane.heightProperty(), parentPane.widthProperty(), option);","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"Wei-Xinn"},"content":"     * Displays an overlay over this window which covers every Node.","lastModifiedDate":"2022-03-13"},{"lineNumber":148,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"Wei-Xinn"},"content":"    private void coverAll() {","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"Wei-Xinn"},"content":"        overlay.cover(parentPane.layoutXProperty(), parentPane.layoutYProperty(),","lastModifiedDate":"2022-03-07"},{"lineNumber":151,"author":{"gitId":"Wei-Xinn"},"content":"                parentPane.heightProperty(), parentPane.widthProperty());","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":154,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"Wei-Xinn"},"content":"     * Initialize the onboarding story manager by processing the first step and settings up event listeners","lastModifiedDate":"2022-03-13"},{"lineNumber":156,"author":{"gitId":"Wei-Xinn"},"content":"     * @param mng","lastModifiedDate":"2022-03-13"},{"lineNumber":157,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"Wei-Xinn"},"content":"    private void initStoryManager(OnboardingStoryManager mng) {","lastModifiedDate":"2022-03-13"},{"lineNumber":159,"author":{"gitId":"Wei-Xinn"},"content":"        processStep(storyManager.start());","lastModifiedDate":"2022-03-13"},{"lineNumber":160,"author":{"gitId":"Wei-Xinn"},"content":"        parentPane.setOnMouseClicked((event -\u003e {","lastModifiedDate":"2022-03-13"},{"lineNumber":161,"author":{"gitId":"Wei-Xinn"},"content":"            OnboardingStep s \u003d storyManager.handleMouseClick();","lastModifiedDate":"2022-03-13"},{"lineNumber":162,"author":{"gitId":"Wei-Xinn"},"content":"            if (s !\u003d null) {","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"Wei-Xinn"},"content":"                processStep(s);","lastModifiedDate":"2022-03-13"},{"lineNumber":164,"author":{"gitId":"Wei-Xinn"},"content":"                processInstructionPosition(s.getPositionOption());","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"Wei-Xinn"},"content":"        }));","lastModifiedDate":"2022-03-13"},{"lineNumber":167,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"Wei-Xinn"},"content":"        commandBox.getRoot().setOnKeyPressed((event) -\u003e {","lastModifiedDate":"2022-03-13"},{"lineNumber":169,"author":{"gitId":"Wei-Xinn"},"content":"            if (event.getCode() \u003d\u003d KeyCode.ENTER) {","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStep s \u003d storyManager.handleEnter();","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"Wei-Xinn"},"content":"                if (s !\u003d null) {","lastModifiedDate":"2022-03-13"},{"lineNumber":172,"author":{"gitId":"Wei-Xinn"},"content":"                    processStep(s);","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"Wei-Xinn"},"content":"                    processInstructionPosition(s.getPositionOption());","lastModifiedDate":"2022-03-13"},{"lineNumber":174,"author":{"gitId":"Wei-Xinn"},"content":"                }","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"Wei-Xinn"},"content":"        });","lastModifiedDate":"2022-03-13"},{"lineNumber":177,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"Wei-Xinn"},"content":"     * Highlights a node in this window the stage based on the given option","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"Wei-Xinn"},"content":"     * Options are as follows:","lastModifiedDate":"2022-03-13"},{"lineNumber":183,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.HighlightOption.CLEAR_ALL: clear all highlights","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.HighlightOption.COMMAND_BOX: highlight only the command box","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.HighlightOption.PERSON_LIST: highlight only the person list","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"Wei-Xinn"},"content":"     * @param option Highlight option","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"Wei-Xinn"},"content":"    private void processHighlightOption(OnboardingStory.HighlightOption option) {","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"Wei-Xinn"},"content":"        switch (option) {","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"Wei-Xinn"},"content":"        case CLEAR_ALL:","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"Wei-Xinn"},"content":"            commandBox.unhighlight();","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"Wei-Xinn"},"content":"            commandBox.clear();","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"Wei-Xinn"},"content":"            personList.setStyle(\"-fx-border-width: 0px\");","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":195,"author":{"gitId":"Wei-Xinn"},"content":"        case COMMAND_BOX:","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"Wei-Xinn"},"content":"            commandBox.highlight();","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":198,"author":{"gitId":"Wei-Xinn"},"content":"        case PERSON_LIST:","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"Wei-Xinn"},"content":"            commandBox.unhighlight();","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"Wei-Xinn"},"content":"            commandBox.clear();","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"Wei-Xinn"},"content":"            personList.setStyle(\"-fx-border-color: yellow; -fx-border-width: 5px\");","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":203,"author":{"gitId":"Wei-Xinn"},"content":"        default:","lastModifiedDate":"2022-03-13"},{"lineNumber":204,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":205,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"Wei-Xinn"},"content":"     * Displays an overlay on this window, whose position is dependant on the given option","lastModifiedDate":"2022-03-13"},{"lineNumber":210,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":211,"author":{"gitId":"Wei-Xinn"},"content":"     * Options are as follows:","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.OverlayOption.ALL: cover all","lastModifiedDate":"2022-03-15"},{"lineNumber":213,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.OverlayOption.SHOW_MENU_BAR: cover all, showing only the menu bar","lastModifiedDate":"2022-03-15"},{"lineNumber":214,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.OverlayOption.SHOW_COMMAND_BOX: cover all, showing only the command box","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.OverlayOption.SHOW_PERSON_LIST: cover all, showing only the person list","lastModifiedDate":"2022-03-15"},{"lineNumber":216,"author":{"gitId":"Wei-Xinn"},"content":"     * @param option the overlay option","lastModifiedDate":"2022-03-13"},{"lineNumber":217,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":218,"author":{"gitId":"Wei-Xinn"},"content":"    private void processOverlayOption(OnboardingStory.OverlayOption option) {","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"Wei-Xinn"},"content":"        switch (option) {","lastModifiedDate":"2022-03-13"},{"lineNumber":220,"author":{"gitId":"Wei-Xinn"},"content":"        case ALL:","lastModifiedDate":"2022-03-15"},{"lineNumber":221,"author":{"gitId":"Wei-Xinn"},"content":"            coverAll();","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":223,"author":{"gitId":"Wei-Xinn"},"content":"        case SHOW_MENU_BAR:","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"Wei-Xinn"},"content":"            showOnly(menuBar, Overlay.ShowOverlay.BOTH);","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":226,"author":{"gitId":"Wei-Xinn"},"content":"        case SHOW_COMMAND_BOX:","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"Wei-Xinn"},"content":"            showOnly(commandBoxPlaceholder, Overlay.ShowOverlay.BOTH);","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":229,"author":{"gitId":"Wei-Xinn"},"content":"        case SHOW_PERSON_LIST:","lastModifiedDate":"2022-03-15"},{"lineNumber":230,"author":{"gitId":"Wei-Xinn"},"content":"            showOnly(personList, Overlay.ShowOverlay.TOP);","lastModifiedDate":"2022-03-15"},{"lineNumber":231,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":232,"author":{"gitId":"Wei-Xinn"},"content":"        default:","lastModifiedDate":"2022-03-13"},{"lineNumber":233,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":234,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"Wei-Xinn"},"content":"     * Moves the InstructionLabel to a position based on the given option.","lastModifiedDate":"2022-03-13"},{"lineNumber":239,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":240,"author":{"gitId":"Wei-Xinn"},"content":"     * Options are as follows:","lastModifiedDate":"2022-03-13"},{"lineNumber":241,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.PositionOption.CENTER: center of window","lastModifiedDate":"2022-03-15"},{"lineNumber":242,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.PositionOption.MENU_BAR_TOP: top right of menu bar","lastModifiedDate":"2022-03-15"},{"lineNumber":243,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.PositionOption.COMMAND_BOX_TOP: top right of command box","lastModifiedDate":"2022-03-15"},{"lineNumber":244,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.PositionOption.RESULT_DISPLAY_TOP: top right of result display","lastModifiedDate":"2022-03-15"},{"lineNumber":245,"author":{"gitId":"Wei-Xinn"},"content":"     * \u003cbr\u003e- OnboardingStory.PositionOption.PERSON_LIST_MIDDLE: middle right of result display","lastModifiedDate":"2022-03-15"},{"lineNumber":246,"author":{"gitId":"Wei-Xinn"},"content":"     * @param option Position option","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"Wei-Xinn"},"content":"    private void processInstructionPosition(OnboardingStory.PositionOption option) {","lastModifiedDate":"2022-03-15"},{"lineNumber":249,"author":{"gitId":"Wei-Xinn"},"content":"        switch (option) {","lastModifiedDate":"2022-03-13"},{"lineNumber":250,"author":{"gitId":"Wei-Xinn"},"content":"        case CENTER:","lastModifiedDate":"2022-03-15"},{"lineNumber":251,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.setCenter(stage.heightProperty(), stage.widthProperty());","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":253,"author":{"gitId":"Wei-Xinn"},"content":"        case MENU_BAR_TOP:","lastModifiedDate":"2022-03-15"},{"lineNumber":254,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.translate(menuBar.layoutXProperty(), menuBar.layoutYProperty());","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":256,"author":{"gitId":"Wei-Xinn"},"content":"        case COMMAND_BOX_TOP:","lastModifiedDate":"2022-03-15"},{"lineNumber":257,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.translate(commandBoxPlaceholder.layoutXProperty(),","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"Wei-Xinn"},"content":"                    commandBoxPlaceholder.layoutYProperty());","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":260,"author":{"gitId":"Wei-Xinn"},"content":"        case RESULT_DISPLAY_TOP:","lastModifiedDate":"2022-03-15"},{"lineNumber":261,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.translate(resultDisplayPlaceholder.layoutXProperty(),","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"Wei-Xinn"},"content":"                    resultDisplayPlaceholder.layoutYProperty());","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":264,"author":{"gitId":"Wei-Xinn"},"content":"        case PERSON_LIST_MIDDLE:","lastModifiedDate":"2022-03-15"},{"lineNumber":265,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.translate(","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"Wei-Xinn"},"content":"                    personList.layoutXProperty().add(0),","lastModifiedDate":"2022-03-08"},{"lineNumber":267,"author":{"gitId":"Wei-Xinn"},"content":"                    personList.layoutYProperty().add(","lastModifiedDate":"2022-03-08"},{"lineNumber":268,"author":{"gitId":"Wei-Xinn"},"content":"                            resultDisplayPlaceholder.heightProperty().multiply(1.5)","lastModifiedDate":"2022-03-08"},{"lineNumber":269,"author":{"gitId":"Wei-Xinn"},"content":"                    ));","lastModifiedDate":"2022-03-08"},{"lineNumber":270,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":271,"author":{"gitId":"Wei-Xinn"},"content":"        default:","lastModifiedDate":"2022-03-13"},{"lineNumber":272,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-13"},{"lineNumber":273,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":274,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":275,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":276,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":277,"author":{"gitId":"Wei-Xinn"},"content":"     * Enforces the user input to be equals to be given step\u0027s command.","lastModifiedDate":"2022-03-14"},{"lineNumber":278,"author":{"gitId":"Wei-Xinn"},"content":"     * Returns 0 when the user input does not satisfy the given condition, and 1 if it does.","lastModifiedDate":"2022-03-14"},{"lineNumber":279,"author":{"gitId":"Wei-Xinn"},"content":"     * @param step step to be checked with","lastModifiedDate":"2022-03-14"},{"lineNumber":280,"author":{"gitId":"Wei-Xinn"},"content":"     * @param isCustom if the user input is to be matched with a hard coded string","lastModifiedDate":"2022-03-14"},{"lineNumber":281,"author":{"gitId":"Wei-Xinn"},"content":"     * @return an integer denoting the result of check","lastModifiedDate":"2022-03-14"},{"lineNumber":282,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":283,"author":{"gitId":"Wei-Xinn"},"content":"    private int enforceUserInput(OnboardingStep step, boolean isCustom) {","lastModifiedDate":"2022-03-14"},{"lineNumber":284,"author":{"gitId":"Wei-Xinn"},"content":"        if (!commandBox.getText().equals(step.getCommand())) {","lastModifiedDate":"2022-03-13"},{"lineNumber":285,"author":{"gitId":"Wei-Xinn"},"content":"            if (commandBox.getText().equals(\"\")) {","lastModifiedDate":"2022-03-14"},{"lineNumber":286,"author":{"gitId":"Wei-Xinn"},"content":"                return 0;","lastModifiedDate":"2022-03-14"},{"lineNumber":287,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":288,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":289,"author":{"gitId":"Wei-Xinn"},"content":"            if (!isCustom) {","lastModifiedDate":"2022-03-14"},{"lineNumber":290,"author":{"gitId":"Wei-Xinn"},"content":"                instructionLabel.setText(\"Please type: \" + step.getCommand());","lastModifiedDate":"2022-03-13"},{"lineNumber":291,"author":{"gitId":"Wei-Xinn"},"content":"                return 0;","lastModifiedDate":"2022-03-14"},{"lineNumber":292,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":293,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":294,"author":{"gitId":"Wei-Xinn"},"content":"            OnboardingStep s \u003d storyManager.getNextStep();","lastModifiedDate":"2022-03-14"},{"lineNumber":295,"author":{"gitId":"Wei-Xinn"},"content":"            processStep(s);","lastModifiedDate":"2022-03-14"},{"lineNumber":296,"author":{"gitId":"Wei-Xinn"},"content":"            step.setEventType(s.getPositionOption());","lastModifiedDate":"2022-03-14"},{"lineNumber":297,"author":{"gitId":"Wei-Xinn"},"content":"        } else {","lastModifiedDate":"2022-03-13"},{"lineNumber":298,"author":{"gitId":"Wei-Xinn"},"content":"            OnboardingStep s \u003d storyManager.getNextStep();","lastModifiedDate":"2022-03-13"},{"lineNumber":299,"author":{"gitId":"Wei-Xinn"},"content":"            processStep(s);","lastModifiedDate":"2022-03-13"},{"lineNumber":300,"author":{"gitId":"Wei-Xinn"},"content":"            step.setEventType(s.getPositionOption());","lastModifiedDate":"2022-03-13"},{"lineNumber":301,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":302,"author":{"gitId":"Wei-Xinn"},"content":"        return 1;","lastModifiedDate":"2022-03-14"},{"lineNumber":303,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":304,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":305,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":306,"author":{"gitId":"Wei-Xinn"},"content":"     * Process the given onboarding step, and translate it to a set of actions taken in this window","lastModifiedDate":"2022-03-13"},{"lineNumber":307,"author":{"gitId":"Wei-Xinn"},"content":"     * @param step the OnboardingStep to be processed","lastModifiedDate":"2022-03-13"},{"lineNumber":308,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":309,"author":{"gitId":"Wei-Xinn"},"content":"    private void processStep(OnboardingStep step) {","lastModifiedDate":"2022-03-13"},{"lineNumber":310,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":311,"author":{"gitId":"Wei-Xinn"},"content":"        if (storyManager.isAtlast()) {","lastModifiedDate":"2022-03-14"},{"lineNumber":312,"author":{"gitId":"Wei-Xinn"},"content":"            hide();","lastModifiedDate":"2022-03-14"},{"lineNumber":313,"author":{"gitId":"Wei-Xinn"},"content":"            return;","lastModifiedDate":"2022-03-15"},{"lineNumber":314,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":315,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":316,"author":{"gitId":"Wei-Xinn"},"content":"        if (step \u003d\u003d null) {","lastModifiedDate":"2022-03-13"},{"lineNumber":317,"author":{"gitId":"Wei-Xinn"},"content":"            return;","lastModifiedDate":"2022-03-13"},{"lineNumber":318,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":319,"author":{"gitId":"Wei-Xinn"},"content":"        String displayMessage \u003d step.getDisplayMessage();","lastModifiedDate":"2022-03-13"},{"lineNumber":320,"author":{"gitId":"Wei-Xinn"},"content":"        double messageHeight \u003d step.getMessageHeight();","lastModifiedDate":"2022-03-13"},{"lineNumber":321,"author":{"gitId":"Wei-Xinn"},"content":"        double messageWidth \u003d step.getMessageWidth();","lastModifiedDate":"2022-03-13"},{"lineNumber":322,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory.OverlayOption overlayOption \u003d step.getOverlayOption();","lastModifiedDate":"2022-03-15"},{"lineNumber":323,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory.HighlightOption highlightOption \u003d step.getHighlightOption();","lastModifiedDate":"2022-03-15"},{"lineNumber":324,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":325,"author":{"gitId":"Wei-Xinn"},"content":"        instructionLabel.setText(displayMessage);","lastModifiedDate":"2022-03-13"},{"lineNumber":326,"author":{"gitId":"Wei-Xinn"},"content":"        instructionLabel.setSize(messageHeight, messageWidth, stage.heightProperty(), stage.widthProperty());","lastModifiedDate":"2022-03-13"},{"lineNumber":327,"author":{"gitId":"Wei-Xinn"},"content":"        processOverlayOption(overlayOption);","lastModifiedDate":"2022-03-13"},{"lineNumber":328,"author":{"gitId":"Wei-Xinn"},"content":"        processHighlightOption(highlightOption);","lastModifiedDate":"2022-03-13"},{"lineNumber":329,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":330,"author":{"gitId":"Wei-Xinn"},"content":"        if (step.getCommandInstruction() !\u003d null) {","lastModifiedDate":"2022-03-15"},{"lineNumber":331,"author":{"gitId":"Wei-Xinn"},"content":"            String errorMessage \u003d step.getCommandInstruction().apply(model, commandBox);","lastModifiedDate":"2022-03-15"},{"lineNumber":332,"author":{"gitId":"Wei-Xinn"},"content":"            if (errorMessage !\u003d null) {","lastModifiedDate":"2022-03-15"},{"lineNumber":333,"author":{"gitId":"Wei-Xinn"},"content":"                instructionLabel.setText(errorMessage);","lastModifiedDate":"2022-03-15"},{"lineNumber":334,"author":{"gitId":"Wei-Xinn"},"content":"                return;","lastModifiedDate":"2022-03-14"},{"lineNumber":335,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-14"},{"lineNumber":336,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":337,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":338,"author":{"gitId":"Wei-Xinn"},"content":"        if (step.getLabelInstruction() !\u003d null) {","lastModifiedDate":"2022-03-15"},{"lineNumber":339,"author":{"gitId":"Wei-Xinn"},"content":"            instructionLabel.setText(step.getLabelInstruction().apply(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":340,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":341,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":342,"author":{"gitId":"Wei-Xinn"},"content":"        if (step.getCommand() !\u003d null) {","lastModifiedDate":"2022-03-13"},{"lineNumber":343,"author":{"gitId":"Wei-Xinn"},"content":"            if (enforceUserInput(step, step.isCommandCustom()) \u003d\u003d 0) {","lastModifiedDate":"2022-03-15"},{"lineNumber":344,"author":{"gitId":"Wei-Xinn"},"content":"                return;","lastModifiedDate":"2022-03-13"},{"lineNumber":345,"author":{"gitId":"Wei-Xinn"},"content":"            }","lastModifiedDate":"2022-03-13"},{"lineNumber":346,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":347,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":348,"author":{"gitId":"Wei-Xinn"},"content":"        storyManager.stepFront();","lastModifiedDate":"2022-03-13"},{"lineNumber":349,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":350,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"Wei-Xinn":350}},{"path":"src/main/java/seedu/contax/ui/onboarding/Overlay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.ui.onboarding;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.property.DoubleProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.property.ReadOnlyDoubleProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.beans.property.SimpleDoubleProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Pane;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.ui.UiPart;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"public class Overlay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"    private static final String FXML \u003d \"onboarding/Overlay.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    private Pane topOverlay;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"    @FXML","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"    private Pane bottomOverlay;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"    public enum ShowOverlay {","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        BOTH,","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"        TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"        BOTTOM,","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"    Overlay() {","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"        super(FXML);","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"     * Cast over the given bounds and dimensions","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"     * @param boundX DoubleProperty to bind layoutX to","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"     * @param boundY DoubleProperty to bind layoutY to","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height ReadOnlyDoubleProperty for height of window","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width ReadOnlyDoubleProperty for width o  window","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"    public void cover(DoubleProperty boundX, DoubleProperty boundY,","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"                      ReadOnlyDoubleProperty height, ReadOnlyDoubleProperty width) {","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"        showAll();","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.setStyle(\"-fx-background-color: rgb(0, 0, 0, 0.5)\");","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.setStyle(\"-fx-background-color: rgb(0, 0, 0, 0)\");","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.layoutXProperty().bind(boundX);","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.layoutYProperty().bind(boundY);","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.minHeightProperty().bind(height);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.minWidthProperty().bind(width);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.maxHeightProperty().bind(height);","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.maxWidthProperty().bind(width);","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"     * Show only the given region","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"     * @param boundX DoubleProperty to bind layoutX to","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"     * @param boundY DoubleProperty to bind layoutY to","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"     * @param height ReadOnlyDoubleProperty for height of window","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"     * @param width ReadOnlyDoubleProperty for width o  window","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"     * @param parentHeight ReadOnlyDoubleProperty for height of parent window","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"     * @param parentWidth ReadOnlyDoubleProperty for height of parent window","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"     * @param option overlay option","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"    public void showOnly(DoubleProperty boundX, DoubleProperty boundY,","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"                         ReadOnlyDoubleProperty height, ReadOnlyDoubleProperty width,","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"                         ReadOnlyDoubleProperty parentHeight, ReadOnlyDoubleProperty parentWidth,","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"                         ShowOverlay option) {","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"        switch (option) {","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"        case BOTH:","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"            showAll();","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"        case BOTTOM:","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"            hideAll();","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"            bottomOverlay.setVisible(true);","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"        case TOP:","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"            hideAll();","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"            topOverlay.setVisible(true);","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"        default:","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"            break;","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.setStyle(\"-fx-background-color: rgb(0, 0, 0, 0.5)\");","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.setStyle(\"-fx-background-color: rgb(0, 0, 0, 0.5)\");","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.layoutXProperty().bind(boundX);","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.layoutYProperty().bind(new SimpleDoubleProperty(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.minHeightProperty().bind(boundY);","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.minWidthProperty().bind(parentWidth);","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.maxHeightProperty().bind(boundY);","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.maxWidthProperty().bind(parentWidth);","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.layoutXProperty().bind(boundX);","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.layoutYProperty().bind(boundY.add(height));","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.minHeightProperty().bind(parentHeight.subtract(boundY.add(height)));","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.minWidthProperty().bind(parentWidth);","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.maxHeightProperty().bind(parentHeight.subtract(boundY.add(height)));","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.maxWidthProperty().bind(parentWidth);","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"     * Show all overlays","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"    private void showAll() {","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.setVisible(true);","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.setVisible(true);","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"     * Hide all overlays","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"    private void hideAll() {","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"        topOverlay.setVisible(false);","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"Wei-Xinn"},"content":"        bottomOverlay.setVisible(false);","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"Wei-Xinn":117}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"300\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"          \u003cInsets top\u003d\"6\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"          \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_big_light_label\" text\u003d\"\\$start date\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"          \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_big_light_label\" text\u003d\"\\$start time\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            \u003cInsets left\u003d\"8\" right\u003d\"8\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"          \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"to\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"-Infinity\" HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"          \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_big_light_label\" text\u003d\"\\$end date\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"          \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_big_light_label\" text\u003d\"\\$end time\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        \u003cAnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            \u003cInsets left\u003d\"32\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"          \u003cVBox alignment\u003d\"CENTER_LEFT\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            \u003cLabel fx:id\u003d\"withLabel\" styleClass\u003d\"cell_big_light_label\" text\u003d\"With\" /\u003e","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"            \u003cLabel fx:id\u003d\"personName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$person name\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            \u003cLabel fx:id\u003d\"personAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$person address\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        \u003c/AnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":59}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":".label-instruction {","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-background-color: rgba(0, 0, 0, 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-border-color: white;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-alignment:  center;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":".cell_big_light_label {","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"Wei-Xinn"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":326,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":359,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"sharpstorm":5,"Wei-Xinn":11,"-":352}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"            \u003cMenuItem fx:id\u003d\"onboardingMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleOnboarding\" text\u003d\"See Quick Start Guide\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        \u003cVBox fx:id\u003d\"contentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"          \u003cStackPane fx:id\u003d\"contentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"sharpstorm":2,"Wei-Xinn":1,"-":58}},{"path":"src/main/resources/view/TagListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50.0\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        \u003cLabel fx:id\u003d\"tagName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"\u003c!--      \u003crowConstraints\u003e--\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"\u003c!--         \u003cRowConstraints /\u003e--\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"\u003c!--      \u003c/rowConstraints\u003e--\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":38}},{"path":"src/main/resources/view/TagListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"  \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":8}},{"path":"src/main/resources/view/onboarding/OnboardingCommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"Wei-Xinn":9}},{"path":"src/main/resources/view/onboarding/OnboardingInstruction.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cLabel fx:id\u003d\"instruction\" wrapText\u003d\"true\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-instruction\" /\u003e","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":8}},{"path":"src/main/resources/view/onboarding/OnboardingPrompt.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Prompt\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cicons\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"    \u003cImage url\u003d\"@/images/info_icon.png\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cscene\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"    \u003cScene\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        \u003cURL value\u003d\"@../DarkTheme.css\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"         \u003cVBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"               \u003cStackPane prefHeight\u003d\"14.0\" prefWidth\u003d\"530.0\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"                     \u003cLabel fx:id\u003d\"displayMessage\" styleClass\u003d\"label-bright\" text\u003d\"Label\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"               \u003c/StackPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"            \u003cHBox fx:id\u003d\"helpMessageContainer\" alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #383838;\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"                     \u003cAnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003cHBox.margin\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"                           \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003c/HBox.margin\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"                      \u003cButton fx:id\u003d\"yesButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleYes\" styleClass\u003d\"button\" text\u003d\"Yes\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"                     \u003c/AnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"                     \u003cAnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"                           \u003cButton fx:id\u003d\"noButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleNo\" text\u003d\"No\" AnchorPane.leftAnchor\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"                     \u003c/AnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"              \u003copaqueInsets\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/opaqueInsets\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"            \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"         \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":58}},{"path":"src/main/resources/view/onboarding/OnboardingWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cicons\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"  \u003cscene\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"    \u003cScene\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"        \u003cURL value\u003d\"@../DarkTheme.css\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        \u003cURL value\u003d\"@../Extensions.css\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"         \u003cStackPane fx:id\u003d\"parentPane\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cMenuItem fx:id\u003d\"onboardingMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Onboarding\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/MenuBar\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"              \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"            \u003c/children\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"           \u003cStackPane fx:id\u003d\"labelPlaceholder\" managed\u003d\"false\"/\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"         \u003c/StackPane\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"Wei-Xinn":59}},{"path":"src/main/resources/view/onboarding/Overlay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"\u003cPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"      \u003cPane fx:id\u003d\"topOverlay\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"      \u003cPane fx:id\u003d\"bottomOverlay\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"\u003c/Pane\u003e","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"Wei-Xinn":11}},{"path":"src/test/java/seedu/contax/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"sharpstorm":1,"-":57}},{"path":"src/test/java/seedu/contax/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"sharpstorm":1,"-":26}},{"path":"src/test/java/seedu/contax/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":2,"-":133}},{"path":"src/test/java/seedu/contax/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.core.index;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"sharpstorm":2,"-":58}},{"path":"src/test/java/seedu/contax/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"sharpstorm":2,"-":34}},{"path":"src/test/java/seedu/contax/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"sharpstorm":3,"-":105}},{"path":"src/test/java/seedu/contax/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Config;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":4,"-":112}},{"path":"src/test/java/seedu/contax/commons/util/DateUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"public class DateUtilTest {","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public void parseDateTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.parseDate(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"32-10-2022\")); // Invalid Day","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"0-10-2022\")); // Invalid Day","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"ab-10-2022\")); // Invalid Day","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"20-13-2022\")); // Invalid Month","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"20-0-2022\")); // Invalid Month","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"20-ab-2022\")); // Invalid Month","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"20-10-abcd\")); // Invalid Year","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseDate(\"20-10-212\")); // Invalid Year","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDate.parse(\"2022-10-20\"), DateUtil.parseDate(\"20-10-2022\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDate.parse(\"1971-03-30\"), DateUtil.parseDate(\"30-03-1971\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public void parseTimeTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.parseTime(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"25:00\")); // Invalid Hour","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"ab:00\")); // Invalid Hour","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"-1:00\")); // Invalid Hour","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"12:61\")); // Invalid Minute","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"12:ba\")); // Invalid Minute","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Optional.empty(), DateUtil.parseTime(\"12:-1\")); // Invalid Minute","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalTime.parse(\"00:00:00\"), DateUtil.parseTime(\"00:00\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalTime.parse(\"23:59:00\"), DateUtil.parseTime(\"23:59\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalTime.parse(\"01:59:00\"), DateUtil.parseTime(\"01:59\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalTime.parse(\"12:01:00\"), DateUtil.parseTime(\"12:01\").get());","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void combineDateTimeTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        LocalDate refDate \u003d LocalDate.parse(\"2022-03-20\");","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        LocalTime refTime \u003d LocalTime.parse(\"12:34\");","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        LocalTime offsetTime \u003d LocalTime.parse(\"12:34:04\");","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.combineDateTime(null, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.combineDateTime(refDate, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.combineDateTime(null, refTime));","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2022-03-20T12:34:00\"), DateUtil.combineDateTime(refDate, refTime));","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(DateUtil.combineDateTime(refDate, offsetTime),","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.combineDateTime(refDate, refTime));","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public void updateDateTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baselineDateTime1 \u003d LocalDateTime.parse(\"2022-03-31T12:34:00\");","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baselineDateTime2 \u003d LocalDateTime.parse(\"2022-02-28T12:34:03\");","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        LocalDate refDate1 \u003d LocalDate.parse(\"2021-05-23\");","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        LocalDate refDate2 \u003d LocalDate.parse(\"2020-03-31\");","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateDate(null, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateDate(baselineDateTime1, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateDate(null, refDate1));","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2021-05-23T12:34:00\"),","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateDate(baselineDateTime1, refDate1));","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2021-05-23T12:34:03\"),","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateDate(baselineDateTime2, refDate1)); // Time is unaffected, regardless of value","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        // Test update order, since there is no 31 Feb and will cause an error","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2020-03-31T12:34:03\"),","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateDate(baselineDateTime2, refDate2));","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    public void updateTimeTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baselineDateTime1 \u003d LocalDateTime.parse(\"2022-03-31T12:34:00\");","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baselineDateTime2 \u003d LocalDateTime.parse(\"2022-02-28T12:34:00\");","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        LocalTime refTime1 \u003d LocalTime.parse(\"00:00:59\");","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        LocalTime refTime2 \u003d LocalTime.parse(\"23:59\");","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateTime(null, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateTime(baselineDateTime1, null));","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.updateTime(null, refTime1));","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2022-03-31T00:00:00\"),","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateTime(baselineDateTime1, refTime1));","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(LocalDateTime.parse(\"2022-02-28T23:59:00\"),","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateTime(baselineDateTime2, refTime2));","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(DateUtil.updateTime(baselineDateTime1, refTime1),","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.updateTime(baselineDateTime1, refTime2));","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    public void isBeforeOrEqualTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDateTime \u003d LocalDateTime.parse(\"2022-03-31T12:34:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime timeAfterDateTime \u003d LocalDateTime.parse(\"2022-03-31T12:35:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime dayAfterDateTime \u003d LocalDateTime.parse(\"2022-04-01T12:34:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isBeforeOrEqual(null, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isBeforeOrEqual(refDateTime, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isBeforeOrEqual(null, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isBeforeOrEqual(refDateTime, LocalDateTime.parse(\"2022-03-31T12:34:00\")));","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(DateUtil.isBeforeOrEqual(timeAfterDateTime, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isBeforeOrEqual(refDateTime, timeAfterDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(DateUtil.isBeforeOrEqual(dayAfterDateTime, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isBeforeOrEqual(refDateTime, dayAfterDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"    public void isAfterOrEqualTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDateTime \u003d LocalDateTime.parse(\"2022-03-31T12:34:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime timeAfterDateTime \u003d LocalDateTime.parse(\"2022-03-31T12:35:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime dayAfterDateTime \u003d LocalDateTime.parse(\"2022-04-01T12:34:00\");","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isAfterOrEqual(null, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isAfterOrEqual(refDateTime, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateUtil.isAfterOrEqual(null, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isAfterOrEqual(refDateTime, LocalDateTime.parse(\"2022-03-31T12:34:00\")));","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isAfterOrEqual(timeAfterDateTime, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(DateUtil.isAfterOrEqual(refDateTime, timeAfterDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(DateUtil.isAfterOrEqual(dayAfterDateTime, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(DateUtil.isAfterOrEqual(refDateTime, dayAfterDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":139}},{"path":"src/test/java/seedu/contax/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":2,"-":21}},{"path":"src/test/java/seedu/contax/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.SerializableTestClass;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TestUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":3,"-":42}},{"path":"src/test/java/seedu/contax/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.commons.util;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"sharpstorm":2,"-":141}},{"path":"src/test/java/seedu/contax/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.CommandResult;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ListCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonScheduleStorage;","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-03-05"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.storage.StorageManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        JsonScheduleStorage scheduleStorage \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"                new JsonScheduleStorage(temporaryFolder.resolve(\"schedule.json\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, scheduleStorage, userPrefsStorage);","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        JsonScheduleStorage scheduleStorage \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"                new JsonScheduleStorage(temporaryFolder.resolve(\"ioExceptionSchedule.json\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, scheduleStorage, userPrefsStorage);","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        // Setup LogicManager with JsonScheduleIoExceptionThrowingStub","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        scheduleStorage \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"                new JsonScheduleIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionSchedule.json\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        storage \u003d new StorageManager(addressBookStorage, scheduleStorage, userPrefsStorage);","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        // Execute add command","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        String addAppointmentCommand \u003d AddAppointmentCommand.COMMAND_WORD + APPOINTMENT_NAME_ALONE","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DATE + APPOINTMENT_TIME + APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(addAppointmentCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getAppointmentList().remove(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"    public void userPrefGetters_noInput_notNull() {","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(logic.getAddressBookFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(logic.getScheduleFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(logic.getGuiSettings());","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"    private static class JsonScheduleIoExceptionThrowingStub extends JsonScheduleStorage {","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"        private JsonScheduleIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"            super(filePath);","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"sharpstorm":80,"-":136}},{"path":"src/test/java/seedu/contax/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TypicalIndexes;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            -\u003e new AddAppointmentCommand(null, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment, null).execute(modelStub);","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    public void execute_appointmentWithPersonAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment, Index.fromZeroBased(0))","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"                .execute(modelStub);","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public void execute_overlappingAppointment_throwsCommandException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentToAdd \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(validAppointment.getStartDateTime().value.plusMinutes(1)).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addCommand \u003d new AddAppointmentCommand(appointmentToAdd, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        ModelStub modelStub \u003d new ModelStubWithAppointment(validAppointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(CommandException.class, AddAppointmentCommand.MESSAGE_OVERLAPPING_APPOINTMENT, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"            -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    public void execute_appointmentWithInvalidPersonIndex_throwsCommandException() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addCommand \u003d new AddAppointmentCommand(validAppointment,","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"                Index.fromZeroBased(100));","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"            -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        Appointment appt1 \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        Appointment appt2 \u003d new AppointmentBuilder(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addAppt1Command \u003d new AddAppointmentCommand(appt1, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addAppt2Command \u003d new AddAppointmentCommand(appt2, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addAppt3Command \u003d new AddAppointmentCommand(appt1,","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"                TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(addAppt1Command.equals(addAppt1Command));","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand addAppt1CommandCopy \u003d new AddAppointmentCommand(appt1, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(addAppt1Command.equals(addAppt1CommandCopy));","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(addAppt1Command.equals(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(addAppt1Command.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(addAppt1Command.equals(addAppt2Command));","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(addAppt1Command.equals(addAppt3Command));","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"KwanHW"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"KwanHW"},"content":"        public void addTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"KwanHW"},"content":"        public void deleteTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":212,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":213,"author":{"gitId":"KwanHW"},"content":"        public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":214,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":215,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":216,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":218,"author":{"gitId":"KwanHW"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":223,"author":{"gitId":"KwanHW"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":224,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":225,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":226,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"        public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":284,"author":{"gitId":"sharpstorm"},"content":"     * A Model stub that contains a single appointment.","lastModifiedDate":"2022-03-08"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":286,"author":{"gitId":"sharpstorm"},"content":"    private class ModelStubWithAppointment extends ModelStub {","lastModifiedDate":"2022-03-08"},{"lineNumber":287,"author":{"gitId":"sharpstorm"},"content":"        private final Appointment appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":288,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":289,"author":{"gitId":"sharpstorm"},"content":"        ModelStubWithAppointment(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":290,"author":{"gitId":"sharpstorm"},"content":"            requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"            this.appointment \u003d target;","lastModifiedDate":"2022-03-08"},{"lineNumber":292,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"            return FXCollections.observableArrayList(List.of(ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":299,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-08"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasOverlappingAppointment(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"            requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"            return target.isOverlapping(this.appointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"     * A Model stub that always accept the appointment being added.","lastModifiedDate":"2022-03-08"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"    private class ModelStubAcceptingAppointmentAdded extends ModelStub {","lastModifiedDate":"2022-03-08"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasOverlappingAppointment(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"            requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"            return appointmentsAdded.stream().anyMatch(x -\u003e x.isOverlapping(target));","lastModifiedDate":"2022-03-08"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"        public void addAppointment(Appointment target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"            requireNonNull(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"            appointmentsAdded.add(target);","lastModifiedDate":"2022-03-08"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":331,"author":{"gitId":"sharpstorm"},"content":"            return new Schedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":332,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":333,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":334,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":335,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":336,"author":{"gitId":"sharpstorm"},"content":"            return FXCollections.observableArrayList(List.of(ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":337,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":338,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":339,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":340,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-08"},{"lineNumber":341,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":342,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":343,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":344,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":345,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-08"},{"lineNumber":346,"author":{"gitId":"sharpstorm"},"content":"            return getTypicalAddressBook();","lastModifiedDate":"2022-03-08"},{"lineNumber":347,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":348,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":349,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":350,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":319,"KwanHW":31}},{"path":"src/test/java/seedu/contax/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"sharpstorm":12,"-":34}},{"path":"src/test/java/seedu/contax/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"KwanHW"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"KwanHW"},"content":"        public void addTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"        public void deleteTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-09"},{"lineNumber":166,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"KwanHW"},"content":"        public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"KwanHW"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":176,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":177,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":178,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":179,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"KwanHW"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":182,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":183,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-07"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2022-03-07"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-07"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":203,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":227,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"sharpstorm":65,"KwanHW":34,"-":184}},{"path":"src/test/java/seedu/contax/logic/commands/AddTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.COLLEAGUES;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TagBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"class AddTagCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    public void constructor_nullTag_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddTagCommand(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    public void execute_tagAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        ModelStubAcceptingTagAdded modelStub \u003d new ModelStubAcceptingTagAdded();","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        Tag validTag \u003d new TagBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        CommandResult commandResult \u003d new AddTagCommand(validTag).execute(modelStub);","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        assertEquals(String.format(AddTagCommand.MESSAGE_SUCCESS, validTag), commandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertEquals(Arrays.asList(validTag), modelStub.tagsAdded);","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    public void execute_duplicateTag_throwsCommandException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"        ModelStubWithTag modelStub \u003d new ModelStubWithTag(new TagBuilder().build());","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        Tag duplicate \u003d new TagBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        assertThrows(CommandException.class, () -\u003e new AddTagCommand(duplicate).execute(modelStub));","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        AddTagCommand addCommand \u003d new AddTagCommand(FRIENDS);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        AddTagCommand addCommand2 \u003d new AddTagCommand(COLLEAGUES);","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        assertTrue(addCommand.equals(addCommand));","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"        assertTrue(addCommand.equals(new AddTagCommand(FRIENDS)));","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"        assertFalse(addCommand.equals(addCommand2));","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"        assertFalse(addCommand.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"        assertFalse(addCommand.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"KwanHW"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"        public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"KwanHW"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"KwanHW"},"content":"        public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"KwanHW"},"content":"        public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"KwanHW"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"KwanHW"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"KwanHW"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"KwanHW"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"KwanHW"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"KwanHW"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"KwanHW"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":193,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"KwanHW"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"KwanHW"},"content":"        public void addTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":202,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":203,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":204,"author":{"gitId":"KwanHW"},"content":"        public void deleteTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-09"},{"lineNumber":205,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":206,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":207,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-13"},{"lineNumber":209,"author":{"gitId":"KwanHW"},"content":"        public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-13"},{"lineNumber":210,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":213,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"KwanHW"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":217,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"KwanHW"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"KwanHW"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"KwanHW"},"content":"    private class ModelStubWithTag extends ModelStub {","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"KwanHW"},"content":"        private final Tag tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"KwanHW"},"content":"        ModelStubWithTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"KwanHW"},"content":"            requireNonNull(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"KwanHW"},"content":"            this.tag \u003d tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"KwanHW"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"KwanHW"},"content":"            requireNonNull(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"KwanHW"},"content":"            return this.tag.isSameTag(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"KwanHW"},"content":"    private class ModelStubAcceptingTagAdded extends ModelStub {","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"KwanHW"},"content":"        final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"KwanHW"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"KwanHW"},"content":"            requireNonNull(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"KwanHW"},"content":"            return tagsAdded.stream().anyMatch(tag::isSameTag);","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"KwanHW"},"content":"        public void addTag(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"KwanHW"},"content":"            requireNonNull(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"KwanHW"},"content":"            tagsAdded.add(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":10,"KwanHW":244}},{"path":"src/test/java/seedu/contax/logic/commands/AppointmentsBetweenCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentsBetweenCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private static final LocalDateTime BASE_DATE_TIME \u003d APPOINTMENT_ALONE.getStartDateTime().value;","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private static final Appointment APPOINTMENT1 \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(BASE_DATE_TIME).withDuration(30).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    private static final Appointment APPOINTMENT2 \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(BASE_DATE_TIME.plusMinutes(30)).withDuration(30).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private static final Appointment APPOINTMENT3 \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(BASE_DATE_TIME.plusMinutes(60)).withDuration(60).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    private static final Appointment APPOINTMENT4 \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(BASE_DATE_TIME.plusMinutes(120)).withDuration(10).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    private Model model;","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    public void setup() {","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        model \u003d new ModelManager();","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(APPOINTMENT1);","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(APPOINTMENT2);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(APPOINTMENT3);","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(APPOINTMENT4);","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_nullRangeDates_throwsNullPointerException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDateTime \u003d LocalDateTime.parse(\"2022-12-12T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            -\u003e new AppointmentsBetweenCommand(null, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            -\u003e new AppointmentsBetweenCommand(refDateTime, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            -\u003e new AppointmentsBetweenCommand(null, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    public void execute_borderDates_filtersAppointmentList() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        ModelManager copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME, BASE_DATE_TIME).execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME, BASE_DATE_TIME.plusMinutes(29)).execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME, BASE_DATE_TIME.plusMinutes(30)).execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1, APPOINTMENT2), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(30), BASE_DATE_TIME.plusMinutes(60))","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1, APPOINTMENT2, APPOINTMENT3), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(31), BASE_DATE_TIME.plusMinutes(58))","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT2), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(30), BASE_DATE_TIME.plusMinutes(59))","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1, APPOINTMENT2), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(31), BASE_DATE_TIME.plusMinutes(60))","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT2, APPOINTMENT3), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public void execute_partialRanges_filtersAppointmentList() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        ModelManager copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.minusMinutes(1), BASE_DATE_TIME.plusMinutes(10))","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(125), BASE_DATE_TIME.plusMinutes(135))","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT4), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.plusMinutes(10), BASE_DATE_TIME.plusMinutes(20))","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1), copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        copyModel \u003d resetModel();","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        new AppointmentsBetweenCommand(BASE_DATE_TIME.minusMinutes(10), BASE_DATE_TIME.plusMinutes(150))","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"                .execute(copyModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(List.of(APPOINTMENT1, APPOINTMENT2, APPOINTMENT3, APPOINTMENT4),","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"                copyModel.getFilteredAppointmentList());","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDate1 \u003d LocalDateTime.parse(\"2022-12-23T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDate2 \u003d LocalDateTime.parse(\"2022-12-24T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime beforeRefDate1 \u003d LocalDateTime.parse(\"2022-12-22T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime afterRefDate2 \u003d LocalDateTime.parse(\"2022-12-25T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        AppointmentsBetweenCommand command1 \u003d new AppointmentsBetweenCommand(refDate1, refDate2);","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(command1.equals(command1));","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        AppointmentsBetweenCommand command1Copy \u003d new AppointmentsBetweenCommand(refDate1, refDate2);","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(command1.equals(command1Copy));","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(command1.equals(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(command1.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        // different start datetime -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(command1.equals(new AppointmentsBetweenCommand(beforeRefDate1, refDate2)));","lastModifiedDate":"2022-03-14"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        // different end datetime -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(command1.equals(new AppointmentsBetweenCommand(refDate1, afterRefDate2)));","lastModifiedDate":"2022-03-14"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"    private ModelManager resetModel() {","lastModifiedDate":"2022-03-14"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        return new ModelManager(new AddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":151}},{"path":"src/test/java/seedu/contax/logic/commands/BatchCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.ArgumentMultimap;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":" * Contains integration tests (interaction with the Model) and unit tests for BatchCommand.","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"public class BatchCommandTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"    public void equals() {","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_PHONE), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand2 \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_PHONE), \"321\");","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(expectedBatchCommand.equals(expectedBatchCommand));","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommandCopy \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_PHONE), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(expectedBatchCommand.equals(expectedBatchCommandCopy));","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(expectedBatchCommand.equals(1));","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(expectedBatchCommand.equals(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"        // different command -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(expectedBatchCommand.equals(expectedBatchCommand2));","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"    public void execute_rangeEditWithDifferentType_success() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        String sampleCommand \u003d \"range edit p/12345678 by/phone \u003d/9 \";","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/12345678\",","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_PHONE), \"94351253\");","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult \u003d expectedBatchCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(commandResult.getFeedbackToUser().equals(","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"                \"Edited Person: Alice Pauline; Phone: 12345678; \"","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"                        + \"Email: alice@example.com; Address: 123, Jurong West Ave 6, #08-111; Tags: [friends]\\n\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/12345678\",","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_ADDRESS), \"1234567890\");","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult2 \u003d expectedBatchCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(commandResult2.getFeedbackToUser().equals(\"batch: No result matching \\\"1234567890\\\"\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/12345678\",","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_EMAIL), \"1234567890\");","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult3 \u003d expectedBatchCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(commandResult3.getFeedbackToUser().equals(\"batch: No result matching \\\"1234567890\\\"\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/12345678\",","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_NAME), \"1234567890\");","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult4 \u003d expectedBatchCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(commandResult4.getFeedbackToUser().equals(\"batch: No result matching \\\"1234567890\\\"\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"HanJiyao"},"content":"    public void execute_parseAndCreateNewCommandInvalidValue_throwsCommandException() throws CommandException {","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"\",","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_PHONE), \"94351253\");","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"HanJiyao"},"content":"        assertThrows(CommandException.class, () -\u003e expectedBatchCommand.execute(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"HanJiyao"},"content":"    public void execute_inValidCommand_throwsCommandException() throws CommandException {","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"sample invalid\",","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"HanJiyao"},"content":"                        new SearchType(SearchType.TYPE_PHONE), \"94351253\");","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"HanJiyao"},"content":"        assertThrows(CommandException.class, () -\u003e expectedBatchCommand.execute(model));","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":96}},{"path":"src/test/java/seedu/contax/logic/commands/ChainCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"public class ChainCommandTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"    private Model model;","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"    public void execute_chainedList_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(new ChainCommand(List.of(new ListCommand())), model,","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"                new CommandResult(ListCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    public void execute_chainedEditThenList_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        List\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        commandList.add(editCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        commandList.add(new ListCommand());","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(new ChainCommand(commandList),","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"                model, new CommandResult(ListCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":56,"sharpstorm":3}},{"path":"src/test/java/seedu/contax/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"sharpstorm":10,"-":23}},{"path":"src/test/java/seedu/contax/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public void constructorTests() {","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(GuiListContentType.UNCHANGED, commandResult.getUiContentType());","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        commandResult \u003d new CommandResult(\"feedback\", GuiListContentType.PERSON);","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(GuiListContentType.PERSON, commandResult.getUiContentType());","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        commandResult \u003d new CommandResult(\"feedback\", true, true);","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(commandResult.isExit());","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(commandResult.isShowHelp());","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", GuiListContentType.UNCHANGED,","lastModifiedDate":"2022-03-12"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                false, false)));","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        // different content type -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", GuiListContentType.PERSON,","lastModifiedDate":"2022-03-12"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                false, false)));","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", GuiListContentType.UNCHANGED,","lastModifiedDate":"2022-03-12"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                true, false)));","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", GuiListContentType.UNCHANGED,","lastModifiedDate":"2022-03-12"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"                false, true)));","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        // different content type -\u003e returns different hashcode","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", GuiListContentType.PERSON,","lastModifiedDate":"2022-03-12"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"                false, false).hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", GuiListContentType.UNCHANGED,","lastModifiedDate":"2022-03-12"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"                true, false).hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", GuiListContentType.UNCHANGED,","lastModifiedDate":"2022-03-12"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"                false, true).hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"sharpstorm":34,"-":48}},{"path":"src/test/java/seedu/contax/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_FILE;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String VALID_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/ValidContaXFormat.csv\";","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String INVALID_BAD_EXTENSION_CSV_FILEPATH \u003d \"wrongFile.txt\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String INVALID_NO_EXTENSION_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/ValidContaXFormat\";","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_APPOINTMENT_NAME_AMELIA \u003d \"Meeting With Amelia\";","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_APPOINTMENT_NAME_ALONE \u003d \"Do some work alone\";","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_APPOINTMENT_NAME_EXTRA \u003d \"Some extra meeting\";","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_DATE \u003d \"07-10-2022\";","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_DATE2 \u003d \"05-10-2022\";","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_TIME \u003d \"22:50\";","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_TIME2 \u003d \"21:50\";","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_APPOINTMENT_DURATION_HOUR \u003d \"60\";","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    public static final String VALID_APPOINTMENT_DURATION_MINUTE \u003d \"1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_APPOINTMENT_NAME \u003d \"Meeting??\";","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_DATE \u003d \"32-10-2022\";","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_TIME \u003d \"25:30\";","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_APPOINTMENT_DURATION \u003d \"-1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_NAME_AMELIA \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_AMELIA;","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_NAME_ALONE \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_DATE \u003d \" \" + PREFIX_DATE + VALID_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_DATE2 \u003d \" \" + PREFIX_DATE + VALID_DATE2;","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_TIME \u003d \" \" + PREFIX_TIME + VALID_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_TIME2 \u003d \" \" + PREFIX_TIME + VALID_TIME2;","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_DURATION \u003d \" \" + PREFIX_DURATION + VALID_APPOINTMENT_DURATION_HOUR;","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_DURATION2 \u003d \" \" + PREFIX_DURATION","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"            + VALID_APPOINTMENT_DURATION_MINUTE;","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_FIRST_PERSON \u003d \" \" + PREFIX_PERSON + \"1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_SECOND_PERSON \u003d \" \" + PREFIX_PERSON + \"2\";","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public static final String APPOINTMENT_REMOVE_PERSON \u003d \" \" + PREFIX_PERSON + \"none\";","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_APPOINTMENT_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_APPOINTMENT_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + INVALID_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + INVALID_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_APPOINTMENT_DURATION_DESC \u003d \" \" + PREFIX_DURATION","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"            + INVALID_APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    public static final String INVALID_APPOINTMENT_PERSON \u003d \" \" + PREFIX_PERSON + \"-1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_VALID_CSV_FILEPATH \u003d \" \" + PREFIX_FILE + VALID_CSV_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_INVALID_BAD_EXTENSION_FILEPATH \u003d \" \" + PREFIX_FILE","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"            + INVALID_BAD_EXTENSION_CSV_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_INVALID_NO_EXTENSION_FILEPATH \u003d \" \" + PREFIX_FILE","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"            + INVALID_NO_EXTENSION_CSV_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NAMEPOSITION \u003d \" \" + PREFIX_NAME + \"1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NAMEPOSITION_CLASH \u003d \" \" + PREFIX_NAME + \"2\";","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_PHONEPOSITION \u003d \" \" + PREFIX_PHONE + \"2\";","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_PHONEPOSITION_CLASH \u003d \" \" + PREFIX_PHONE + \"1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_EMAILPOSITION \u003d \" \" + PREFIX_EMAIL + \"3\";","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_EMAILPOSITION_CLASH \u003d \" \" + PREFIX_EMAIL + \"1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_ADDRESSPOSITION \u003d \" \" + PREFIX_ADDRESS + \"4\";","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_ADDRESSPOSITION_CLASH \u003d \" \" + PREFIX_ADDRESS + \"1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_TAGPOSITION \u003d \" \" + PREFIX_TAG + \"5\";","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_TAGPOSITION_CLASH \u003d \" \" + PREFIX_TAG + \"1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_INVALID_NAMEPOSITION \u003d \" \" + PREFIX_NAME + \"text\";","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_INVALID_PHONEPOSITION \u003d \" \" + PREFIX_PHONE + \"text\";","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_INVALID_EMAILPOSITION \u003d \" \" + PREFIX_EMAIL + \"text\";","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_INVALID_ADDRESSPOSITION \u003d \" \" + PREFIX_ADDRESS + \"text\";","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_INVALID_TAGPOSITION \u003d \" \" + PREFIX_TAG + \"text\";","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NEGATIVE_NAMEPOSITION \u003d \" \" + PREFIX_NAME + \"-1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NEGATIVE_PHONEPOSITION \u003d \" \" + PREFIX_PHONE + \"-1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NEGATIVE_EMAILPOSITION \u003d \" \" + PREFIX_EMAIL + \"-1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NEGATIVE_ADDRESSPOSITION \u003d \" \" + PREFIX_ADDRESS + \"-1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String COMMAND_CSV_NEGATIVE_TAGPOSITION \u003d \" \" + PREFIX_TAG + \"-1\";","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"sharpstorm":53,"dandaandaaaaaan":33,"-":114}},{"path":"src/test/java/seedu/contax/logic/commands/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":" * {@code DeleteAppointmentCommand}.","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), getTypicalSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(0);","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteCommand \u003d new DeleteAppointmentCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                appointmentToDelete);","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        Predicate\u003cAppointment\u003e testFilter \u003d appointment -\u003e appointment.equals(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(testFilter);","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(0);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteCommand \u003d new DeleteAppointmentCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                appointmentToDelete);","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.updateFilteredAppointmentList(testFilter);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(appointment -\u003e !appointment.equals(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteFirstCommand \u003d new DeleteAppointmentCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteSecondCommand \u003d new DeleteAppointmentCommand(Index.fromZeroBased(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        DeleteAppointmentCommand deleteFirstCommandCopy \u003d new DeleteAppointmentCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":101}},{"path":"src/test/java/seedu/contax/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"sharpstorm":17,"-":93}},{"path":"src/test/java/seedu/contax/logic/commands/DeleteTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalTags;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalTags.getTagOnlyAddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteTagCommand}.","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"public class DeleteTagCommandTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTagList().size() + 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand \u003d new DeleteTagCommand(outOfBoundIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    public void execute_deleteTagNoPersons_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        Model noPersonsModel \u003d new ModelManager(getTagOnlyAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        Tag tagToDelete \u003d noPersonsModel.getAddressBook().getTagList().get(0);","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        Index deleteFirst \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand \u003d new DeleteTagCommand(deleteFirst);","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        Model expectedModel \u003d new ModelManager(noPersonsModel.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        expectedModel.deleteTag(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(deleteCommand, noPersonsModel, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public void execute_deleteTagNoPersonsWithTag_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        Tag tagToDelete \u003d getTypicalTags().get(2);","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand \u003d new DeleteTagCommand(Index.fromZeroBased(2));","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        expectedModel.deleteTag(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"    // Checks for cascading deletion","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    public void execute_deleteTagPersonsWithTag_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"        Tag tagToDelete \u003d getTypicalTags().get(0);","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand \u003d new DeleteTagCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        expectedModel.deleteTag(tagToDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand \u003d new DeleteTagCommand(Index.fromZeroBased(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand deleteCommand2 \u003d new DeleteTagCommand(Index.fromZeroBased(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        assertTrue(deleteCommand.equals(deleteCommand));","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        assertTrue(deleteCommand.equals(new DeleteTagCommand(Index.fromZeroBased(0))));","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        assertFalse(deleteCommand.equals(deleteCommand2));","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"        assertFalse(deleteCommand.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"        assertFalse(deleteCommand.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":86}},{"path":"src/test/java/seedu/contax/logic/commands/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_EXTRA;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_EXTRA;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.DateInputUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditAppointmentCommand.","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), getTypicalSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void execute_allFieldsExceptPersonSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_EXTRA).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment)","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(null).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(Index.fromOneBased(1), descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                editedAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(), new Schedule(model.getSchedule()),","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    public void execute_allFieldsWithPersonSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_EXTRA)","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(getTypicalAddressBook().getPersonList().get(1)).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment)","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(INDEX_SECOND_PERSON).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(Index.fromOneBased(1), descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"                editedAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Schedule(model.getSchedule()),","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    public void execute_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        Index indexLastPosition \u003d Index.fromOneBased(model.getFilteredAppointmentList().size());","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        Appointment lastAppointment \u003d model.getFilteredAppointmentList().get(indexLastPosition.getZeroBased());","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(lastAppointment)","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_EXTRA).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_EXTRA).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(indexLastPosition, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"                editedAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(), new Schedule(model.getSchedule()),","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.setAppointment(lastAppointment, editedAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"    public void execute_noFieldSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"                new EditAppointmentDescriptor());","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        Appointment targetAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_NOT_EDITED, targetAppointment);","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(), new Schedule(model.getSchedule()),","lastModifiedDate":"2022-03-13"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    public void execute_overlappingAppointment_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-13"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        LocalTime modifiedOverlappingTime \u003d firstAppointment.getStartDateTime().value.toLocalTime()","lastModifiedDate":"2022-03-13"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"                .minusMinutes(1);","lastModifiedDate":"2022-03-13"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(firstAppointment)","lastModifiedDate":"2022-03-13"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(DateInputUtil.formatTimeToInputString(modifiedOverlappingTime))","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"                .build();","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(Index.fromOneBased(2), descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(editCommand, model, EditAppointmentCommand.MESSAGE_OVERLAPPING_APPOINTMENT);","lastModifiedDate":"2022-03-13"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"    public void execute_overlappingAppointmentFilteredList_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        model.addAppointment(APPOINTMENT_EXTRA);","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        Predicate\u003cAppointment\u003e testPredicate \u003d appointment -\u003e !appointment.equals(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(testPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        LocalTime modifiedOverlappingTime \u003d firstAppointment.getStartDateTime().value.toLocalTime()","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"                .minusMinutes(1);","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(firstAppointment)","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(DateInputUtil.formatTimeToInputString(modifiedOverlappingTime))","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"                .build();","lastModifiedDate":"2022-03-14"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(Index.fromOneBased(2), descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(editCommand, model, EditAppointmentCommand.MESSAGE_OVERLAPPING_APPOINTMENT);","lastModifiedDate":"2022-03-14"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    public void execute_invalidAppointmentIndex_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"    public void execute_invalidAppointmentIndexFilteredList_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        Predicate\u003cAppointment\u003e testPredicate \u003d appointment -\u003e !appointment.equals(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-14"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(testPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-14"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"    public void execute_invalidPersonIndex_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        Index validAppointmentIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"        Index outOfBoundsPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-03-13"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(outOfBoundsPersonIndex).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand editCommand \u003d new EditAppointmentCommand(validAppointmentIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-13"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor refDescriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor differentDescriptor \u003d new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Name\").build();","lastModifiedDate":"2022-03-13"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand refCommand \u003d new EditAppointmentCommand(Index.fromOneBased(1), refDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(refDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand commandWithSameValues \u003d","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"                new EditAppointmentCommand(Index.fromOneBased(1), copyDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refCommand.equals(commandWithSameValues));","lastModifiedDate":"2022-03-13"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-13"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refCommand.equals(refCommand));","lastModifiedDate":"2022-03-13"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-13"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refCommand.equals(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-13"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refCommand.equals(new ClearCommand()));","lastModifiedDate":"2022-03-13"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-03-13"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refCommand.equals(new EditAppointmentCommand(Index.fromOneBased(2), refDescriptor)));","lastModifiedDate":"2022-03-13"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2022-03-13"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refCommand.equals(new EditAppointmentCommand(Index.fromOneBased(1), differentDescriptor)));","lastModifiedDate":"2022-03-13"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"    public void editAppointmentDescriptorEqualsTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor refDescriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(refDescriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor.equals(copyDescriptor));","lastModifiedDate":"2022-03-13"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor.equals(refDescriptor));","lastModifiedDate":"2022-03-13"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(1));","lastModifiedDate":"2022-03-13"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Name\").build()));","lastModifiedDate":"2022-03-13"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"                .withStartDate(\"12-02-2000\").build()));","lastModifiedDate":"2022-03-13"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(\"05:43\").build()));","lastModifiedDate":"2022-03-13"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(5).build()));","lastModifiedDate":"2022-03-13"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.equals(new EditAppointmentDescriptorBuilder(refDescriptor)","lastModifiedDate":"2022-03-13"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(Index.fromOneBased(20)).build()));","lastModifiedDate":"2022-03-13"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"    public void editAppointmentDescriptorPersonModifiedTest() {","lastModifiedDate":"2022-03-13"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor refDescriptor \u003d new EditAppointmentDescriptorBuilder().build();","lastModifiedDate":"2022-03-13"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor refDescriptor2 \u003d new EditAppointmentDescriptorBuilder(refDescriptor).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor.isPersonModified());","lastModifiedDate":"2022-03-13"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refDescriptor2.isPersonModified());","lastModifiedDate":"2022-03-13"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"        refDescriptor.setPersonIndex(Index.fromOneBased(2));","lastModifiedDate":"2022-03-13"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"        refDescriptor2.setPersonIndex(null);","lastModifiedDate":"2022-03-13"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor.isPersonModified());","lastModifiedDate":"2022-03-13"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor2.isPersonModified());","lastModifiedDate":"2022-03-13"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor.isAnyFieldEdited());","lastModifiedDate":"2022-03-13"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refDescriptor2.isAnyFieldEdited());","lastModifiedDate":"2022-03-13"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":249}},{"path":"src/test/java/seedu/contax/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new Schedule(),","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"sharpstorm":32,"-":146}},{"path":"src/test/java/seedu/contax/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"sharpstorm":10,"-":48}},{"path":"src/test/java/seedu/contax/logic/commands/EditTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.COLLEAGUES;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand.EditTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.EditTagDescriptorBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TagBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"public class EditTagCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    public void execute_uniqueTagChange_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        Tag editedTag \u003d new TagBuilder().withName(\"best friends\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder(editedTag).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d new EditTagCommand(Index.fromOneBased(1), descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_EDIT_TAG_SUCCESS, editedTag);","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new Schedule(),","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"                new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        expectedModel.setTag(FRIENDS, editedTag);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    public void execute_sameTagChange_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder(FRIENDS).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d new EditTagCommand(Index.fromOneBased(1), descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        assertCommandFailure(command, model, EditTagCommand.MESSAGE_TAG_EXISTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"    public void execute_newTagExists_throwsCommandException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder(COLLEAGUES).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d new EditTagCommand(Index.fromOneBased(1), descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        assertCommandFailure(command, model, EditTagCommand.MESSAGE_TAG_EXISTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder().withName(\"does not matter\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        Index index \u003d Index.fromOneBased(5);","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d new EditTagCommand(index, descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder().withName(\"friends\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor2 \u003d new EditTagDescriptorBuilder().withName(\"enemies\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        Index first \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        Index second \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d new EditTagCommand(first, descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command2 \u003d new EditTagCommand(second, descriptor2);","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command3 \u003d new EditTagCommand(first, descriptor2);","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command4 \u003d new EditTagCommand(second, descriptor);","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"        assertTrue(command.equals(command));","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"        assertTrue(command.equals(new EditTagCommand(first, descriptor)));","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"        // Different index and descriptors","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(command2));","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        // Different descriptors","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(command3));","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"        // Different index","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(command4));","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(descriptor));","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"        assertFalse(command.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":99}},{"path":"src/test/java/seedu/contax/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"sharpstorm":5,"-":15}},{"path":"src/test/java/seedu/contax/logic/commands/ExportCsvCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ExportCsvCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_NAME \u003d \"Person 1\";","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_EMAIL \u003d \"example1@example.com\";","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_ADDRESS \u003d \"Example address 1\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_NAME \u003d \"Person 2\";","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_EMAIL \u003d \"example2@example.com\";","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_ADDRESS \u003d \"Example address 2\";","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_FILEPATH \u003d \"./ValidAddressBook.csv\";","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    @TempDir","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    Path testFolder;","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_validPersonsInAddressBook_exportSuccessful() {","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build model with Person 1 and 2","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        String testFilePath \u003d testFolder.resolve(VALID_FILEPATH).toAbsolutePath().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ExportCsvCommand(testFilePath), model,","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"                new CommandResult(ExportCsvCommand.MESSAGE_SUCCESS), expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_noPersonsInAddressBook_exportSuccessful() {","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        String testFilePath \u003d testFolder.resolve(VALID_FILEPATH).toAbsolutePath().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ExportCsvCommand(testFilePath), model,","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"                new CommandResult(ExportCsvCommand.MESSAGE_SUCCESS), expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":13,"dandaandaaaaaan":48}},{"path":"src/test/java/seedu/contax/logic/commands/FindByTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.TagNameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":" * Contains integration tests (interaction with the Model) for {@code FindByTagCommand}.","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"public class FindByTagCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    public void execute_validName_tagFound() {","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3),","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"        // Complete keyword","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate friendsPredicate \u003d new TagNameContainsKeywordsPredicate(\"friends\");","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand command \u003d new FindByTagCommand(friendsPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        expectedModel.updateFilteredPersonList(friendsPredicate);","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertEquals(List.of(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        // Partial keyword","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate friendsPartialPredicate \u003d new TagNameContainsKeywordsPredicate(\"fri\");","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand command2 \u003d new FindByTagCommand(friendsPartialPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        expectedModel.updateFilteredPersonList(friendsPredicate);","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(command2, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"        assertEquals(List.of(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    public void execute_validName_noTagFound() {","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0),","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(\"bosses\");","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand command \u003d new FindByTagCommand(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"        assertEquals(List.of(), model.getFilteredPersonList());","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate firstPredicate \u003d new TagNameContainsKeywordsPredicate(\"first\");","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate secondPredicate \u003d new TagNameContainsKeywordsPredicate(\"second\");","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand firstCommand \u003d new FindByTagCommand(firstPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand secondCommand \u003d new FindByTagCommand(secondPredicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstCommand.equals(firstCommand));","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstCommand.equals(new FindByTagCommand(firstPredicate)));","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstCommand.equals(secondCommand));","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstCommand.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstCommand.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":78}},{"path":"src/test/java/seedu/contax/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.AddressContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.EmailContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.PhoneContainsKeywordsPredicate;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"    public void phone_equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"12341234\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"23452345\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"HanJiyao"},"content":"        // different keyword -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"HanJiyao"},"content":"    public void email_equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"HanJiyao"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"email@1\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"HanJiyao"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"email@2\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"HanJiyao"},"content":"        // different keyword -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"HanJiyao"},"content":"    public void address_equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"address1\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"address2\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"HanJiyao"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"HanJiyao"},"content":"        // different keyword -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0),","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":154,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"HanJiyao"},"content":"    public void execute_zeroKeywords_noPersonFoundPhone() {","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0),","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":158,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d preparePhonePredicate(\" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"HanJiyao"},"content":"    public void execute_zeroKeywords_noPersonFoundEmail() {","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0),","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":169,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate predicate \u003d prepareEmailPredicate(\" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"HanJiyao"},"content":"    public void execute_zeroKeywords_noPersonFoundAddress() {","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0),","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":180,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(\" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3),","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":198,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"HanJiyao"},"content":"    public void execute_multipleKeywords_multiplePersonsFoundPhone() {","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3),","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":202,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d preparePhonePredicate(\"95352563 9482224 9482427\");","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"HanJiyao"},"content":"    public void execute_multipleKeywords_multiplePersonsFoundEmail() {","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3),","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":213,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate predicate \u003d prepareEmailPredicate(","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"HanJiyao"},"content":"                \"heinz@example.com werner@example.com lydia@example.com\");","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":217,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":218,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":219,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"HanJiyao"},"content":"    public void execute_multipleKeywords_multiplePersonsFoundAddress() {","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"HanJiyao"},"content":"        CommandResult expectedResult \u003d new CommandResult(String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2),","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON);","lastModifiedDate":"2022-03-12"},{"lineNumber":225,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate predicate \u003d prepareAddressPredicate(","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"HanJiyao"},"content":"                \"wall michegan\");","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"HanJiyao"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"HanJiyao"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(command, model, expectedResult, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(Arrays.asList(CARL, ELLE), model.getFilteredPersonList());","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":239,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"HanJiyao"},"content":"     * Parses {@code userInput} into a {@code PhoneContainsKeywordsPredicate}.","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"HanJiyao"},"content":"    private PhoneContainsKeywordsPredicate preparePhonePredicate(String userInput) {","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"HanJiyao"},"content":"        return new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"HanJiyao"},"content":"     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}.","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"HanJiyao"},"content":"    private EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"HanJiyao"},"content":"        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"HanJiyao"},"content":"     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}.","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"HanJiyao"},"content":"    private AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"HanJiyao"},"content":"        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"HanJiyao":167,"sharpstorm":27,"-":66}},{"path":"src/test/java/seedu/contax/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"sharpstorm":5,"-":15}},{"path":"src/test/java/seedu/contax/logic/commands/ImportCsvCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.ImportCsvObjectBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ImportCsvCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_NAME \u003d \"Person 1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_EMAIL \u003d \"example1@example.com\";","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_ADDRESS \u003d \"Example address 1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_NAME \u003d \"Person 2\";","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_EMAIL \u003d \"example2@example.com\";","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_ADDRESS \u003d \"Example address 2\";","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON5_NAME \u003d \"Person 5\";","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON5_PHONE \u003d \"+659111111\";","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON5_EMAIL \u003d \"example5@example.com\";","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON5_ADDRESS \u003d \"Example address 5\";","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void constructor_nullImportCsv_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ImportCsvCommand(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_validPersonsInFile_addSucessful() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Valid CSV file, adds successfully to list","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile validCsvFormat \u003d new ImportCsvObjectBuilder().build();","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(validCsvFormat);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build expecting model with Person 1 and 2","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, model, ImportCsvCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_someBadFormatPersonsInFile_badFormatSkipped() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        //CSV contains Person 3 and Person 4 with invalid params, these two are skipped","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile skipLinesCsvFile \u003d new ImportCsvObjectBuilder(ImportCsvObjectBuilder.SKIP_CSV_FILEPATH).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(skipLinesCsvFile);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build expecting model with Person 1, 2 and 5","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder5 \u003d new PersonBuilder().withName(PERSON5_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON5_PHONE).withEmail(PERSON5_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON5_ADDRESS).withTags(\"tag2\", \"tag3\");","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder5.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, model, String.format(\"%s\\n%s\", ImportCsvCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"                String.format(ImportCsvCommand.MESSAGE_SKIPPED_LINES, \"3, 4\")), expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_duplicatePersonsImported_duplicatesSkipped() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        //build a model with the person 1 already inside, then try importing.","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"        //result should be only person 2 imported","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Use csv file with valid Person 1 and Person 2","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile duplicatePersonCsvFile \u003d new ImportCsvObjectBuilder().build();","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(duplicatePersonCsvFile);","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build initial model with person 1 inside","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build expecting model with person 1 and 2","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, model, String.format(\"%s\\n%s\", ImportCsvCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"                String.format(ImportCsvCommand.MESSAGE_SKIPPED_LINES, \"1\")), expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_emptyFile_nothingImportedButSuccess() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile emptyCsvFile \u003d new ImportCsvObjectBuilder(ImportCsvObjectBuilder.EMPTY_CSV_FILEPATH).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(emptyCsvFile);","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, model, ImportCsvCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_invalidFile_errorMessage() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile invalidCsvFile \u003d new ImportCsvObjectBuilder(ImportCsvObjectBuilder.INVALID_FILEPATH).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(invalidCsvFile);","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandFailure(importCsvCommand, model, String.format(ImportCsvCommand.MESSAGE_NO_FILE_FOUND,","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"                invalidCsvFile.getFilePath()));","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void execute_customColumnsSpecified_success() throws Exception {","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile specifiedColumnsCsvFile \u003d new ImportCsvObjectBuilder(","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"dandaandaaaaaan"},"content":"                ImportCsvObjectBuilder.CUSTOM_COLUMNS_CSV_FILEPATH,","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5, 6).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(specifiedColumnsCsvFile);","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build expecting model with Person 1 and 2","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"dandaandaaaaaan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"dandaandaaaaaan"},"content":"        expectedModel.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, model, ImportCsvCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":151,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile csvFile1 \u003d new ImportCsvObjectBuilder().build();","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile csvFile2 \u003d new ImportCsvObjectBuilder(ImportCsvObjectBuilder.SKIP_CSV_FILEPATH).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile csvFile3 \u003d new ImportCsvObjectBuilder(ImportCsvObjectBuilder.SKIP_CSV_FILEPATH, 2,","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"dandaandaaaaaan"},"content":"                3, 4, 5, 6).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand1 \u003d new ImportCsvCommand(csvFile1);","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand2 \u003d new ImportCsvCommand(csvFile2);","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand3 \u003d new ImportCsvCommand(csvFile3);","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":161,"author":{"gitId":"dandaandaaaaaan"},"content":"        //same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":162,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(importCsvCommand1.equals(importCsvCommand1));","lastModifiedDate":"2022-03-09"},{"lineNumber":163,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"dandaandaaaaaan"},"content":"        //same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand duplicateOfCommand1 \u003d new ImportCsvCommand(csvFile1);","lastModifiedDate":"2022-03-09"},{"lineNumber":166,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(importCsvCommand1.equals(duplicateOfCommand1));","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"dandaandaaaaaan"},"content":"        //different types -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(importCsvCommand1.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"dandaandaaaaaan"},"content":"        //null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(importCsvCommand1.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"dandaandaaaaaan"},"content":"        //different file opened -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(importCsvCommand1.equals(importCsvCommand2));","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"dandaandaaaaaan"},"content":"        //same file but different positions -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(importCsvCommand2.equals(importCsvCommand3));","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dandaandaaaaaan":180}},{"path":"src/test/java/seedu/contax/logic/commands/ListAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"public class ListAppointmentCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        model \u003d new ModelManager(new AddressBook(), getTypicalSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(), model.getSchedule(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public void execute_unfilteredList_listsAllAppointments() {","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ListAppointmentCommand(), model, new CommandResult(","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"                ListAppointmentCommand.MESSAGE_SUCCESS, GuiListContentType.APPOINTMENT), expectedModel);","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    public void execute_filteredList_resetFilterListsAllAppointments() {","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        Predicate\u003cAppointment\u003e testFilter \u003d appointment -\u003e appointment.equals(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        model.updateFilteredAppointmentList(testFilter);","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ListAppointmentCommand(), model, new CommandResult(","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"                ListAppointmentCommand.MESSAGE_SUCCESS, GuiListContentType.APPOINTMENT), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":46}},{"path":"src/test/java/seedu/contax/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ListCommand(), model, new CommandResult(ListCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertCommandSuccess(new ListCommand(), model, new CommandResult(ListCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.PERSON), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"sharpstorm":16,"-":27}},{"path":"src/test/java/seedu/contax/logic/commands/ListTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiListContentType;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":" * Contains integration tests (interaction with Model) and units tests for ListTagCommand","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"public class ListTagCommandTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"    private Model model;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    public void execute_valid_listAllTags() {","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        assertCommandSuccess(new ListTagCommand(), model, new CommandResult(ListTagCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                GuiListContentType.TAG), expectedModel);","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"sharpstorm":2,"KwanHW":31}},{"path":"src/test/java/seedu/contax/logic/commands/RangeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.commands;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.ArgumentMultimap;","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.parser.Prefix;","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RangeCommand.","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"public class RangeCommandTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    public void equals() {","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"        String sampleCommand \u003d \"range edit from/1 to/3 p/12345678\";","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3), sampleCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommand2 \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3), \"sampleCommand\");","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(rangeCommand.equals(rangeCommand));","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommandCopy \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3), sampleCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(rangeCommand.equals(rangeCommandCopy));","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(rangeCommand.equals(1));","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(rangeCommand.equals(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(rangeCommand.equals(rangeCommand2));","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"    public void execute_personAcceptedByModel_rangeEditSuccessful() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        RangeCommandTest.ModelStubRanged modelStub \u003d new RangeCommandTest.ModelStubRanged();","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        String sampleCommand \u003d \"range edit p/12345678 from/1 to/1 \";","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommandCopy \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3), sampleCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult \u003d new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3),","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"HanJiyao"},"content":"                sampleCommand).execute(modelStub);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"HanJiyao"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"HanJiyao"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(rangeCommandCopy, model, commandResult, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"HanJiyao"},"content":"    public void execute_personAcceptedByModel_rangeDeleteSuccessful() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"HanJiyao"},"content":"        RangeCommandTest.ModelStubRanged modelStub \u003d new RangeCommandTest.ModelStubRanged();","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"HanJiyao"},"content":"        String sampleCommand \u003d \"range delete from/1 to/1 \";","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"\"), \"delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommandCopy \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3), sampleCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"HanJiyao"},"content":"        CommandResult commandResult \u003d new RangeCommand(Index.fromZeroBased(1), Index.fromZeroBased(3),","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"HanJiyao"},"content":"                sampleCommand).execute(modelStub);","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"HanJiyao"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"HanJiyao"},"content":"                new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"HanJiyao"},"content":"        assertCommandSuccess(rangeCommandCopy, model, commandResult, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"HanJiyao"},"content":"    public void execute_personAcceptedByModel_invalidIndex() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"HanJiyao"},"content":"        RangeCommandTest.ModelStubRanged modelStub \u003d new RangeCommandTest.ModelStubRanged();","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"HanJiyao"},"content":"        String sampleCommand \u003d \"delete from/2 to/1\";","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"\"), \"delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/from\"), \"2\");","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/to\"), \"1\");","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand rangeCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(Index.fromZeroBased(2), Index.fromZeroBased(1), sampleCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"HanJiyao"},"content":"        assertCommandFailure(rangeCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"HanJiyao"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"HanJiyao"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"HanJiyao"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"HanJiyao"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"HanJiyao"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":127,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"HanJiyao"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"HanJiyao"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":137,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":138,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"HanJiyao"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":143,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":145,"author":{"gitId":"HanJiyao"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":146,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":149,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"HanJiyao"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":153,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"HanJiyao"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"HanJiyao"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":162,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"HanJiyao"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"HanJiyao"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"HanJiyao"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"HanJiyao"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"HanJiyao"},"content":"        public boolean hasTag(Tag tag) {","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":187,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":190,"author":{"gitId":"HanJiyao"},"content":"        public void addTag(Tag tag) {","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":194,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":195,"author":{"gitId":"HanJiyao"},"content":"        public void deleteTag(Tag tagToDelete) {","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"HanJiyao"},"content":"        public void setTag(Tag target, Tag editedTag) {","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"HanJiyao"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":207,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":208,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":209,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":210,"author":{"gitId":"HanJiyao"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":212,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":213,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":214,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"HanJiyao"},"content":"        public Path getScheduleFilePath() {","lastModifiedDate":"2022-03-15"},{"lineNumber":216,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":220,"author":{"gitId":"HanJiyao"},"content":"        public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2022-03-15"},{"lineNumber":221,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":222,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"HanJiyao"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":229,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":230,"author":{"gitId":"HanJiyao"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2022-03-15"},{"lineNumber":231,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":232,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":233,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":234,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":235,"author":{"gitId":"HanJiyao"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-15"},{"lineNumber":236,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":237,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":238,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":239,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":240,"author":{"gitId":"HanJiyao"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":242,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":243,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":244,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":245,"author":{"gitId":"HanJiyao"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-15"},{"lineNumber":246,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":247,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":248,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":249,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":250,"author":{"gitId":"HanJiyao"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-15"},{"lineNumber":251,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":252,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":253,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":254,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":255,"author":{"gitId":"HanJiyao"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-03-15"},{"lineNumber":256,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":257,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":258,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":259,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":260,"author":{"gitId":"HanJiyao"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-03-15"},{"lineNumber":261,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":262,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":263,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":264,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":265,"author":{"gitId":"HanJiyao"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-03-15"},{"lineNumber":266,"author":{"gitId":"HanJiyao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-15"},{"lineNumber":267,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":268,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":269,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":270,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":271,"author":{"gitId":"HanJiyao"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":272,"author":{"gitId":"HanJiyao"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2022-03-15"},{"lineNumber":273,"author":{"gitId":"HanJiyao"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":274,"author":{"gitId":"HanJiyao"},"content":"    private class ModelStubRanged extends RangeCommandTest.ModelStub {","lastModifiedDate":"2022-03-15"},{"lineNumber":275,"author":{"gitId":"HanJiyao"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":276,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":277,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":278,"author":{"gitId":"HanJiyao"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":279,"author":{"gitId":"HanJiyao"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-03-15"},{"lineNumber":280,"author":{"gitId":"HanJiyao"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":281,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":282,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":283,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":284,"author":{"gitId":"HanJiyao"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":285,"author":{"gitId":"HanJiyao"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-03-15"},{"lineNumber":286,"author":{"gitId":"HanJiyao"},"content":"            personsAdded.add(person);","lastModifiedDate":"2022-03-15"},{"lineNumber":287,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":288,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":289,"author":{"gitId":"HanJiyao"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":290,"author":{"gitId":"HanJiyao"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-15"},{"lineNumber":291,"author":{"gitId":"HanJiyao"},"content":"            return new AddressBook();","lastModifiedDate":"2022-03-15"},{"lineNumber":292,"author":{"gitId":"HanJiyao"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":293,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":294,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":294}},{"path":"src/test/java/seedu/contax/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DATE2;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DURATION2;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_AMELIA;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_SECOND_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_TIME2;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DURATION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_NAME_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_DATE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_TIME_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DURATION_HOUR;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TypicalIndexes;","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"public class AddAppointmentCommandParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void parse_compulsoryFieldsPresent_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        // whitespace only preamble","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_TIME + APPOINTMENT_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_AMELIA + APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_TIME + APPOINTMENT_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        // multiple dates - last date accepted","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE2 + APPOINTMENT_DATE","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_TIME + APPOINTMENT_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        // multiple times - last time accepted","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME2","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"                        + APPOINTMENT_TIME + APPOINTMENT_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        // multiple durations - last duration accepted","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"                        + APPOINTMENT_DURATION2 + APPOINTMENT_DURATION,","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public void parse_optionalFieldsPresent_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        // include a person index","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                        + APPOINTMENT_TIME + APPOINTMENT_DURATION + APPOINTMENT_FIRST_PERSON,","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, TypicalIndexes.INDEX_FIRST_PERSON));","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        // multiple persons - last person accepted","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"                        + APPOINTMENT_DURATION + APPOINTMENT_FIRST_PERSON + APPOINTMENT_SECOND_PERSON,","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"                new AddAppointmentCommand(expectedAppointment, TypicalIndexes.INDEX_SECOND_PERSON));","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"                AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        // missing name prefix","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"                        + APPOINTMENT_DURATION, expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        // missing date prefix","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + VALID_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION, expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        // missing time prefix","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + VALID_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION, expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        // missing duration prefix","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"                + VALID_APPOINTMENT_DURATION_HOUR, expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        // all prefixes missing","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_ALONE + VALID_DATE","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"                + VALID_TIME + VALID_APPOINTMENT_DURATION_HOUR, expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        // invalid name","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_NAME_DESC + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        // invalid date","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + INVALID_DATE_DESC + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION, StartDateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"        // invalid time","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + INVALID_TIME_DESC","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION, StartDateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        // invalid duration","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"                + INVALID_APPOINTMENT_DURATION_DESC, Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        // invalid person index","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DURATION + INVALID_APPOINTMENT_PERSON, ParserUtil.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":135}},{"path":"src/test/java/seedu/contax/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"sharpstorm":37,"KwanHW":1,"-":102}},{"path":"src/test/java/seedu/contax/logic/parser/AddTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.AddTagCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TagBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"class AddTagCommandParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    private AddTagCommandParser parser \u003d new AddTagCommandParser();","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"        Tag expectedTag \u003d new TagBuilder().withName(VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        String tagName \u003d \" \" + PREFIX_NAME + VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        assertParseSuccess(parser, tagName, new AddTagCommand(expectedTag));","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        // No token","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"\", expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        // Token exists but empty field","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"n/\", expectedMessage);","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"    public void parser_invalidValue_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" n/friends\u0026\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" n/friends!\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" n/friends(\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"KwanHW":45}},{"path":"src/test/java/seedu/contax/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.AddTagCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AppointmentsBetweenCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.BatchCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ChainCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.DeleteTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand.EditTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ExportCsvCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.FindByTagCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.FindCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ListAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.ListCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.ListTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.RangeCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.TagNameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentUtil;","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.DateInputUtil;","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.EditTagDescriptorBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.ImportCsvObjectBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TagBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TagUtil;","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"    // Tag management commands","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"    public void parseCommand_addTag() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"        Tag tag \u003d new TagBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand(TagUtil.getAddTagCommand(tag));","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"        assertEquals(command, new AddTagCommand(tag));","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"KwanHW"},"content":"    public void parseCommand_listTag() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"KwanHW"},"content":"        assertTrue(parser.parseCommand(ListTagCommand.COMMAND_WORD) instanceof ListTagCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"KwanHW"},"content":"    public void parseCommand_deleteTag() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"KwanHW"},"content":"        Index firstIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-14"},{"lineNumber":140,"author":{"gitId":"KwanHW"},"content":"        String deleteCommand \u003d String.format(\"%s %s\", DeleteTagCommand.COMMAND_WORD, 1);","lastModifiedDate":"2022-03-14"},{"lineNumber":141,"author":{"gitId":"KwanHW"},"content":"        DeleteTagCommand command \u003d (DeleteTagCommand) parser.parseCommand(deleteCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":142,"author":{"gitId":"KwanHW"},"content":"        assertEquals(command, new DeleteTagCommand(firstIndex));","lastModifiedDate":"2022-03-14"},{"lineNumber":143,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":146,"author":{"gitId":"KwanHW"},"content":"    public void parseCommand_editTag() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":147,"author":{"gitId":"KwanHW"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-14"},{"lineNumber":148,"author":{"gitId":"KwanHW"},"content":"        Tag tag \u003d new TagBuilder().build();","lastModifiedDate":"2022-03-14"},{"lineNumber":149,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor editTagDescriptor \u003d new EditTagDescriptorBuilder(tag).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":150,"author":{"gitId":"KwanHW"},"content":"        EditTagCommand command \u003d (EditTagCommand) parser.parseCommand(EditTagCommand.COMMAND_WORD + \" 1 \"","lastModifiedDate":"2022-03-14"},{"lineNumber":151,"author":{"gitId":"KwanHW"},"content":"                + \"t/clients\");","lastModifiedDate":"2022-03-14"},{"lineNumber":152,"author":{"gitId":"KwanHW"},"content":"        assertEquals(command, new EditTagCommand(index, editTagDescriptor));","lastModifiedDate":"2022-03-14"},{"lineNumber":153,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":154,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":155,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"KwanHW"},"content":"    public void parseCommand_findByTag() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(\"friends\");","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand command \u003d (FindByTagCommand) parser.parseCommand(FindByTagCommand.COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"KwanHW"},"content":"                + \" t/friends\");","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"KwanHW"},"content":"        assertEquals(command, new FindByTagCommand(predicate));","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":162,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"KwanHW"},"content":"    // Appointment related commands","lastModifiedDate":"2022-03-14"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_addAppointment() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser.parseCommand(AppointmentUtil","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"                .getAddCommand(appointment, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new AddAppointmentCommand(appointment, null), command);","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_listAppointments() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(parser.parseCommand(ListAppointmentCommand.COMMAND_WORD) instanceof ListAppointmentCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_editAppointment() throws Exception {","lastModifiedDate":"2022-03-13"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor editDescriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Name Change\").build();","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"        Command command \u003d parser.parseCommand(EditAppointmentCommand.COMMAND_WORD","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"                + \" \" + Index.fromOneBased(1).getOneBased() + \" \"","lastModifiedDate":"2022-03-13"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"                + AppointmentUtil.getAppointmentEditDescriptorDetails(editDescriptor));","lastModifiedDate":"2022-03-13"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(command instanceof EditAppointmentCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new EditAppointmentCommand(Index.fromOneBased(1), editDescriptor), command);","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_deleteAppointment() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(parser.parseCommand(DeleteAppointmentCommand.COMMAND_WORD + \" 1\")","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"                instanceof DeleteAppointmentCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_appointmentsBetween() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDateTime \u003d APPOINTMENT_ALONE.getStartDateTime().value;","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(parser.parseCommand(AppointmentsBetweenCommand.COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"                + DateInputUtil.getDateRangeInput(refDateTime, refDateTime.plusMinutes(50)))","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"                instanceof AppointmentsBetweenCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"dandaandaaaaaan"},"content":"    //Import/Export csv tests","lastModifiedDate":"2022-03-14"},{"lineNumber":203,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":204,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseCommand_importCsv() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":205,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile indexedCsvFile \u003d new ImportCsvObjectBuilder().build();","lastModifiedDate":"2022-03-14"},{"lineNumber":206,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand command \u003d (ImportCsvCommand)","lastModifiedDate":"2022-03-14"},{"lineNumber":207,"author":{"gitId":"dandaandaaaaaan"},"content":"                parser.parseCommand(ImportCsvObjectBuilder.getImportCsvCommand(indexedCsvFile));","lastModifiedDate":"2022-03-14"},{"lineNumber":208,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new ImportCsvCommand(indexedCsvFile), command);","lastModifiedDate":"2022-03-14"},{"lineNumber":209,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":210,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":211,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":212,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseCommand_exportCsv() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(parser.parseCommand(ExportCsvCommand.COMMAND_WORD) instanceof ExportCsvCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_chainCommand() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(parser.parseCommand(ChainCommand.COMMAND_WORD + \" \" + ListCommand.COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"                + \" \u0026\u0026 \" + ListCommand.COMMAND_WORD) instanceof ChainCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"    public void parseCommand_rangeCommand() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(parser.parseCommand(RangeCommand.COMMAND_WORD + \" \" + DeleteCommand.COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"                + \" from/1 to/2\") instanceof RangeCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":229,"author":{"gitId":"HanJiyao"},"content":"    public void parseCommand_batchCommand() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":230,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(parser.parseCommand(BatchCommand.COMMAND_WORD + \" \" + DeleteCommand.COMMAND_WORD","lastModifiedDate":"2022-03-15"},{"lineNumber":231,"author":{"gitId":"HanJiyao"},"content":"                + \" by/phone \u003d/123\") instanceof BatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":232,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":233,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"HanJiyao":7,"sharpstorm":87,"dandaandaaaaaan":18,"KwanHW":51,"-":81}},{"path":"src/test/java/seedu/contax/logic/parser/AppointmentsBetweenCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_DATE2;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TIME2;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AppointmentsBetweenCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentsBetweenCommandParserTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private static final String INPUT_START_DATE \u003d \" \" + PREFIX_DATE_START + VALID_DATE2;","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private static final String INPUT_END_DATE \u003d \" \" + PREFIX_DATE_END + VALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private static final String INPUT_START_TIME \u003d \" \" + PREFIX_TIME_START + VALID_TIME2;","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    private static final String INPUT_END_TIME \u003d \" \" + PREFIX_TIME_END + VALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private AppointmentsBetweenCommandParser parser \u003d new AppointmentsBetweenCommandParser();","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public void parse_compulsoryFieldsPresent_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime expectedStart \u003d DateUtil.combineDateTime(","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.parseDate(VALID_DATE2).get(), DateUtil.parseTime(VALID_TIME2).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime expectedEnd \u003d DateUtil.combineDateTime(","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.parseDate(VALID_DATE).get(), DateUtil.parseTime(VALID_TIME).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        AppointmentsBetweenCommand expectedCommand \u003d new AppointmentsBetweenCommand(expectedStart, expectedEnd);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        // whitespace only preamble","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INPUT_START_DATE + INPUT_START_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        // duplicate start date","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_DATE_START + VALID_DATE + INPUT_START_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                        + INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        // duplicate start time","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + \" \" + PREFIX_TIME_START + VALID_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                        + INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        // duplicate end date","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + INPUT_START_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"                        + \" \" + PREFIX_DATE_END + VALID_DATE2 + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        // duplicate start time","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + INPUT_START_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"                        + INPUT_END_DATE + \" \" + PREFIX_TIME_END + VALID_TIME2 + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        // missing fields","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME, expectedMessage);","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_END_DATE + INPUT_END_TIME, expectedMessage);","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_TIME, expectedMessage);","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_DATE, expectedMessage);","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        // all fields missing","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, APPOINTMENT_NAME_ALONE, expectedMessage);","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        // invalid start date","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE_START + INVALID_DATE + INPUT_START_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"                        + INPUT_END_DATE + INPUT_END_TIME, AppointmentsBetweenCommand.MESSAGE_START_DATE_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        // invalid start time","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + \" \" + PREFIX_TIME_START + INVALID_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_END_DATE + INPUT_END_TIME, AppointmentsBetweenCommand.MESSAGE_START_TIME_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        // invalid end date","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + \" \" + PREFIX_DATE_END","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"                + INVALID_DATE + \" \" + INPUT_END_TIME, AppointmentsBetweenCommand.MESSAGE_END_DATE_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        // invalid start time","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"                + \" \" + PREFIX_TIME_END + INVALID_TIME, AppointmentsBetweenCommand.MESSAGE_END_TIME_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    public void parse_duplicatedInvalidValid_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime expectedStart \u003d DateUtil.combineDateTime(","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.parseDate(VALID_DATE2).get(), DateUtil.parseTime(VALID_TIME2).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime expectedEnd \u003d DateUtil.combineDateTime(","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.parseDate(VALID_DATE).get(), DateUtil.parseTime(VALID_TIME).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        AppointmentsBetweenCommand expectedCommand \u003d new AppointmentsBetweenCommand(expectedStart, expectedEnd);","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_DATE_START + INVALID_DATE + INPUT_START_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + \" \" + PREFIX_TIME_START + INVALID_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + INPUT_START_TIME + \" \" + PREFIX_DATE_END","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"                + INVALID_DATE + INPUT_END_DATE + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"                + \" \" + PREFIX_TIME_END + INVALID_TIME + INPUT_END_TIME, expectedCommand);","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    public void parse_duplicatedValidInvalid_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + PREFIX_DATE_START + INVALID_DATE + \" \"","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_START_TIME + INPUT_END_DATE + INPUT_END_TIME,","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_START_DATE_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"                + \" \" + PREFIX_TIME_START + INVALID_TIME + INPUT_END_DATE + INPUT_END_TIME,","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_START_TIME_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"                + \" \" + PREFIX_DATE_END + INVALID_DATE + \" \" + INPUT_END_TIME,","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_END_DATE_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, INPUT_START_DATE + INPUT_START_TIME + INPUT_END_DATE","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"                + INPUT_END_TIME + \" \" + PREFIX_TIME_END + INVALID_TIME,","lastModifiedDate":"2022-03-14"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_END_TIME_INVALID);","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    public void parse_endBeforeStart_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        String startDate \u003d \" \" + PREFIX_DATE_START + VALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        String endDate \u003d \" \" + PREFIX_DATE_END + VALID_DATE2;","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        String startTime \u003d \" \" + PREFIX_TIME_START + VALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        String endTime \u003d \" \" + PREFIX_TIME_END + VALID_TIME2;","lastModifiedDate":"2022-03-14"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, startDate + startTime + endDate + endTime,","lastModifiedDate":"2022-03-14"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"                AppointmentsBetweenCommand.MESSAGE_END_BEFORE_START);","lastModifiedDate":"2022-03-14"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"    public void parse_sameStartAndEnd_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"        String startDate \u003d \" \" + PREFIX_DATE_START + VALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        String endDate \u003d \" \" + PREFIX_DATE_END + VALID_DATE;","lastModifiedDate":"2022-03-14"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        String startTime \u003d \" \" + PREFIX_TIME_START + VALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        String endTime \u003d \" \" + PREFIX_TIME_END + VALID_TIME;","lastModifiedDate":"2022-03-14"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime expectedStartEnd \u003d DateUtil.combineDateTime(","lastModifiedDate":"2022-03-14"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"                DateUtil.parseDate(VALID_DATE).get(), DateUtil.parseTime(VALID_TIME).get());","lastModifiedDate":"2022-03-14"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, startDate + startTime + endDate + endTime,","lastModifiedDate":"2022-03-14"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"                new AppointmentsBetweenCommand(expectedStartEnd, expectedStartEnd));","lastModifiedDate":"2022-03-14"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":158}},{"path":"src/test/java/seedu/contax/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(argMultimap.arePrefixesPresent(pSlash, dashT, hatQ));","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(argMultimap.arePrefixesPresent(pSlash, dashT, hatQ));","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(argMultimap.arePrefixesPresent(pSlash, dashT, hatQ));","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"sharpstorm":4,"-":149}},{"path":"src/test/java/seedu/contax/logic/parser/BatchCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.BatchCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":" * Test for parses input arguments and creates a new BatchCommand object.","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"public class BatchCommandParserTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"            BatchCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"    private BatchCommandParser parser \u003d new BatchCommandParser();","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        // no index specified","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"        // no regex and no field specified","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"batch edit\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"        // search type is not specified","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"batch edit \u003d/1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        // \u003d/ is not specified","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"batch edit by/phone\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"        String sampleUserInput \u003d \"edit p/321 by/name \u003d/123\";","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_NAME), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedBatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"    public void parse_byDifferentSearchType_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        String sampleUserInput \u003d \"edit p/321 by/name \u003d/123\";","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_NAME), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedBatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        sampleUserInput \u003d \"edit p/321 by/phone \u003d/123\";","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_PHONE), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedBatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        sampleUserInput \u003d \"edit p/321 by/email \u003d/123\";","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_EMAIL), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedBatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        sampleUserInput \u003d \"edit p/321 by/address \u003d/123\";","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"edit p/321\", new SearchType(SearchType.TYPE_ADDRESS), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedBatchCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"    public void parse_someFieldsSpecified_invalidCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        String sampleUserInput \u003d \"list\";","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        BatchCommand expectedBatchCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"                new BatchCommand(\"list\", new SearchType(SearchType.TYPE_NAME), \"123\");","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, sampleUserInput, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":75}},{"path":"src/test/java/seedu/contax/logic/parser/ChainCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.ChainCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.EditCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"public class ChainCommandParserTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"    private final ChainCommandParser parser \u003d new ChainCommandParser();","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    public void parse_editThenAddAllFieldsPresent_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        List\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        commandList.add(expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"        commandList.add(new AddCommand(new PersonBuilder().build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, \"edit \" + userInput","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"                        + \"\u0026\u0026 add n/Amy Bee p/85355255 e/amy@gmail.com a/123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"                new ChainCommand(commandList));","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY,","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChainCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":63}},{"path":"src/test/java/seedu/contax/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.Command;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"sharpstorm":3,"-":35}},{"path":"src/test/java/seedu/contax/logic/parser/DeleteAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * Tests the parsing for the {@code deleteAppointment} command.","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"public class DeleteAppointmentCommandParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public void parse_validArgs_returnsDeleteAppointmentCommand() {","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(Index.fromOneBased(1)));","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"                DeleteAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":29}},{"path":"src/test/java/seedu/contax/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"sharpstorm":6,"-":26}},{"path":"src/test/java/seedu/contax/logic/parser/DeleteTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.DeleteTagCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":" * Test the parsing for the {@code DeleteTagCommand}.","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"public class DeleteTagCommandParserTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"    public void parse_validArgs_returnDeleteCommand() {","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        assertParseSuccess(parser, \"1\", new DeleteTagCommand(Index.fromOneBased(1)));","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"                DeleteTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"KwanHW":28}},{"path":"src/test/java/seedu/contax/logic/parser/EditAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DATE;","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DATE2;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_DURATION2;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_NAME_AMELIA;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_REMOVE_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_SECOND_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.APPOINTMENT_TIME2;","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DURATION_DESC;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_NAME_DESC;","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_DATE_DESC;","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_TIME_DESC;","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DURATION_HOUR;","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DURATION_MINUTE;","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_AMELIA;","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_DATE;","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_DATE2;","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TIME2;","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"public class EditAppointmentCommandParserTest {","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    private EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        // no index specified","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_ALONE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        // no field specified","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        // no index and no field specified","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        // negative index","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"-5\" + APPOINTMENT_NAME_ALONE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        // zero index","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"0\" + APPOINTMENT_NAME_ALONE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        // Various invalid fields","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPOINTMENT_NAME_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Messages.MESSAGE_INVALID_DATE);","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC, Messages.MESSAGE_INVALID_TIME);","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPOINTMENT_DURATION_DESC, Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPOINTMENT_PERSON, ParserUtil.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        // Parsing order left to right test, stop upon first failure","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"                \"1\" + INVALID_APPOINTMENT_NAME_DESC + APPOINTMENT_TIME, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"                \"1\" + APPOINTMENT_NAME_ALONE + INVALID_DATE_DESC, Messages.MESSAGE_INVALID_DATE);","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPOINTMENT_NAME_DESC + INVALID_DATE_DESC,","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-13"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPOINTMENT_NAME_AMELIA + APPOINTMENT_DATE","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_TIME + APPOINTMENT_DURATION + APPOINTMENT_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_AMELIA)","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"                .withStartDate(VALID_DATE)","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(VALID_TIME)","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(VALID_APPOINTMENT_DURATION_HOUR)","lastModifiedDate":"2022-03-13"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(INDEX_FIRST_PERSON).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-13"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPOINTMENT_DATE + APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-13"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"                .withStartDate(VALID_DATE)","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(VALID_APPOINTMENT_DURATION_HOUR).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        // name","lastModifiedDate":"2022-03-13"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-13"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-13"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        // start date","lastModifiedDate":"2022-03-13"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_DATE;","lastModifiedDate":"2022-03-13"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartDate(VALID_DATE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        // start time","lastModifiedDate":"2022-03-13"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartTime(VALID_TIME).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        // duration","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_DURATION;","lastModifiedDate":"2022-03-13"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(VALID_APPOINTMENT_DURATION_HOUR).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"        // person","lastModifiedDate":"2022-03-13"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(INDEX_FIRST_PERSON).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        // remove person","lastModifiedDate":"2022-03-13"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_REMOVE_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(null).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-03-13"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-03-13"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE","lastModifiedDate":"2022-03-13"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_TIME + APPOINTMENT_DURATION + APPOINTMENT_FIRST_PERSON + APPOINTMENT_NAME_AMELIA","lastModifiedDate":"2022-03-13"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_DATE2 + APPOINTMENT_TIME2 + APPOINTMENT_DURATION2 + APPOINTMENT_SECOND_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_AMELIA)","lastModifiedDate":"2022-03-13"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"                .withStartDate(VALID_DATE2)","lastModifiedDate":"2022-03-13"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(VALID_TIME2)","lastModifiedDate":"2022-03-13"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(VALID_APPOINTMENT_DURATION_MINUTE)","lastModifiedDate":"2022-03-13"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"                .withPerson(INDEX_SECOND_PERSON).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"    public void parse_duplicateFieldsWithInvalidInputFirst_success() {","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        // only the duplicated field present","lastModifiedDate":"2022-03-13"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-13"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_APPOINTMENT_NAME_DESC + APPOINTMENT_NAME_ALONE;","lastModifiedDate":"2022-03-13"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"        // multiple duplicated and invalid fields","lastModifiedDate":"2022-03-13"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_APPOINTMENT_NAME_DESC + INVALID_DATE_DESC","lastModifiedDate":"2022-03-13"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"                + APPOINTMENT_NAME_ALONE + APPOINTMENT_DATE + APPOINTMENT_TIME;","lastModifiedDate":"2022-03-13"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-03-13"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_ALONE)","lastModifiedDate":"2022-03-13"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"                .withStartDate(VALID_DATE)","lastModifiedDate":"2022-03-13"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"                .withStartTime(VALID_TIME).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-13"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":209}},{"path":"src/test/java/seedu/contax/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"        // invalid tag","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"                seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"                seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"                seedu.contax.model.tag.Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"sharpstorm":39,"KwanHW":8,"-":167}},{"path":"src/test/java/seedu/contax/logic/parser/EditTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand.EditTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.EditTagDescriptorBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":" * Parses input arguments and creates a new EditTagCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"public class EditTagCommandParserTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"            EditTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    private EditTagCommandParser parser \u003d new EditTagCommandParser();","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidFields_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        // no index specified","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"t/family\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"        // no tag name specified","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        // not tag name and no index specified","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        // negative index","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"-5\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        // zero index","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"0\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        // invalid arguments as preamble","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1 some random text\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1 z/ random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidTagName_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1 t/Hello!\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"1 t/Hello\u0026\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    public void parser_validInput_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        EditTagDescriptor descriptor \u003d new EditTagDescriptorBuilder().withName(\"husband\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"        assertParseSuccess(parser, \"1 t/husband\", new EditTagCommand(Index.fromOneBased(1), descriptor));","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":64}},{"path":"src/test/java/seedu/contax/logic/parser/FindByTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.FindByTagCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.person.TagNameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Name;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":" * Unit tests which parses input and creates a new FindByTagCommand object.","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"public class FindByTagCommandParserTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"    public static final String MESSAGE_ERROR \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"            FindByTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"    private FindByTagCommandParser parser \u003d new FindByTagCommandParser();","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    public void parse_emptyArg_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" \", MESSAGE_ERROR);","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidPrefix_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        // No prefix","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" friends\", MESSAGE_ERROR);","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public void parse_invalidName_failure() {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        // Prefix exists but empty string","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" t/\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        // Prefix exists but is spacing","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" t/ \", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        // Invalid keyword","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \" t/\u0026friends\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"    public void parse_hasPreamble_failure() {","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        assertParseFailure(parser, \"hello t/friends\", MESSAGE_ERROR);","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public void parse_validName_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(\"friends\");","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"        FindByTagCommand command \u003d new FindByTagCommand(predicate);","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"        assertParseSuccess(parser, \" t/friends\", command);","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":56}},{"path":"src/test/java/seedu/contax/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.FindCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.AddressContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.EmailContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.PhoneContainsKeywordsPredicate;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public void parse_findByPhone_returnsFindCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"123\", \"456\")));","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"123 456 by/\" + SearchType.TYPE_PHONE, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"\\n 123 \\n \\t 456  \\t by/\" + SearchType.TYPE_PHONE, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void parse_findByAddress_returnsFindCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"abc\", \"bcd\")));","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"abc bcd by/\" + SearchType.TYPE_ADDRESS, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"\\n abc \\n \\t bcd  \\t by/\" + SearchType.TYPE_ADDRESS, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    public void parse_findByEmail_returnsFindCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand(","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"                new EmailContainsKeywordsPredicate(Arrays.asList(\"test@abc.com\", \"test2@example.com\")));","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"test@abc.com test2@example.com by/\" + SearchType.TYPE_EMAIL,","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"\\n test@abc.com \\n \\t test2@example.com  \\t by/\" + SearchType.TYPE_EMAIL,","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"                expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    public void parse_findByName_returnsFindCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"John\", \"Bob\")));","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"John Bob by/\" + SearchType.TYPE_NAME, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assertParseSuccess(parser, \"\\n John \\n \\t Bob  \\t by/\" + SearchType.TYPE_NAME, expectedFindCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"sharpstorm":56,"-":28}},{"path":"src/test/java/seedu/contax/logic/parser/ImportCsvParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_ADDRESSPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_ADDRESSPOSITION_CLASH;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_EMAILPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_EMAILPOSITION_CLASH;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_INVALID_ADDRESSPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_INVALID_EMAILPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_INVALID_NAMEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_INVALID_PHONEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_INVALID_TAGPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NAMEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NAMEPOSITION_CLASH;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NEGATIVE_ADDRESSPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NEGATIVE_EMAILPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NEGATIVE_NAMEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NEGATIVE_PHONEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_NEGATIVE_TAGPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_PHONEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_PHONEPOSITION_CLASH;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_TAGPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_CSV_TAGPOSITION_CLASH;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_INVALID_BAD_EXTENSION_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_INVALID_NO_EXTENSION_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.COMMAND_VALID_CSV_FILEPATH;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_FILE;","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.ImportCsvObjectBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ImportCsvParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    private ImportCsvParser parser \u003d new ImportCsvParser();","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parse_onlyFilePathPresent_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Default positions for columns","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile expectedIndexedCsvFileObject \u003d new ImportCsvObjectBuilder().build();","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseSuccess(parser, COMMAND_VALID_CSV_FILEPATH, new ImportCsvCommand(expectedIndexedCsvFileObject));","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parse_customParams_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        //All columns shifted by 1","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile expectedIndexedCsvFileObject \u003d new ImportCsvObjectBuilder(","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"                ImportCsvObjectBuilder.CUSTOM_COLUMNS_CSV_FILEPATH,","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5, 6).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_FILE","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"                + ImportCsvObjectBuilder.CUSTOM_COLUMNS_CSV_FILEPATH + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"                + PREFIX_NAME + \"2 \" + PREFIX_PHONE + \"3 \" + PREFIX_EMAIL + \"4 \"","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"                + PREFIX_ADDRESS + \"5 \" + PREFIX_TAG + \"6\", new ImportCsvCommand(expectedIndexedCsvFileObject));","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        String expectedError \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCsvCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        //missing filepath prefix","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, \" \", expectedError);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        //got other prefixes but no have filepath","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_CSV_NAMEPOSITION + COMMAND_CSV_PHONEPOSITION","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"                + COMMAND_CSV_EMAILPOSITION + COMMAND_CSV_ADDRESSPOSITION + COMMAND_CSV_TAGPOSITION, expectedError);","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parse_invalidFields_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        //invalid filename","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"        //bad extension","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_INVALID_BAD_EXTENSION_FILEPATH, IndexedCsvFile.FILE_PATH_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        //no extension","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_INVALID_NO_EXTENSION_FILEPATH, IndexedCsvFile.FILE_PATH_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        //invalid position numbers","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        //letters as position numbers","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_NAMEPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_PHONEPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_EMAILPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_ADDRESSPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_TAGPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_INVALID_NAMEPOSITION","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"                        + COMMAND_CSV_INVALID_PHONEPOSITION + COMMAND_CSV_INVALID_EMAILPOSITION","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"                        + COMMAND_CSV_INVALID_ADDRESSPOSITION + COMMAND_CSV_INVALID_TAGPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        //negative position numbers","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_NAMEPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_PHONEPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_EMAILPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_ADDRESSPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_TAGPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NEGATIVE_NAMEPOSITION","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"                        + COMMAND_CSV_NEGATIVE_PHONEPOSITION + COMMAND_CSV_NEGATIVE_EMAILPOSITION","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"                        + COMMAND_CSV_NEGATIVE_ADDRESSPOSITION + COMMAND_CSV_NEGATIVE_TAGPOSITION,","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"        //clashing position numbers","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_NAMEPOSITION_CLASH,","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_PHONEPOSITION_CLASH,","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_EMAILPOSITION_CLASH,","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_ADDRESSPOSITION_CLASH,","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertParseFailure(parser, COMMAND_VALID_CSV_FILEPATH + COMMAND_CSV_TAGPOSITION_CLASH,","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"                IndexedCsvFile.MESSAGE_CLASHING_POSITIONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dandaandaaaaaan":131}},{"path":"src/test/java/seedu/contax/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.util.SearchType;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String INVALID_PHONE \u003d \"+sg42344\";","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String VALID_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/ValidContaXFormat.csv\";","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String INVALID_BAD_EXTENSION_CSV_FILEPATH \u003d \"wrongFile.txt\";","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String INVALID_NO_EXTENSION_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/ValidContaXFormat\";","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_APPOINTMENT_NAME \u003d \"MEETING?\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_DATE_SYNTAX \u003d \"2022-10-20\";","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_DATE_VALUE \u003d \"32-01-2022\";","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_TIME_SYNTAX \u003d \"12-22\";","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_TIME_VALUE \u003d \"25:20\";","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_DURATION_NEGATIVE \u003d \"-1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_DURATION_NON_INTEGER \u003d \"two\";","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_APPOINTMENT_NAME \u003d \"This is a meeting\";","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_DATE \u003d \"31-01-2022\";","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_TIME \u003d \"12:22\";","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_DATETIME_ISO_STRING \u003d \"2022-01-31T12:22:00\";","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_DURATION \u003d \"30\";","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvFilePath_validFilePathWithoutWhitespace_returnsFile() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"dandaandaaaaaan"},"content":"        File expectedFile \u003d new File(VALID_CSV_FILEPATH);","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(expectedFile, ParserUtil.parseCsvFilePath(VALID_CSV_FILEPATH));","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvFilePath_validFilePathWithWhitespace_returnsFile() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"dandaandaaaaaan"},"content":"        String filePathWithWhitespace \u003d WHITESPACE + VALID_CSV_FILEPATH + WHITESPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"dandaandaaaaaan"},"content":"        File expectedFile \u003d new File(VALID_CSV_FILEPATH);","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(expectedFile, ParserUtil.parseCsvFilePath(VALID_CSV_FILEPATH));","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvFilePath_invalidExtension_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCsvFilePath(INVALID_BAD_EXTENSION_CSV_FILEPATH));","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvFilePath_noExtension_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCsvFilePath(INVALID_NO_EXTENSION_CSV_FILEPATH));","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvPositions_validPosition_returnsInt() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(1, ParserUtil.parseCsvPositions(\"1\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvPositions_negativePosition_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCsvPositions(\"-1\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void parseImportCsvPositions_lettersInPosition_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCsvPositions(\"test\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"    public void parseAppointmentName_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAppointmentName((String) null));","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"    public void parseAppointmentName_invalidValue_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAppointmentName(INVALID_APPOINTMENT_NAME));","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"    public void parseAppointmentName_validValue_returnsName() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"        seedu.contax.model.appointment.Name expectedName \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"                new seedu.contax.model.appointment.Name(VALID_APPOINTMENT_NAME);","lastModifiedDate":"2022-03-08"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedName, ParserUtil.parseAppointmentName(VALID_APPOINTMENT_NAME));","lastModifiedDate":"2022-03-08"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"    public void parseAppointmentName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT_NAME + WHITESPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"        seedu.contax.model.appointment.Name expectedName \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"                new seedu.contax.model.appointment.Name(VALID_APPOINTMENT_NAME);","lastModifiedDate":"2022-03-08"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedName, ParserUtil.parseAppointmentName(nameWithWhitespace));","lastModifiedDate":"2022-03-08"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":284,"author":{"gitId":"sharpstorm"},"content":"    public void parseStartDateTime_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartDateTime((String) null, \"\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":286,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartDateTime(\"\", (String) null));","lastModifiedDate":"2022-03-08"},{"lineNumber":287,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartDateTime(null, (String) null));","lastModifiedDate":"2022-03-08"},{"lineNumber":288,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":289,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":290,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"    public void parseStartDateTime_invalidDateTime_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":292,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDateTime(INVALID_DATE_SYNTAX,","lastModifiedDate":"2022-03-08"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"                INVALID_TIME_SYNTAX));","lastModifiedDate":"2022-03-08"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDateTime(INVALID_DATE_VALUE,","lastModifiedDate":"2022-03-08"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"                INVALID_TIME_VALUE));","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDateTime(VALID_DATE,","lastModifiedDate":"2022-03-08"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"                INVALID_TIME_VALUE));","lastModifiedDate":"2022-03-08"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDateTime(INVALID_DATE_VALUE,","lastModifiedDate":"2022-03-08"},{"lineNumber":299,"author":{"gitId":"sharpstorm"},"content":"                VALID_TIME));","lastModifiedDate":"2022-03-08"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDateTime(VALID_TIME, VALID_DATE));","lastModifiedDate":"2022-03-08"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"    public void parseStartDateTime_validValue_returnsStartDateTime() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(VALID_DATETIME_ISO_STRING);","lastModifiedDate":"2022-03-08"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime expectedStartDateTime \u003d new StartDateTime(dateTime);","lastModifiedDate":"2022-03-08"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedStartDateTime, ParserUtil.parseStartDateTime(VALID_DATE, VALID_TIME));","lastModifiedDate":"2022-03-08"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"    public void parseDuration_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration((String) null));","lastModifiedDate":"2022-03-08"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"    public void parseDuration_invalidDuration_throwsParseException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(\"\"));","lastModifiedDate":"2022-03-08"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_NON_INTEGER));","lastModifiedDate":"2022-03-08"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_NEGATIVE));","lastModifiedDate":"2022-03-08"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"    public void parseDuration_validValue_returnsDuration() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"        Duration expectedDuration \u003d new Duration(Integer.parseInt(VALID_DURATION));","lastModifiedDate":"2022-03-08"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedDuration, ParserUtil.parseDuration(VALID_DURATION));","lastModifiedDate":"2022-03-08"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"    public void parseSearchType_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSearchType((String) null));","lastModifiedDate":"2022-03-15"},{"lineNumber":331,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":332,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":333,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":334,"author":{"gitId":"sharpstorm"},"content":"    public void parseSearchType_invalidValue_throwsParseException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":335,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSearchType(\"\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":336,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSearchType(\"Not a valid type\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":337,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSearchType(\"123 Not Type\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":338,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":339,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":340,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":341,"author":{"gitId":"sharpstorm"},"content":"    public void parseSearchType_validValue_returnsSearchType() throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":342,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_PHONE), ParserUtil.parseSearchType(SearchType.TYPE_PHONE));","lastModifiedDate":"2022-03-15"},{"lineNumber":343,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_ADDRESS), ParserUtil.parseSearchType(SearchType.TYPE_ADDRESS));","lastModifiedDate":"2022-03-15"},{"lineNumber":344,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_EMAIL), ParserUtil.parseSearchType(SearchType.TYPE_EMAIL));","lastModifiedDate":"2022-03-15"},{"lineNumber":345,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_NAME), ParserUtil.parseSearchType(SearchType.TYPE_NAME));","lastModifiedDate":"2022-03-15"},{"lineNumber":346,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":347,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_PHONE),","lastModifiedDate":"2022-03-15"},{"lineNumber":348,"author":{"gitId":"sharpstorm"},"content":"                ParserUtil.parseSearchType(SearchType.TYPE_PHONE.toUpperCase()));","lastModifiedDate":"2022-03-15"},{"lineNumber":349,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_ADDRESS),","lastModifiedDate":"2022-03-15"},{"lineNumber":350,"author":{"gitId":"sharpstorm"},"content":"                ParserUtil.parseSearchType(SearchType.TYPE_ADDRESS.toUpperCase()));","lastModifiedDate":"2022-03-15"},{"lineNumber":351,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_EMAIL),","lastModifiedDate":"2022-03-15"},{"lineNumber":352,"author":{"gitId":"sharpstorm"},"content":"                ParserUtil.parseSearchType(SearchType.TYPE_EMAIL.toUpperCase()));","lastModifiedDate":"2022-03-15"},{"lineNumber":353,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new SearchType(SearchType.TYPE_NAME),","lastModifiedDate":"2022-03-15"},{"lineNumber":354,"author":{"gitId":"sharpstorm"},"content":"                ParserUtil.parseSearchType(SearchType.TYPE_NAME.toUpperCase()));","lastModifiedDate":"2022-03-15"},{"lineNumber":355,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":356,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":357,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":358,"author":{"gitId":"HanJiyao"},"content":"    public void parseAndCreateNewCommand_returnsCommand() throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":359,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(\"test 1  command\",","lastModifiedDate":"2022-03-15"},{"lineNumber":360,"author":{"gitId":"HanJiyao"},"content":"                ParserUtil.parseAndCreateNewCommand(\"test command\", \"1\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":361,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":362,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":363,"author":{"gitId":"HanJiyao"},"content":"    public void parseAndCreateNewCommand_invalidValue_throwsParseException() throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":364,"author":{"gitId":"HanJiyao"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAndCreateNewCommand(\"\", \"1\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":365,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"HanJiyao":10,"sharpstorm":127,"dandaandaaaaaan":44,"-":185}},{"path":"src/test/java/seedu/contax/logic/parser/RangeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.logic.parser;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.Messages;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.logic.commands.RangeCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":" * Test for parses input arguments and creates a new RangeCommand object.","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"public class RangeCommandParserTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"            RangeCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"    private RangeCommandParser parser \u003d new RangeCommandParser();","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        // no index specified","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        // no index and no field specified","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"range edit\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        // to index is not specified","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"range edit p/123 from/1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        // field name is provided","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, \"range edit n/name\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"    public void parse_someFieldsSpecified_invalidIndex() {","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        Index fromIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        Index toIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"        String sampleUserInput \u003d \"range delete from/2 to/1\";","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"\"), \"range delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/from\"), \"2\");","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/to\"), \"1\");","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand expectedRangeCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(fromIndex, toIndex, \"range delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        assertParseFailure(parser, sampleUserInput, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"        Index fromIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"        Index toIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        String sampleUserInput \u003d \"range delete from/1 to/2\";","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"\"), \"range delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/from\"), \"1\");","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        argumentMultimap.put(new Prefix(\"/to\"), \"2\");","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"        RangeCommand expectedRangeCommand \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"                new RangeCommand(fromIndex, toIndex, \"range delete\");","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"        assertParseSuccess(parser, sampleUserInput, expectedRangeCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"HanJiyao":68}},{"path":"src/test/java/seedu/contax/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalTags.CLIENTS;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AddressBookBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    public void copyConstructor() {","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        AddressBook addressBook2 \u003d new AddressBook();","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        addressBook2.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        addressBook2.addTag(CLIENTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(addressBook2, new AddressBook(addressBook2));","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setPerson(null, null));","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setPerson(ALICE, null));","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setPerson(null, ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_personNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.setPerson(ALICE, ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_personInList_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        addressBook.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        addressBook.setPerson(ALICE, CARL);","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"        AddressBook expectedAddressBook \u003d","lastModifiedDate":"2022-03-13"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"                new AddressBookBuilder().withTag(FRIENDS).withPerson(CARL).withPerson(BOB).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAddressBook, addressBook);","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    public void removePerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.removePerson(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"    public void removePerson_personNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.removePerson(ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"    public void removePerson_personInList_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        addressBook.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        addressBook.removePerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"KwanHW"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withTag(FRIENDS).withPerson(BOB).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAddressBook, addressBook);","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"        AddressBook refAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"KwanHW"},"content":"        AddressBook addedPersonAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":150,"author":{"gitId":"KwanHW"},"content":"        AddressBook otherAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refAddressBook.equals(new AddressBook()));","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"KwanHW"},"content":"        assertTrue(refAddressBook.equals(refAddressBook));","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"KwanHW"},"content":"        assertTrue(addedPersonAddressBook.equals(otherAddressBook));","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refAddressBook.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refAddressBook.equals(2));","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refAddressBook.equals(addedPersonAddressBook));","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2022-03-09"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"        AddressBook refAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"KwanHW"},"content":"        AddressBook addedPersonAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"        AddressBook otherAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refAddressBook.hashCode(), (new AddressBook()).hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"KwanHW"},"content":"        assertEquals(refAddressBook.hashCode(), refAddressBook.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"KwanHW"},"content":"        assertEquals(addedPersonAddressBook, otherAddressBook);","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"KwanHW"},"content":"        assertNotEquals(refAddressBook.hashCode(), addedPersonAddressBook.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":179,"author":{"gitId":"KwanHW"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":189,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"KwanHW"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"KwanHW"},"content":"        public ObservableList\u003cTag\u003e getTagList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"KwanHW"},"content":"            return tags;","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"sharpstorm":82,"KwanHW":21,"-":93}},{"path":"src/test/java/seedu/contax/model/IndexedCsvFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"public class IndexedCsvFileTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void constructor_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IndexedCsvFile(null, 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5));","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void constructor_invalidFilepath_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"        File invalidFileExtension \u003d new File(\"invalidFileExtension.txt\");","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        File invalidFilePath \u003d new File(\"randomFileName\");","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IndexedCsvFile(invalidFileExtension, 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5));","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IndexedCsvFile(invalidFilePath, 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5));","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void isValidFilePath() {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        //null filepath","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertThrows(NullPointerException.class, () -\u003e IndexedCsvFile.isValidFilePath(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        //blank filepath","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(IndexedCsvFile.isValidFilePath(\"\")); // empty string","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(IndexedCsvFile.isValidFilePath(\" \")); // spaces only","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        //no file extension","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(IndexedCsvFile.isValidFilePath(\"/data/file\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        //non-csv file extension","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(IndexedCsvFile.isValidFilePath(\"/data/file.txt\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        //valid file paths","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(IndexedCsvFile.isValidFilePath(\"/data/file.csv\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        //file with no name has the extension, no such file will exist anyway so it doesn\u0027t matter if it is valid","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(IndexedCsvFile.isValidFilePath(\".csv\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        //same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile csvFile1 \u003d new IndexedCsvFile(new File(\"/data/file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5);","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(csvFile1.equals(csvFile1));","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        //same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile csvFile2 \u003d new IndexedCsvFile(new File(\"/data/file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5);","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(csvFile1.equals(csvFile2));","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        //null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        //different filename -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5)));","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        //different positions -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 6,","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 5)));","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"                6, 3, 4, 5)));","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 6, 4, 5)));","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 6, 5)));","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertFalse(csvFile1.equals(new IndexedCsvFile(new File(\"file.csv\"), 1,","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"                2, 3, 4, 6)));","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dandaandaaaaaan":81}},{"path":"src/test/java/seedu/contax/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_EXTRA;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalTags.CLIENTS;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalTags.FAMILY;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-03-05"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.exceptions.TagNotFoundException;","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AddressBookBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.ScheduleBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"    public void setScheduleFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setScheduleFilePath(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    public void setScheduleFilePath_validPath_setsScheduleFilePath() {","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        Path path \u003d Paths.get(\"address/schedule/file/path\");","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setScheduleFilePath(path);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(path, modelManager.getScheduleFilePath());","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    public void setAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBook(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    public void setAddressBook_validAddressBook_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setAddressBook(getTypicalAddressBook());","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(getTypicalAddressBook(), modelManager.getAddressBook());","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"    public void deletePerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deletePerson(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"    public void deletePerson_personNotInAddressBook_throwsPersonNotFoundException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e modelManager.deletePerson(ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"    public void deletePerson_personInAddressBookNoAppointments_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        modelManager.deletePerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"KwanHW"},"content":"        expectedModel.addTag(FRIENDS);","lastModifiedDate":"2022-03-13"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedModel, modelManager);","lastModifiedDate":"2022-03-09"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"    public void deletePerson_personInAddressBookHasAppointments_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-20"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder(APPOINTMENT_EXTRA).withPerson(BOB).build();","lastModifiedDate":"2022-03-20"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(appointment2);","lastModifiedDate":"2022-03-09"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"        modelManager.deletePerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"KwanHW"},"content":"        expectedModel.addTag(FRIENDS);","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-20"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(new AppointmentBuilder(APPOINTMENT_ALICE).withPerson(null).build());","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(appointment2);","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedModel, modelManager);","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(null, null));","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(ALICE, null));","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(null, ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_personNotInAddressBook_throwsPersonNotFoundException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e modelManager.setPerson(ALICE, ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_personInAddressBookNoAppointments_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setPerson(ALICE, CARL);","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"KwanHW"},"content":"        expectedModel.addTag(FRIENDS);","lastModifiedDate":"2022-03-13"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(CARL);","lastModifiedDate":"2022-03-09"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedModel, modelManager);","lastModifiedDate":"2022-03-09"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"    public void setPerson_personInAddressBookHasAppointments_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-20"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder(APPOINTMENT_EXTRA).withPerson(BOB).build();","lastModifiedDate":"2022-03-20"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(appointment2);","lastModifiedDate":"2022-03-09"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setPerson(ALICE, CARL);","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"KwanHW"},"content":"        expectedModel.addTag(FRIENDS);","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(CARL);","lastModifiedDate":"2022-03-09"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addPerson(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-20"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(new AppointmentBuilder(APPOINTMENT_ALICE).withPerson(CARL).build());","lastModifiedDate":"2022-03-09"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"        expectedModel.addAppointment(appointment2);","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedModel, modelManager);","lastModifiedDate":"2022-03-09"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"KwanHW"},"content":"    // Tag Management Related tests","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"KwanHW"},"content":"    public void hasTag_nullTag_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTag(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"KwanHW"},"content":"    public void hasTag_tagNotInAddressBook_returnsFalse() {","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"KwanHW"},"content":"        assertFalse(modelManager.hasTag(CLIENTS));","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"KwanHW"},"content":"    public void hasTag_tagInAddressBook_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"KwanHW"},"content":"        modelManager.addTag(FAMILY);","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"KwanHW"},"content":"        assertTrue(modelManager.hasTag(FAMILY));","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":243,"author":{"gitId":"KwanHW"},"content":"    public void deleteTag_nullTag_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":244,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteTag(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":245,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":246,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":247,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":248,"author":{"gitId":"KwanHW"},"content":"    public void deleteTag_tagInList_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":249,"author":{"gitId":"KwanHW"},"content":"        modelManager.addTag(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":250,"author":{"gitId":"KwanHW"},"content":"        modelManager.deleteTag(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":251,"author":{"gitId":"KwanHW"},"content":"        assertEquals(new ModelManager(), modelManager);","lastModifiedDate":"2022-03-09"},{"lineNumber":252,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":253,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":254,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":255,"author":{"gitId":"KwanHW"},"content":"    public void deleteTag_tagNotInList_throwsTagNotFoundException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":256,"author":{"gitId":"KwanHW"},"content":"        assertThrows(TagNotFoundException.class, () -\u003e modelManager.deleteTag(FAMILY));","lastModifiedDate":"2022-03-09"},{"lineNumber":257,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":258,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"    public void setSchedule_nullSchedule_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setSchedule(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"    public void setSchedule_validSchedule_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setSchedule(getTypicalSchedule());","lastModifiedDate":"2022-03-08"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(getTypicalSchedule(), modelManager.getSchedule());","lastModifiedDate":"2022-03-08"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"    public void getSchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, modelManager.getFilteredAppointmentList().size());","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_ALICE, modelManager.getFilteredAppointmentList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAppointment(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_appointmentNotInSchedule_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":284,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.hasAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":286,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":287,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":288,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_appointmentInSchedule_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":289,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":290,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(modelManager.hasAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":292,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"    public void hasOverlappingAppointment_duplicatedAppointmentInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"        Appointment duplicate \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(modelManager.hasOverlappingAppointment(duplicate));","lastModifiedDate":"2022-03-08"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":299,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"    public void hasOverlappingAppointment_disjointAppointmentsInList_returnsFalse() {","lastModifiedDate":"2022-03-08"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.hasOverlappingAppointment(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_nullArguments_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppointment(null, APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppointment(APPOINTMENT_ALICE, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppointment(null, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_targetNotInModel_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"            -\u003e modelManager.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_sameAppointment_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, modelManager.getSchedule());","lastModifiedDate":"2022-03-08"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_differentAppointment_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":331,"author":{"gitId":"sharpstorm"},"content":"        modelManager.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":332,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":333,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":334,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, modelManager.getSchedule());","lastModifiedDate":"2022-03-08"},{"lineNumber":335,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":336,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":337,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":338,"author":{"gitId":"sharpstorm"},"content":"    public void deleteAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":339,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteAppointment(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":340,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":341,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":342,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":343,"author":{"gitId":"sharpstorm"},"content":"    public void deleteAppointment_appointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":344,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":345,"author":{"gitId":"sharpstorm"},"content":"            -\u003e modelManager.deleteAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":346,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":347,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":348,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":349,"author":{"gitId":"sharpstorm"},"content":"    public void deleteAppointment_appointmentInList_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":350,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":351,"author":{"gitId":"sharpstorm"},"content":"        modelManager.deleteAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":352,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new ModelManager(), modelManager);","lastModifiedDate":"2022-03-08"},{"lineNumber":353,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":354,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":355,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":356,"author":{"gitId":"sharpstorm"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":357,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-03-14"},{"lineNumber":358,"author":{"gitId":"sharpstorm"},"content":"            -\u003e modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":359,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":360,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":361,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":362,"author":{"gitId":"sharpstorm"},"content":"    public void updateFilteredAppointmentList_predicateChange_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":363,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-14"},{"lineNumber":364,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":365,"author":{"gitId":"sharpstorm"},"content":"        modelManager.addAppointment(APPOINTMENT_EXTRA);","lastModifiedDate":"2022-03-14"},{"lineNumber":366,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":367,"author":{"gitId":"sharpstorm"},"content":"        modelManager.updateFilteredAppointmentList(appointment -\u003e !appointment.equals(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-14"},{"lineNumber":368,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_EXTRA, modelManager.getFilteredAppointmentList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":369,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_ALICE, modelManager.getFilteredAppointmentList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":370,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":371,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":376,"author":{"gitId":"sharpstorm"},"content":"        Schedule schedule \u003d new ScheduleBuilder().withAppointment(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":377,"author":{"gitId":"sharpstorm"},"content":"        Schedule differentSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":381,"author":{"gitId":"sharpstorm"},"content":"        modelManager \u003d new ModelManager(addressBook, schedule, userPrefs);","lastModifiedDate":"2022-03-07"},{"lineNumber":382,"author":{"gitId":"sharpstorm"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, schedule, userPrefs);","lastModifiedDate":"2022-03-07"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":395,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, schedule, userPrefs)));","lastModifiedDate":"2022-03-07"},{"lineNumber":396,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":397,"author":{"gitId":"sharpstorm"},"content":"        // different schedule -\u003e returns false","lastModifiedDate":"2022-03-07"},{"lineNumber":398,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentSchedule, userPrefs)));","lastModifiedDate":"2022-03-07"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":400,"author":{"gitId":"sharpstorm"},"content":"        // different person filteredList -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":403,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, schedule, userPrefs)));","lastModifiedDate":"2022-03-07"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":408,"author":{"gitId":"sharpstorm"},"content":"        // different appointment filteredList -\u003e returns false","lastModifiedDate":"2022-03-14"},{"lineNumber":409,"author":{"gitId":"sharpstorm"},"content":"        modelManager.updateFilteredAppointmentList(appointment -\u003e !appointment.equals(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-14"},{"lineNumber":410,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, schedule, userPrefs)));","lastModifiedDate":"2022-03-14"},{"lineNumber":411,"author":{"gitId":"sharpstorm"},"content":"        modelManager.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":412,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":416,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, schedule, differentUserPrefs)));","lastModifiedDate":"2022-03-07"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":418,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"sharpstorm":258,"KwanHW":42,"-":118}},{"path":"src/test/java/seedu/contax/model/OnboardingStepTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStep;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStory;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingStepTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step2 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"        assertTrue(step1.equals(step1));","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"        // all values same -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"        assertTrue(step1.equals(step2));","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(5));","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        // attribute difference checks","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"                0.3, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.45, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.CENTER, OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.CLEAR_ALL,","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"                1, \"null\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null11\", null, null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", (o, a) -\u003e \"1\", null, false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, (a) -\u003e \"2\", false)));","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(step1.equals(new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, true)));","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"Wei-Xinn"},"content":"    public void setEventType() {","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"Wei-Xinn"},"content":"        step1.setEventType(OnboardingStory.PositionOption.CENTER);","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"Wei-Xinn"},"content":"        // Value is set after setting -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(step1.getPositionOption(), OnboardingStory.PositionOption.CENTER);","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"Wei-Xinn"},"content":"    public void setDisplayMessage() {","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"Wei-Xinn"},"content":"        step1.setDisplayMessage(\"54321\");","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"Wei-Xinn"},"content":"        // Value is set after setting -\u003e returns true","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(step1.getDisplayMessage(), \"54321\");","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"Wei-Xinn"},"content":"    public void setCommand() {","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"Wei-Xinn"},"content":"        step1.setCommand(\"54321\");","lastModifiedDate":"2022-03-14"},{"lineNumber":133,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":134,"author":{"gitId":"Wei-Xinn"},"content":"        // Value is set after setting -\u003e returns true","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(step1.getCommand(), \"54321\");","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"Wei-Xinn"},"content":"    @Test void hashCodeTest() {","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":143,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step2 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":145,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":146,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":149,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step3 \u003d new OnboardingStep(\"message 123\",","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":153,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"Wei-Xinn"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(step1.hashCode(), step1.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"Wei-Xinn"},"content":"        // different object, same parameters -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(step1.hashCode(), step2.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"Wei-Xinn"},"content":"        // different object, different parameters -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"Wei-Xinn"},"content":"        assertNotEquals(step3.hashCode(), step2.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":2,"Wei-Xinn":163}},{"path":"src/test/java/seedu/contax/model/OnboardingStoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Wei-Xinn"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Wei-Xinn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Wei-Xinn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStep;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"Wei-Xinn"},"content":"import seedu.contax.model.onboarding.OnboardingStory;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"Wei-Xinn"},"content":"public class OnboardingStoryTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"Wei-Xinn"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory story1 \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory story2 \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"Wei-Xinn"},"content":"        // both empty stories -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"Wei-Xinn"},"content":"        assertTrue(story1.equals(story2));","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step2 \u003d new OnboardingStep(\"message 2\",","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Wei-Xinn"},"content":"        // different number of steps -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Wei-Xinn"},"content":"        story1.addStory(step1);","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(story1.equals(story2));","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Wei-Xinn"},"content":"        // same size, same stories -\u003e returns ture","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Wei-Xinn"},"content":"        story2.addStory(step1);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Wei-Xinn"},"content":"        assertTrue(story1.equals(story2));","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Wei-Xinn"},"content":"        // same size, different stories -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Wei-Xinn"},"content":"        story1.addStory(step1);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Wei-Xinn"},"content":"        story2.addStory(step2);","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(story1.equals(story2));","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Wei-Xinn"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Wei-Xinn"},"content":"        assertTrue(story1.equals(story1));","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Wei-Xinn"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(story1.equals(5));","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Wei-Xinn"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Wei-Xinn"},"content":"        assertFalse(story1.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"Wei-Xinn"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Wei-Xinn"},"content":"    public void addStory() {","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory story1 \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStep step1 \u003d new OnboardingStep(\"message 1\",","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"Wei-Xinn"},"content":"                0.2, 0.5, OnboardingStory.OverlayOption.SHOW_COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.PositionOption.RESULT_DISPLAY_TOP,","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"Wei-Xinn"},"content":"                OnboardingStory.HighlightOption.COMMAND_BOX,","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"Wei-Xinn"},"content":"                0, \"null\", null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"Wei-Xinn"},"content":"        story1.addStory(step1);","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"Wei-Xinn"},"content":"        // Size of story with 1 step","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(story1.getSize(), 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(story1.getStep(0), step1);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"Wei-Xinn"},"content":"    @Test void hashCodeTest() {","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory story1 \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"Wei-Xinn"},"content":"        OnboardingStory story2 \u003d new OnboardingStory();","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Wei-Xinn"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(story1.hashCode(), story1.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Wei-Xinn"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Wei-Xinn"},"content":"        // different objects -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Wei-Xinn"},"content":"        assertEquals(story1.hashCode(), story2.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"Wei-Xinn"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"Wei-Xinn"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"Wei-Xinn":84}},{"path":"src/test/java/seedu/contax/model/ScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.util.Collection;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.OverlappingAppointmentException;","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.ScheduleBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"public class ScheduleTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private final Schedule schedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    public void constructor() {","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(Collections.emptyList(), schedule.getAppointmentList());","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Schedule(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_validScheduleInput_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        Schedule schedule \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        Schedule createdSchedule \u003d new Schedule(schedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(schedule, createdSchedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Schedule().setAppointments(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_emptyList_returnsEmptySchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        Schedule createdSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        createdSchedule.setAppointments(List.of());","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new Schedule(), createdSchedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_validList_returnsSchedule() {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        Schedule createdSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                .withAppointment(APPOINTMENT_ALONE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        createdSchedule.setAppointments(List.of(APPOINTMENT_ALICE, APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, createdSchedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e schedule.resetData(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    public void resetData_withValidReadOnlySchedule_replacesData() {","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        Schedule newData \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        schedule.resetData(newData);","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(newData, schedule);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    public void resetData_withOverlappingAppointments_throwsOverlappingAppointmentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        // Construct two appointments that have overlapping periods","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        Appointment overlappingAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusMinutes(1))","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"                .build();","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(APPOINTMENT_ALICE, overlappingAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        ScheduleStub newData \u003d new ScheduleStub(newAppointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, () -\u003e schedule.resetData(newData));","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e schedule.hasAppointment(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_appointmentNotInSchedule_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(schedule.hasAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_appointmentInSchedule_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(schedule.hasAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    public void hasAppointment_duplicatedAppointment_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        Appointment clonedAlice \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(schedule.hasAppointment(clonedAlice));","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"    public void hasOverlappingAppointment_duplicatedAppointmentInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        Appointment duplicate \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(schedule.hasOverlappingAppointment(duplicate));","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    public void hasOverlappingAppointment_disjointAppointmentsInList_returnsFalse() {","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(schedule.hasOverlappingAppointment(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    public void getAppointmentsList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.getAppointmentList().remove(0));","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_nullArguments_throwsNullPointException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.setAppointment(null, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.setAppointment(APPOINTMENT_ALICE, null));","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.setAppointment(null, APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentIsSameAppointment_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        schedule.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, schedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentIsOverlappingWithOnlyTarget_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusMinutes(1)).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        schedule.setAppointment(APPOINTMENT_ALICE, editedAppointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(editedAppointment).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, schedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentDisjoint_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        Appointment disjointAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusYears(1)).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"        schedule.setAppointment(APPOINTMENT_ALICE, disjointAppointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(disjointAppointment).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedSchedule, schedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentOverlaps_throwsOverlappingAppointmentException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        Appointment disjointAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusYears(1)).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(disjointAppointment);","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.setAppointment(APPOINTMENT_ALICE, disjointAppointment));","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e schedule.removeAppointment(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_appointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"            -\u003e schedule.removeAppointment(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_appointmentInList_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"        schedule.removeAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new Schedule(), schedule);","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"        Schedule refSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"        Schedule otherSchedule \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refSchedule.equals(refSchedule));","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refSchedule.equals(new Schedule()));","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(otherSchedule.equals(new ScheduleBuilder(getTypicalSchedule()).build()));","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refSchedule.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refSchedule.equals(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refSchedule.equals(otherSchedule));","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"        Schedule refSchedule \u003d new Schedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"        Schedule otherSchedule \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refSchedule.hashCode(), refSchedule.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refSchedule.hashCode(), new Schedule().hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(otherSchedule.hashCode(), getTypicalSchedule().hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(refSchedule.hashCode(), otherSchedule.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"     * A stub ReadOnlySchedule whose appointments list can violate interface constraints.","lastModifiedDate":"2022-03-07"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"    private static class ScheduleStub implements ReadOnlySchedule {","lastModifiedDate":"2022-03-07"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-07"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"        ScheduleStub(Collection\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-03-07"},{"lineNumber":250,"author":{"gitId":"sharpstorm"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2022-03-07"},{"lineNumber":251,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":252,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":253,"author":{"gitId":"sharpstorm"},"content":"        @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":254,"author":{"gitId":"sharpstorm"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":255,"author":{"gitId":"sharpstorm"},"content":"            return appointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":256,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":257,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":259}},{"path":"src/test/java/seedu/contax/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public void setScheduleFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setScheduleFilePath(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref1 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref2 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        userPref2.setGuiSettings(new GuiSettings(1, 1, 1, 1));","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref3 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        userPref3.setAddressBookFilePath(Path.of(\"/test/path\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref4 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        userPref4.setScheduleFilePath(Path.of(\"/test/path2\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(userPref1.equals(userPref1));","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(userPref1.equals(new UserPrefs()));","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.equals(userPref2));","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.equals(userPref3));","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.equals(userPref4));","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public void hashcode() {","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref1 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref2 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        userPref2.setGuiSettings(new GuiSettings(1, 1, 1, 1));","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref3 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        userPref3.setAddressBookFilePath(Path.of(\"/test/path\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        UserPrefs userPref4 \u003d new UserPrefs();","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        userPref4.setScheduleFilePath(Path.of(\"/test/path2\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(userPref1.hashCode() \u003d\u003d new UserPrefs().hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.hashCode() \u003d\u003d userPref2.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.hashCode() \u003d\u003d userPref3.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(userPref1.hashCode() \u003d\u003d userPref4.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"sharpstorm":53,"-":19}},{"path":"src/test/java/seedu/contax/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_AMELIA;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentTest {","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        Appointment reference \u003d new AppointmentBuilder().build();","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"                new Appointment(null, null, null, null));","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"                new Appointment(reference.getName(), reference.getStartDateTime(), null, null));","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"                new Appointment(reference.getName(), null, reference.getDuration(), null));","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                new Appointment(null, reference.getStartDateTime(), reference.getDuration(), null));","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        Appointment aliceCopy \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(APPOINTMENT_ALICE.equals(aliceCopy));","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(APPOINTMENT_ALICE.equals(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(null));","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(5));","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        // different appointment -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAliceAppt \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                .withName(VALID_APPOINTMENT_NAME_AMELIA).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(editedAliceAppt));","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        // different startDateTime -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:34:44\")).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(editedAliceAppt));","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        // different duration -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(APPOINTMENT_ALICE).withDuration(123).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(editedAliceAppt));","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-06"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        editedAliceAppt \u003d new AppointmentBuilder(APPOINTMENT_ALICE).withPerson(BOB).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(APPOINTMENT_ALICE.equals(editedAliceAppt));","lastModifiedDate":"2022-03-06"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public void getEndDateTime() {","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(30)","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:34:44\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(1)","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T23:59:22\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        appointment1.getEndDateTime().equals(LocalDateTime.parse(\"2020-04-23T13:04:00\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        appointment2.getEndDateTime().equals(LocalDateTime.parse(\"2020-04-24T00:00:00\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    public void isOverlapping() {","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(30)","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:34:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:34:30\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment3 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T13:03:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment4 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:10:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment5 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(15)","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:40:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment6 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(60)","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:10:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        // Bounds Testing","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment7 \u003d new AppointmentBuilder(appointment1).withDuration(60).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment8 \u003d new AppointmentBuilder(appointment1).withDuration(15).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment9 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(20)","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:44:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment10 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(40)","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:24:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment11 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T13:04:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment12 \u003d new AppointmentBuilder(appointment1)","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(1)","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-04-23T12:33:00\")).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment1)); // Will overlap with itself","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment2)); // Will overlap since seconds are zeroed","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment2.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment3)); // 3 starts before 1 ends","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment3.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment4)); // 1 starts before 4 ends","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment4.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment5)); // 5 is contained in 1","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment5.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment6)); // 1 is contained in 6","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment6.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        /* Testing Overlapping Bounds */","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        // 1 and 7 start at the same time, 1 is contained in 7","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment7));","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment7.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        // 1 and 8 start at the same time, 8 is contained in 1","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment8));","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment8.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        // 1 and 9 end at the same time, 9 is contained in 1","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment9));","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment9.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        // 1 and 10 end at the same time, 1 is contained in 10","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.isOverlapping(appointment10));","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment10.isOverlapping(appointment1)); // Symmetric test","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointment1.isOverlapping(appointment11));","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointment11.isOverlapping(appointment1));","lastModifiedDate":"2022-03-07"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointment1.isOverlapping(appointment12));","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointment12.isOverlapping(appointment1));","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"    public void withPerson() {","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder().withDuration(30).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder().withDuration(30).withPerson(null).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment3 \u003d new AppointmentBuilder().withDuration(30).withPerson(BOB).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment1.withPerson(null).equals(appointment2));","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointment3.equals(appointment1.withPerson(BOB)));","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"    public void toStringTest() {","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime startDate \u003d LocalDateTime.parse(\"2022-02-11T12:30:00\");","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointment \u003d new AppointmentBuilder().withName(\"Test Meeting\")","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(startDate).withDuration(20).withPerson(ALICE).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(appointment.getName()","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"                + \"; Start Date Time: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"                + appointment.getStartDateTime()","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"                + \"; Duration: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"                + appointment.getDuration()","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"                + \"; Person: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"                + appointment.getPerson(),","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"                appointment.toString());","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"    public void comparisonTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"        Appointment refAppointment \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-10-30T12:34:00\")).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentBefore \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-10-30T12:33:00\")).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentAfter \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-14"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-10-30T12:35:00\")).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        Appointment appointmentDifferentSeconds \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-14"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2020-10-30T12:34:54\")).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(0, refAppointment.compareTo(refAppointment));","lastModifiedDate":"2022-03-14"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(0, refAppointment.compareTo(appointmentDifferentSeconds));","lastModifiedDate":"2022-03-14"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, refAppointment.compareTo(appointmentBefore));","lastModifiedDate":"2022-03-14"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(-1, refAppointment.compareTo(appointmentAfter));","lastModifiedDate":"2022-03-14"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":196}},{"path":"src/test/java/seedu/contax/model/appointment/DateRangePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"public class DateRangePredicateTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public void constructorTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime refDateTime \u003d LocalDateTime.parse(\"2022-12-12T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateRangePredicate(null, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateRangePredicate(refDateTime, null));","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateRangePredicate(null, refDateTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public void predicateTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime rangeStart \u003d LocalDateTime.parse(\"2022-12-12T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime rangeEnd \u003d LocalDateTime.parse(\"2022-12-13T12:34\");","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        DateRangePredicate predicate \u003d new DateRangePredicate(rangeStart, rangeEnd);","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        // Inclusive Border Tests","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T12:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-13T12:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T11:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-13T11:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        // Containment Tests","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T13:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(24 * 60 * 4)","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-11T13:34\")).build())); // 4 days","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        // Appointments are partially in the range","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(180)","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T11:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDuration(180)","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T11:34\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        // Completely disjoint","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDuration(60)","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-12T11:33\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDuration(180)","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-12-13T12:35\")).build()));","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":57}},{"path":"src/test/java/seedu/contax/model/appointment/DisjointAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALONE;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.exceptions.OverlappingAppointmentException;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"public class DisjointAppointmentListTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private final DisjointAppointmentList appointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.contains(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointmentList.contains(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointmentList.contains(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public void contains_duplicatedAppointmentInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        Appointment duplicate \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointmentList.contains(duplicate));","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void containsOverlapping_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.containsOverlapping(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    public void containsOverlapping_appointmentAlreadyInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointmentList.containsOverlapping(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    public void containsOverlapping_duplicatedAppointmentInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        Appointment duplicate \u003d new AppointmentBuilder(APPOINTMENT_ALICE).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointmentList.containsOverlapping(duplicate));","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    public void containsOverlapping_overlappingAppointmentsInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusMinutes(10)).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(appointmentList.containsOverlapping(editedAppointment));","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    public void containsOverlapping_disjointAppointmentsInList_returnsFalse() {","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(appointmentList.containsOverlapping(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.add(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    public void add_overlappingAppointment_throwsOverlappingAppointmentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, () -\u003e appointmentList.add(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusMinutes(1)).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, () -\u003e appointmentList.add(editedAppointment));","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    public void add_unsortedNewAppointment_successSortsPosition() {","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baseDateTime \u003d APPOINTMENT_ALONE.getStartDateTime().value;","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        Appointment beforeAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(2)).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        Appointment afterAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.plusDays(2)).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(beforeAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(beforeAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_ALONE, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(afterAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(beforeAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_ALONE, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(afterAppointment, appointmentList.asUnmodifiableObservableList().get(2));","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointment(null, APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointment(APPOINTMENT_ALICE, null));","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentIsSameAppointment_success() {","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(APPOINTMENT_ALICE, APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentIsOverlappingWithOnlyTarget_success() {","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusMinutes(1)).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(APPOINTMENT_ALICE, editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(editedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":157,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":158,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":159,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentDisjoint_success() {","lastModifiedDate":"2022-03-07"},{"lineNumber":160,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":161,"author":{"gitId":"sharpstorm"},"content":"        Appointment disjointAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":162,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-07"},{"lineNumber":163,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusYears(1)).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":164,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":165,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(APPOINTMENT_ALICE, disjointAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":166,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":167,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(disjointAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":168,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":169,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":170,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":171,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentDisjointDifferentOrdering_successSortsPosition() {","lastModifiedDate":"2022-03-14"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baseDateTime \u003d APPOINTMENT_ALONE.getStartDateTime().value;","lastModifiedDate":"2022-03-14"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"        Appointment modifiedAloneAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(1)).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(modifiedAloneAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"        Appointment beforeAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-14"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(2)).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        Appointment afterAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-14"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.plusDays(2)).build();","lastModifiedDate":"2022-03-14"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(APPOINTMENT_ALONE, beforeAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(beforeAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(modifiedAloneAppointment, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(beforeAppointment, afterAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(modifiedAloneAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(afterAppointment, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(beforeAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(modifiedAloneAppointment, modifiedAloneAppointment);","lastModifiedDate":"2022-03-14"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(beforeAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(modifiedAloneAppointment, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-14"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(afterAppointment, appointmentList.asUnmodifiableObservableList().get(2));","lastModifiedDate":"2022-03-14"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointment(afterAppointment, afterAppointment);","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(beforeAppointment, appointmentList.asUnmodifiableObservableList().get(0));","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(modifiedAloneAppointment, appointmentList.asUnmodifiableObservableList().get(1));","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(afterAppointment, appointmentList.asUnmodifiableObservableList().get(2));","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":206,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":207,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":208,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointment_editedAppointmentOverlaps_throwsOverlappingAppointmentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":209,"author":{"gitId":"sharpstorm"},"content":"        Appointment disjointAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":210,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Another Meeting\")","lastModifiedDate":"2022-03-07"},{"lineNumber":211,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.plusYears(1)).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":212,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":213,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(disjointAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":214,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":215,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":216,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointment(APPOINTMENT_ALICE, disjointAppointment));","lastModifiedDate":"2022-03-07"},{"lineNumber":217,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":218,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":219,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":220,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_nullDisjointAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":221,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointments((DisjointAppointmentList) null));","lastModifiedDate":"2022-03-07"},{"lineNumber":223,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":226,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_anotherDisjointAppointmentList_replacesOwnDataWithSuppliedList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":227,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":228,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":229,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-07"},{"lineNumber":230,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointments(expectedAppointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":231,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":232,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":233,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":234,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":235,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":236,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":237,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2022-03-07"},{"lineNumber":238,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":239,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":240,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":241,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":242,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":243,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":244,"author":{"gitId":"sharpstorm"},"content":"        appointmentArrayList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-07"},{"lineNumber":245,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointments(appointmentArrayList);","lastModifiedDate":"2022-03-07"},{"lineNumber":246,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":247,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-07"},{"lineNumber":248,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-07"},{"lineNumber":249,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-07"},{"lineNumber":250,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":251,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":252,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":253,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_unsortedList_sortsListUponSetting() {","lastModifiedDate":"2022-03-14"},{"lineNumber":254,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-14"},{"lineNumber":255,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-14"},{"lineNumber":256,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime baseDateTime \u003d APPOINTMENT_ALONE.getStartDateTime().value;","lastModifiedDate":"2022-03-14"},{"lineNumber":257,"author":{"gitId":"sharpstorm"},"content":"        appointmentArrayList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":258,"author":{"gitId":"sharpstorm"},"content":"        appointmentArrayList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":259,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(1)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":260,"author":{"gitId":"sharpstorm"},"content":"        appointmentArrayList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":261,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(2)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":262,"author":{"gitId":"sharpstorm"},"content":"        appointmentArrayList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":263,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(3)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":264,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.setAppointments(appointmentArrayList);","lastModifiedDate":"2022-03-14"},{"lineNumber":265,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":266,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList expectedAppointmentList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-14"},{"lineNumber":267,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":268,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(3)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":269,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":270,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(2)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":271,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(new AppointmentBuilder(APPOINTMENT_ALONE)","lastModifiedDate":"2022-03-14"},{"lineNumber":272,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(baseDateTime.minusDays(1)).build());","lastModifiedDate":"2022-03-14"},{"lineNumber":273,"author":{"gitId":"sharpstorm"},"content":"        expectedAppointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(expectedAppointmentList, appointmentList);","lastModifiedDate":"2022-03-14"},{"lineNumber":275,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":276,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":277,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":278,"author":{"gitId":"sharpstorm"},"content":"    public void setAppointments_listWithDuplicateAppointments_throwsOverlappingAppointmentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":279,"author":{"gitId":"sharpstorm"},"content":"        List\u003cAppointment\u003e badList \u003d Arrays.asList(APPOINTMENT_ALICE, APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":280,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(OverlappingAppointmentException.class, () -\u003e appointmentList.setAppointments(badList));","lastModifiedDate":"2022-03-07"},{"lineNumber":281,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":282,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":283,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":284,"author":{"gitId":"sharpstorm"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":285,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":286,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2022-03-07"},{"lineNumber":287,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":288,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.asUnmodifiableObservableList().add(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-07"},{"lineNumber":289,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":290,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":291,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":292,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":293,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e appointmentList.remove(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":294,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":295,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":297,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_appointmentNotInList_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":298,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2022-03-08"},{"lineNumber":299,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointmentList.remove(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":300,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":301,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":302,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":303,"author":{"gitId":"sharpstorm"},"content":"    public void removeAppointment_appointmentInList_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":304,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":305,"author":{"gitId":"sharpstorm"},"content":"        appointmentList.remove(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":306,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(new DisjointAppointmentList(), appointmentList);","lastModifiedDate":"2022-03-08"},{"lineNumber":307,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":308,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":309,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":310,"author":{"gitId":"sharpstorm"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":311,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList refList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":312,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList list2 \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":313,"author":{"gitId":"sharpstorm"},"content":"        list2.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":314,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList list3 \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":315,"author":{"gitId":"sharpstorm"},"content":"        list3.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":316,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":317,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refList.equals(refList));","lastModifiedDate":"2022-03-08"},{"lineNumber":318,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(refList.equals(new DisjointAppointmentList()));","lastModifiedDate":"2022-03-08"},{"lineNumber":319,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(list2.equals(list3));","lastModifiedDate":"2022-03-08"},{"lineNumber":320,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":321,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refList.equals(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":322,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refList.equals(0));","lastModifiedDate":"2022-03-08"},{"lineNumber":323,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(refList.equals(list2));","lastModifiedDate":"2022-03-08"},{"lineNumber":324,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":325,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":326,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":327,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2022-03-08"},{"lineNumber":328,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList refList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":329,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList list2 \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":330,"author":{"gitId":"sharpstorm"},"content":"        list2.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":331,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList list3 \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":332,"author":{"gitId":"sharpstorm"},"content":"        list3.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":333,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":334,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refList.hashCode(), refList.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":335,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refList.hashCode(), new DisjointAppointmentList().hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":336,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(list2.hashCode(), list3.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":337,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":338,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(refList.hashCode(), list2.hashCode());","lastModifiedDate":"2022-03-08"},{"lineNumber":339,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":340,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":341,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":342,"author":{"gitId":"sharpstorm"},"content":"    public void iterator() {","lastModifiedDate":"2022-03-08"},{"lineNumber":343,"author":{"gitId":"sharpstorm"},"content":"        DisjointAppointmentList refList \u003d new DisjointAppointmentList();","lastModifiedDate":"2022-03-08"},{"lineNumber":344,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":345,"author":{"gitId":"sharpstorm"},"content":"        refList.add(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-08"},{"lineNumber":346,"author":{"gitId":"sharpstorm"},"content":"        refList.add(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-08"},{"lineNumber":347,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":348,"author":{"gitId":"sharpstorm"},"content":"        HashSet\u003cAppointment\u003e result \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":349,"author":{"gitId":"sharpstorm"},"content":"        for (Appointment x : refList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":350,"author":{"gitId":"sharpstorm"},"content":"            result.add(x);","lastModifiedDate":"2022-03-08"},{"lineNumber":351,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":352,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":353,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(result.contains(APPOINTMENT_ALONE));","lastModifiedDate":"2022-03-08"},{"lineNumber":354,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(result.contains(APPOINTMENT_ALICE));","lastModifiedDate":"2022-03-08"},{"lineNumber":355,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":356,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":356}},{"path":"src/test/java/seedu/contax/model/appointment/DurationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class DurationTest {","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_invalidDuration_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"        int invalidDuration \u003d -1;","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public void isValidDuration() {","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        // invalid duration","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Duration.isValidDuration(-1)); // negative integer","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Duration.isValidDuration(-123456789)); // negative integer","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Duration.isValidDuration(0)); // zero is also not allowed","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        // valid duration","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Duration.isValidDuration(1)); // edge of validity","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Duration.isValidDuration(10)); // small integer","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Duration.isValidDuration(2147483646)); // large integer","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public void stringConversion() {","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"100 Minutes\", new Duration(100).toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2147483646 Minutes\", new Duration(2147483646).toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public void objectEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        Duration reference1 \u003d new Duration(1);","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        Duration reference2 \u003d new Duration(2);","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(new Duration(1)));","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference2.equals(new Duration(2)));","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(reference1));","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(123456));","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(reference2));","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(new Duration(3)));","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        Duration reference \u003d new Duration(123);","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(reference.hashCode(), new Duration(123).hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(reference.hashCode(), new Duration(321).hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":59}},{"path":"src/test/java/seedu/contax/model/appointment/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class NameTest {","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        // null name","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        // invalid name","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Name.isValidName(\"^\")); // invalid non-alphanumeric characters","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(Name.isValidName(\"work?\")); // contains invalid non-alphanumeric characters","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        // valid name","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\"work meeting\")); // alphabets only","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\"2nd work meeting\")); // alphanumeric characters","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\"IMPORTANT work meeting\")); // with capital letters","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\".,!@#$%\u0026*() aB1\")); // Contains only valid symbols","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Name.isValidName(\"Very important meeting with some Client 2\")); // long names","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    public void stringConversion() {","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Work Meeting 1\", new Name(\"Work Meeting 1\").toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"123455\", new Name(\"123455\").toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"very long name that is very long\",","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                new Name(\"very long name that is very long\").toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public void objectEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        Name reference1 \u003d new Name(\"Work Meeting\");","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        Name reference2 \u003d new Name(\"Work Meeting 2\");","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(new Name(\"Work Meeting\")));","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference2.equals(new Name(\"Work Meeting 2\")));","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(reference1));","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(\"some string\"));","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(reference2));","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(new Name(\"Wrong Name\")));","lastModifiedDate":"2022-03-06"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(new Name(\"work meeting\")));","lastModifiedDate":"2022-03-06"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        Name reference \u003d new Name(\"Work Meeting\");","lastModifiedDate":"2022-03-06"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(reference.hashCode(), new Name(\"Work Meeting\").hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(reference.hashCode(), new Name(\"Work Meeting 2\").hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":74}},{"path":"src/test/java/seedu/contax/model/appointment/StartDateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class StartDateTimeTest {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new StartDateTime(null));","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public void stringConversion() {","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime \u003d LocalDateTime.parse(\"2020-10-30T12:34:56\");","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceNow \u003d LocalDateTime.now();","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(StartDateTime.DATETIME_FORMAT);","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"30-10-2020 12:34\", new StartDateTime(referenceTime).toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(referenceNow.format(formatter), new StartDateTime(referenceNow).toString());","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    public void objectEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime1 \u003d LocalDateTime.parse(\"2020-10-30T12:34:56\");","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime2 \u003d LocalDateTime.now();","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime3 \u003d LocalDateTime.parse(\"2020-10-30T12:34:46\");","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime4 \u003d LocalDateTime.parse(\"2020-10-30T12:34:00\");","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime reference1 \u003d new StartDateTime(referenceTime1);","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime reference2 \u003d new StartDateTime(referenceTime2);","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(new StartDateTime(referenceTime1)));","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference2.equals(new StartDateTime(referenceTime2)));","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(new StartDateTime(referenceTime3))); // Only differ in seconds","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(referenceTime4, reference1.value);","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(reference1));","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(\"some string\"));","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(reference2));","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(new StartDateTime(LocalDateTime.parse(\"2021-09-29T10:10:10\"))));","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeEquality() {","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime1 \u003d LocalDateTime.parse(\"2020-10-30T12:34:56\");","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        LocalDateTime referenceTime2 \u003d LocalDateTime.parse(\"2020-10-29T12:34:56\");","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime reference \u003d new StartDateTime(referenceTime1);","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(reference.hashCode(), new StartDateTime(referenceTime1).hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(reference.hashCode(), new StartDateTime(referenceTime2).hashCode());","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public void comparisonTest() {","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime refTime \u003d new StartDateTime(LocalDateTime.parse(\"2020-10-30T12:34:00\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime timeBefore \u003d new StartDateTime(LocalDateTime.parse(\"2020-10-30T12:33:00\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime timeAfter \u003d new StartDateTime(LocalDateTime.parse(\"2020-10-30T12:35:00\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        StartDateTime refTimeDifferentSeconds \u003d new StartDateTime(LocalDateTime.parse(\"2020-10-30T12:34:54\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(0, refTime.compareTo(refTime));","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(0, refTime.compareTo(refTimeDifferentSeconds));","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, refTime.compareTo(timeBefore));","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(-1, refTime.compareTo(timeAfter));","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":74}},{"path":"src/test/java/seedu/contax/model/person/AddressContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"public class AddressContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first@email\");","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first@email\", \"second@email\");","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"        // One keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"new-address\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"new-address\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        // Multiple keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"new-address\", \"new-address2\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"new-address\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"new-address\", \"new-address2\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"new-address\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        // Zero keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"new-address\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"        // Non-matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"new-address\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"old-address\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        // Keywords match name, phone and email, but does not match address","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":74}},{"path":"src/test/java/seedu/contax/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"sharpstorm":2,"-":34}},{"path":"src/test/java/seedu/contax/model/person/EmailContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"public class EmailContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first@email\");","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first@email\", \"second@email\");","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d new EmailContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d new EmailContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"        // One keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"1@a.com\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"1@a.com\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        // Multiple keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"1@a.com\", \"2@a.com\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"1@a.com\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"1@a.com\", \"2@a.com\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"1@a.com\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"        // Zero keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"1@a.com\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        // Non-matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"1@a.com\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"2@a.com\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"        // Keywords match name, phone and address, but does not match email","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"Main\", \"Street\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":72}},{"path":"src/test/java/seedu/contax/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"sharpstorm":2,"-":66}},{"path":"src/test/java/seedu/contax/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"sharpstorm":2,"-":73}},{"path":"src/test/java/seedu/contax/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"sharpstorm":2,"-":38}},{"path":"src/test/java/seedu/contax/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.COLLEAGUES;","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"    public void withTag() {","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"        // Unique tag added to person","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(\"colleagues\", \"friends\").build();","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"        assertEquals(ALICE.withTag(COLLEAGUES), editedAlice);","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"        // Adding a tag that already exists in person","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        assertEquals(BENSON, BENSON.withTag(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"    public void withoutTag() {","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags().build();","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"        assertEquals(ALICE.withoutTag(FRIENDS), editedAlice);","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"    public void hasTag() {","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        // Tag does exist in person","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        assertTrue(ALICE.hasTag(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        // Tag does not exist in person","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        assertFalse(ALICE.hasTag(COLLEAGUES));","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"        // Person does not have any tags","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"        assertFalse(CARL.hasTag(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"sharpstorm":10,"KwanHW":33,"-":81}},{"path":"src/test/java/seedu/contax/model/person/PhoneContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"public class PhoneContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1234\");","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"1234\", \"5678\");","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"HanJiyao"},"content":"        // One keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"HanJiyao"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"1234\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"1234\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"HanJiyao"},"content":"        // Multiple keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"123\", \"456\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"123\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"HanJiyao"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"123\", \"456\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"123\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"HanJiyao"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"HanJiyao"},"content":"        // Zero keywords","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"HanJiyao"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"123\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"HanJiyao"},"content":"        // Non-matching keyword","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"123\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"456\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"HanJiyao"},"content":"        // Keywords match name, email and address, but does not match phone","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"HanJiyao"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":74}},{"path":"src/test/java/seedu/contax/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"sharpstorm":2,"-":38}},{"path":"src/test/java/seedu/contax/model/person/TagNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"public class TagNameContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"        // complete words","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(\"friends\");","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        // partial words","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"        predicate \u003d new TagNameContainsKeywordsPredicate(\"fri\");","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(\"not the same\");","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        assertFalse(predicate.test(ALICE));","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        // extra characters of an existing keyword","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        predicate \u003d new TagNameContainsKeywordsPredicate(\"ssssfriendsssss\");","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        assertFalse(predicate.test(ALICE));","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        String firstKeyword \u003d \"friends\";","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        String secondKeyword \u003d \"colleagues\";","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate firstPredicate \u003d new TagNameContainsKeywordsPredicate(firstKeyword);","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        TagNameContainsKeywordsPredicate secondPredicate \u003d new TagNameContainsKeywordsPredicate(secondKeyword);","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstPredicate.equals(new TagNameContainsKeywordsPredicate(firstKeyword)));","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(0));","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"KwanHW":47}},{"path":"src/test/java/seedu/contax/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.person;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":172,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"sharpstorm"},"content":"        UniquePersonList refList \u003d new UniquePersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"sharpstorm"},"content":"        UniquePersonList list2 \u003d new UniquePersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"sharpstorm"},"content":"        list2.add(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"sharpstorm"},"content":"        UniquePersonList list3 \u003d new UniquePersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"sharpstorm"},"content":"        list3.add(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":181,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refList.hashCode(), refList.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":182,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(refList.hashCode(), new UniquePersonList().hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":183,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(list2.hashCode(), list3.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":184,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":185,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(refList.hashCode(), list2.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":186,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":189,"author":{"gitId":"sharpstorm"},"content":"    public void iterator() {","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"sharpstorm"},"content":"        UniquePersonList refList \u003d new UniquePersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"sharpstorm"},"content":"        refList.add(ALICE);","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"sharpstorm"},"content":"        refList.add(BOB);","lastModifiedDate":"2022-03-09"},{"lineNumber":194,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":195,"author":{"gitId":"sharpstorm"},"content":"        HashSet\u003cPerson\u003e result \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-09"},{"lineNumber":196,"author":{"gitId":"sharpstorm"},"content":"        for (Person x : refList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":197,"author":{"gitId":"sharpstorm"},"content":"            result.add(x);","lastModifiedDate":"2022-03-09"},{"lineNumber":198,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":200,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(result.contains(BOB));","lastModifiedDate":"2022-03-09"},{"lineNumber":201,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(result.contains(ALICE));","lastModifiedDate":"2022-03-09"},{"lineNumber":202,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":203,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"sharpstorm":43,"-":161}},{"path":"src/test/java/seedu/contax/model/tag/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"        // complete words","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"friends\");","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"        assertTrue(predicate.test(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        // partial words","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(\"fri\");","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"        assertTrue(predicate.test(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"not the same\");","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        assertFalse(predicate.test(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        // extra characters of an existing keyword","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(\"ssssfriendsssss\");","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        assertFalse(predicate.test(FRIENDS));","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        String firstKeyword \u003d \"friends\";","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        String secondKeyword \u003d \"colleagues\";","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstKeyword);","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondKeyword);","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        assertTrue(firstPredicate.equals(new NameContainsKeywordsPredicate(firstKeyword)));","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        assertFalse(firstPredicate.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":47}},{"path":"src/test/java/seedu/contax/model/tag/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":" * Unit tests for Tag names.","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"public class NameTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        // only alphabets","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"        assertTrue(Name.isValidName(\"Friends\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"        // only digits","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        assertTrue(Name.isValidName(\"12345\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"        // Combination of alphabets and digits","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"        assertTrue(Name.isValidName(\"L33tC0de\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"        // Combination of alphabets and digits with spacing","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        assertTrue(Name.isValidName(\"CS2103 Group mates\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        // Empty string","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\"\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        // Space only","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\" \"));","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        // Symbols","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\"\u0026\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        // Symbols within valid characters","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\"Fr!ends\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\"Adversary_\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        assertFalse(Name.isValidName(\"!mp0ss!bl3\u0026\"));","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"    public void hashCode_test() {","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        Name name \u003d new Name(\"friends\");","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"        Name name2 \u003d new Name(\"family\");","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        assertEquals(name.hashCode(), name.hashCode());","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"        assertEquals(name.hashCode(), new Name(\"friends\").hashCode());","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"        assertNotEquals(name.hashCode(), name2.hashCode());","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"        Name name \u003d new Name(\"friends\");","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"        Name name2 \u003d new Name(\"family\");","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"        assertTrue(name.equals(new Name(\"friends\")));","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"        assertFalse(name.equals(name2));","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"        assertFalse(name.equals(0));","lastModifiedDate":"2022-03-14"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":64}},{"path":"src/test/java/seedu/contax/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag((String) null));","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"sharpstorm":2,"KwanHW":1,"-":23}},{"path":"src/test/java/seedu/contax/model/tag/UniqueTagListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.model.tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalPersons.FRIENDS;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalTags.CLIENTS;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.testutil.TypicalTags.FAMILY;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.exceptions.DuplicateTagException;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"class UniqueTagListTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    private final UniqueTagList uniqueTagList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public void contains_nullTag_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.contains(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public void contains_tagNotInList_returnsFalse() {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        assertFalse(uniqueTagList.contains(CLIENTS));","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"    public void contains_tagInList_returnsTrue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(CLIENTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"        assertTrue(uniqueTagList.contains(CLIENTS));","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"    public void add_nullTag_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.add(null));","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    public void add_duplicateTag_throwsDuplicateTagException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(CLIENTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"KwanHW"},"content":"        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.add(CLIENTS));","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"KwanHW"},"content":"    public void setTags_nullList_throwsNullPointerException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"KwanHW"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTags((List\u003cTag\u003e) null));","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"KwanHW"},"content":"    public void setTags_uniqueTagList_replaceOwnListWithProvidedUniqueTagList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(FAMILY);","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"KwanHW"},"content":"        expectedUniqueTagList.add(CLIENTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.setTags(expectedUniqueTagList);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"        assertEquals(expectedUniqueTagList, uniqueTagList);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"    public void setTag_uniqueTag_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(FAMILY);","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        expectedUniqueTagList.add(CLIENTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.setTag(FAMILY, CLIENTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"        assertEquals(expectedUniqueTagList, uniqueTagList);","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"    public void setTag_tagsAreSame_success() {","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(FAMILY);","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"        expectedUniqueTagList.add(FAMILY);","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.setTag(FAMILY, FAMILY);","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"        assertEquals(expectedUniqueTagList, uniqueTagList);","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"KwanHW"},"content":"    public void setTag_duplicateTag_throwsDuplicateTagException() {","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(FAMILY);","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"KwanHW"},"content":"        uniqueTagList.add(CLIENTS);","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTag(FAMILY, CLIENTS));","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"KwanHW"},"content":"    public void setTags_duplicateTagList_throwsDuplicateTagException() {","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"KwanHW"},"content":"        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(CLIENTS, CLIENTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"KwanHW"},"content":"        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTags(listWithDuplicateTags));","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"KwanHW"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList tagList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList list2 \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"KwanHW"},"content":"        list2.add(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList list3 \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"KwanHW"},"content":"        list3.add(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"KwanHW"},"content":"        // Same tag list","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"KwanHW"},"content":"        assertTrue(tagList.equals(tagList));","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"KwanHW"},"content":"        assertTrue(tagList.equals(new UniqueTagList()));","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"KwanHW"},"content":"        assertTrue(list2.equals(list3));","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"KwanHW"},"content":"        // Null checking","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"KwanHW"},"content":"        assertFalse(tagList.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"KwanHW"},"content":"        assertFalse(tagList.equals(list2));","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"KwanHW"},"content":"        assertFalse(tagList.equals(0));","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"KwanHW"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList refList \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList list2 \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":121,"author":{"gitId":"KwanHW"},"content":"        list2.add(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":123,"author":{"gitId":"KwanHW"},"content":"        UniqueTagList list3 \u003d new UniqueTagList();","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"KwanHW"},"content":"        list3.add(FRIENDS);","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"KwanHW"},"content":"        assertEquals(refList.hashCode(), refList.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"KwanHW"},"content":"        assertEquals(refList.hashCode(), new UniqueTagList().hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"KwanHW"},"content":"        assertEquals(list2.hashCode(), list3.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"KwanHW"},"content":"        assertNotEquals(refList.hashCode(), list2.hashCode());","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"KwanHW":132}},{"path":"src/test/java/seedu/contax/model/util/SearchTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HanJiyao"},"content":"package seedu.contax.model.util;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"HanJiyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"HanJiyao"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"HanJiyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"HanJiyao"},"content":"public class SearchTypeTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"HanJiyao"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"HanJiyao"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"HanJiyao"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new SearchType(invalidName));","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"HanJiyao"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"HanJiyao"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"HanJiyao"},"content":"        // null name","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"HanJiyao"},"content":"        assertThrows(NullPointerException.class, () -\u003e SearchType.isValidType(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"HanJiyao"},"content":"        // invalid name","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(SearchType.isValidType(\"\")); // empty string","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(SearchType.isValidType(\" \")); // spaces only","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(SearchType.isValidType(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"HanJiyao"},"content":"        assertFalse(SearchType.isValidType(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"HanJiyao"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"HanJiyao"},"content":"        // valid name","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(new SearchType(\"name\").searchType, \"name\");","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(SearchType.isValidType(\"name\")); // name","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(new SearchType(\"phone\").searchType, \"phone\");","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(SearchType.isValidType(\"phone\")); // phone","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(new SearchType(\"email\").searchType, \"email\");","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(SearchType.isValidType(\"email\")); // email","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"HanJiyao"},"content":"        assertEquals(new SearchType(\"address\").searchType, \"address\");","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"HanJiyao"},"content":"        assertTrue(SearchType.isValidType(\"address\")); // address","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"HanJiyao"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void stringConversion() {","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"name\", new SearchType(\"name\").toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"phone\", new SearchType(\"phone\").toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"email\", new SearchType(\"email\").toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"address\", new SearchType(\"address\").toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void objectEquality() {","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        SearchType reference1 \u003d new SearchType(\"name\");","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        SearchType reference2 \u003d new SearchType(\"phone\");","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(reference1));","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(reference1.equals(new SearchType(\"name\")));","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(-1));","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(\"\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(reference1.equals(reference2));","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    public void hashCodeEquality() {","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        SearchType reference \u003d new SearchType(\"name\");","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(reference.hashCode(), new SearchType(\"name\").hashCode());","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        assertNotEquals(reference.hashCode(), new SearchType(\"phone\").hashCode());","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"HanJiyao"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"HanJiyao":39,"sharpstorm":31}},{"path":"src/test/java/seedu/contax/storage/CsvManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ExportCsvCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.ModelManager;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.ImportCsvObjectBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.testutil.PersonBuilder;","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"public class CsvManagerTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_NAME \u003d \"Person 1\";","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_EMAIL \u003d \"example1@example.com\";","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON1_ADDRESS \u003d \"Example address 1\";","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_NAME \u003d \"Person 2\";","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_EMAIL \u003d \"example2@example.com\";","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON2_ADDRESS \u003d \"Example address 2\";","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON3_NAME \u003d \"Person 3\";","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON3_PHONE \u003d \"12345678\";","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON3_EMAIL \u003d \"example3@example.com\";","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String PERSON3_ADDRESS \u003d \"Example address, with comma\";","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String EXISTING_FILEPATH \u003d \"./src/test/data/ExportCsvTest/ValidAddressBook.csv\";","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    private static final String NONEXISTANT_FILEPATH \u003d \"./nonExistentFile.csv\";","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMA_FILEPATH \u003d \"./src/test/data/ExportCsvTest/addressWithComma.csv\";","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String NOTAG_FILEPATH \u003d \"./src/test/data/ExportCsvTest/noTags.csv\";","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @TempDir","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public Path testFolder;","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void exportThenImportCsv_validAddressBook_success() throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Regular flow with existing file","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build model with Person 1 and 2","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        ExportCsvCommand exportCsvCommand \u003d new ExportCsvCommand(EXISTING_FILEPATH);","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        exportCsvCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile importBack \u003d new ImportCsvObjectBuilder(EXISTING_FILEPATH).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(importBack);","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build empty resultant model","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model resultantModel \u003d new ModelManager(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, resultantModel, ImportCsvCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void exportThenImportCsv_nonExistentOutputFile_success() throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        //If file does not already exist, it should automatically make a file","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build model with Person 1 and 2","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        String tempFilePath \u003d testFolder.resolve(NONEXISTANT_FILEPATH).toAbsolutePath().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        ExportCsvCommand exportCsvCommand \u003d new ExportCsvCommand(tempFilePath);","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        exportCsvCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        IndexedCsvFile importBack \u003d new ImportCsvObjectBuilder(tempFilePath).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(importBack);","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build empty resultant model","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model resultantModel \u003d new ModelManager(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, resultantModel, ImportCsvCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void exportThenImport_addressHaveComma_success() throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Test to ensure that any potential commas in the address field is still able to export and import","lastModifiedDate":"2022-03-14"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build model with Person 1 and 3","lastModifiedDate":"2022-03-14"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS).withTags(\"tag1\", \"tag2\");","lastModifiedDate":"2022-03-14"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder3 \u003d new PersonBuilder().withName(PERSON3_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON3_PHONE).withEmail(PERSON3_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON3_ADDRESS).withTags(\"tag1\");","lastModifiedDate":"2022-03-14"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder3.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        ExportCsvCommand exportCsvCommand \u003d new ExportCsvCommand(COMMA_FILEPATH);","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"        exportCsvCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile importBack \u003d new ImportCsvObjectBuilder(COMMA_FILEPATH).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(importBack);","lastModifiedDate":"2022-03-14"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build empty resultant model","lastModifiedDate":"2022-03-14"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model resultantModel \u003d new ModelManager(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, resultantModel, ImportCsvCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void exportThenImport_noTags_success() throws CommandException {","lastModifiedDate":"2022-03-14"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Test to ensure contacts with no tags are properly imported/exported","lastModifiedDate":"2022-03-14"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build model with Person 1 and 2","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder1 \u003d new PersonBuilder().withName(PERSON1_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON1_PHONE).withEmail(PERSON1_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON1_ADDRESS);","lastModifiedDate":"2022-03-14"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder1.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"        PersonBuilder personBuilder2 \u003d new PersonBuilder().withName(PERSON2_NAME)","lastModifiedDate":"2022-03-14"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withPhone(PERSON2_PHONE).withEmail(PERSON2_EMAIL)","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"                .withAddress(PERSON2_ADDRESS);","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"        model.addPerson(personBuilder2.build());","lastModifiedDate":"2022-03-14"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"        ExportCsvCommand exportCsvCommand \u003d new ExportCsvCommand(NOTAG_FILEPATH);","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"dandaandaaaaaan"},"content":"        exportCsvCommand.execute(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"dandaandaaaaaan"},"content":"        IndexedCsvFile importBack \u003d new ImportCsvObjectBuilder(NOTAG_FILEPATH).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"dandaandaaaaaan"},"content":"        ImportCsvCommand importCsvCommand \u003d new ImportCsvCommand(importBack);","lastModifiedDate":"2022-03-14"},{"lineNumber":135,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Build empty resultant model","lastModifiedDate":"2022-03-14"},{"lineNumber":136,"author":{"gitId":"dandaandaaaaaan"},"content":"        Model resultantModel \u003d new ModelManager(new AddressBook(), new Schedule(), new UserPrefs());","lastModifiedDate":"2022-03-14"},{"lineNumber":137,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":138,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertCommandSuccess(importCsvCommand, resultantModel, ImportCsvCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2022-03-14"},{"lineNumber":139,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":140,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"sharpstorm":11,"dandaandaaaaaan":129}},{"path":"src/test/java/seedu/contax/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private static final AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_START_DATETIME \u003d \"2022-12-2212:39\";","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private static final int INVALID_DURATION \u003d -1;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    private static final String INVALID_PERSON \u003d \"Bobby\";","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_NAME \u003d APPOINTMENT_ALICE.getName().toString();","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_START_DATETIME \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            DateTimeFormatter.ofPattern(JsonAdaptedAppointment.DATETIME_FORMAT)","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                    .format(APPOINTMENT_ALICE.getStartDateTime().value);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private static final int VALID_DURATION \u003d 30;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    private static final String VALID_PERSON \u003d addressBook.getPersonList().get(0).getName().toString();","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(APPOINTMENT_ALICE, appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(INVALID_APPOINTMENT_NAME,","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"                VALID_START_DATETIME, VALID_DURATION, VALID_PERSON);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(null, VALID_START_DATETIME, VALID_DURATION, VALID_PERSON);","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_invalidStartDateTime_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, INVALID_START_DATETIME, VALID_DURATION, VALID_PERSON);","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d JsonAdaptedAppointment.INVALID_DATETIME_MESSAGE;","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_nullStartDateTime_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, null, VALID_DURATION, VALID_PERSON);","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"                StartDateTime.class.getSimpleName());","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_invalidDuration_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, VALID_START_DATETIME, INVALID_DURATION, VALID_PERSON);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d JsonAdaptedAppointment.INVALID_DURATION_MESSAGE;","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment2 \u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, VALID_START_DATETIME, 0, VALID_PERSON);","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment2.toModelType(addressBook));","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_invalidPerson_throwsIllegalValueException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, VALID_START_DATETIME, VALID_DURATION, INVALID_PERSON);","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        String expectedMessage \u003d JsonAdaptedAppointment.INVALID_PERSON_MESSAGE;","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            -\u003e appointment.toModelType(addressBook));","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_nullPerson_success() {","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"                new JsonAdaptedAppointment(VALID_NAME, VALID_START_DATETIME, VALID_DURATION, null);","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"            Appointment modelAppointment \u003d appointment.toModelType(addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(null, modelAppointment.getPerson());","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        } catch (IllegalValueException ex) {","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":111}},{"path":"src/test/java/seedu/contax/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String INVALID_PHONE \u003d \"+sg42344\";","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":9,"dandaandaaaaaan":1,"-":100}},{"path":"src/test/java/seedu/contax/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.HOON;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.IDA;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":9,"-":101}},{"path":"src/test/java/seedu/contax/storage/JsonScheduleStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_ALICE;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.APPOINTMENT_EXTRA;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-20"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.AppointmentBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.ScheduleBuilder;","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"public class JsonScheduleStorageTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\",","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            \"data\", \"JsonScheduleStorageTest\");","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private static final AddressBook GLOBAL_ADDRESSBOOK \u003d getTypicalAddressBook();","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    @TempDir","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    public Path testFolder;","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public void readSchedule_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e readSchedule(\"FileDoesNotExist.json\", null));","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    public void readSchedule_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e readSchedule(null, GLOBAL_ADDRESSBOOK));","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    private java.util.Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath, AddressBook addressBook)","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return new JsonScheduleStorage(Paths.get(filePath))","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"                .readSchedule(addToTestDataPathIfNotNull(filePath), addressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"                : null;","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(readSchedule(\"NonExistentFile.json\", GLOBAL_ADDRESSBOOK).isPresent());","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(DataConversionException.class, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            -\u003e readSchedule(\"notJsonFormatSchedule.json\", GLOBAL_ADDRESSBOOK));","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public void readSchedule_invalidAppointment_recordSkipped() throws Exception {","lastModifiedDate":"2022-03-20"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlySchedule schedule \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"                readSchedule(\"invalidAppointmentSchedule.json\", GLOBAL_ADDRESSBOOK).get();","lastModifiedDate":"2022-03-20"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(0, schedule.getAppointmentList().size());","lastModifiedDate":"2022-03-20"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    public void readAddressBook_invalidAndValidAppointment_recordSkipped() throws Exception {","lastModifiedDate":"2022-03-20"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlySchedule schedule \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"                readSchedule(\"invalidAndValidAppointmentSchedule.json\", GLOBAL_ADDRESSBOOK).get();","lastModifiedDate":"2022-03-20"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-20"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Valid appointment\")","lastModifiedDate":"2022-03-20"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(LocalDateTime.parse(\"2022-11-11T12:34\"))","lastModifiedDate":"2022-03-20"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"                .withDuration(10)","lastModifiedDate":"2022-03-20"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"                .build();","lastModifiedDate":"2022-03-20"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withAppointment(expectedAppointment).build();","lastModifiedDate":"2022-03-20"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(schedule, expectedSchedule);","lastModifiedDate":"2022-03-20"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-20"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public void readSchedule_overlappingAppointment_throwsDataConversionException() {","lastModifiedDate":"2022-03-20"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(DataConversionException.class, ()","lastModifiedDate":"2022-03-20"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"            -\u003e readSchedule(\"overlappingAppointmentSchedule.json\", GLOBAL_ADDRESSBOOK));","lastModifiedDate":"2022-03-20"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    public void readAddressBook_validAppointments_success() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"        Optional\u003cReadOnlySchedule\u003e schedule \u003d readSchedule(\"validAppointmentSchedule.json\",","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"                GLOBAL_ADDRESSBOOK);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        if (schedule.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, schedule.get().getAppointmentList().size());","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"    public void readAndSaveSchedule_allInOrder_success() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        Path filePath \u003d testFolder.resolve(\"TempSchedule.json\");","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        Schedule original \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        JsonScheduleStorage jsonScheduleStorage \u003d new JsonScheduleStorage(filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        // Save in new file and read back","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        jsonScheduleStorage.saveSchedule(original, filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlySchedule readBack \u003d jsonScheduleStorage.readSchedule(filePath, GLOBAL_ADDRESSBOOK).get();","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        Appointment edittedAppointment \u003d new AppointmentBuilder(APPOINTMENT_ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"                .withStartDateTime(APPOINTMENT_ALICE.getStartDateTime().value.minusDays(1))","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"                .withName(\"Different Meeting\").build();","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"        original.addAppointment(edittedAppointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"        jsonScheduleStorage.saveSchedule(original, filePath);","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        readBack \u003d jsonScheduleStorage.readSchedule(filePath, GLOBAL_ADDRESSBOOK).get();","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        original.addAppointment(APPOINTMENT_EXTRA);","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        jsonScheduleStorage.saveSchedule(original); // file path not specified","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        readBack \u003d jsonScheduleStorage.readSchedule(GLOBAL_ADDRESSBOOK).get(); // file path not specified","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    public void saveSchedule_nullSchedule_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSchedule(null, \"SomeFile.json\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"     * Saves {@code schedule} at the specified {@code filePath}.","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    private void saveSchedule(ReadOnlySchedule schedule, String filePath) {","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"            new JsonScheduleStorage(Paths.get(filePath))","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"                    .saveSchedule(schedule, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2022-03-07"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSchedule(new Schedule(), null));","lastModifiedDate":"2022-03-07"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":156}},{"path":"src/test/java/seedu/contax/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.JsonUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TypicalPersons;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.testutil.TypicalTags;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    private static final Path NO_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"noPersonsAddressBook.json\");","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"    private static final Path NO_TAGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"noTagsAddressBook.json\");","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    private static final Path DUPLICATE_TAGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTagsAddressBook.json\");","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    // Needs to be redifined","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    public void toModelType_personsOnlyNoTags_success() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"KwanHW"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"KwanHW"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"    public void toModelType_noPersonsOnlyTags_success() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(NO_PERSONS_FILE,","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"KwanHW"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"KwanHW"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"KwanHW"},"content":"        AddressBook noPersonsAddressBook \u003d TypicalTags.getTagOnlyAddressBook();","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"KwanHW"},"content":"        assertEquals(addressBookFromFile, noPersonsAddressBook);","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"KwanHW"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"KwanHW"},"content":"    public void toModelType_duplicateTags_throwIllegalValueException() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TAGS_FILE,","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"sharpstorm":6,"KwanHW":31,"-":41}},{"path":"src/test/java/seedu/contax/storage/JsonSerializableScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.JsonUtil;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TypicalAppointments;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.testutil.TypicalPersons;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class JsonSerializableScheduleTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableScheduleTest\");","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private static final Path TYPICAL_APPOINTMENTS_FILE \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            TEST_DATA_FOLDER.resolve(\"typicalAppointmentsSchedule.json\");","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private static final Path INVALID_APPOINTMENT_FILE \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            TEST_DATA_FOLDER.resolve(\"invalidAppointmentSchedule.json\");","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    private static final Path OVERLAPPING_APPOINTMENTS_FILE \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            TEST_DATA_FOLDER.resolve(\"overlappingAppointmentsSchedule.json\");","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private static final AddressBook GLOBAL_ADDRESSBOOK \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_typicalAppointmentsFile_success() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPOINTMENTS_FILE,","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        Schedule addressBookFromFile \u003d dataFromFile.toModelType(GLOBAL_ADDRESSBOOK);","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        Schedule typicalPersonsAddressBook \u003d TypicalAppointments.getTypicalSchedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_invalidAppointmentFile_recordSkipped() throws Exception {","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPOINTMENT_FILE,","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        Schedule schedule \u003d dataFromFile.toModelType(GLOBAL_ADDRESSBOOK);","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(TypicalAppointments.getTypicalSchedule(), schedule);","lastModifiedDate":"2022-03-20"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public void toModelType_overlappingAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(OVERLAPPING_APPOINTMENTS_FILE,","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSchedule.MESSAGE_OVERLAPPING_APPOINTMENT, ()","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            -\u003e dataFromFile.toModelType(GLOBAL_ADDRESSBOOK));","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":55}},{"path":"src/test/java/seedu/contax/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        userPrefs.setScheduleFilePath(Paths.get(\"schedule.json\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"sharpstorm":6,"-":118}},{"path":"src/test/java/seedu/contax/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.storage;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalAppointments.getTypicalSchedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.GuiSettings;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.ReadOnlySchedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.UserPrefs;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        JsonScheduleStorage scheduleStorage \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                new JsonScheduleStorage(getTempFilePath(\"schedule\"));","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, scheduleStorage, userPrefsStorage);","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    public void getUserPrefsFilePath() {","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(storageManager.getUserPrefsFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public void scheduleReadSave() throws Exception {","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        /*","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"         * {@link JsonScheduleStorage} class.","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"         */","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        Schedule original \u003d getTypicalSchedule();","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        storageManager.saveSchedule(original);","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        ReadOnlySchedule retrieved \u003d storageManager.readSchedule(getTypicalAddressBook()).get();","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(original, new Schedule(retrieved));","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    public void getScheduleFilePath() {","lastModifiedDate":"2022-03-14"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(storageManager.getScheduleFilePath());","lastModifiedDate":"2022-03-14"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":34,"-":61}},{"path":"src/test/java/seedu/contax/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"     * Adds a new {@code Tag} to the {@code AddressBook} that we are building.","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"     * @param tag The specified tag to add to the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"     * @return The updated AddressBookBuilder with the specified tag.","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"    public AddressBookBuilder withTag(Tag tag) {","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"        addressBook.addTag(tag);","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"        return this;","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":3,"KwanHW":11,"-":31}},{"path":"src/test/java/seedu/contax/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.StartDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public static final String DEFAULT_NAME \u003d \"Work Meeting with 2 Bosses\";","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public static final LocalDateTime DEFAULT_START_DATETIME \u003d LocalDateTime.parse(\"2020-10-30T12:34:56\");","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public static final int DEFAULT_DURATION \u003d 150; // 2.5 hours","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    private Name name;","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private StartDateTime startDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private Duration duration;","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private Person person;","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        startDateTime \u003d new StartDateTime(DEFAULT_START_DATETIME);","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        duration \u003d new Duration(DEFAULT_DURATION);","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        person \u003d null;","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2022-03-06"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        name \u003d appointmentToCopy.getName();","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        startDateTime \u003d appointmentToCopy.getStartDateTime();","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        duration \u003d appointmentToCopy.getDuration();","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        person \u003d appointmentToCopy.getPerson();","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Name} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder withName(String name) {","lastModifiedDate":"2022-03-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code StartDateTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder withStartDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-03-06"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        this.startDateTime \u003d new StartDateTime(dateTime);","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Duration} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder withDuration(int duration) {","lastModifiedDate":"2022-03-06"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        this.duration \u003d new Duration(duration);","lastModifiedDate":"2022-03-06"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Person} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-03-06"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public AppointmentBuilder withPerson(Person person) {","lastModifiedDate":"2022-03-06"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-03-06"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-06"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    public Appointment build() {","lastModifiedDate":"2022-03-06"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        return new Appointment(name, startDateTime, duration, person);","lastModifiedDate":"2022-03-06"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":79}},{"path":"src/test/java/seedu/contax/testutil/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" * A utility class for Appointment.","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class AppointmentUtil {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * Returns an add command string for adding the {@code appointment}.","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public static String getAddCommand(Appointment appointment, AddressBook addressBook) {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment, addressBook);","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details.","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public static String getAppointmentDetails(Appointment appointment, AddressBook addressBook) {","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        sb.append(PREFIX_NAME + appointment.getName().name + \" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        sb.append(PREFIX_DATE + appointment.getStartDateTime().value.format(dateFormatter) + \" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        sb.append(PREFIX_TIME + appointment.getStartDateTime().value.format(timeFormatter) + \" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        sb.append(PREFIX_DURATION + String.valueOf(appointment.getDuration().value) + \" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        if (appointment.getPerson() !\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            sb.append(PREFIX_PERSON","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"                    + String.valueOf(addressBook.getPersonList().indexOf(appointment.getPerson())) + \" \");","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        return sb.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * Returns the string parameter inputs for a given {@code EditAppointmentDescriptor}.","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public static String getAppointmentEditDescriptorDetails(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME + name.name + \" \"));","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        descriptor.getStartDate()","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"                .ifPresent(date -\u003e sb.append(PREFIX_DATE + date.format(dateFormatter) + \" \"));","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        descriptor.getStartTime()","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"                .ifPresent(time -\u003e sb.append(PREFIX_TIME + time.format(timeFormatter) + \" \"));","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        descriptor.getDuration()","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"                .ifPresent(duration -\u003e sb.append(PREFIX_DURATION + String.valueOf(duration.value) + \" \"));","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        if (descriptor.isPersonModified()) {","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            descriptor.getPersonIndex()","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"                    .ifPresent(index -\u003e sb.append(PREFIX_PERSON + String.valueOf(index.getOneBased()) + \" \"));","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        return sb.toString();","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"sharpstorm":70}},{"path":"src/test/java/seedu/contax/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"sharpstorm":1,"-":33}},{"path":"src/test/java/seedu/contax/testutil/DateInputUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_DATE_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_END;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TIME_START;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * Provides conversion service from java datetime objects to String inputs for parsing tests.","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class DateInputUtil {","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Returns {@code date} in a string that can be accepted as command inputs.","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param date The date to convert into an input string.","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * @return A string representing {@code date} that can be accepted as a command input.","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public static String formatDateToInputString(LocalDate date) {","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DateUtil.DATE_PATTERN);","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        return date.format(formatter);","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Returns {@code time} in a string that can be accepted as command inputs.","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     * @param time The time to convert into an input string.","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * @return A string representing {@code time} that can be accepted as a command input.","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    public static String formatTimeToInputString(LocalTime time) {","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DateUtil.TIME_PATTERN);","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        return time.format(formatter);","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * Returns the parameterized inputs for a datetime range specified by {@start} and {@end}.","lastModifiedDate":"2022-03-14"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     * @param start The start of the datetime range.","lastModifiedDate":"2022-03-14"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @param end The end of the datetime range.","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * @return A parameterized string for input into a command expecting a date range.","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public static String getDateRangeInput(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        String startDate \u003d \" \" + PREFIX_DATE_START + formatDateToInputString(start.toLocalDate());","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        String endDate \u003d \" \" + PREFIX_DATE_END + formatDateToInputString(end.toLocalDate());","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        String startTime \u003d \" \" + PREFIX_TIME_START + formatTimeToInputString(start.toLocalTime());","lastModifiedDate":"2022-03-14"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        String endTime \u003d \" \" + PREFIX_TIME_END + formatTimeToInputString(end.toLocalTime());","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        return startDate + endDate + startTime + endTime;","lastModifiedDate":"2022-03-14"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":56}},{"path":"src/test/java/seedu/contax/testutil/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-13"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.util.DateUtil;","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Duration;","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Name;","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2022-03-13"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private final EditAppointmentDescriptor descriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-03-13"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details.","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * Does not set the person index in the edit descriptor.","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setName(appointment.getName());","lastModifiedDate":"2022-03-13"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setDuration(appointment.getDuration());","lastModifiedDate":"2022-03-13"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setStartDate(appointment.getStartDateTime().value.toLocalDate());","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setStartTime(appointment.getStartDateTime().value.toLocalTime());","lastModifiedDate":"2022-03-13"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Name} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withName(String name) {","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code startDate} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withStartDate(String startDate) {","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setStartDate(DateUtil.parseDate(startDate).orElse(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code startTime} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withStartTime(String startTime) {","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setStartTime(DateUtil.parseTime(startTime).orElse(null));","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Duration} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withDuration(int duration) {","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setDuration(new Duration(duration));","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code Duration} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withDuration(String duration) {","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        return this.withDuration(Integer.parseInt(duration));","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * Sets the {@code personIndex} of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptorBuilder withPerson(Index personIndex) {","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        descriptor.setPersonIndex(personIndex);","lastModifiedDate":"2022-03-13"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-13"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"    public EditAppointmentDescriptor build() {","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        return descriptor;","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-13"}],"authorContributionMap":{"sharpstorm":87}},{"path":"src/test/java/seedu/contax/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"sharpstorm":8,"-":79}},{"path":"src/test/java/seedu/contax/testutil/EditTagDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.EditTagCommand.EditTagDescriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"/**","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":" * A utility class to help with building EditTagDescriptor objects.","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":" */","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"public class EditTagDescriptorBuilder {","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    private EditTagDescriptor descriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public EditTagDescriptorBuilder() {","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"        this.descriptor \u003d new EditTagDescriptor();","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    public EditTagDescriptorBuilder(EditTagDescriptor descriptor) {","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        this.descriptor \u003d descriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     *  Returns a {@code EditTagDescriptorBuilder} with fields containing {@code tag}\u0027s details","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public EditTagDescriptorBuilder(Tag tag) {","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        this.descriptor \u003d new EditTagDescriptor();","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        descriptor.setTagName(tag.getTagNameString());","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"     * Sets the tag name of the {@code EditTagDescriptor} that we are building.","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"    public EditTagDescriptorBuilder withName(String name) {","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"KwanHW"},"content":"        descriptor.setTagName(name);","lastModifiedDate":"2022-03-14"},{"lineNumber":33,"author":{"gitId":"KwanHW"},"content":"        return this;","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"KwanHW"},"content":"    public EditTagDescriptor build() {","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"KwanHW"},"content":"        return descriptor;","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"KwanHW":39}},{"path":"src/test/java/seedu/contax/testutil/ImportCsvObjectBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_FILE;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.logic.commands.ImportCsvCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import seedu.contax.model.IndexedCsvFile;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ImportCsvObjectBuilder {","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String DEFAULT_FILEPATH \u003d \"./src/test/data/ImportCsvTest/ValidContaXFormat.csv\";","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String SKIP_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/SkipLineContaXFormat.csv\";","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String EMPTY_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/EmptyFile.csv\";","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String CUSTOM_COLUMNS_CSV_FILEPATH \u003d \"./src/test/data/ImportCsvTest/CustomColumnFormat.csv\";","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final String INVALID_FILEPATH \u003d \"./src/test/data/ImportCsvTest/InvalidFile.csv\";","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final int DEFAULT_NAMEPOSITION \u003d 1;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final int DEFAULT_PHONEPOSITION \u003d 2;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final int DEFAULT_EMAILPOSITION \u003d 3;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final int DEFAULT_ADDRESSPOSITION \u003d 4;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static final int DEFAULT_TAGPOSITION \u003d 5;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    private File filePath;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int namePosition;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int phonePosition;","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int emailPosition;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int addressPosition;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int tagPosition;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a {@code ImportCsvObjectBuilder} with the default details.","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ImportCsvObjectBuilder() {","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        filePath \u003d new File(DEFAULT_FILEPATH);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        namePosition \u003d DEFAULT_NAMEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        phonePosition \u003d DEFAULT_PHONEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        emailPosition \u003d DEFAULT_EMAILPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        addressPosition \u003d DEFAULT_ADDRESSPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        tagPosition \u003d DEFAULT_TAGPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a {@code ImportCsvObjectBuilder} with the specified file path, and default positions.","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ImportCsvObjectBuilder(String filePath) {","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.filePath \u003d new File(filePath);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        namePosition \u003d DEFAULT_NAMEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"        phonePosition \u003d DEFAULT_PHONEPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        emailPosition \u003d DEFAULT_EMAILPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        addressPosition \u003d DEFAULT_ADDRESSPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        tagPosition \u003d DEFAULT_TAGPOSITION;","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Creates a {@code ImportCsvObjectBuilder} with the specified file path, and specified positions.","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"    public ImportCsvObjectBuilder(String filePath, int namePosition, int phonePosition, int emailPosition,","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"                                  int addressPosition, int tagPosition) {","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.filePath \u003d new File(filePath);","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.namePosition \u003d namePosition;","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.phonePosition \u003d phonePosition;","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.emailPosition \u003d emailPosition;","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.addressPosition \u003d addressPosition;","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.tagPosition \u003d tagPosition;","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static String getImportCsvCommand(IndexedCsvFile indexedCsvFile) {","lastModifiedDate":"2022-03-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ImportCsvCommand.COMMAND_WORD + \" \" + getIndexedCsvFileDetails(indexedCsvFile);","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static String getIndexedCsvFileDetails(IndexedCsvFile indexedCsvFile) {","lastModifiedDate":"2022-03-14"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-14"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_FILE + indexedCsvFile.getFilePath() + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_NAME + String.valueOf(indexedCsvFile.getNamePositionIndex() + 1) + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_PHONE + String.valueOf(indexedCsvFile.getPhonePositionIndex() + 1) + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_EMAIL + String.valueOf(indexedCsvFile.getEmailPositionIndex() + 1) + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_ADDRESS + String.valueOf(indexedCsvFile.getAddressPositionIndex() + 1) + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        sb.append(PREFIX_TAG + String.valueOf(indexedCsvFile.getTagPositionIndex() + 1) + \" \");","lastModifiedDate":"2022-03-14"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        return sb.toString();","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"    public IndexedCsvFile build() {","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        return new IndexedCsvFile(filePath, namePosition, phonePosition, emailPosition, addressPosition, tagPosition);","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dandaandaaaaaan":92}},{"path":"src/test/java/seedu/contax/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Address;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Email;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Name;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Phone;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"sharpstorm":8,"-":88}},{"path":"src/test/java/seedu/contax/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.AddCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"KwanHW"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.getTagNameString() + \" \")","lastModifiedDate":"2022-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"sharpstorm":10,"KwanHW":1,"-":51}},{"path":"src/test/java/seedu/contax/testutil/ScheduleBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * A utility class to help with building Schedule objects.","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" *     {@code Schedule ab \u003d new ScheduleBuilder().withAppointment(new Appointment(...)).build();}","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class ScheduleBuilder {","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public ScheduleBuilder() {","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        schedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public ScheduleBuilder(Schedule schedule) {","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public ScheduleBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(appointment);","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    public Schedule build() {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        return schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"sharpstorm":34}},{"path":"src/test/java/seedu/contax/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":1,"-":71}},{"path":"src/test/java/seedu/contax/testutil/TagBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"public class TagBuilder {","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"    public static final String DEFAULT_TAGNAME \u003d \"clients\";","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"    private String tagName;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    public TagBuilder() {","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"        tagName \u003d DEFAULT_TAGNAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    public TagBuilder(Tag tagToCopy) {","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"        tagName \u003d tagToCopy.getTagNameString();","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"     * Sets the {@code tagName} of the {@code Tag} that we are building.","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"     * @param tagName The specified tag name.","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"     * @return The updated TagBuilder with the name.","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    public TagBuilder withName(String tagName) {","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"        return this;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"    public Tag build() {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"KwanHW"},"content":"        return new Tag(tagName);","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"KwanHW":31}},{"path":"src/test/java/seedu/contax/testutil/TagUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import static seedu.contax.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.logic.commands.AddTagCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"public class TagUtil {","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"    public static String getAddTagCommand(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"        return AddTagCommand.COMMAND_WORD + \" \" + getTagDetails(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    public static String getTagDetails(Tag tag) {","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"        return PREFIX_NAME + tag.getTagNameString();","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"KwanHW":17}},{"path":"src/test/java/seedu/contax/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Model;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sharpstorm":4,"-":51}},{"path":"src/test/java/seedu/contax/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-06"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-06"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.Schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.appointment.Appointment;","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"public class TypicalAppointments {","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    public static final Appointment APPOINTMENT_ALICE \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"            .withName(\"First meeting with alice\")","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(LocalDateTime.parse(\"2022-11-20T10:25:00\"))","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"            .withDuration(30)","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"            .withPerson(ALICE).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public static final Appointment APPOINTMENT_ALONE \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"            .withName(\"Do some work alone\")","lastModifiedDate":"2022-03-06"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(LocalDateTime.parse(\"2022-10-07T22:50:00\"))","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            .withDuration(60).build();","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public static final Appointment APPOINTMENT_EXTRA \u003d new AppointmentBuilder()","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            .withName(\"Some extra appointment not in the typical schedule\")","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            .withStartDateTime(LocalDateTime.parse(\"2022-09-07T22:50:00\"))","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            .withDuration(30).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Returns an {@code Schedule} with all the typical appointments.","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public static Schedule getTypicalSchedule() {","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        Schedule schedule \u003d new Schedule();","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALICE);","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        schedule.addAppointment(APPOINTMENT_ALONE);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        return schedule;","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"sharpstorm":41}},{"path":"src/test/java/seedu/contax/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.commons.core.index.Index;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"sharpstorm":2,"-":10}},{"path":"src/test/java/seedu/contax/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.model.person.Person;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"KwanHW"},"content":"    public static final Tag FRIENDS \u003d new TagBuilder().withName(\"friends\").build();","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"KwanHW"},"content":"    public static final Tag OWES_MONEY \u003d new TagBuilder().withName(\"owesmoney\").build();","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"KwanHW"},"content":"    // Tag which is not associated with any contact","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"KwanHW"},"content":"    public static final Tag COLLEAGUES \u003d new TagBuilder().withName(\"colleagues\").build();","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"KwanHW"},"content":"        for (Tag tag : getTypicalTags()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"KwanHW"},"content":"            ab.addTag(tag);","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":80,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":87,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"KwanHW"},"content":"    public static List\u003cTag\u003e getTypicalTags() {","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"KwanHW"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(FRIENDS, OWES_MONEY, COLLEAGUES));","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"sharpstorm":13,"KwanHW":15,"-":63}},{"path":"src/test/java/seedu/contax/testutil/TypicalTags.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"KwanHW"},"content":"package seedu.contax.testutil;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"KwanHW"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"KwanHW"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"KwanHW"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.AddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"KwanHW"},"content":"import seedu.contax.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"KwanHW"},"content":"public class TypicalTags {","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"KwanHW"},"content":"    public static final Tag CLIENTS \u003d new TagBuilder().build();","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"KwanHW"},"content":"    public static final Tag FAMILY \u003d new TagBuilder().withName(\"family\").build();","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"KwanHW"},"content":"    public static final Tag COLLEAGUES \u003d new TagBuilder().withName(\"colleagues\").build();","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"KwanHW"},"content":"    public static final Tag NEIGHBOURS \u003d new TagBuilder().withName(\"neighbours\").build();","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"KwanHW"},"content":"    public static AddressBook getTagOnlyAddressBook() {","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"KwanHW"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"KwanHW"},"content":"        for (Tag tag : getTypicalTags()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"KwanHW"},"content":"            ab.addTag(tag);","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"KwanHW"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"KwanHW"},"content":"        return ab;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"KwanHW"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"KwanHW"},"content":"    public static List\u003cTag\u003e getTypicalTags() {","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"KwanHW"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CLIENTS, FAMILY, COLLEAGUES, NEIGHBOURS));","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"KwanHW"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"KwanHW"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"KwanHW":28}},{"path":"src/test/java/seedu/contax/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"sharpstorm":1,"-":34}},{"path":"src/test/java/seedu/contax/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package seedu.contax.ui;","lastModifiedDate":"2022-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static seedu.contax.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import seedu.contax.MainApp;","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"sharpstorm":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003c?import seedu.contax.ui.TestFxmlObject?\u003e","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"sharpstorm":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003cfx:root type\u003d\"seedu.contax.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2022-03-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"sharpstorm":1,"-":5}}]
