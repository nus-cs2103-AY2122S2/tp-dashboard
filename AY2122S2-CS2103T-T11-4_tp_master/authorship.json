[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2022-03-04"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"[![Codecov](https://codecov.io/gh/AY2122S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dZ0PQIQXY29)](https://codecov.io/gh/AY2122S2-CS2103T-T11-4/tp)","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"PeopleSoft is a CLI-based contractor payroll management app. It helps **companies which offer contractor services** with managing how much each contractor is paid. You can:","lastModifiedDate":"2022-03-04"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"- manage contractors","lastModifiedDate":"2022-03-04"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"- manage jobs","lastModifiedDate":"2022-03-04"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"- calculate monthly salary","lastModifiedDate":"2022-03-04"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"It is written with the OOP paradigm in mind and has ~6 KLoC.   ","lastModifiedDate":"2022-03-04"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"View the User Guide and Developer Guide on our **[Website](https://ay2122s2-cs2103t-t11-4.github.io/tp/)**.  ","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"## Credits","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"Inter Font from https://github.com/rsms/inter","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"ian-from-dover":13,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"mainClassName \u003d \u0027peoplesoft.Main\u0027","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"test {","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    useJUnitPlatform()","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    finalizedBy coverage","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    String jUnitVersion \u003d \u00275.8.2\u0027","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"run {","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zhongfu":11,"-":65}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at","lastModifiedDate":"2016-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html","lastModifiedDate":"2016-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":332,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"zhongfu"},"content":"      \u003cproperty name\u003d\"lineWrappingIndentation\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-03-28"},{"lineNumber":344,"author":{"gitId":"zhongfu"},"content":"      \u003c!-- note: forceStrictCondition not used because we might want to have more than 8 spaces","lastModifiedDate":"2022-03-28"},{"lineNumber":345,"author":{"gitId":"zhongfu"},"content":"           e.g.:","lastModifiedDate":"2022-03-28"},{"lineNumber":346,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":347,"author":{"gitId":"zhongfu"},"content":"           blah.blah()","lastModifiedDate":"2022-03-28"},{"lineNumber":348,"author":{"gitId":"zhongfu"},"content":"                   .blah()","lastModifiedDate":"2022-03-28"},{"lineNumber":349,"author":{"gitId":"zhongfu"},"content":"                   .blah()","lastModifiedDate":"2022-03-28"},{"lineNumber":350,"author":{"gitId":"zhongfu"},"content":"                   .blah()","lastModifiedDate":"2022-03-28"},{"lineNumber":351,"author":{"gitId":"zhongfu"},"content":"                   .blag(Abc.def()","lastModifiedDate":"2022-03-28"},{"lineNumber":352,"author":{"gitId":"zhongfu"},"content":"                           .efg());","lastModifiedDate":"2022-03-28"},{"lineNumber":353,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":354,"author":{"gitId":"zhongfu"},"content":"           forceStrictCondition doesn\u0027t take this into account, and forces the last line","lastModifiedDate":"2022-03-28"},{"lineNumber":355,"author":{"gitId":"zhongfu"},"content":"           to be at 8 indentation","lastModifiedDate":"2022-03-28"},{"lineNumber":356,"author":{"gitId":"zhongfu"},"content":"      --\u003e","lastModifiedDate":"2022-03-28"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":375,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":377,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":378,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":379,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":380,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":381,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":382,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":384,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":385,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":395,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":400,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":401,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":402,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":403,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":404,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":405,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":411,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":412,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":413,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":416,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":417,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":14,"-":403}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"thewrik"},"content":"### Zhong Fu","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"thewrik"},"content":"\u003cimg src\u003d\"images/zhongfu.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"thewrik"},"content":"[[github](https://github.com/zhongfu)]","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"thewrik"},"content":"[[portfolio](team/zhongfu.md)]","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"thewrik"},"content":"### Ian Hong","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"thewrik"},"content":"\u003cimg src\u003d\"images/ian-from-dover.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"[[github](http://github.com/ian-from-dover)]","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"[[portfolio](team/ian-from-dover.md)]","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"### Wrik Karmakar","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"\u003cimg src\u003d\"images/thewrik.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"thewrik"},"content":"[[github](http://github.com/thewrik)] [[portfolio](team/thewrik.md)]","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"### Elliot Lim Zhi Yong","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"thewrik"},"content":"\u003cimg src\u003d\"images/spyobird.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"thewrik"},"content":"[[github](http://github.com/spyobird)]","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"thewrik"},"content":"[[portfolio](team/spyobird.md)]","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"thewrik"},"content":"### Elumalai Oviya Dharshini","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"\u003cimg src\u003d\"images/ovidharshini.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"[[github](http://github.com/ovidharshini)]","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"thewrik"},"content":"[[portfolio](team/ovidharshini.md)]","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ovidharshini":2,"-":26,"thewrik":17}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"## Introduction","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"PeopleSoft is a desktop app for **calculating the salary for shift-based contractors**, optimized for use via a **Command Line Interface (CLI)**. If you are a **HR manager** and you can type fast, PeopleSoft can get your payroll tasks done **much faster** than traditional GUI apps.","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"**PeopleSoft helps to:**","lastModifiedDate":"2022-03-25"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"* Simplify the management of data","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"* Reduce menial labour","lastModifiedDate":"2022-03-25"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"* Reduce mistakes due to human error in calculation / accidental edits","lastModifiedDate":"2022-03-25"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"* Helps employees be assured that their hours and pay are registered correctly in the system","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"## Acknowledgements","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"* Project adapted from [addressbook-level3](https://se-education.org/addressbook-level3/DeveloperGuide.html#product-scope)","lastModifiedDate":"2022-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"## Setting up, getting started","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"## Design","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"* allows for the automatic serialization and deserialization of `AddressBook` objects (and any component objects, e.g. `Person`, `Email`, etc) to and from JSON.","lastModifiedDate":"2022-03-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"Classes used by multiple components are in the `peoplesoft.commons` package.","lastModifiedDate":"2022-03-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"ian-from-dover"},"content":"## Implementation","lastModifiedDate":"2022-03-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"### JSON serialization and deserialization","lastModifiedDate":"2022-03-25"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"The serialization and deserialization of model objects (e.g. `AddressBook`, `UniquePersonList`, `Person`, `Tag`) is handled by custom serializers and deserializers, implemented as nested class within each model class.","lastModifiedDate":"2022-03-25"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"These serializers and deserializers are automatically used by Jackson during serialization and deserialization.","lastModifiedDate":"2022-03-25"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"The serializer and deserializer for each class determine how the objects are to be serialized and deserialized, including but not limited to:  ","lastModifiedDate":"2022-03-25"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"* which fields are to be stored,","lastModifiedDate":"2022-03-25"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"* how each field should be (de)serialized, e.g. by directly converting it to/from a JSON type, or by delegating it to Jackson (which will use the serializer/deserializer for the field type), and","lastModifiedDate":"2022-03-25"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"* how the fields and current object are to be represented as (or parsed from) JSON values, e.g. objects, strings, numbers.","lastModifiedDate":"2022-03-25"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"This architecture has some advantages:  ","lastModifiedDate":"2022-03-25"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"* The serdes implementations are kept together with the related classes; developers adding new model classes will not have to modify files in other packages.","lastModifiedDate":"2022-03-25"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"   * The previous implementation (with `JsonAdaptedPerson`, etc) requires that developers update the `JsonAdapted` classes belonging in the `Storage` component; this may not be immediately evident to developers.","lastModifiedDate":"2022-03-25"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"* Developers adding new model classes can incorporate existing types (that already have corresponding serializers/deserializers) without needing to duplicate the serdes code, unlike with the previous implementation.","lastModifiedDate":"2022-03-25"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"* Developers will also not need to (practically) duplicate classes, e.g. `Job` -\u003e `JsonAdaptedJob` (with the `@JsonCreator` annotation), just so that Jackson has something to serialize from/deserialize to.","lastModifiedDate":"2022-03-25"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"However, it also has some drawbacks:  ","lastModifiedDate":"2022-03-25"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"* It can be rather verbose, since each serializer/deserializer class contains a portion of boilerplate code","lastModifiedDate":"2022-03-25"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"* Developers writing serializers/deserializers will need to have basic knowledge of JSON, e.g. the types that are available, the structure of JSON objects and arrays, etc","lastModifiedDate":"2022-03-25"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"* Some knowledge of Jackson components (e.g. `JsonParser`, `JsonGenerator`, `ObjectNode`) is also required, as developers will need to use them to write values to/read values from the internal Jackson representation of a JSON value/object.","lastModifiedDate":"2022-03-25"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":194,"author":{"gitId":"ovidharshini"},"content":"### \\[Proposed\\] Addition of pay multipliers to Job","lastModifiedDate":"2022-03-27"},{"lineNumber":195,"author":{"gitId":"ovidharshini"},"content":"The proposed addition of pay multipliers to `Job` objects is facilitated by `Employment` which implements the operation `Employment#calculatePay()`. `Employment#calculatePay()` calls `Job#calculatePay()` based on optional `Tag` parameters. ","lastModifiedDate":"2022-03-27"},{"lineNumber":196,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":197,"author":{"gitId":"ovidharshini"},"content":"`Tag` contains a Map of `multiplierHistory` which stores pay multiplier values and their time of addition. This is then passed to `Job#calculatePay()` which returns the appropriately scaled pay amount. ","lastModifiedDate":"2022-03-27"},{"lineNumber":198,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":199,"author":{"gitId":"ovidharshini"},"content":"#### Design considerations:","lastModifiedDate":"2022-03-27"},{"lineNumber":200,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":201,"author":{"gitId":"ovidharshini"},"content":"* **Alternative 1 (current choice):** Saves a Map of previous multipliers and time of addition in Tag.","lastModifiedDate":"2022-03-27"},{"lineNumber":202,"author":{"gitId":"ovidharshini"},"content":"    * Pros: Easy to implement. Pay breakdown can be useful in the implementation of other features.","lastModifiedDate":"2022-03-27"},{"lineNumber":203,"author":{"gitId":"ovidharshini"},"content":"    * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2022-03-27"},{"lineNumber":204,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":205,"author":{"gitId":"ovidharshini"},"content":"* **Alternative 2:** Saves pay amount as a fixed value and updates it when Tag is edited.","lastModifiedDate":"2022-03-27"},{"lineNumber":206,"author":{"gitId":"ovidharshini"},"content":"    * Pros: Will use less memory as only one value is being stored.","lastModifiedDate":"2022-03-27"},{"lineNumber":207,"author":{"gitId":"ovidharshini"},"content":"    * Cons: Loss of useful pay breakdown information.","lastModifiedDate":"2022-03-27"},{"lineNumber":208,"author":{"gitId":"ovidharshini"},"content":"``","lastModifiedDate":"2022-03-27"},{"lineNumber":209,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":210,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":211,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":212,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"thewrik"},"content":"### The `Find` command","lastModifiedDate":"2022-03-25"},{"lineNumber":297,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":298,"author":{"gitId":"thewrik"},"content":"The `Find` command is an enhancement of the `Find` feature provided in AB3. ","lastModifiedDate":"2022-03-25"},{"lineNumber":299,"author":{"gitId":"thewrik"},"content":"It is structured using an object of `PersonContainsKeywordPredicate`, adapted from `NameContainsKeywordPredicate`. It ","lastModifiedDate":"2022-03-25"},{"lineNumber":300,"author":{"gitId":"thewrik"},"content":"has the following attributes:","lastModifiedDate":"2022-03-25"},{"lineNumber":301,"author":{"gitId":"thewrik"},"content":"* `static final String COMMAND_WORD` initialised to `\u0027find\u0027`","lastModifiedDate":"2022-03-25"},{"lineNumber":302,"author":{"gitId":"thewrik"},"content":"* `static final String MESSAGE_USAGE` initialised to the relevant message.","lastModifiedDate":"2022-03-25"},{"lineNumber":303,"author":{"gitId":"thewrik"},"content":"* `PersonContainsKeywordPredicate predicate` used to find `Person` objects that match with the given keyword.","lastModifiedDate":"2022-03-25"},{"lineNumber":304,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":305,"author":{"gitId":"thewrik"},"content":"Applying this filter to the entire list means that only `Persons` that match **ALL** the keywords would be retained in ","lastModifiedDate":"2022-03-25"},{"lineNumber":306,"author":{"gitId":"thewrik"},"content":"the filtered list.","lastModifiedDate":"2022-03-25"},{"lineNumber":307,"author":{"gitId":"thewrik"},"content":"#### The `PersonContainsKeywordPredicate` class","lastModifiedDate":"2022-03-25"},{"lineNumber":308,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":309,"author":{"gitId":"thewrik"},"content":"The **match** itself is defined as follows (within the `PersonContainsKeywordPredicate` class which implements the ","lastModifiedDate":"2022-03-25"},{"lineNumber":310,"author":{"gitId":"thewrik"},"content":"`Predicate` interface):","lastModifiedDate":"2022-03-25"},{"lineNumber":311,"author":{"gitId":"thewrik"},"content":"If a `Person` contains **ALL** the keywords passed in the query, either in their `name` field or as equivalent to an ","lastModifiedDate":"2022-03-25"},{"lineNumber":312,"author":{"gitId":"thewrik"},"content":"element in their `tags` set of `Tag` objects, then, passed as a parameter to `test()`,","lastModifiedDate":"2022-03-25"},{"lineNumber":313,"author":{"gitId":"thewrik"},"content":"it is a valid match. ","lastModifiedDate":"2022-03-25"},{"lineNumber":314,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":315,"author":{"gitId":"thewrik"},"content":"The implementation is achieved through using stream manipulations to iterate through each person object, ","lastModifiedDate":"2022-03-25"},{"lineNumber":316,"author":{"gitId":"thewrik"},"content":"and for any such object, iterating through each keyword passed in the query. The keyword is then checked if it is ","lastModifiedDate":"2022-03-25"},{"lineNumber":317,"author":{"gitId":"thewrik"},"content":"contained within the name or among the tags.","lastModifiedDate":"2022-03-25"},{"lineNumber":318,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":319,"author":{"gitId":"thewrik"},"content":"One motivation behind using streams rather than iteration was that streams can be better optimized, given the need or ","lastModifiedDate":"2022-03-25"},{"lineNumber":320,"author":{"gitId":"thewrik"},"content":"bandwith arising later. ","lastModifiedDate":"2022-03-25"},{"lineNumber":321,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":322,"author":{"gitId":"thewrik"},"content":"### The `JobList` interface and `UniqueJobList` class","lastModifiedDate":"2022-03-25"},{"lineNumber":323,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":324,"author":{"gitId":"thewrik"},"content":"The `JobList` is an interface for the list of jobs, that implements the `Iterable` interface and supports minimal list ","lastModifiedDate":"2022-03-25"},{"lineNumber":325,"author":{"gitId":"thewrik"},"content":"operations. ","lastModifiedDate":"2022-03-25"},{"lineNumber":326,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":327,"author":{"gitId":"thewrik"},"content":"The `UniqueJobList` class implements the `JobList` interface to that enforces uniqueness between its elements and does ","lastModifiedDate":"2022-03-25"},{"lineNumber":328,"author":{"gitId":"thewrik"},"content":"not allow nulls.","lastModifiedDate":"2022-03-25"},{"lineNumber":329,"author":{"gitId":"thewrik"},"content":"Furthermore, it has the following attributes, to interact with `java.fx` effectively.","lastModifiedDate":"2022-03-25"},{"lineNumber":330,"author":{"gitId":"thewrik"},"content":"* `ObservableList\u003cJob\u003e internalList`","lastModifiedDate":"2022-03-25"},{"lineNumber":331,"author":{"gitId":"thewrik"},"content":"* `ObservableList\u003cJob\u003e internalUnmodifiableList`","lastModifiedDate":"2022-03-25"},{"lineNumber":332,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":333,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":334,"author":{"gitId":"Spyobird"},"content":"### The `Job` class","lastModifiedDate":"2022-03-25"},{"lineNumber":335,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":336,"author":{"gitId":"Spyobird"},"content":"The `Job` class is an abstraction for a job stored in PeopleSoft. A `Job` object is immutable and contains the","lastModifiedDate":"2022-03-25"},{"lineNumber":337,"author":{"gitId":"Spyobird"},"content":"following attributes:","lastModifiedDate":"2022-03-25"},{"lineNumber":338,"author":{"gitId":"Spyobird"},"content":"* `String jobId` - Jobs are referenced by this attribute.","lastModifiedDate":"2022-03-25"},{"lineNumber":339,"author":{"gitId":"Spyobird"},"content":"* `String desc` - A user-readable description of this job.","lastModifiedDate":"2022-03-25"},{"lineNumber":340,"author":{"gitId":"Spyobird"},"content":"* `Rate rate` - The hourly pay of a job. A `Rate` object contains a `Money` object which saves money values as ","lastModifiedDate":"2022-03-25"},{"lineNumber":341,"author":{"gitId":"Spyobird"},"content":"a `java.math.BigDecimal` with 6 decimal places.","lastModifiedDate":"2022-03-25"},{"lineNumber":342,"author":{"gitId":"Spyobird"},"content":"* `Duration duration` - The duration that a job has been worked. Is used together with `rate` to calculate the","lastModifiedDate":"2022-03-25"},{"lineNumber":343,"author":{"gitId":"Spyobird"},"content":"total job earnings. Uses `java.time.Duration`.","lastModifiedDate":"2022-03-25"},{"lineNumber":344,"author":{"gitId":"Spyobird"},"content":"* `boolean hasPaid` - A boolean to denote if this job has been paid for. Used to calculate the salary of a","lastModifiedDate":"2022-03-25"},{"lineNumber":345,"author":{"gitId":"Spyobird"},"content":"`Person`.","lastModifiedDate":"2022-03-25"},{"lineNumber":346,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":347,"author":{"gitId":"Spyobird"},"content":"The use of immutability ensures that there are no unintended side effects of modifying a `Job`.","lastModifiedDate":"2022-03-25"},{"lineNumber":348,"author":{"gitId":"Spyobird"},"content":"Whenever a `Job` needs to be modified (for example setting the value of `hasPaid`), a new immutable copy","lastModifiedDate":"2022-03-25"},{"lineNumber":349,"author":{"gitId":"Spyobird"},"content":"of the `Job` with the desired changes is created to replace the old instance. Two `Job` objects are considered","lastModifiedDate":"2022-03-25"},{"lineNumber":350,"author":{"gitId":"Spyobird"},"content":"the same job if they share the same `jobId`, which can be compared using `Job#isSameJob()`.","lastModifiedDate":"2022-03-25"},{"lineNumber":351,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":352,"author":{"gitId":"Spyobird"},"content":"### The `Job` and `Person` association - `Employment`","lastModifiedDate":"2022-03-25"},{"lineNumber":353,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":354,"author":{"gitId":"Spyobird"},"content":"In order to represent how a job may be assigned to a person (or a person may take on a job) in real life, an","lastModifiedDate":"2022-03-25"},{"lineNumber":355,"author":{"gitId":"Spyobird"},"content":"association class `Employment` is used. The class handles the following responsibilities:","lastModifiedDate":"2022-03-25"},{"lineNumber":356,"author":{"gitId":"Spyobird"},"content":"* Assigning a `Job` to a `Person`.","lastModifiedDate":"2022-03-25"},{"lineNumber":357,"author":{"gitId":"Spyobird"},"content":"* Removing all necessary associations on the deletion/edit of a `Job` or `Person`.","lastModifiedDate":"2022-03-25"},{"lineNumber":358,"author":{"gitId":"Spyobird"},"content":"* Filtering the `Job` objects that are mapped to a `Person`.","lastModifiedDate":"2022-03-25"},{"lineNumber":359,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":360,"author":{"gitId":"Spyobird"},"content":"In the current implementation, there is a one-to-many mapping of `Job` objects to `Person` objects. An","lastModifiedDate":"2022-03-25"},{"lineNumber":361,"author":{"gitId":"Spyobird"},"content":"association can be created using `Employment#associate(job, person)`. The jobs are internally referenced by","lastModifiedDate":"2022-03-25"},{"lineNumber":362,"author":{"gitId":"Spyobird"},"content":"`jobId`, while the persons are referenced by `Name`.","lastModifiedDate":"2022-03-25"},{"lineNumber":363,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":364,"author":{"gitId":"Spyobird"},"content":"Future implementations may work on allowing for a many-to-many relationship between `Job` objects and `Person`","lastModifiedDate":"2022-03-25"},{"lineNumber":365,"author":{"gitId":"Spyobird"},"content":"objects (to represent how some jobs may have multiple persons involved). Currently, the class `Employment` is","lastModifiedDate":"2022-03-25"},{"lineNumber":366,"author":{"gitId":"Spyobird"},"content":"written as a singleton. This may be changed to be a field of `AddressBook` due to potential obstacles with the","lastModifiedDate":"2022-03-25"},{"lineNumber":367,"author":{"gitId":"Spyobird"},"content":"testing of the serialization/deserialization of the class.","lastModifiedDate":"2022-03-25"},{"lineNumber":368,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":369,"author":{"gitId":"ovidharshini"},"content":"#### Design considerations:","lastModifiedDate":"2022-03-27"},{"lineNumber":370,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":371,"author":{"gitId":"ovidharshini"},"content":"**Aspect: How the relational mapping between Job and Person is stored:**","lastModifiedDate":"2022-03-27"},{"lineNumber":372,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":373,"author":{"gitId":"ovidharshini"},"content":"* **Alternative 1 (current choice):** Saves the mapping of `Job` objects to `Person` objects in `Employment`.","lastModifiedDate":"2022-03-27"},{"lineNumber":374,"author":{"gitId":"ovidharshini"},"content":"    * Pros: Guarantee of commutative association.","lastModifiedDate":"2022-03-27"},{"lineNumber":375,"author":{"gitId":"ovidharshini"},"content":"    * Cons: Harder to implement. ","lastModifiedDate":"2022-03-27"},{"lineNumber":376,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-27"},{"lineNumber":377,"author":{"gitId":"ovidharshini"},"content":"* **Alternative 2 (rejected):** Saves a map of the ids of related `Person` objects in `Job` objects, and a map of the ids of related `Job` objects in `Person` objects.","lastModifiedDate":"2022-03-27"},{"lineNumber":378,"author":{"gitId":"ovidharshini"},"content":"    * Pros: Easier to implement.","lastModifiedDate":"2022-03-27"},{"lineNumber":379,"author":{"gitId":"ovidharshini"},"content":"    * Cons: Mutual associations are not guaranteed. The possible extension of a one-to-many relationship between `Person` and `Tag` would be harder to implement.","lastModifiedDate":"2022-03-27"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"ian-from-dover"},"content":"## Documentation, logging, testing, configuration, dev-ops","lastModifiedDate":"2022-03-25"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":386,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":387,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":388,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":389,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"ian-from-dover"},"content":"## Appendix: Requirements","lastModifiedDate":"2022-03-25"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"ovidharshini"},"content":"HR Managers of companies offering contractor services","lastModifiedDate":"2022-03-06"},{"lineNumber":399,"author":{"gitId":"ian-from-dover"},"content":"* have a need to manage a significant number of employees and jobs","lastModifiedDate":"2022-03-25"},{"lineNumber":400,"author":{"gitId":"ian-from-dover"},"content":"* employee pay is calculated based on hours worked","lastModifiedDate":"2022-03-25"},{"lineNumber":401,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"ovidharshini"},"content":"* prefer typing to mouse interactions","lastModifiedDate":"2022-03-06"},{"lineNumber":404,"author":{"gitId":"ovidharshini"},"content":"* are reasonably comfortable using CLI apps","lastModifiedDate":"2022-03-06"},{"lineNumber":405,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":406,"author":{"gitId":"ovidharshini"},"content":"**Value proposition**:","lastModifiedDate":"2022-03-06"},{"lineNumber":407,"author":{"gitId":"ian-from-dover"},"content":"* Simplify the management of data","lastModifiedDate":"2022-03-25"},{"lineNumber":408,"author":{"gitId":"ian-from-dover"},"content":"* Reduce menial labour","lastModifiedDate":"2022-03-25"},{"lineNumber":409,"author":{"gitId":"ian-from-dover"},"content":"* Reduce mistakes due to human error in calculation / accidental edits","lastModifiedDate":"2022-03-25"},{"lineNumber":410,"author":{"gitId":"ian-from-dover"},"content":"* Helps employees be assured that their hours and pay are registered correctly in the system","lastModifiedDate":"2022-03-25"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"| Priority | As a …​        | I want to …​                                                                   | So that I can…​                                                               |","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"ian-from-dover"},"content":"|----------|----------------|--------------------------------------------------------------------------------|-------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-25"},{"lineNumber":420,"author":{"gitId":"ovidharshini"},"content":"| `* *`    | new user       | see usage instructions                                                         | refer to instructions when I forget how to use the App                        |","lastModifiedDate":"2022-03-06"},{"lineNumber":421,"author":{"gitId":"ovidharshini"},"content":"| `* *`    | potential user | see the app populated with sample data                                         | easily see how the app will look like when it is in use                       |","lastModifiedDate":"2022-03-06"},{"lineNumber":422,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | add a new employee                                                             |                                                                               |","lastModifiedDate":"2022-03-25"},{"lineNumber":423,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | add tags to employees                                                          | identify their roles                                                          |","lastModifiedDate":"2022-03-25"},{"lineNumber":424,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | edit an employee\u0027s information                                                 | rectify mistakes or update their personal information if need be              |","lastModifiedDate":"2022-03-25"},{"lineNumber":425,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | delete an employee                                                             |                                                                               |","lastModifiedDate":"2022-03-25"},{"lineNumber":426,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | delete all employees                                                           | mass-remove entries that I no longer need                                     |","lastModifiedDate":"2022-03-25"},{"lineNumber":427,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | list all employees                                                             |                                                                               |","lastModifiedDate":"2022-03-25"},{"lineNumber":428,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | find a person by name or tag                                                   | locate details of persons without having to go through the entire list        |","lastModifiedDate":"2022-03-25"},{"lineNumber":429,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | view the salary owed to a given employee                                       | pay them                                                                      |","lastModifiedDate":"2022-03-25"},{"lineNumber":430,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | pay for a given type of job                                                    |                                                                               |","lastModifiedDate":"2022-03-25"},{"lineNumber":431,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | load and save data in human-readable data files                                | I can backup the data externally or access it in a different application      |","lastModifiedDate":"2022-03-25"},{"lineNumber":432,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | exit the application                                                           |                                                                               |","lastModifiedDate":"2022-03-25"},{"lineNumber":433,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | create, update, read, delete jobs                                              | manage the jobs that my employees are working on                              |","lastModifiedDate":"2022-03-25"},{"lineNumber":434,"author":{"gitId":"ian-from-dover"},"content":"| `* * *`  | HR Manager     | see which jobs each employee is working on                                     | pay them accordingly                                                          |","lastModifiedDate":"2022-03-25"},{"lineNumber":435,"author":{"gitId":"ian-from-dover"},"content":"| `* *`    | HR Manager     | log into separate modes for HR-related functions and for job-related functions | easily access relevant data for the type of work I am doing at any given time |","lastModifiedDate":"2022-03-25"},{"lineNumber":436,"author":{"gitId":"ian-from-dover"},"content":"| `* *`    | HR Manager     | edit pay multiplier factors (e.g. overtime, experience, emergency on-calls)    | apply changes in payment policies across the organization                     |","lastModifiedDate":"2022-03-25"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"ovidharshini"},"content":"(For all use cases below, the **System** is `PeopleSoft` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-03-06"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"ovidharshini"},"content":"**Use case: Delete an employee**","lastModifiedDate":"2022-03-06"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"ovidharshini"},"content":"1.  User requests to list employees","lastModifiedDate":"2022-03-06"},{"lineNumber":448,"author":{"gitId":"ovidharshini"},"content":"2.  PeopleSoft shows a list of employees","lastModifiedDate":"2022-03-06"},{"lineNumber":449,"author":{"gitId":"ovidharshini"},"content":"3.  User requests to delete a specific employee in the list","lastModifiedDate":"2022-03-06"},{"lineNumber":450,"author":{"gitId":"ovidharshini"},"content":"4.  PeopleSoft deletes the employee","lastModifiedDate":"2022-03-06"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"ovidharshini"},"content":"    * 3a1. PeopleSoft shows an error message.","lastModifiedDate":"2022-03-06"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"ovidharshini"},"content":"**Use case: Update an employee\u0027s data**","lastModifiedDate":"2022-03-06"},{"lineNumber":467,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":468,"author":{"gitId":"ovidharshini"},"content":"**MSS**","lastModifiedDate":"2022-03-06"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":470,"author":{"gitId":"ovidharshini"},"content":"1.  User requests to list employees","lastModifiedDate":"2022-03-06"},{"lineNumber":471,"author":{"gitId":"ovidharshini"},"content":"2.  PeopleSoft shows a list of employees","lastModifiedDate":"2022-03-06"},{"lineNumber":472,"author":{"gitId":"ovidharshini"},"content":"3.  User requests to edit a specific employee in the list with the updated information","lastModifiedDate":"2022-03-06"},{"lineNumber":473,"author":{"gitId":"ovidharshini"},"content":"4.  PeopleSoft updates the employee to match user input","lastModifiedDate":"2022-03-06"},{"lineNumber":474,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":475,"author":{"gitId":"ovidharshini"},"content":"    Use case ends.","lastModifiedDate":"2022-03-06"},{"lineNumber":476,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":477,"author":{"gitId":"ovidharshini"},"content":"**Extensions**","lastModifiedDate":"2022-03-06"},{"lineNumber":478,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":479,"author":{"gitId":"ovidharshini"},"content":"* 2a. The list is empty.","lastModifiedDate":"2022-03-06"},{"lineNumber":480,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":481,"author":{"gitId":"ovidharshini"},"content":"  Use case ends.","lastModifiedDate":"2022-03-06"},{"lineNumber":482,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":483,"author":{"gitId":"ovidharshini"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2022-03-06"},{"lineNumber":484,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":485,"author":{"gitId":"ovidharshini"},"content":"    * 3a1. PeopleSoft shows an error message.","lastModifiedDate":"2022-03-06"},{"lineNumber":486,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":487,"author":{"gitId":"ovidharshini"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-03-06"},{"lineNumber":488,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"ian-from-dover"},"content":"1. Should work on any _mainstream OS_ as long as it has Java 11 or above installed.","lastModifiedDate":"2022-03-25"},{"lineNumber":492,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"ovidharshini"},"content":"3. Should not rely on database-management systems to store data.","lastModifiedDate":"2022-03-06"},{"lineNumber":494,"author":{"gitId":"ovidharshini"},"content":"4. Should not require an installer; should be packaged into a single reasonably-sized (i.e. within 100MB) JAR file.","lastModifiedDate":"2022-03-27"},{"lineNumber":495,"author":{"gitId":"ovidharshini"},"content":"5. Should not be hosted on remote servers.","lastModifiedDate":"2022-03-27"},{"lineNumber":496,"author":{"gitId":"ovidharshini"},"content":"6. Should not make use of proprietary third-party frameworks, libraries and services.","lastModifiedDate":"2022-03-27"},{"lineNumber":497,"author":{"gitId":"ovidharshini"},"content":"7. Should have a responsive GUI. GUI should function well (i.e., should not cause any resolution-related inconveniences to the user) for standard screen resolutions and higher and for screen scales 100% and 125%. GUI should be usable - even if suboptimal - for resolutions 1280x720 and higher and for screen scales 150%.","lastModifiedDate":"2022-03-27"},{"lineNumber":498,"author":{"gitId":"ovidharshini"},"content":"8. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2022-03-27"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"ovidharshini"},"content":"* **Standard screen resolution**: 1920x1080","lastModifiedDate":"2022-03-06"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zhongfu":24,"ian-from-dover":42,"ovidharshini":71,"Spyobird":35,"-":346,"thewrik":38}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"   1. Run the `peoplesoft.Main` and try a few commands.","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"zhongfu":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"   e.g. `peoplesoft.commons.StringUtilTest`","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"   e.g. `peoplesoft.storage.StorageManagerTest`","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"   e.g. `peoplesoft.logic.LogicManagerTest`","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"zhongfu":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"PeopleSoft is a desktop app for **calculating the salary for shift-based contractors**, optimized for use via a **Command Line Interface (CLI)**. If you are a **HR manager** and you can type fast, PeopleSoft can get your payroll tasks done **much faster** than traditional GUI apps.","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"You can input your employees\u0027 data and the jobs that you want to keep track of.","lastModifiedDate":"2022-03-31"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"Then, you can assign the employees to the jobs that they are working on.","lastModifiedDate":"2022-03-31"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"After the job is completed, you can mark the job as paid, and PeopleSoft will calculate how much each employee is to be paid based on their hourly rates. ","lastModifiedDate":"2022-03-25"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"You can also generate a PDF payslip for your employees to refer to.","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"## How to use this guide","lastModifiedDate":"2022-03-25"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"**:information_source: How to use this guide:**\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"* Words in `this format` are commands to be typed into PeopleSoft.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"* Words in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2022-03-25"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"1. Ensure you have Java `11` or above installed in your Computer. Follow [this guide](https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A) to do so.","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"2. Download the latest version of the application from [here](https://github.com/AY2122S2-CS2103T-T11-4/tp/releases). Select the `peoplesoft.jar` file.","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"3. Move it to the folder that you want the data to be saved in.","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"4. Double-click the file to start the app. The GUI should appear as pictured in a few seconds. Note how the app contains some sample data.","lastModifiedDate":"2022-03-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"   ![Ui](images/Ui.png)\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"   _The PeopleSoft interface_","lastModifiedDate":"2022-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"7. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003eYou can try out any command from the [Command Summary](#command-summary) below.","lastModifiedDate":"2022-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"8. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2022-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"thewrik"},"content":"## Command summary","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"A handy reference for more experienced users who just need to know the format of a command.","lastModifiedDate":"2022-03-25"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":57,"author":{"gitId":"thewrik"},"content":"| Command     | Format                                                                           | Examples                                                                                                 |","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"|-------------|----------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-25"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"| `exit`      | `exit`                                                                           | NA                                                                                                       |","lastModifiedDate":"2022-03-25"},{"lineNumber":60,"author":{"gitId":"thewrik"},"content":"| `help`      | `help`                                                                           | NA                                                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"| `add`       | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/RATE [t/TAG]...​`                  | `add n/Nicole Tan p/99338558 e/nicole@stffhub.org  a/1 Tech Drive, S138572 r/37.50 t/Hardware t/Senior` |","lastModifiedDate":"2022-03-31"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"| `edit`      | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/RATE] [t/TAG]...​` | `edit 2 n/Nicole Lee t/OS`                                                                             |","lastModifiedDate":"2022-03-31"},{"lineNumber":63,"author":{"gitId":"thewrik"},"content":"| `delete`    | `delete INDEX`                                                                   | `delete 3`                                                                                               |","lastModifiedDate":"2022-03-03"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"| `find`      | `find KEYWORD [MORE_KEYWORDS]...​`                                                 | `find Nicole Hardware`, `find Aircon`                                                                    |","lastModifiedDate":"2022-03-31"},{"lineNumber":65,"author":{"gitId":"thewrik"},"content":"| `list`      | `list`                                                                           | NA                                                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":66,"author":{"gitId":"thewrik"},"content":"| `clear`     | `clear`                                                                          | NA                                                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"| `job`       | `job JOBID n/NAME r/RATE d/DURATION`                                             | `job 1 n/Fix HDB Lock r/40 d/1`                                                                          |","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"| `joblist`   | `joblist`                                                                        | NA                                                                                                       |","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"| `jobdelete` | `jobdelete JOBID`                                                                | `jobdelete 3`                                                                                            |","lastModifiedDate":"2022-03-25"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"| `mark`      | `mark JOBID`                                                                     | `mark 2`                                                                                                 |","lastModifiedDate":"2022-03-25"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"| `assign`    | `assign JOBID i/INDEX`                                                           | `assign 2 i/1`                                                                                           |","lastModifiedDate":"2022-03-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"* Words in `UPPER_CASE` are the attributes to be filled in by you.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"  e.g. in `add n/NAME`, the `NAME` attribute could be `add n/John Doe`.","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":"* Attributes can be in any order.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"  e.g. if the command asks for `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also fine.","lastModifiedDate":"2022-03-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"  e.g `n/NAME [t/TAG]` can be typed as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2022-03-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"* Items with `...​` after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"  e.g. `[t/TAG]...​` can be used as `t/friend`, `t/friend t/family` or even 0 times.","lastModifiedDate":"2022-03-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"ian-from-dover"},"content":"* If an attribute is expected only once but you typed it multiple times, only the last occurrence of the attribute will be taken.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":94,"author":{"gitId":"ian-from-dover"},"content":"  e.g. if you specify `n/Jake n/Jason`, only `n/Jason` will be taken.","lastModifiedDate":"2022-03-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":96,"author":{"gitId":"ian-from-dover"},"content":"* For commands that do not need attributes, (like `help`, `list`, `exit` and `clear`) anything typed after the command word will be ignored.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":97,"author":{"gitId":"ian-from-dover"},"content":"  e.g. typing `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2022-03-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"ian-from-dover"},"content":"### Exit the program : `exit`","lastModifiedDate":"2022-03-25"},{"lineNumber":102,"author":{"gitId":"ian-from-dover"},"content":"Exits the program immediately.","lastModifiedDate":"2022-03-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":104,"author":{"gitId":"ian-from-dover"},"content":"Format: `exit`","lastModifiedDate":"2022-03-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":106,"author":{"gitId":"thewrik"},"content":"### List all the commands: `help`","lastModifiedDate":"2022-03-03"},{"lineNumber":107,"author":{"gitId":"ian-from-dover"},"content":"Opens the help page which shows the command list like the one above.","lastModifiedDate":"2022-03-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"thewrik"},"content":"Prompted when the user makes a typo (i.e. tries to use an invalid command) :","lastModifiedDate":"2022-03-03"},{"lineNumber":112,"author":{"gitId":"thewrik"},"content":"Format: `Looks like you used an invalid command. Use the command help to access a list of all available commands.`","lastModifiedDate":"2022-03-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"ian-from-dover"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-03-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"ian-from-dover"},"content":"## Employee-related commands","lastModifiedDate":"2022-03-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"thewrik"},"content":"### Add an employee : `add`","lastModifiedDate":"2022-03-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"Adds a new employee to the system with the given attributes.","lastModifiedDate":"2022-03-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"Rate refers to the hourly pay of the employee.","lastModifiedDate":"2022-03-31"},{"lineNumber":123,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/RATE [t/TAG] [t/TAG]...`","lastModifiedDate":"2022-03-31"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"Example: `add n/Nicole Tan p/99338558 e/nicole@stffhub.org a/1 Tech Drive, S138572 r/37.50 t/Hardware t/Senior`","lastModifiedDate":"2022-03-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"thewrik"},"content":"### Edit an employee’s information : `edit`","lastModifiedDate":"2022-03-03"},{"lineNumber":129,"author":{"gitId":"ian-from-dover"},"content":"Edit the information of an existing employee. Use this in the event that an employee\u0027s details change.","lastModifiedDate":"2022-03-25"},{"lineNumber":130,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/RATE] [t/TAG]...​`","lastModifiedDate":"2022-03-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"ian-from-dover"},"content":"Example: `edit 2 p/62353535` edits the second person\u0027s phone number to 62353535","lastModifiedDate":"2022-03-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"thewrik"},"content":"### Delete an employee : `delete`","lastModifiedDate":"2022-03-03"},{"lineNumber":136,"author":{"gitId":"ian-from-dover"},"content":"Deletes the employee referred to by the index. This is irreversible. Removes the deleted employee from all associated jobs as well.","lastModifiedDate":"2022-03-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"thewrik"},"content":"Format: `delete INDEX`","lastModifiedDate":"2022-03-03"},{"lineNumber":139,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":140,"author":{"gitId":"ian-from-dover"},"content":"Example: `delete 3` deletes the third person","lastModifiedDate":"2022-03-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"thewrik"},"content":"### Search for a person by name or tag : `find`","lastModifiedDate":"2022-03-03"},{"lineNumber":143,"author":{"gitId":"ian-from-dover"},"content":"Finds all people by a certain name and/or tag. If you wish to search by tags alone, use a `*` instead of typing a name. If multiple tags are entered, only entries that match **all** tags are returned.","lastModifiedDate":"2022-03-25"},{"lineNumber":144,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"Format: `find [* OR NAME] [TAG]...​`","lastModifiedDate":"2022-03-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"ian-from-dover"},"content":"`find Nicole Hardware` finds all the employees named ‘Nicole’, with the ‘Hardware’ tag","lastModifiedDate":"2022-03-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"ian-from-dover"},"content":"`find Nicole` finds all the employees named ‘Nicole’","lastModifiedDate":"2022-03-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"ian-from-dover"},"content":"`find * Hardware` finds all employees tagged with ‘Hardware’","lastModifiedDate":"2022-03-25"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"ian-from-dover"},"content":"`find Nicole Hardware Display` finds all employees named ‘Nicole’, tagged with BOTH \u0027Hardware\u0027 AND \u0027Display\u0027","lastModifiedDate":"2022-03-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"thewrik"},"content":"### List all persons : `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":158,"author":{"gitId":"ian-from-dover"},"content":"Lists all the employees in the company.","lastModifiedDate":"2022-03-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"thewrik"},"content":"Example: `list` shows all the employees in the company","lastModifiedDate":"2022-03-03"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"thewrik"},"content":"### Clear all entries : `clear`","lastModifiedDate":"2022-03-03"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"ian-from-dover"},"content":"Removes all the employees’ information in the company from the app. Useful for clearing out sample data.\u003cbr\u003e","lastModifiedDate":"2022-03-25"},{"lineNumber":167,"author":{"gitId":"ian-from-dover"},"content":"❗️Caution: You cannot recover the data afterwards.","lastModifiedDate":"2022-03-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"ian-from-dover"},"content":"[coming in v1.3] Requests for confirmation from the user before clearing. // ian\u0027s idea: get them to type \u0027yes clear\u0027 to confirm","lastModifiedDate":"2022-03-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"ian-from-dover"},"content":"Example: `clear` removes all the employees from the app // ian: does it remove all jobs from the app too?","lastModifiedDate":"2022-03-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"ian-from-dover"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-03-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"ian-from-dover"},"content":"## Job-related commands","lastModifiedDate":"2022-03-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"ian-from-dover"},"content":"### Add a job : `job`","lastModifiedDate":"2022-03-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"ian-from-dover"},"content":"Adds a new job to the system with the given attributes. `RATE` refers to how much the employee is paid per hour. `DURATION` refers to how long the job took.","lastModifiedDate":"2022-03-25"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":183,"author":{"gitId":"ian-from-dover"},"content":"Format: `job JOBID n/NAME r/RATE d/DURATION`","lastModifiedDate":"2022-03-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":185,"author":{"gitId":"ian-from-dover"},"content":"Example: `job 2 n/Fix HDB Lock r/40 d/1` creates a job with id 2, where the employees worked for 1 hour and are paid an hourly rate of $40 to fix a HDB lock","lastModifiedDate":"2022-03-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":187,"author":{"gitId":"ian-from-dover"},"content":"### List all jobs : `joblist`","lastModifiedDate":"2022-03-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":189,"author":{"gitId":"ian-from-dover"},"content":"Lists all the jobs you have created, including jobs that have been paid for and those that have not been paid for yet.","lastModifiedDate":"2022-03-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":191,"author":{"gitId":"ian-from-dover"},"content":"Format: `joblist`","lastModifiedDate":"2022-03-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":193,"author":{"gitId":"ian-from-dover"},"content":"Example: `joblist` lists all the jobs you have created","lastModifiedDate":"2022-03-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":195,"author":{"gitId":"ian-from-dover"},"content":"### Delete a job : `jobdelete`","lastModifiedDate":"2022-03-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":197,"author":{"gitId":"ian-from-dover"},"content":"Deletes the job that was referred to by the index.","lastModifiedDate":"2022-03-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":199,"author":{"gitId":"ian-from-dover"},"content":"❗️Caution: This is irreversible.","lastModifiedDate":"2022-03-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":201,"author":{"gitId":"ian-from-dover"},"content":"Format: `jobdelete JOBID`","lastModifiedDate":"2022-03-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":203,"author":{"gitId":"ian-from-dover"},"content":"Example: `jobdelete 2` deletes the second job","lastModifiedDate":"2022-03-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":205,"author":{"gitId":"ian-from-dover"},"content":"### Mark a job as paid : `mark`","lastModifiedDate":"2022-03-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"ian-from-dover"},"content":"Indicates that a job has been completed. To unmark an object, `mark` the job again.","lastModifiedDate":"2022-03-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":209,"author":{"gitId":"ian-from-dover"},"content":"Format: `mark JOBID`","lastModifiedDate":"2022-03-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":211,"author":{"gitId":"ian-from-dover"},"content":"Example: `mark 2` marks the second job","lastModifiedDate":"2022-03-25"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":213,"author":{"gitId":"ian-from-dover"},"content":"Example: `mark 2` unmarks the second job after the previous example is performed","lastModifiedDate":"2022-03-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":215,"author":{"gitId":"ian-from-dover"},"content":"### Assign a job to an employee : `assign`","lastModifiedDate":"2022-03-25"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":217,"author":{"gitId":"ian-from-dover"},"content":"Assigns a job to an employee that is working on it.","lastModifiedDate":"2022-03-25"},{"lineNumber":218,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":219,"author":{"gitId":"ian-from-dover"},"content":"Format: `assign JOBID i/PERSON\u0027S_INDEX`","lastModifiedDate":"2022-03-25"},{"lineNumber":220,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":221,"author":{"gitId":"ian-from-dover"},"content":"Example: `assign 2 i/3` assigns the second job to the first employee","lastModifiedDate":"2022-03-25"},{"lineNumber":222,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":223,"author":{"gitId":"ian-from-dover"},"content":"// To add the generate payslip() function here","lastModifiedDate":"2022-03-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"ian-from-dover"},"content":"**Q**: How do I save the data?","lastModifiedDate":"2022-03-25"},{"lineNumber":230,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":231,"author":{"gitId":"ian-from-dover"},"content":"**A**: PeopleSoft automatically saves the data to the folder you placed it in automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-03-25"},{"lineNumber":232,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":233,"author":{"gitId":"ian-from-dover"},"content":"**Q**: What happens if I want to edit the data externally?","lastModifiedDate":"2022-03-25"},{"lineNumber":234,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":235,"author":{"gitId":"ian-from-dover"},"content":"**A**: PeopleSoft data is saved as a JSON file under `/data/peoplesoft.json`. ","lastModifiedDate":"2022-03-25"},{"lineNumber":236,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":237,"author":{"gitId":"ian-from-dover"},"content":"❗️Caution: Do not edit the data directly unless you are sure that its format will remain valid. If your changes to the data file makes its format invalid, PeopleSoft will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-03-25"},{"lineNumber":238,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":239,"author":{"gitId":"ian-from-dover"},"content":"**Q**: How do I transfer my data to another Computer?","lastModifiedDate":"2022-03-25"},{"lineNumber":240,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":241,"author":{"gitId":"thewrik"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with your existing PeopleSoft data file.","lastModifiedDate":"2022-03-03"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"ian-from-dover"},"content":"**Q**: How do I report a bug? How do I suggest a feature?","lastModifiedDate":"2022-03-25"},{"lineNumber":244,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":245,"author":{"gitId":"ian-from-dover"},"content":"**A**: You may create an issue under the `Issues` tab on our [Github Page](https://github.com/AY2122S2-CS2103T-T11-4/tp/tree/v1.3.tag). You may suggest a feature in the same way.","lastModifiedDate":"2022-03-25"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":247,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"ian-from-dover"},"content":"## Glossary","lastModifiedDate":"2022-03-25"},{"lineNumber":250,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":251,"author":{"gitId":"ian-from-dover"},"content":"**Index**: The item\u0027s number in a list.","lastModifiedDate":"2022-03-25"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":253,"author":{"gitId":"ian-from-dover"},"content":"e.g. The second person in the list has an INDEX of 2.","lastModifiedDate":"2022-03-25"}],"authorContributionMap":{"zhongfu":14,"ian-from-dover":115,"-":105,"thewrik":19}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"ian-from-dover"},"content":"    content: \"PeopleSoft\";","lastModifiedDate":"2022-03-31"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"ian-from-dover":1,"-":294}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"title: PeopleSoft","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"[![Codecov](https://codecov.io/gh/AY2122S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dZ0PQIQXY29)](https://codecov.io/gh/AY2122S2-CS2103T-T11-4/tp)","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"PeopleSoft is a CLI-based contractor payroll management app. It helps **companies which offer contractor services** with managing how much each contractor is paid. You can:","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"- manage contractors","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"- manage jobs","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"- calculate monthly salary","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"It is written with the OOP paradigm in mind and has ~6 KLoC.","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"* View the User Guide and Developer Guide on our **[Website](https://ay2122s2-cs2103t-t11-4.github.io/tp/)**.","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Spyobird":12,"-":13}},{"path":"docs/team/ian-from-dover.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"---","lastModifiedDate":"2022-03-02"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"layout: page","lastModifiedDate":"2022-03-02"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"title: Ian Hong\u0027s Project Portfolio Page","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"---","lastModifiedDate":"2022-03-02"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"### Project: PeopleSoft","lastModifiedDate":"2022-03-02"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"PeopleSoft lets HR managers of companies handle their people.","lastModifiedDate":"2022-03-02"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"Given below are not my contributions to the project. (copied over)","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2022-03-02"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2022-03-02"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-03-02"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"* **Project management**:","lastModifiedDate":"2022-03-02"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-03-02"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2022-03-02"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"* **Documentation**:","lastModifiedDate":"2022-03-02"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"  * User Guide:","lastModifiedDate":"2022-03-02"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2022-03-02"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"  * Developer Guide:","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"* **Community**:","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-03-02"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-03-02"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2022-03-02"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"* **Tools**:","lastModifiedDate":"2022-03-02"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2022-03-02"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2022-03-02"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2022-03-02"}],"authorContributionMap":{"ian-from-dover":47}},{"path":"docs/team/ovidharshini.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"thewrik"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"layout: page","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":"title: Oviya\u0027s Project Portfolio Page","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"### Project: PeopleSoft","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":"Lorem ipsum dolor sit amet.","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"thewrik"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"thewrik"},"content":"* **New Feature**: tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"thewrik"},"content":"    * What it does:","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"thewrik"},"content":"    * Justification:","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"thewrik"},"content":"    * Highlights:","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"thewrik"},"content":"    * Credits:","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"thewrik"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"thewrik"},"content":"* **Project management**:","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"* **Documentation**:","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"thewrik"},"content":"    * User Guide:","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"thewrik"},"content":"        * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"    * Developer Guide:","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"        * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"thewrik"},"content":"* **Community**:","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"thewrik"},"content":"* **Tools**:","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"ovidharshini":1,"thewrik":36}},{"path":"docs/team/spyobird.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"# PPP","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"## Overview:","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"A short overview of your product to provide some context to the reader. The opening 1-2 sentences may be reused by all team members. If your product overview extends beyond 1-2 sentences, the remainder should be written by yourself.","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"## Summary of Contributions --Suggested items to include:","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"### Code contributed:","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"Give a link to your code on tP Code Dashboard. The link is available in the Project List Page -- linked to the  icon under your profile picture.","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"### Enhancements implemented:","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"A summary of the enhancements you implemented.","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"### Contributions to the UG:","lastModifiedDate":"2022-03-01"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"Which sections did you contribute to the UG?","lastModifiedDate":"2022-03-01"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"### Contributions to the DG:","lastModifiedDate":"2022-03-01"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"Which sections did you contribute to the DG? Which UML diagrams did you add/updated?","lastModifiedDate":"2022-03-01"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"### Contributions to team-based tasks","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"### Review/mentoring contributions:","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"Links to PRs reviewed, instances of helping team members in other ways.","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"### Contributions beyond the project team:","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"Evidence of helping others e.g. responses you posted in our forum, bugs you reported in other team\u0027s products,","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"Evidence of technical leadership e.g. sharing useful information in the forum","lastModifiedDate":"2022-03-01"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"## OPTIONAL Contributions to the Developer Guide (Extracts):","lastModifiedDate":"2022-03-01"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"Reproduce the parts in the Developer Guide that you wrote. Alternatively, you can show the various diagrams you contributed.","lastModifiedDate":"2022-03-01"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"## OPTIONAL Contributions to the User Guide (Extracts):","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"Reproduce the parts in the User Guide that you wrote.","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"Spyobird":24}},{"path":"docs/team/thewrik.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"thewrik"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"layout: page","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"title: Wrik\u0027s Project Portfolio Page","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"thewrik"},"content":"### Project: PeopleSoft","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"Lorem ipsum dolor sit amet.","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"thewrik"},"content":"Given below are (not) my contributions to the project.","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"thewrik"},"content":"* **New Feature**: tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"thewrik"},"content":"    * What it does:","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"thewrik"},"content":"    * Justification:","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"thewrik"},"content":"    * Highlights:","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"thewrik"},"content":"    * Credits:","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"thewrik"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"thewrik"},"content":"* **Project management**:","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"thewrik"},"content":"* **Documentation**:","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"    * User Guide:","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"thewrik"},"content":"        * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"thewrik"},"content":"    * Developer Guide:","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"        * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"thewrik"},"content":"* **Community**:","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"thewrik"},"content":"* **Tools**:","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"thewrik"},"content":"    * tbd","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"thewrik":36}},{"path":"docs/team/zhongfu.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"---","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"layout: page","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"title: Zhongfu\u0027s Project Portfolio Page","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"---","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"### Project: PeopleSoft","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"Lorem ipsum dolor sit amet.","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-03-01"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"* **New Feature**: tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"  * What it does:","lastModifiedDate":"2022-03-01"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"  * Justification:","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"  * Highlights:","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"  * Credits:","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"* **Project management**:","lastModifiedDate":"2022-03-01"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"  * tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"  * tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"* **Documentation**:","lastModifiedDate":"2022-03-01"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"  * User Guide:","lastModifiedDate":"2022-03-01"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"    * tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"  * Developer Guide:","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    * tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"* **Community**:","lastModifiedDate":"2022-03-01"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"  * tbd","lastModifiedDate":"2022-03-01"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"* **Tools**:","lastModifiedDate":"2022-03-01"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"  * tbd","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"zhongfu":36}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/peoplesoft/logic/command` directory.","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"Create a `RemarkCommandParser` class in the `peoplesoft.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2022-03-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"Create a new `Remark` in `peoplesoft.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2022-03-19"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"ian-from-dover"},"content":"Simply add the following to [`peoplesoft.ui.regions.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"zhongfu":6,"ian-from-dover":1,"-":394}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"The `address` field in `Person` is actually an instance of the `peoplesoft.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zhongfu":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `peoplesoft.logic.Logic`.","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"A quick look at the `peoplesoft.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zhongfu":2,"-":299}},{"path":"docs/tutorials/WritingSerdesClasses.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"---","lastModifiedDate":"2022-03-26"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"layout: page","lastModifiedDate":"2022-03-26"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"title: \"Tutorial: Writing custom serializers/deserializers for new model classes\"","lastModifiedDate":"2022-03-26"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"---","lastModifiedDate":"2022-03-26"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"So you\u0027ve just written a new model class, and you want to load and store instances of it from JSON. Obviously, you\u0027d need a way to serialize them to, and deserialize them from JSON.","lastModifiedDate":"2022-03-26"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"# So, why custom serializers/deserializers?","lastModifiedDate":"2022-03-26"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"There\u0027s a lot of ways to serialize/deserialize objects with Jackson (such as using the `@JsonCreator` annotation on classes), but the more commonly used methods have some downsides, e.g. not allowing for extra validation to be performed easily. To fix that, the developers of AddressBook-Level3 seems to have opted for a second set of classes (such as `JsonAdaptedPerson`) solely for making serialization and deserialization easier.","lastModifiedDate":"2022-03-26"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"For AB3, serialization from `Person` classes to JSON is rather straightforward -- create a new `JsonAdaptedPerson` instance from an existing `Person` class (which will convert all the fields to types that closely resemble JSON types, such as `String`s for strings, and `List`s for arrays), and have Jackson automatically serialize all fields present in the \"adapted\" instance.","lastModifiedDate":"2022-03-26"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"Deserialization is similar -- have Jackson create a new `JsonAdaptedPerson` instance automatically, then call a method on the new instance which performs the desired validation checks and creates the actual `Person` instance.","lastModifiedDate":"2022-03-26"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"For PeopleSoft, we\u0027ve elected to use custom serializers and deserializers for model classes to avoid extraneous classes spread out across multiple packages, retain flexibility in choosing how to serialize and deserialize instances (including validating data), and to make adding model classes more intuitive (as everything you have to do is contained within one class).","lastModifiedDate":"2022-03-26"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"# Implementing serializers and deserializers for new model classes","lastModifiedDate":"2022-03-26"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"For this example, we will be implementing a class named `Foo`. It contains fields of various types, such as:  ","lastModifiedDate":"2022-03-26"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"* primitive types,","lastModifiedDate":"2022-03-26"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"* custom, non-generic types (with custom serializers),","lastModifiedDate":"2022-03-26"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"* other non-generic types, and","lastModifiedDate":"2022-03-26"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"* generic types.","lastModifiedDate":"2022-03-26"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"## Step 1: Add `@JsonSerialize` and `@JsonDeserialize` annotations to the class","lastModifiedDate":"2022-03-26"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"These annotations tell Jackson to use the `FooSerializer` and `FooDeserializer` nested classes (which will be implemented later) to serialize and deserialize `Foo` instances.","lastModifiedDate":"2022-03-26"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Foo.FooSerializer.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Foo.FooDeserializer.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"public class Foo {","lastModifiedDate":"2022-03-26"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"    private int id;","lastModifiedDate":"2022-03-26"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    private Name name;","lastModifiedDate":"2022-03-26"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"    private BigDecimal num;","lastModifiedDate":"2022-03-26"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2022-03-26"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-26"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"## Step 2: Add the boilerplate code for the `FooSerializer` and `FooDeserializer` classes (as nested classes within `Foo`)","lastModifiedDate":"2022-03-26"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"The skeleton code for the serdes classes are largely similar; the main things that you should be looking at are:  ","lastModifiedDate":"2022-03-26"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"* the type arguments for the classes that our serdes classes inherit from,","lastModifiedDate":"2022-03-26"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"* the `serialize()` and `deserialize()` methods, which contain the main logic for serdes,","lastModifiedDate":"2022-03-26"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"* the error messages (and error message formatter) in `FooDeserializer`,","lastModifiedDate":"2022-03-26"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"* and `FooDeserializer.getNullValue()`, which is called when a JSON `null` value is encountered. (We will typically want to throw an exception here, but you can choose to do something else, e.g. return a default instance)","lastModifiedDate":"2022-03-26"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Foo.FooSerializer.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Foo.FooDeserializer.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"public class Foo {","lastModifiedDate":"2022-03-26"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    private int id;","lastModifiedDate":"2022-03-26"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    private Name name;","lastModifiedDate":"2022-03-26"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"    private BigDecimal num;","lastModifiedDate":"2022-03-26"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2022-03-26"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"    ...","lastModifiedDate":"2022-03-26"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"    protected static class FooSerializer extends StdSerializer\u003cFoo\u003e {","lastModifiedDate":"2022-03-26"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        private FooSerializer(Class\u003cFoo\u003e val) {","lastModifiedDate":"2022-03-26"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-26"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        private FooSerializer() {","lastModifiedDate":"2022-03-26"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-26"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Foo val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-26"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"            // TODO","lastModifiedDate":"2022-03-26"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    protected static class FooDeserializer extends StdDeserializer\u003cFoo\u003e {","lastModifiedDate":"2022-03-26"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The Foo instance is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-26"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"            k -\u003e String.format(\"This Foo instance\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-26"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        private FooDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-26"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-26"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        private FooDeserializer() {","lastModifiedDate":"2022-03-26"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-26"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"                throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-26"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"                Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx, INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-26"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"        public Foo deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"            // TODO","lastModifiedDate":"2022-03-26"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"        public Foo getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-26"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"## Step 3: Decide how you would like to represent object instances (including fields)","lastModifiedDate":"2022-03-26"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"You should decide how each instance should be represented (as a JSON value).","lastModifiedDate":"2022-03-26"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"For simpler model classes, you may be able to represent them as a primitive JSON value -- for instance, a `Name` instance (which in this case, consists of only a single `String` field) could be represented as a single JSON string.","lastModifiedDate":"2022-03-26"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"For slightly more complex (i.e. compound) types, you may want to serialize them into JSON arrays or objects. For instance, you might want to serialize a `Set\u003cTag\u003e` object into a JSON array (of serialized `Tag` instances), or a `Foo` into a JSON object:","lastModifiedDate":"2022-03-26"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"```json","lastModifiedDate":"2022-03-26"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"{","lastModifiedDate":"2022-03-26"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"    \"id\": 5,","lastModifiedDate":"2022-03-26"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"    \"name\": \"Nicole Tan\",","lastModifiedDate":"2022-03-26"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    \"num\": \"1.51\",","lastModifiedDate":"2022-03-26"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"    \"tags\": [\"Intern\", \"Aircon\"]","lastModifiedDate":"2022-03-26"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-26"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"In this case, we\u0027ve stored each field in this `Foo` instance as a key-value pair in the resulting JSON object. The key is set to the name of the field, while the value is the serialized JSON representation of the field value.","lastModifiedDate":"2022-03-26"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"Your chosen representation format should be non-ambiguous to ease the implementation of serdes classes. The above would be one such example -- each key corresponds to a field in the object, and each value is serialized and deserialized as a fixed type (e.g. `Name`, `Set\u003cTag\u003e`).","lastModifiedDate":"2022-03-26"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"## Step 4: Implement the serializer for the class","lastModifiedDate":"2022-03-26"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"This will generally depend on the representation you\u0027ve decided on.","lastModifiedDate":"2022-03-26"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"### 4a: Simple model classes (with only one field)","lastModifiedDate":"2022-03-26"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"For simpler types (e.g. those that only consist of one field), you may want to use the methods defined in `com.fasterxml.jackson.core.JsonGenerator` (i.e. the `gen` parameter of `FooSerializer.serialize`), such as:","lastModifiedDate":"2022-03-26"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"* `gen.writeString(String)`","lastModifiedDate":"2022-03-26"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"* `gen.writeNumber(BigDecimal)`","lastModifiedDate":"2022-03-26"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"* `gen.writeObject(Object)`","lastModifiedDate":"2022-03-26"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"* and so on","lastModifiedDate":"2022-03-26"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"A serializer for `Name` instances might then look like:","lastModifiedDate":"2022-03-26"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Foo val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-26"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.getName());","lastModifiedDate":"2022-03-26"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"And for collections (such as `List` and `Set`, and perhaps `Map`), you may be able to use `gen.writeObject(Object)` instead -- this will typically deserialize them into an appropriate representation, such as a JSON array for `List`s and `Set`s, and JSON objects for `Map`s. There should be no need to write custom (de)serializers for typical Java collections, although you will likely want to write serializers for any custom contained type (e.g. `Tag`, for `Set\u003cTag\u003e` instances).","lastModifiedDate":"2022-03-26"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"### 4b: Compound model classes (with multiple fields)","lastModifiedDate":"2022-03-26"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":159,"author":{"gitId":"zhongfu"},"content":"For types that are *compound* types (e.g. those that consist of multiple fields or values), you will likely want to serialize them as an object (or in some cases, arrays).","lastModifiedDate":"2022-03-26"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"You\u0027ll need to begin the object or array with the appropriate marker:","lastModifiedDate":"2022-03-26"},{"lineNumber":162,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"* `gen.writeStartObject()`","lastModifiedDate":"2022-03-26"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"* `gen.writeStartArray()`","lastModifiedDate":"2022-03-26"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"Then, for arrays, you can simply write the values one by one using `gen.writeString()` and similar methods. (See [4a: Simple types](#4a-simple-types) for more info.)","lastModifiedDate":"2022-03-26"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"For objects, you will want to write fields. Methods that you can use for this include, but are not limited to:","lastModifiedDate":"2022-03-26"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"* `gen.writeStringField(String, String)`","lastModifiedDate":"2022-03-26"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"* `gen.writeNumberField(String, float)`","lastModifiedDate":"2022-03-26"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"* `gen.writeObjectField(String, Object)`","lastModifiedDate":"2022-03-26"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"* `gen.writeArrayFieldStart(String)`","lastModifiedDate":"2022-03-26"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"* `gen.writeFieldName(String)`","lastModifiedDate":"2022-03-26"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"The first `String` parameter in the above methods refer to the names of the field (or key), while the second parameter (if present) refers to the value to be written.","lastModifiedDate":"2022-03-26"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"Note that `gen.writeFieldName(String)` only writes the field name, and not the value; similarly, `gen.writeArrayFieldStart(String)` only writes the field name and the array start marker. The value(s) will still have to be written if you choose either of these methods.","lastModifiedDate":"2022-03-26"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"There are other methods that can be more appropriate for your values (e.g. `gen.writeBooleanField(boolean)`); you may want to refer to the Jackson documentation for `JsonGenerator` for more information.","lastModifiedDate":"2022-03-26"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"After writing all the fields that are to be written, you can end the array or object with the appropriate marker:","lastModifiedDate":"2022-03-26"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"* `gen.writeEndObject()`","lastModifiedDate":"2022-03-26"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"* `gen.writeEndArray()`","lastModifiedDate":"2022-03-26"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"With this in mind, a serializer for `Foo` instance might look something like this, if we go by the representation format we\u0027ve decided earlier (and if we already have serializers for `Name` and `Tag`):","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Foo val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-26"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-26"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"            gen.writeNumberField(\"id\", val.getId()); // int id","lastModifiedDate":"2022-03-26"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"name\", val.getName()); // Name name","lastModifiedDate":"2022-03-26"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"            gen.writeStringField(\"num\", val.getNum().toString()); // BigDecimal num","lastModifiedDate":"2022-03-26"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"tags\", val.getTags()); // Set\u003cTag\u003e tags","lastModifiedDate":"2022-03-26"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-26"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":201,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"## Step 5: Implement the deserializer for the class","lastModifiedDate":"2022-03-26"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"Before we continue, you\u0027ll need a way to create new instances of `Foo`. In this case, we\u0027ll just use a `private` constructor, since we don\u0027t want other classes to create new `Foo` instances directly (e.g. if we require validation). And since the serdes classes are nested within the `Foo` class, this constructor will also be accessible to them.","lastModifiedDate":"2022-03-26"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"Now that we\u0027ve gotten that out the way, we can continue onto implementing a deserializer. Naturally, it\u0027ll be more complex than implementing a serializer (as we have to take into account possible invalid inputs).","lastModifiedDate":"2022-03-26"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"Typically, when deserializing a JSON value into an object with serializers/deserializers defined, the `deserialize()` method of the deserializer for the class will be called with a `com.fasterxml.jackson.core.JsonParser` instance (and some other arguments). You\u0027ll have to interact with these instances to parse data from JSON values.","lastModifiedDate":"2022-03-26"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"There are many ways to deserialize a JSON value with a `JsonParser`, but we will only be focusing on some of them for the sake of brevity.","lastModifiedDate":"2022-03-26"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"First, we will want to read the JSON value as a `JsonNode` instance with `p.readValueAsTree()`. We may also want to store the *codec* for the parser, especially if we intend to delegate further deserialization to Jackson:","lastModifiedDate":"2022-03-26"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-26"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"Next, we\u0027ll have to handle this `JsonNode` instance. ","lastModifiedDate":"2022-03-26"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"### 5a: Simple model classes","lastModifiedDate":"2022-03-26"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":223,"author":{"gitId":"zhongfu"},"content":"For simple types (such as `Name`, which only has one `String` field), it\u0027s quite straightforward.","lastModifiedDate":"2022-03-26"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":225,"author":{"gitId":"zhongfu"},"content":"We\u0027ll first need to read the node that our deserializer has to parse. The actual (runtime) type of this node will depend on the JSON value that we were given.","lastModifiedDate":"2022-03-26"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"There are many `JsonNode` subtypes available, including but not limited to:  ","lastModifiedDate":"2022-03-26"},{"lineNumber":228,"author":{"gitId":"zhongfu"},"content":"* `TextNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":229,"author":{"gitId":"zhongfu"},"content":"* `IntNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"* `ObjectNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"* `ArrayNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"* `NumberNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":233,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"Since we\u0027re expecting that JSON value to be a JSON string, our node should be an instance of `TextNode`. Performing an `instanceof` check here is good practice, as `JsonNode::textValue` returns `null` if the `JsonNode` is not a `TextNode`. It also allows us to return our own exception with a message that makes more sense.","lastModifiedDate":"2022-03-26"},{"lineNumber":235,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":236,"author":{"gitId":"zhongfu"},"content":"If it is, we\u0027ll get the value of that `TextNode`, perform any additional steps as needed (such as validation of values), then eventually create a `Name` instance with that value and return it.","lastModifiedDate":"2022-03-26"},{"lineNumber":237,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":238,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":239,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":240,"author":{"gitId":"zhongfu"},"content":"        public Name deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":241,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":242,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-26"},{"lineNumber":243,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":244,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":245,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":246,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":247,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":248,"author":{"gitId":"zhongfu"},"content":"            String name \u003d node.textValue(); // not null as `node` is a `TextNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":249,"author":{"gitId":"zhongfu"},"content":"            if (!Name.isValidName(name)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":250,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-26"},{"lineNumber":251,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":252,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":253,"author":{"gitId":"zhongfu"},"content":"            return new Name(name);","lastModifiedDate":"2022-03-26"},{"lineNumber":254,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":255,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":256,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":257,"author":{"gitId":"zhongfu"},"content":"Note that we have no need for an `ObjectCodec` instance here, because we aren\u0027t delegating the deserialization of this JSON string to Jackson again.","lastModifiedDate":"2022-03-26"},{"lineNumber":258,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":259,"author":{"gitId":"zhongfu"},"content":"In the next example, however, we\u0027ll need it:","lastModifiedDate":"2022-03-26"},{"lineNumber":260,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":261,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":262,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-26"},{"lineNumber":263,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-26"},{"lineNumber":264,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":265,"author":{"gitId":"zhongfu"},"content":"            // extra validation so we throw an exception with our own message","lastModifiedDate":"2022-03-26"},{"lineNumber":266,"author":{"gitId":"zhongfu"},"content":"            // instead of some other exception with a less comprehensible message","lastModifiedDate":"2022-03-26"},{"lineNumber":267,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ArrayNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":268,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":269,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":270,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":271,"author":{"gitId":"zhongfu"},"content":"            List\u003cPerson\u003e personList \u003d node // is some sort of JsonNode","lastModifiedDate":"2022-03-26"},{"lineNumber":272,"author":{"gitId":"zhongfu"},"content":"                .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":273,"author":{"gitId":"zhongfu"},"content":"                .readValueAs(new TypeReference\u003cList\u003cPerson\u003e\u003e(){});","lastModifiedDate":"2022-03-26"},{"lineNumber":274,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":275,"author":{"gitId":"zhongfu"},"content":"            UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2022-03-26"},{"lineNumber":276,"author":{"gitId":"zhongfu"},"content":"            upl.setPersons(personList);","lastModifiedDate":"2022-03-26"},{"lineNumber":277,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":278,"author":{"gitId":"zhongfu"},"content":"            return upl;","lastModifiedDate":"2022-03-26"},{"lineNumber":279,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":280,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":281,"author":{"gitId":"zhongfu"},"content":"In the above example, we delegate the deserialization of the JSON array to the default deserializer for `List` instances. Note the use of `TypeReference`: this is required if we intend to deserialize an object to a generic type. For non-generic types, we can simply use:","lastModifiedDate":"2022-03-26"},{"lineNumber":282,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":283,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":284,"author":{"gitId":"zhongfu"},"content":"            // we don\u0027t really need to do explicit checks for `node` being an `ObjectNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":285,"author":{"gitId":"zhongfu"},"content":"            // because we do that in the `Person` deserializer","lastModifiedDate":"2022-03-26"},{"lineNumber":286,"author":{"gitId":"zhongfu"},"content":"            // and we throw our own exception if the node we get isn\u0027t an `ObjectNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":287,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":288,"author":{"gitId":"zhongfu"},"content":"            Person person \u003d node // is some sort of JsonNode","lastModifiedDate":"2022-03-26"},{"lineNumber":289,"author":{"gitId":"zhongfu"},"content":"                .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":290,"author":{"gitId":"zhongfu"},"content":"                .readValueAs(Person.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":291,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":292,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":293,"author":{"gitId":"zhongfu"},"content":"There are some cases in which delegation back to Jackson is not desirable. For instance, if a value is to be deserialized to a type not in the PersonSoft codebase, then a exception with a less relevant message may be thrown. Instead, we may want to recreate the instance manually:","lastModifiedDate":"2022-03-26"},{"lineNumber":294,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":295,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":296,"author":{"gitId":"zhongfu"},"content":"            // check `node instanceof TextNode`, etc...","lastModifiedDate":"2022-03-26"},{"lineNumber":297,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":298,"author":{"gitId":"zhongfu"},"content":"            String durString \u003d node.textValue(); // not null as `node` is a `TextNode`","lastModifiedDate":"2022-03-26"},{"lineNumber":299,"author":{"gitId":"zhongfu"},"content":"            Duration dur;","lastModifiedDate":"2022-03-26"},{"lineNumber":300,"author":{"gitId":"zhongfu"},"content":"            try {","lastModifiedDate":"2022-03-26"},{"lineNumber":301,"author":{"gitId":"zhongfu"},"content":"                dur \u003d Duration.parse(decString);","lastModifiedDate":"2022-03-26"},{"lineNumber":302,"author":{"gitId":"zhongfu"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-03-26"},{"lineNumber":303,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE, e);","lastModifiedDate":"2022-03-26"},{"lineNumber":304,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":305,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":306,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":307,"author":{"gitId":"zhongfu"},"content":"This is also the case for the `List\u003cPerson\u003e` above; however, we can generally expect that the JSON array elements are simply passed to our `Person` deserializer (regardless of JSON type), within which exceptions will be thrown. As a result, we only check that `node` is a JSON array.","lastModifiedDate":"2022-03-26"},{"lineNumber":308,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":309,"author":{"gitId":"zhongfu"},"content":"### 5b: Compound model classes","lastModifiedDate":"2022-03-26"},{"lineNumber":310,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":311,"author":{"gitId":"zhongfu"},"content":"For compound types (such as `Foo`, which have multiple fields and is serialized as a JSON object), the process is similar.","lastModifiedDate":"2022-03-26"},{"lineNumber":312,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":313,"author":{"gitId":"zhongfu"},"content":"We will first want to ensure that `node` (from `p.readValueAsTree()`) is an `ObjectNode`. We will then read the values associated with the keys we are interested in (as `JsonNode` instances as well), then handle them individually:","lastModifiedDate":"2022-03-26"},{"lineNumber":314,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":315,"author":{"gitId":"zhongfu"},"content":"```java","lastModifiedDate":"2022-03-26"},{"lineNumber":316,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-26"},{"lineNumber":317,"author":{"gitId":"zhongfu"},"content":"        public Name deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":318,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":319,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-26"},{"lineNumber":320,"author":{"gitId":"zhongfu"},"content":"            JsonCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-26"},{"lineNumber":321,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":322,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":323,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":324,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":325,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":326,"author":{"gitId":"zhongfu"},"content":"            ObjectNode objNode \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-26"},{"lineNumber":327,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":328,"author":{"gitId":"zhongfu"},"content":"            // gets value associated with field \"id\", and makes sure that it exists and is an int value","lastModifiedDate":"2022-03-26"},{"lineNumber":329,"author":{"gitId":"zhongfu"},"content":"            // throws exception otherwise","lastModifiedDate":"2022-03-26"},{"lineNumber":330,"author":{"gitId":"zhongfu"},"content":"            int id \u003d getNonNullNodeWithType(objNode, \"id\", ctx, IntNode.class).intValue();","lastModifiedDate":"2022-03-26"},{"lineNumber":331,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":332,"author":{"gitId":"zhongfu"},"content":"            // gets value associated with field \"name\", and makes sure that it exists (is not null)","lastModifiedDate":"2022-03-26"},{"lineNumber":333,"author":{"gitId":"zhongfu"},"content":"            // then attempts to deserialize it as a Name","lastModifiedDate":"2022-03-26"},{"lineNumber":334,"author":{"gitId":"zhongfu"},"content":"            // throws exception if anything fails","lastModifiedDate":"2022-03-26"},{"lineNumber":335,"author":{"gitId":"zhongfu"},"content":"            Name name \u003d getNonNullNode(objNode, \"name\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":336,"author":{"gitId":"zhongfu"},"content":"                .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":337,"author":{"gitId":"zhongfu"},"content":"                .readValueAs(Name.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":338,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":339,"author":{"gitId":"zhongfu"},"content":"            // unlike Name and Tag, BigDecimal isn\u0027t part of our codebase, so...","lastModifiedDate":"2022-03-26"},{"lineNumber":340,"author":{"gitId":"zhongfu"},"content":"            // we create a BigDecimal instance manually here, and rethrow exceptions with our own message","lastModifiedDate":"2022-03-26"},{"lineNumber":341,"author":{"gitId":"zhongfu"},"content":"            // otherwise, it might throw an exception with a message that\u0027ll be possibly confusing for users","lastModifiedDate":"2022-03-26"},{"lineNumber":342,"author":{"gitId":"zhongfu"},"content":"            String decString \u003d getNonNullNode(objNode, \"num\", ctx, TextNode.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":343,"author":{"gitId":"zhongfu"},"content":"            BigDecimal dec;","lastModifiedDate":"2022-03-26"},{"lineNumber":344,"author":{"gitId":"zhongfu"},"content":"            try {","lastModifiedDate":"2022-03-26"},{"lineNumber":345,"author":{"gitId":"zhongfu"},"content":"                dec \u003d new BigDecimal(decString);","lastModifiedDate":"2022-03-26"},{"lineNumber":346,"author":{"gitId":"zhongfu"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-03-26"},{"lineNumber":347,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":348,"author":{"gitId":"zhongfu"},"content":"                    INVALID_VAL_FMTR.apply(\"num\"), // belongs to this deserializer class, see skeleton code","lastModifiedDate":"2022-03-26"},{"lineNumber":349,"author":{"gitId":"zhongfu"},"content":"                    e); // cause of exception","lastModifiedDate":"2022-03-26"},{"lineNumber":350,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":351,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":352,"author":{"gitId":"zhongfu"},"content":"            // first, make sure it\u0027s of a valid JSON type, i.e. an array","lastModifiedDate":"2022-03-26"},{"lineNumber":353,"author":{"gitId":"zhongfu"},"content":"            // then just deserialize it","lastModifiedDate":"2022-03-26"},{"lineNumber":354,"author":{"gitId":"zhongfu"},"content":"            Set\u003cTag\u003e tags \u003d getNonNullNodeWithType(objNode, \"tags\", ctx, ArrayNode.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":355,"author":{"gitId":"zhongfu"},"content":"                .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":356,"author":{"gitId":"zhongfu"},"content":"                .readValueAs(new TypeReference\u003cSet\u003cTag\u003e\u003e(){});","lastModifiedDate":"2022-03-26"},{"lineNumber":357,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":358,"author":{"gitId":"zhongfu"},"content":"            // perform any additional validation here, if required","lastModifiedDate":"2022-03-26"},{"lineNumber":359,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":360,"author":{"gitId":"zhongfu"},"content":"            return new Foo(id, name, dec, tags);","lastModifiedDate":"2022-03-26"},{"lineNumber":361,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":362,"author":{"gitId":"zhongfu"},"content":"```","lastModifiedDate":"2022-03-26"},{"lineNumber":363,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":364,"author":{"gitId":"zhongfu"},"content":"That\u0027s about it, really.","lastModifiedDate":"2022-03-26"},{"lineNumber":365,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":366,"author":{"gitId":"zhongfu"},"content":"Note that we make use of some new things:","lastModifiedDate":"2022-03-26"},{"lineNumber":367,"author":{"gitId":"zhongfu"},"content":"* `getNonNullNode()`: a helper method (defined in the skeleton) which gets a value and ensures that it is not null (i.e. that it exists),","lastModifiedDate":"2022-03-26"},{"lineNumber":368,"author":{"gitId":"zhongfu"},"content":"* `getNonNullNodeWithType()`: same as `getNonNullNode()`, but also checks that the `JsonNode` representing that value is also of the given type, and","lastModifiedDate":"2022-03-26"},{"lineNumber":369,"author":{"gitId":"zhongfu"},"content":"* `INVALID_VAL_FMTR`: a `UnaryOperator\u003cString\u003e` (i.e. function that takes a `String` and returns a `String`) used for formatting the message we use to indicate that the value of a certain field is malformed. This is also used in the `getNonNullNode*` methods.","lastModifiedDate":"2022-03-26"},{"lineNumber":370,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":371,"author":{"gitId":"zhongfu"},"content":"Other than these, the process is largely similar to that of [simple model classes](#5a-simple-model-classes).","lastModifiedDate":"2022-03-26"},{"lineNumber":372,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":373,"author":{"gitId":"zhongfu"},"content":"## Step 6: Write tests","lastModifiedDate":"2022-03-26"},{"lineNumber":374,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":375,"author":{"gitId":"zhongfu"},"content":"This is rather important -- writing serdes classes can often lead to many bugs, as you\u0027re effectively parsing arbitrary input. Writing tests for serializing and deserializing your new model classes can help you catch elementary mistakes, and ensure that the behavior stays just as expected even in edge cases.","lastModifiedDate":"2022-03-26"},{"lineNumber":376,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":377,"author":{"gitId":"zhongfu"},"content":"You can examine the `*SerdesTest.java` classes in `src/test/java/peoplesoft/model` for some ideas for test cases. Here are some to get you started:  ","lastModifiedDate":"2022-03-26"},{"lineNumber":378,"author":{"gitId":"zhongfu"},"content":"* serialization results in expected JSON representation","lastModifiedDate":"2022-03-26"},{"lineNumber":379,"author":{"gitId":"zhongfu"},"content":"* deserializing null value fails","lastModifiedDate":"2022-03-26"},{"lineNumber":380,"author":{"gitId":"zhongfu"},"content":"* deserializing from an inappropriate JSON type fails (including arrays with mixed types, if relevant)","lastModifiedDate":"2022-03-26"},{"lineNumber":381,"author":{"gitId":"zhongfu"},"content":"* deserializing with an invalid, malformed, or missing value fails (e.g. valid `String` but not a valid `BigDecimal` string)","lastModifiedDate":"2022-03-26"},{"lineNumber":382,"author":{"gitId":"zhongfu"},"content":"* deserializing empty objects or arrays (if relevant) yields the expected behavior","lastModifiedDate":"2022-03-26"},{"lineNumber":383,"author":{"gitId":"zhongfu"},"content":"* deserializing an invalid instance to a non-PeopleSoft class returns an exception with the expected message","lastModifiedDate":"2022-03-26"},{"lineNumber":384,"author":{"gitId":"zhongfu"},"content":"* deserializing valid representation results in valid instance","lastModifiedDate":"2022-03-26"},{"lineNumber":385,"author":{"gitId":"zhongfu"},"content":"* serializing an instance into a JSON representation and deserializing that JSON representation immediately results in a new instance that is effectively equal to the existing instance","lastModifiedDate":"2022-03-26"},{"lineNumber":386,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":387,"author":{"gitId":"zhongfu"},"content":"## Step 7: Integrate into other classes","lastModifiedDate":"2022-03-26"},{"lineNumber":388,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":389,"author":{"gitId":"zhongfu"},"content":"Now that you\u0027ve gotten everything else out of the way, you can finally add your model class into other model classes as a field. You\u0027ll then likely also want to modify the serdes classes in the other model classes to handle this type.","lastModifiedDate":"2022-03-26"},{"lineNumber":390,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":391,"author":{"gitId":"zhongfu"},"content":"This is usually not difficult at all, especially for a field for something of type `Foo`. In this case, we can simply delegate the deserialization to Jackson again, which will select the appropriate serializer/deserializer to use.","lastModifiedDate":"2022-03-26"},{"lineNumber":392,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":393,"author":{"gitId":"zhongfu"},"content":"In any case, that should be all you need to do to write custom serializers and deserializers for model classes in the PeopleSoft code base.","lastModifiedDate":"2022-03-26"}],"authorContributionMap":{"zhongfu":393}},{"path":"gradle/wrapper/gradle-wrapper.properties","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"distributionBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"distributionPath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.3-all.zip","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"zipStoreBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"zipStorePath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":4,"thewrik":1}},{"path":"src/main/java/peoplesoft/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.FileUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"zhongfu":3,"-":61}},{"path":"src/main/java/peoplesoft/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"zhongfu":1,"-":24}},{"path":"src/main/java/peoplesoft/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Config;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Version;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.ConfigUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.StringUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.Logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.LogicManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.AddressBookStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.Storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.StorageManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.UserPrefsStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.ui.Ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.ui.UiManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2022-03-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PeopleSoft ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2022-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"                logger.info(\"Data file not found. Will be starting with new sample data.\");","lastModifiedDate":"2022-03-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with a new save file.\");","lastModifiedDate":"2022-03-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with a new save file.\");","lastModifiedDate":"2022-03-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"ian-from-dover"},"content":"        logger.info(\"Starting PeopleSoft\" + MainApp.VERSION);","lastModifiedDate":"2022-03-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"ian-from-dover"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PeopleSoft ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2022-03-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":24,"ian-from-dover":7,"-":152}},{"path":"src/main/java/peoplesoft/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":62}},{"path":"src/main/java/peoplesoft/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":78}},{"path":"src/main/java/peoplesoft/commons/core/JobIdFactory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":" * Class to generate unique {@code JobIds}.","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"public class JobIdFactory {","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"    private static int id \u003d 0;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"     * Returns a unique {@code JobId}.","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"     * @return JobId.","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"    // TODO: currently missing functionality with serdes","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public static ID nextId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        return new ID(++id);","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"     * Sets the current id.","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"     * @param id To set.","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    public static void setId(int id) {","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"        if (id \u003c 0) {","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"            throw new IllegalArgumentException(\"id should not be negative\");","lastModifiedDate":"2022-03-28"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"        JobIdFactory.id \u003d id;","lastModifiedDate":"2022-03-23"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"     * Returns the current id.","lastModifiedDate":"2022-03-23"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"     * @return Id.","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    public static int getId() {","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"        return id;","lastModifiedDate":"2022-03-23"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":7,"Spyobird":34}},{"path":"src/main/java/peoplesoft/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":111}},{"path":"src/main/java/peoplesoft/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":1,"-":12}},{"path":"src/main/java/peoplesoft/commons/core/PersonIdFactory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-28"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"/**","lastModifiedDate":"2022-03-28"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":" * Class to generate unique person ids.","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":" */","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"public class PersonIdFactory {","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"    private static int id \u003d 0;","lastModifiedDate":"2022-03-28"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"     * Returns a unique person id.","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"     * @return JobId.","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    // TODO: currently missing functionality with serdes","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public static ID nextId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        return new ID(++id);","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Sets the current id.","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"     * @param id To set.","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"    public static void setId(int id) {","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"        if (id \u003c 0) {","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"            throw new IllegalArgumentException(\"id should not be negative\");","lastModifiedDate":"2022-03-28"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"        PersonIdFactory.id \u003d id;","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"     * Returns the current id.","lastModifiedDate":"2022-03-28"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"     * @return Id.","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"    public static int getId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"        return id;","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-28"}],"authorContributionMap":{"zhongfu":41}},{"path":"src/main/java/peoplesoft/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":115}},{"path":"src/main/java/peoplesoft/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core.index;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"zhongfu":1,"-":53}},{"path":"src/main/java/peoplesoft/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":10}},{"path":"src/main/java/peoplesoft/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":1,"-":20}},{"path":"src/main/java/peoplesoft/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.MainApp;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":2,"-":40}},{"path":"src/main/java/peoplesoft/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":1,"-":34}},{"path":"src/main/java/peoplesoft/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Config;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":3,"-":20}},{"path":"src/main/java/peoplesoft/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":82}},{"path":"src/main/java/peoplesoft/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"            throws IOException, JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"            Path filePath, Class\u003c? extends T\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        } catch (JsonMappingException e) {","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());","lastModifiedDate":"2022-03-19"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2022-03-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException, JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"     * Creates a {@code JsonMappingException} instance that wraps an {@code IllegalValueException} using the","lastModifiedDate":"2022-03-19"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"     * given context and message.","lastModifiedDate":"2022-03-19"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the {@code SerializerProvider} context (from a {@code Serializer})","lastModifiedDate":"2022-03-19"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"     * @param msg the message for the {@code JsonMappingException} and {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"     * @param cause the cause for the {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"     * @return a {@code JsonMappingException} that wraps an {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"    public static JsonMappingException getWrappedIllegalValueException(SerializerProvider ctx, String msg,","lastModifiedDate":"2022-03-19"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"            Throwable cause) {","lastModifiedDate":"2022-03-19"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"        IllegalValueException ive \u003d new IllegalValueException(msg, cause);","lastModifiedDate":"2022-03-19"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"        return JsonMappingException.from(ctx, msg, ive);","lastModifiedDate":"2022-03-19"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"     * Creates a {@code JsonMappingException} instance that wraps an {@code IllegalValueException} using the","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"     * given context and message.","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the {@code SerializerProvider} context (from a {@code Serializer})","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"     * @param msg the message for the {@code JsonMappingException} and {@code IllegalValueException}","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"     * @return a {@code JsonMappingException} that wraps an {@code IllegalValueException}","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"    public static JsonMappingException getWrappedIllegalValueException(SerializerProvider ctx, String msg) {","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"        IllegalValueException ive \u003d new IllegalValueException(msg);","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"        return JsonMappingException.from(ctx, msg, ive);","lastModifiedDate":"2022-03-16"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"     * Creates a {@code JsonMappingException} instance that wraps an {@code IllegalValueException} using the","lastModifiedDate":"2022-03-16"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"     * given context and message.","lastModifiedDate":"2022-03-16"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the {@code DeserializationContext} (from a {@code Deerializer})","lastModifiedDate":"2022-03-16"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"     * @param msg the message for the {@code JsonMappingException} and {@code IllegalValueException}","lastModifiedDate":"2022-03-16"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"     * @return a {@code JsonMappingException} that wraps an {@code IllegalValueException}","lastModifiedDate":"2022-03-16"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"    public static JsonMappingException getWrappedIllegalValueException(DeserializationContext ctx, String msg) {","lastModifiedDate":"2022-03-16"},{"lineNumber":159,"author":{"gitId":"zhongfu"},"content":"        IllegalValueException ive \u003d new IllegalValueException(msg);","lastModifiedDate":"2022-03-16"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"        return JsonMappingException.from(ctx, msg, ive);","lastModifiedDate":"2022-03-16"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":162,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"     * Creates a {@code JsonMappingException} instance that wraps an {@code IllegalValueException} using the","lastModifiedDate":"2022-03-19"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"     * given context and message.","lastModifiedDate":"2022-03-19"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the {@code DeserializationContext} (from a {@code Deerializer})","lastModifiedDate":"2022-03-19"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"     * @param msg the message for the {@code JsonMappingException} and {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"     * @param cause the cause for the {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"     * @return a {@code JsonMappingException} that wraps an {@code IllegalValueException}","lastModifiedDate":"2022-03-19"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"    public static JsonMappingException getWrappedIllegalValueException(DeserializationContext ctx, String msg,","lastModifiedDate":"2022-03-19"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"            Throwable cause) {","lastModifiedDate":"2022-03-19"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"        IllegalValueException ive \u003d new IllegalValueException(msg, cause);","lastModifiedDate":"2022-03-19"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"        return JsonMappingException.from(ctx, msg, ive);","lastModifiedDate":"2022-03-19"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-26"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"     * Gets the (non-null) {@code JsonNode} representing the value stored at the given key in the","lastModifiedDate":"2022-03-26"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"     * {@code ObjectNode}.","lastModifiedDate":"2022-03-26"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"     * If there is no such node at the given key (i.e. the {@code JsonNode} is {@code null}), then a","lastModifiedDate":"2022-03-26"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"     * {@code JsonMappingException} will be thrown.","lastModifiedDate":"2022-03-26"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"     * @param node the object to retrieve the value from","lastModifiedDate":"2022-03-26"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"     * @param key the key of the value","lastModifiedDate":"2022-03-26"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the current deserialization context","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"     * @param errMsgFormatter a unary operator that takes the key as an argument, and returns a string","lastModifiedDate":"2022-03-26"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"     * @return the {@code JsonNode} representing the value stored at the given key in the given object","lastModifiedDate":"2022-03-26"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"     * @throws JsonMappingException if there is no such key in the given object","lastModifiedDate":"2022-03-26"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-26"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"    public static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"            UnaryOperator\u003cString\u003e errMsgFormatter) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"        JsonNode jsonNode \u003d node.get(key);","lastModifiedDate":"2022-03-26"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"        if (jsonNode \u003d\u003d null) {","lastModifiedDate":"2022-03-26"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(","lastModifiedDate":"2022-03-26"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"                ctx, errMsgFormatter.apply(key));","lastModifiedDate":"2022-03-26"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"        return jsonNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":201,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-26"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"     * Gets the (non-null) {@code JsonNode} of type {@code T} representing the value stored at the given key","lastModifiedDate":"2022-03-26"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"     * in the {@code ObjectNode}.","lastModifiedDate":"2022-03-26"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"     * Generally, the only meaningful types for {@code T} are subclasses of {@code JsonNode}, including but","lastModifiedDate":"2022-03-26"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"     * not limited to {@code ObjectNode}, {@code TextNode}, and {@code IntNode}.","lastModifiedDate":"2022-03-26"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"     * If there is no such node at the given key (i.e. the {@code JsonNode} is {@code null}), then a","lastModifiedDate":"2022-03-26"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"     * {@code JsonMappingException} will be thrown.","lastModifiedDate":"2022-03-26"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"     * If the type of the node does not match {@code cls}, then a {@code JsonMappingException} will also be","lastModifiedDate":"2022-03-26"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"     * thrown.","lastModifiedDate":"2022-03-26"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"     * @param \u003cT\u003e the type of {@code JsonNode} to be returned","lastModifiedDate":"2022-03-26"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"     * @param node the object to retrieve the value from","lastModifiedDate":"2022-03-26"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"     * @param key the key of the value","lastModifiedDate":"2022-03-26"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"     * @param ctx the current deserialization context","lastModifiedDate":"2022-03-26"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"     * @param errMsgFormatter a unary operator that takes the key as an argument, and returns a string","lastModifiedDate":"2022-03-26"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"     * @param cls the type of {@code JsonNode} to be returned","lastModifiedDate":"2022-03-26"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"     * @return the {@code JsonNode} representing the value stored at the given key in the given object","lastModifiedDate":"2022-03-26"},{"lineNumber":223,"author":{"gitId":"zhongfu"},"content":"     * @throws JsonMappingException if there is no such key in the given object, or the type of the","lastModifiedDate":"2022-03-26"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"     *         {@code JsonNode} does not match {@code cls}","lastModifiedDate":"2022-03-26"},{"lineNumber":225,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-26"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"    public static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"            UnaryOperator\u003cString\u003e errMsgFormatter, Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":228,"author":{"gitId":"zhongfu"},"content":"        JsonNode jsonNode \u003d getNonNullNode(node, key, ctx, errMsgFormatter);","lastModifiedDate":"2022-03-26"},{"lineNumber":229,"author":{"gitId":"zhongfu"},"content":"        if (!cls.isInstance(jsonNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(","lastModifiedDate":"2022-03-26"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"                ctx, errMsgFormatter.apply(key));","lastModifiedDate":"2022-03-26"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-26"},{"lineNumber":233,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"        return cls.cast(jsonNode);","lastModifiedDate":"2022-03-26"},{"lineNumber":235,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":236,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":130,"-":137}},{"path":"src/main/java/peoplesoft/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":2,"-":66}},{"path":"src/main/java/peoplesoft/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"     * @see peoplesoft.model.Model#getAddressBook()","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2022-03-30"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();","lastModifiedDate":"2022-03-30"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"zhongfu":8,"ian-from-dover":4,"-":42}},{"path":"src/main/java/peoplesoft/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.AddressBookParser;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.Storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {","lastModifiedDate":"2022-03-30"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"        return model.getFilteredJobList();","lastModifiedDate":"2022-03-30"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zhongfu":12,"ian-from-dover":6,"-":69}},{"path":"src/main/java/peoplesoft/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":" * Adds a person to the database.","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the database. \"","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_RATE + \"RATE \"","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_RATE + \"3.20 \"","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"            + PREFIX_TAG + \"Intern \"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"            + PREFIX_TAG + \"Painting\";","lastModifiedDate":"2022-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the database\";","lastModifiedDate":"2022-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":14,"Spyobird":3,"-":53}},{"path":"src/main/java/peoplesoft/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.JobIdFactory;","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.PersonIdFactory;","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"        // Resets association and jobId","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"        Employment.newInstance();","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        JobIdFactory.setId(0);","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"        PersonIdFactory.setId(0);","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":5,"Spyobird":5,"-":20}},{"path":"src/main/java/peoplesoft/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":3,"-":17}},{"path":"src/main/java/peoplesoft/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":1,"-":70}},{"path":"src/main/java/peoplesoft/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":" * Deletes a person identified using it\u0027s displayed index from the database.","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"        // Deletes employment associations","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        Employment.getInstance().deletePerson(personToDelete);","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":7,"Spyobird":3,"-":46}},{"path":"src/main/java/peoplesoft/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.CollectionUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Payment;","lastModifiedDate":"2022-03-31"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":" * Edits the details of an existing person in the database.","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"            + \"[\" + PREFIX_RATE + \"RATE] \"","lastModifiedDate":"2022-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the database.\";","lastModifiedDate":"2022-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"        Rate updatedRate \u003d editPersonDescriptor.getRate().orElse(personToEdit.getRate());","lastModifiedDate":"2022-03-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"        Map\u003cID, Payment\u003e payments \u003d personToEdit.getPayments();","lastModifiedDate":"2022-03-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"        return new Person(personToEdit.getPersonId(),","lastModifiedDate":"2022-03-28"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"            updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRate, updatedTags, payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"        private Rate rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"            setRate(toCopy.rate);","lastModifiedDate":"2022-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"Spyobird"},"content":"        public void setRate(Rate rate) {","lastModifiedDate":"2022-03-29"},{"lineNumber":199,"author":{"gitId":"Spyobird"},"content":"            this.rate \u003d rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":200,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-29"},{"lineNumber":201,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":202,"author":{"gitId":"Spyobird"},"content":"        public Optional\u003cRate\u003e getRate() {","lastModifiedDate":"2022-03-29"},{"lineNumber":203,"author":{"gitId":"Spyobird"},"content":"            return Optional.ofNullable(rate);","lastModifiedDate":"2022-03-29"},{"lineNumber":204,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-29"},{"lineNumber":205,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"zhongfu":26,"Spyobird":14,"-":205}},{"path":"src/main/java/peoplesoft/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"zhongfu":2,"-":17}},{"path":"src/main/java/peoplesoft/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"    private final PersonContainsKeywordsPredicate predicate;","lastModifiedDate":"2022-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"    public FindCommand(PersonContainsKeywordsPredicate predicate) {","lastModifiedDate":"2022-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"zhongfu":4,"-":36,"thewrik":2}},{"path":"src/main/java/peoplesoft/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":2,"-":19}},{"path":"src/main/java/peoplesoft/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":3,"-":21}},{"path":"src/main/java/peoplesoft/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"zhongfu":1,"-":16}},{"path":"src/main/java/peoplesoft/logic/commands/job/JobAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.job.JobAddCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":" * Adds a {@code Job} to {@code AddressBook}.","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"public class JobAddCommand extends Command {","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    // TODO: change if needed","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    public static final String COMMAND_WORD \u003d \"job\";","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a job to the database. \"","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"            + \"[JOBID] \"","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_RATE + \"RATE \"","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_DURATION + \"DURATION \";","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New job added: %s\";","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job already exists in the database\";","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    private final Job toAdd;","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"     * Creates a {@code JobAddCommand} to add a {@code Job} parsed from the arguments.","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"     * @param args Arguments.","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException Thrown if there is an error with parsing.","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"    public JobAddCommand(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"        toAdd \u003d new JobAddCommandParser().parse(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"        if (model.hasJob(toAdd.getJobId())) {","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_JOB);","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        model.addJob(toAdd);","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"            || (other instanceof JobAddCommand // instanceof handles nulls","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"            \u0026\u0026 toAdd.equals(((JobAddCommand) other).toAdd));","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":65}},{"path":"src/main/java/peoplesoft/logic/commands/job/JobAssignCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import java.util.List;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ArgumentMultimap;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.job.JobAssignCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.exceptions.DuplicateEmploymentException;","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":" * Assigns a {@code Job} to a {@code Person}.","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"public class JobAssignCommand extends Command {","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"    //TODO: change if needed","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    public static final String COMMAND_WORD \u003d \"assign\";","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a job to a person. \"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"            + \"JOBID \"","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"            + PREFIX_INDEX + \"INDEX \";","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Assigned Job %s to %s\\n%s has the following jobs: %s\";","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_JOB_NOT_FOUND \u003d \"This job does not exist\";","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_DUPLICATE_EMPLOYMENT \u003d \"This person is already assigned to this job\";","lastModifiedDate":"2022-03-30"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    private ID jobId;","lastModifiedDate":"2022-03-28"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    private Index personIndex;","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"     * Creates a {@code JobAssignCommand} to assign a {@code Job} to a {@code Person}.","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"     * @param args Arguments.","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException Thrown if there is an error with parsing.","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"    public JobAssignCommand(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        parseArgs(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"    private void parseArgs(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"        // TODO: Arguably does not follow SRP/LoD","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"        ArgumentMultimap argumentMultimap \u003d new JobAssignCommandParser().parse(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"        try {","lastModifiedDate":"2022-03-28"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"            jobId \u003d new ID(ParserUtil.parseString(argumentMultimap.getPreamble()));","lastModifiedDate":"2022-03-28"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        } catch (IllegalArgumentException e) { // from ID constructor","lastModifiedDate":"2022-03-28"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"                JobAssignCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-28"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"        personIndex \u003d ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_INDEX).get());","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"    // TODO: Change implementation if needed.","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"        if (!model.hasJob(jobId)) {","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(MESSAGE_JOB_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"        Person person \u003d lastShownList.get(personIndex.getZeroBased());","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"            // TODO: This code breaks LoD.","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"            Job assignedJob \u003d model.getAddressBook().getJobList()","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"                    .filtered(job -\u003e job.getJobId().equals(jobId)).get(0);","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"            Employment.getInstance().associate(assignedJob, person);","lastModifiedDate":"2022-03-23"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"            // Asserts that filtered list should always contain exactly the filtered element","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"            assert false;","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"        } catch (DuplicateEmploymentException e) {","lastModifiedDate":"2022-03-30"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYMENT);","lastModifiedDate":"2022-03-30"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"        List\u003cJob\u003e jobs \u003d Employment.getInstance().getJobs(person, model);","lastModifiedDate":"2022-03-23"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"        // TODO: For now just prints a list of the jobs associated with a person to console.","lastModifiedDate":"2022-03-22"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, jobId, person.getName(),","lastModifiedDate":"2022-03-23"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"                person.getName(), jobs));","lastModifiedDate":"2022-03-23"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":9,"Spyobird":93}},{"path":"src/main/java/peoplesoft/logic/commands/job/JobDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.job.JobDeleteCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":" * Deletes a {@code Job} with a given {@code JobId}.","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"public class JobDeleteCommand extends Command {","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"    //TODO: change if needed","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    public static final String COMMAND_WORD \u003d \"jobdelete\";","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"            + \": Deletes the job identified by the job ID.\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"            + \"Parameters: JOBID\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Job: %s\";","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_JOB_NOT_FOUND \u003d \"This job does not exist\";","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    private final ID toDelete;","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"     * Creates a {@code JobDeleteCommand} to delete a {@code Job} by {@code JobId}.","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"     * @param args Arguments.","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException Thrown if there is an error with parsing.","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    public JobDeleteCommand(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"        toDelete \u003d new JobDeleteCommandParser().parse(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        if (!model.hasJob(toDelete)) {","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(MESSAGE_JOB_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"            Job jobToDelete \u003d new Job(toDelete, \"empty\",","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"                    new Rate(new Money(1), Duration.ofHours(1)), Duration.ofHours(1), false);","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"            // Currently handles deletions in JobList implementation (by jobId)","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"            model.deleteJob(jobToDelete);","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"            Employment.getInstance().deleteJob(jobToDelete);","lastModifiedDate":"2022-03-23"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"            // Asserts that filtered list should always contain exactly the filtered element","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"            assert false;","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"            || (other instanceof JobDeleteCommand // instanceof handles nulls","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"            \u0026\u0026 toDelete.equals(((JobDeleteCommand) other).toDelete));","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":2,"Spyobird":73}},{"path":"src/main/java/peoplesoft/logic/commands/job/JobListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"import static peoplesoft.model.Model.PREDICATE_SHOW_ALL_JOBS;","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":" * Lists the {@code Jobs} stored in {@code AddressBook}.","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"public class JobListCommand extends Command {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"    public static final String COMMAND_WORD \u003d \"joblist\";","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all jobs\";","lastModifiedDate":"2022-03-31"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"        model.updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2022-03-31"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"ian-from-dover":4,"Spyobird":22}},{"path":"src/main/java/peoplesoft/logic/commands/job/JobMarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.job.JobMarkCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":" * Marks a {@code Job} as paid or unpaid.","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"public class JobMarkCommand extends Command {","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    // TODO: change if needed","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"            + \": Marks the job identified by the index number used in the displayed job list.\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"            + \"Parameters: JOBID\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Marked Job %s as %s\";","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_JOB_NOT_FOUND \u003d \"This job does not exist\";","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    private final ID toMark;","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    private boolean state;","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"     * Creates a {@code JobDeleteCommand} to delete a {@code Job} by {@code JobId}.","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"     * @param args Arguments.","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException Thrown if there is an error with parsing.","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"    public JobMarkCommand(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"        toMark \u003d new JobMarkCommandParser().parse(args);","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"        if (!model.hasJob(toMark)) {","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"            throw new CommandException(MESSAGE_JOB_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"            // TODO: This line breaks LoD","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"            Job jobToMark \u003d model.getAddressBook().getJobList()","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"                    .filtered(job -\u003e job.getJobId().equals(toMark)).get(0);","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"            // Creates immutable instances and replaces the existing ones","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"            if (jobToMark.hasPaid()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"                state \u003d true;","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"                model.setJob(jobToMark, jobToMark.setAsNotPaid());","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"            } else {","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"                state \u003d false;","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"                model.setJob(jobToMark, jobToMark.setAsPaid());","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"            }","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"            // Asserts that filtered list should always contain exactly the filtered element","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"            assert false;","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"        // TODO: rudimentary result message","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toMark, state ? \"not paid\" : \"paid\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"            || (other instanceof JobMarkCommand // instanceof handles nulls","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"            \u0026\u0026 toMark.equals(((JobMarkCommand) other).toMark));","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":2,"Spyobird":76}},{"path":"src/main/java/peoplesoft/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.PersonIdFactory;","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Payment;","lastModifiedDate":"2022-03-31"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"                        PREFIX_RATE, PREFIX_TAG);","lastModifiedDate":"2022-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_RATE)","lastModifiedDate":"2022-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        Rate rate \u003d ParserUtil.parseRate(argMultimap.getValue(PREFIX_RATE).get());","lastModifiedDate":"2022-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"        Map\u003cID, Payment\u003e payments \u003d Map.of();","lastModifiedDate":"2022-03-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"        Person person \u003d new Person(PersonIdFactory.nextId(), name, phone, email, address, rate, tagList, payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"zhongfu":21,"Spyobird":6,"-":42}},{"path":"src/main/java/peoplesoft/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.FindCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ListCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobAddCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobAssignCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobDeleteCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobListCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobMarkCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"            // Job related commands","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"        case JobAddCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"            return new JobAddCommand(arguments);","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        case JobListCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"            return new JobListCommand();","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"        case JobDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"            return new JobDeleteCommand(arguments);","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"        case JobMarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"            return new JobMarkCommand(arguments);","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"        case JobAssignCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"            return new JobAssignCommand(arguments);","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":13,"Spyobird":22,"-":63}},{"path":"src/main/java/peoplesoft/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"zhongfu":1,"-":59}},{"path":"src/main/java/peoplesoft/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"zhongfu":1,"-":147}},{"path":"src/main/java/peoplesoft/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    public static final Prefix PREFIX_RATE \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"    // TODO: For {@code JobAssignCommand}, change if needed","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"zhongfu":1,"Spyobird":4,"-":14}},{"path":"src/main/java/peoplesoft/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"zhongfu":5,"-":24}},{"path":"src/main/java/peoplesoft/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"                        PREFIX_RATE, PREFIX_TAG);","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"        if (argMultimap.getValue(PREFIX_RATE).isPresent()) {","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"            editPersonDescriptor.setRate(ParserUtil.parseRate(argMultimap.getValue(PREFIX_RATE).get()));","lastModifiedDate":"2022-03-29"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"zhongfu":12,"Spyobird":6,"-":69}},{"path":"src/main/java/peoplesoft/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.FindCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"        return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2022-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"zhongfu":5,"-":27,"thewrik":1}},{"path":"src/main/java/peoplesoft/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"zhongfu":3,"-":13}},{"path":"src/main/java/peoplesoft/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.StringUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"     * Parses a {@code String}.","lastModifiedDate":"2022-03-22"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-22"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the given {@code string} is invalid.","lastModifiedDate":"2022-03-22"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    public static String parseString(String str) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(str);","lastModifiedDate":"2022-03-22"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"        String res \u003d str.trim();","lastModifiedDate":"2022-03-22"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"        if (res.isBlank()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"            // TODO: add message","lastModifiedDate":"2022-03-22"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(\"Empty string not allowed.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"        return res;","lastModifiedDate":"2022-03-22"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"     * Parses a {@code Rate}.","lastModifiedDate":"2022-03-22"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-22"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the given {@code rate} is invalid.","lastModifiedDate":"2022-03-22"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"    public static Rate parseRate(String str) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(str);","lastModifiedDate":"2022-03-22"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"        String trim \u003d str.trim();","lastModifiedDate":"2022-03-22"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"        Rate res;","lastModifiedDate":"2022-03-22"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"            res \u003d new Rate(new Money(Double.parseDouble(trim)), Duration.ofHours(1));","lastModifiedDate":"2022-03-22"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-03-22"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"            // TODO: add message/complex rate parsing %s/%s","lastModifiedDate":"2022-03-22"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(Rate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"        return res;","lastModifiedDate":"2022-03-22"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"     * Parses a {@code Duration}.","lastModifiedDate":"2022-03-22"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-22"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the given {@code duration} is invalid.","lastModifiedDate":"2022-03-22"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"    public static Duration parseDuration(String str) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(str);","lastModifiedDate":"2022-03-22"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"        String trim \u003d str.trim();","lastModifiedDate":"2022-03-22"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"        Duration res;","lastModifiedDate":"2022-03-22"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"            // TODO: Improve scuffed representation","lastModifiedDate":"2022-03-22"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"            res \u003d Duration.ofSeconds((long) (Double.parseDouble(trim) * 3600));","lastModifiedDate":"2022-03-22"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-03-22"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"            // TODO: add message","lastModifiedDate":"2022-03-22"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(\"Invalid value for duration\");","lastModifiedDate":"2022-03-22"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"        return res;","lastModifiedDate":"2022-03-22"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"zhongfu":9,"Spyobird":58,"-":115}},{"path":"src/main/java/peoplesoft/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"zhongfu":1,"-":38}},{"path":"src/main/java/peoplesoft/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"zhongfu":2,"-":15}},{"path":"src/main/java/peoplesoft/logic/parser/job/JobAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.JobIdFactory;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobAddCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ArgumentMultimap;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.Prefix;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":" * Parses input parameters and returns a {@code Job}.","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"public class JobAddCommandParser {","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code JobAddCommand}","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"     * and returns a {@code Job} object for {@code JobAddCommand}.","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    public Job parse(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"                PREFIX_RATE, PREFIX_DURATION);","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_RATE, PREFIX_DURATION)) {","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"                    JobAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"        String name \u003d ParserUtil.parseString(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"        Rate rate \u003d ParserUtil.parseRate(argMultimap.getValue(PREFIX_RATE).get());","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        ID id;","lastModifiedDate":"2022-03-28"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"        try {","lastModifiedDate":"2022-03-28"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"            id \u003d !argMultimap.getPreamble().isBlank()","lastModifiedDate":"2022-03-28"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"                    ? new ID(ParserUtil.parseString(argMultimap.getPreamble()))","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"                    : JobIdFactory.nextId(); // Short circuit does not increment","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-03-28"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-28"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"                    JobAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-28"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"        return new Job(id, name, rate, duration, false);","lastModifiedDate":"2022-03-23"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":10,"Spyobird":54}},{"path":"src/main/java/peoplesoft/logic/parser/job/JobAssignCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobAssignCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ArgumentMultimap;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.Prefix;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":" * Parses a {@code jobId} and an {@code index} for {@code Person}.","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"public class JobAssignCommandParser {","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code JobAssignCommand}","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"     * and returns an {@code ArgumentMultimap} for {@code JobAssignCommand}.","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    public ArgumentMultimap parse(String args) throws ParseException {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX);","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX)","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"                || argMultimap.getPreamble().isBlank()) {","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"                    JobAssignCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"        return argMultimap;","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":41}},{"path":"src/main/java/peoplesoft/logic/parser/job/JobDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobDeleteCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":" * Parses a {@code jobId} to delete.","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"public class JobDeleteCommandParser {","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code JobDeleteCommand}","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"     * and returns a {@code JobId} string for {@code JobDeleteCommand}.","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    public ID parse(String args) throws ParseException {","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"            String strVal \u003d ParserUtil.parseString(args); // throws ParseException?","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"            return new ID(strVal); // throws IllegalArgumentException","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"        } catch (ParseException | IllegalArgumentException e) {","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, JobDeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":5,"Spyobird":23}},{"path":"src/main/java/peoplesoft/logic/parser/job/JobMarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.commands.job.JobMarkCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.ParserUtil;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":" * Parses a {@code JobId} to mark.","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"public class JobMarkCommandParser {","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code JobMarkCommand}","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"     * and returns a {@code JobId} string for {@code JobMarkCommand}.","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    public ID parse(String args) throws ParseException {","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"            String strVal \u003d ParserUtil.parseString(args); // throws ParseException?","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"            return new ID(strVal); // throws IllegalArgumentException","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"            throw new ParseException(","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, JobMarkCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":4,"Spyobird":24}},{"path":"src/main/java/peoplesoft/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.IntNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.JobIdFactory;","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.PersonIdFactory;","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.JobList;","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.UniqueJobList;","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.JobNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.UniquePersonList;","lastModifiedDate":"2022-03-19"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d AddressBook.AddressBookSerializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d AddressBook.AddressBookDeserializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"    private JobList jobs;","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"     * Creates an empty AddressBook.","lastModifiedDate":"2022-03-23"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    public AddressBook() {","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        jobs \u003d new UniqueJobList();","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}.","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"     * Creates an {@code AddressBook} using the given {@code UniquePersonList} and {@code UniqueJobList}.","lastModifiedDate":"2022-03-23"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"     * Only used by {@code AddressBookDeserializer}.","lastModifiedDate":"2022-03-23"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"     * @param upl the {@code UniquePersonList} for the new instance","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"     * @param ujl the {@code UniqueJobList} for the new instance","lastModifiedDate":"2022-03-23"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"    private AddressBook(UniquePersonList upl, UniqueJobList ujl) {","lastModifiedDate":"2022-03-23"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"        persons \u003d upl;","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"        jobs \u003d ujl;","lastModifiedDate":"2022-03-23"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"     * Replaces the contents of the job list with {@code jobs}.","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"     * {@code jobs} must not contain duplicate jobs.","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"    public void setJobs(List\u003cJob\u003e jobs) {","lastModifiedDate":"2022-03-17"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"        this.jobs.setJobs(jobs);","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"        setJobs(newData.getJobList());","lastModifiedDate":"2022-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a person with the given id exists in the address book.","lastModifiedDate":"2022-03-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"    public boolean hasPerson(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        return persons.contains(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"     * Returns the person with the given id.","lastModifiedDate":"2022-03-28"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"     * @throws PersonNotFoundException if there is no such person","lastModifiedDate":"2022-03-28"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"    public Person getPerson(ID personId) throws PersonNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        return persons.get(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"    //// job-level operations","lastModifiedDate":"2022-03-17"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"     * Returns true if a job with the same identity as {@code job} exists in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"    public boolean hasJob(ID jobId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-22"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"        return jobs.contains(jobId);","lastModifiedDate":"2022-03-22"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"     * Returns the job with the given id.","lastModifiedDate":"2022-03-28"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"     * @throws JobNotFoundException if there is no such job","lastModifiedDate":"2022-03-28"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"    public Job getJob(ID jobId) throws JobNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"        return jobs.get(jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"     * Adds a job to the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"     * The job must not already exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"    public void addJob(Job job) {","lastModifiedDate":"2022-03-17"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"        jobs.add(job);","lastModifiedDate":"2022-03-17"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":182,"author":{"gitId":"Spyobird"},"content":"     * Replaces the given job {@code target} in the list with {@code editedJob}.","lastModifiedDate":"2022-03-17"},{"lineNumber":183,"author":{"gitId":"Spyobird"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":184,"author":{"gitId":"Spyobird"},"content":"     * The job identity of {@code editedJob} must not be the same as another existing job in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":185,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":186,"author":{"gitId":"Spyobird"},"content":"    public void setJob(Job target, Job editedJob) {","lastModifiedDate":"2022-03-17"},{"lineNumber":187,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(editedJob);","lastModifiedDate":"2022-03-17"},{"lineNumber":188,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":189,"author":{"gitId":"Spyobird"},"content":"        jobs.setJob(target, editedJob);","lastModifiedDate":"2022-03-17"},{"lineNumber":190,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":191,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":192,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":193,"author":{"gitId":"Spyobird"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2022-03-17"},{"lineNumber":194,"author":{"gitId":"Spyobird"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":195,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":196,"author":{"gitId":"Spyobird"},"content":"    public void removeJob(Job key) {","lastModifiedDate":"2022-03-17"},{"lineNumber":197,"author":{"gitId":"Spyobird"},"content":"        jobs.remove(key);","lastModifiedDate":"2022-03-17"},{"lineNumber":198,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":199,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":213,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":214,"author":{"gitId":"Spyobird"},"content":"    public ObservableList\u003cJob\u003e getJobList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":215,"author":{"gitId":"Spyobird"},"content":"        return jobs.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-17"},{"lineNumber":216,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":217,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":222,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2022-03-23"},{"lineNumber":223,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 jobs.equals(((AddressBook) other).jobs));","lastModifiedDate":"2022-03-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":228,"author":{"gitId":"Spyobird"},"content":"        return Objects.hash(persons, jobs);","lastModifiedDate":"2022-03-17"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"    protected static class AddressBookSerializer extends StdSerializer\u003cAddressBook\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"        private AddressBookSerializer(Class\u003cAddressBook\u003e val) {","lastModifiedDate":"2022-03-19"},{"lineNumber":233,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-19"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":235,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":236,"author":{"gitId":"zhongfu"},"content":"        private AddressBookSerializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":237,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":238,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":239,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":240,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":241,"author":{"gitId":"zhongfu"},"content":"        public void serialize(AddressBook val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":242,"author":{"gitId":"zhongfu"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-19"},{"lineNumber":243,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":244,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"persons\", val.persons);","lastModifiedDate":"2022-03-19"},{"lineNumber":245,"author":{"gitId":"Spyobird"},"content":"            gen.writeObjectField(\"jobs\", val.jobs);","lastModifiedDate":"2022-03-23"},{"lineNumber":246,"author":{"gitId":"Spyobird"},"content":"            gen.writeObjectField(\"employment\", Employment.getInstance());","lastModifiedDate":"2022-03-23"},{"lineNumber":247,"author":{"gitId":"Spyobird"},"content":"            gen.writeNumberField(\"jobIdState\", JobIdFactory.getId());","lastModifiedDate":"2022-03-23"},{"lineNumber":248,"author":{"gitId":"zhongfu"},"content":"            gen.writeNumberField(\"personIdState\", PersonIdFactory.getId());","lastModifiedDate":"2022-03-28"},{"lineNumber":249,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":250,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-19"},{"lineNumber":251,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":252,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":253,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":254,"author":{"gitId":"zhongfu"},"content":"    protected static class AddressBookDeserializer extends StdDeserializer\u003cAddressBook\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":255,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The address book is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":256,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-26"},{"lineNumber":257,"author":{"gitId":"zhongfu"},"content":"                k -\u003e String.format(\"This address book\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-26"},{"lineNumber":258,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":259,"author":{"gitId":"zhongfu"},"content":"        private AddressBookDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-19"},{"lineNumber":260,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-19"},{"lineNumber":261,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":262,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":263,"author":{"gitId":"zhongfu"},"content":"        private AddressBookDeserializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":264,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":265,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":266,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":267,"author":{"gitId":"zhongfu"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-19"},{"lineNumber":268,"author":{"gitId":"zhongfu"},"content":"                throws JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":269,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-26"},{"lineNumber":270,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":271,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":272,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":273,"author":{"gitId":"zhongfu"},"content":"                Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":274,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":275,"author":{"gitId":"zhongfu"},"content":"                INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-26"},{"lineNumber":276,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":277,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":278,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":279,"author":{"gitId":"zhongfu"},"content":"        public AddressBook deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-19"},{"lineNumber":280,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":281,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-19"},{"lineNumber":282,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-19"},{"lineNumber":283,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":284,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-19"},{"lineNumber":285,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":286,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-19"},{"lineNumber":287,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":288,"author":{"gitId":"zhongfu"},"content":"            ObjectNode objNode \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-19"},{"lineNumber":289,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":290,"author":{"gitId":"zhongfu"},"content":"            UniquePersonList upl \u003d getNonNullNode(objNode, \"persons\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":291,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":292,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(UniquePersonList.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":293,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":294,"author":{"gitId":"zhongfu"},"content":"            UniqueJobList ujl \u003d getNonNullNode(objNode, \"jobs\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":295,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":296,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(UniqueJobList.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":297,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":298,"author":{"gitId":"zhongfu"},"content":"            if (objNode.has(\"employment\")) {","lastModifiedDate":"2022-03-26"},{"lineNumber":299,"author":{"gitId":"zhongfu"},"content":"                Employment emp \u003d objNode.get(\"employment\") // not null, we\u0027re good","lastModifiedDate":"2022-03-26"},{"lineNumber":300,"author":{"gitId":"zhongfu"},"content":"                        .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":301,"author":{"gitId":"zhongfu"},"content":"                        .readValueAs(Employment.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":302,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":303,"author":{"gitId":"Spyobird"},"content":"                Employment.setInstance(emp);","lastModifiedDate":"2022-03-23"},{"lineNumber":304,"author":{"gitId":"zhongfu"},"content":"            } else {","lastModifiedDate":"2022-03-26"},{"lineNumber":305,"author":{"gitId":"zhongfu"},"content":"                Employment.newInstance();","lastModifiedDate":"2022-03-26"},{"lineNumber":306,"author":{"gitId":"Spyobird"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":307,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":308,"author":{"gitId":"zhongfu"},"content":"            if (objNode.has(\"jobIdState\")) {","lastModifiedDate":"2022-03-26"},{"lineNumber":309,"author":{"gitId":"zhongfu"},"content":"                // note jobId cannot be negative","lastModifiedDate":"2022-03-28"},{"lineNumber":310,"author":{"gitId":"zhongfu"},"content":"                int jobId \u003d Math.max(","lastModifiedDate":"2022-03-28"},{"lineNumber":311,"author":{"gitId":"zhongfu"},"content":"                        getNonNullNodeWithType(objNode, \"jobIdState\", ctx, IntNode.class).intValue(),","lastModifiedDate":"2022-03-28"},{"lineNumber":312,"author":{"gitId":"zhongfu"},"content":"                        0);","lastModifiedDate":"2022-03-28"},{"lineNumber":313,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":314,"author":{"gitId":"zhongfu"},"content":"                // just in case we get a jobId that already exists","lastModifiedDate":"2022-03-28"},{"lineNumber":315,"author":{"gitId":"zhongfu"},"content":"                while (upl.contains(new ID(jobId))) {","lastModifiedDate":"2022-03-28"},{"lineNumber":316,"author":{"gitId":"zhongfu"},"content":"                    jobId++;","lastModifiedDate":"2022-03-28"},{"lineNumber":317,"author":{"gitId":"zhongfu"},"content":"                }","lastModifiedDate":"2022-03-28"},{"lineNumber":318,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":319,"author":{"gitId":"Spyobird"},"content":"                JobIdFactory.setId(jobId);","lastModifiedDate":"2022-03-23"},{"lineNumber":320,"author":{"gitId":"zhongfu"},"content":"            } else {","lastModifiedDate":"2022-03-26"},{"lineNumber":321,"author":{"gitId":"zhongfu"},"content":"                JobIdFactory.setId(0);","lastModifiedDate":"2022-03-26"},{"lineNumber":322,"author":{"gitId":"Spyobird"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":323,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":324,"author":{"gitId":"zhongfu"},"content":"            if (objNode.has(\"personIdState\")) {","lastModifiedDate":"2022-03-28"},{"lineNumber":325,"author":{"gitId":"zhongfu"},"content":"                // note personId cannot be negative","lastModifiedDate":"2022-03-28"},{"lineNumber":326,"author":{"gitId":"zhongfu"},"content":"                int personId \u003d Math.max(","lastModifiedDate":"2022-03-28"},{"lineNumber":327,"author":{"gitId":"zhongfu"},"content":"                        getNonNullNodeWithType(objNode, \"personIdState\", ctx, IntNode.class).intValue(),","lastModifiedDate":"2022-03-28"},{"lineNumber":328,"author":{"gitId":"zhongfu"},"content":"                        0);","lastModifiedDate":"2022-03-28"},{"lineNumber":329,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":330,"author":{"gitId":"zhongfu"},"content":"                // just in case we get a personId that already exists","lastModifiedDate":"2022-03-28"},{"lineNumber":331,"author":{"gitId":"zhongfu"},"content":"                while (upl.contains(new ID(personId))) {","lastModifiedDate":"2022-03-28"},{"lineNumber":332,"author":{"gitId":"zhongfu"},"content":"                    personId++;","lastModifiedDate":"2022-03-28"},{"lineNumber":333,"author":{"gitId":"zhongfu"},"content":"                }","lastModifiedDate":"2022-03-28"},{"lineNumber":334,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":335,"author":{"gitId":"zhongfu"},"content":"                PersonIdFactory.setId(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":336,"author":{"gitId":"zhongfu"},"content":"            } else {","lastModifiedDate":"2022-03-28"},{"lineNumber":337,"author":{"gitId":"zhongfu"},"content":"                PersonIdFactory.setId(0);","lastModifiedDate":"2022-03-28"},{"lineNumber":338,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-28"},{"lineNumber":339,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":340,"author":{"gitId":"zhongfu"},"content":"            return new AddressBook(upl, ujl);","lastModifiedDate":"2022-03-26"},{"lineNumber":341,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":342,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":343,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":344,"author":{"gitId":"zhongfu"},"content":"        public AddressBook getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":345,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":346,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":347,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":166,"Spyobird":82,"-":100}},{"path":"src/main/java/peoplesoft/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.JobNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    Predicate\u003cJob\u003e PREDICATE_SHOW_ALL_JOBS \u003d unused -\u003e true;","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a person with the given id exists in the address book.","lastModifiedDate":"2022-03-28"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    boolean hasPerson(ID personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"     * Returns the person with the given id if it exists.","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"     * @throws PersonNotFoundException if no such person exists","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    Person getPerson(ID personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a job with the same identity as {@code job} exists in the address book.","lastModifiedDate":"2022-03-28"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"    boolean hasJob(Job job);","lastModifiedDate":"2022-03-28"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a job with the given id exists in the address book.","lastModifiedDate":"2022-03-28"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"    boolean hasJob(ID jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"     * Returns the job with the given id if it exists.","lastModifiedDate":"2022-03-28"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"     * @throws JobNotFoundException if no such job exists","lastModifiedDate":"2022-03-28"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"    Job getJob(ID jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"     * Deletes the given job.","lastModifiedDate":"2022-03-17"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"     * The job must exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"    void deleteJob(Job target);","lastModifiedDate":"2022-03-17"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"     * Adds the given job.","lastModifiedDate":"2022-03-17"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"     * {@code job} must not already exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    void addJob(Job job);","lastModifiedDate":"2022-03-17"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"     * Replaces the given job {@code target} with {@code editedJob}.","lastModifiedDate":"2022-03-17"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"     * The job identity of {@code editedJob} must not be the same as another existing job in the address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"    void setJob(Job target, Job editedJob);","lastModifiedDate":"2022-03-17"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"    /** Returns an unmodifiable view of the filtered job list */","lastModifiedDate":"2022-03-17"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();","lastModifiedDate":"2022-03-17"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"     * Updates the filter of the filtered job list to filter by the given {@code predicate}.","lastModifiedDate":"2022-03-17"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-03-17"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"    void updateFilteredJobList(Predicate\u003cJob\u003e predicate);","lastModifiedDate":"2022-03-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"zhongfu":32,"Spyobird":35,"-":84}},{"path":"src/main/java/peoplesoft/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.JobNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"    private final FilteredList\u003cJob\u003e filteredJobs;","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        filteredJobs \u003d new FilteredList\u003c\u003e(this.addressBook.getJobList());","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"        return hasPerson(person.getPersonId());","lastModifiedDate":"2022-03-28"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"    public boolean hasPerson(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"        return addressBook.hasPerson(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"    public Person getPerson(ID personId) throws PersonNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"        return addressBook.getPerson(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Job Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"    public boolean hasJob(Job job) {","lastModifiedDate":"2022-03-28"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(job);","lastModifiedDate":"2022-03-28"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"        return hasPerson(job.getJobId());","lastModifiedDate":"2022-03-28"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"    public boolean hasJob(ID jobId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-22"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"        return addressBook.hasJob(jobId);","lastModifiedDate":"2022-03-22"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"    public Job getJob(ID jobId) throws JobNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"        return addressBook.getJob(jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"    public void deleteJob(Job target) {","lastModifiedDate":"2022-03-17"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"        addressBook.removeJob(target);","lastModifiedDate":"2022-03-17"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"    public void addJob(Job job) {","lastModifiedDate":"2022-03-17"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"        addressBook.addJob(job);","lastModifiedDate":"2022-03-17"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"        updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);","lastModifiedDate":"2022-03-17"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":182,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":183,"author":{"gitId":"Spyobird"},"content":"    public void setJob(Job target, Job editedJob) {","lastModifiedDate":"2022-03-17"},{"lineNumber":184,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(target, editedJob);","lastModifiedDate":"2022-03-17"},{"lineNumber":185,"author":{"gitId":"Spyobird"},"content":"        addressBook.setJob(target, editedJob);","lastModifiedDate":"2022-03-17"},{"lineNumber":186,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":187,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":188,"author":{"gitId":"Spyobird"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":189,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":190,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":191,"author":{"gitId":"Spyobird"},"content":"     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of","lastModifiedDate":"2022-03-17"},{"lineNumber":192,"author":{"gitId":"Spyobird"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2022-03-17"},{"lineNumber":193,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":194,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":195,"author":{"gitId":"Spyobird"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":196,"author":{"gitId":"Spyobird"},"content":"        return filteredJobs;","lastModifiedDate":"2022-03-17"},{"lineNumber":197,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":198,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":199,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":200,"author":{"gitId":"Spyobird"},"content":"    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {","lastModifiedDate":"2022-03-17"},{"lineNumber":201,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-03-17"},{"lineNumber":202,"author":{"gitId":"Spyobird"},"content":"        filteredJobs.setPredicate(predicate);","lastModifiedDate":"2022-03-17"},{"lineNumber":203,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":204,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"    // good practice to include this when overriding equals()","lastModifiedDate":"2022-03-28"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-28"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"        return Objects.hash(addressBook, userPrefs, filteredPersons, filteredJobs);","lastModifiedDate":"2022-03-28"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":227,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-03-17"},{"lineNumber":228,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 filteredJobs.equals(other.filteredJobs);","lastModifiedDate":"2022-03-17"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":41,"Spyobird":48,"-":141}},{"path":"src/main/java/peoplesoft/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"     * Returns an unmodifiable view of the jobs list.","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"     * This list will not contain any duplicate jobs.","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    ObservableList\u003cJob\u003e getJobList();","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":2,"Spyobird":6,"-":15}},{"path":"src/main/java/peoplesoft/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"zhongfu":2,"-":14}},{"path":"src/main/java/peoplesoft/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":2,"-":85}},{"path":"src/main/java/peoplesoft/model/employment/Employment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.model.employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-23"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import java.util.List;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import java.util.TreeSet;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.exceptions.DuplicateEmploymentException;","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.exceptions.EmploymentNotFoundException;","lastModifiedDate":"2022-03-30"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":" * Association class to handle assigning {@code Jobs} to {@code Persons}.","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"@JsonSerialize(using \u003d Employment.EmploymentSerializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"@JsonDeserialize(using \u003d Employment.EmploymentDeserializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"public class Employment {","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"    // TODO deserializing an Employment instance with invalid IDs.","lastModifiedDate":"2022-03-30"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"     * Singleton instance.","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"    private static Employment instance;","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"     * Maps {@code JobId} to {@code PersonId}.","lastModifiedDate":"2022-03-30"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"    private Map\u003cID, Set\u003cID\u003e\u003e map;","lastModifiedDate":"2022-03-30"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"     * Constructor for a new employment.","lastModifiedDate":"2022-03-30"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"    public Employment() {","lastModifiedDate":"2022-03-30"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"        map \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-30"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"     * Constructor used for serdes.","lastModifiedDate":"2022-03-30"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-30"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"     * @param map Map of values","lastModifiedDate":"2022-03-30"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-30"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"    Employment(Map\u003cID, Set\u003cID\u003e\u003e map) {","lastModifiedDate":"2022-03-31"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(map);","lastModifiedDate":"2022-03-30"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"        this.map \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"        for (Map.Entry\u003cID, Set\u003cID\u003e\u003e e : map.entrySet()) {","lastModifiedDate":"2022-03-31"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"            this.map.put(e.getKey(), new TreeSet\u003c\u003e(e.getValue()));","lastModifiedDate":"2022-03-31"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-31"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"     * Adds an association of a {@code Job} with a {@code Person}.","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"     * Throws an exception if the association already exists.","lastModifiedDate":"2022-03-30"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"     * @param job Job.","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"     * @param person Person.","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"     * @throws DuplicateEmploymentException Throws if association already exists.","lastModifiedDate":"2022-03-30"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"    public void associate(Job job, Person person) {","lastModifiedDate":"2022-03-23"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(job, person);","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"        if (!map.containsKey(job.getJobId())) {","lastModifiedDate":"2022-03-30"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"            map.put(job.getJobId(), new TreeSet\u003c\u003e());","lastModifiedDate":"2022-03-30"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        if (map.get(job.getJobId()).contains(person.getPersonId())) {","lastModifiedDate":"2022-03-30"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"            throw new DuplicateEmploymentException();","lastModifiedDate":"2022-03-30"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"        // Guaranteed to be non-null","lastModifiedDate":"2022-03-30"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"        map.get(job.getJobId()).add(person.getPersonId());","lastModifiedDate":"2022-03-30"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-30"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"     * Removes an association of a {@code Job} with a {@code Person}.","lastModifiedDate":"2022-03-30"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"     * Throws an exception if the association is not found.","lastModifiedDate":"2022-03-30"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-30"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"     * @param job Job.","lastModifiedDate":"2022-03-30"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"     * @param person Person.","lastModifiedDate":"2022-03-30"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"     * @throws EmploymentNotFoundException Throws if association is not found.","lastModifiedDate":"2022-03-30"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-30"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"    public void disassociate(Job job, Person person) throws EmploymentNotFoundException {","lastModifiedDate":"2022-03-30"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(job, person);","lastModifiedDate":"2022-03-30"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"        // Short-circuit evaluation","lastModifiedDate":"2022-03-30"},{"lineNumber":104,"author":{"gitId":"Spyobird"},"content":"        if (!map.containsKey(job.getJobId()) || !map.get(job.getJobId()).contains(person.getPersonId())) {","lastModifiedDate":"2022-03-30"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"            throw new EmploymentNotFoundException();","lastModifiedDate":"2022-03-30"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"        // Guaranteed to be present","lastModifiedDate":"2022-03-30"},{"lineNumber":108,"author":{"gitId":"Spyobird"},"content":"        map.get(job.getJobId()).remove(person.getPersonId());","lastModifiedDate":"2022-03-30"},{"lineNumber":109,"author":{"gitId":"Spyobird"},"content":"        if (map.get(job.getJobId()).isEmpty()) {","lastModifiedDate":"2022-03-30"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"            map.remove(job.getJobId());","lastModifiedDate":"2022-03-30"},{"lineNumber":111,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":112,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":113,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":115,"author":{"gitId":"Spyobird"},"content":"     * Deletes all entries of a {@code Person}.","lastModifiedDate":"2022-03-23"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":117,"author":{"gitId":"Spyobird"},"content":"     * @param person {@code Person} to delete.","lastModifiedDate":"2022-03-23"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"    public void deletePerson(Person person) {","lastModifiedDate":"2022-03-23"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(person);","lastModifiedDate":"2022-03-23"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"        for (Map.Entry\u003cID, Set\u003cID\u003e\u003e e : map.entrySet()) {","lastModifiedDate":"2022-03-30"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"            e.getValue().removeIf(p -\u003e p.equals(person.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":123,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"        // If list of IDs for persons is empty, remove the entry from the map","lastModifiedDate":"2022-03-30"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"        map.entrySet().removeIf(e -\u003e e.getValue().isEmpty());","lastModifiedDate":"2022-03-30"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"     * Deletes all entries of a {@code Job}.","lastModifiedDate":"2022-03-30"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"     * @param job {@code Job} to delete.","lastModifiedDate":"2022-03-23"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"    public void deleteJob(Job job) {","lastModifiedDate":"2022-03-23"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(job);","lastModifiedDate":"2022-03-23"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"        map.remove(job.getJobId());","lastModifiedDate":"2022-03-23"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"     * Returns a list of {@code Jobs} that a {@code Person} has.","lastModifiedDate":"2022-03-22"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"     * Also updates the FilteredJobList for UI.","lastModifiedDate":"2022-03-30"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"     * @param person Person.","lastModifiedDate":"2022-03-22"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"     * @param model Model.","lastModifiedDate":"2022-03-22"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"     * @return List of jobs.","lastModifiedDate":"2022-03-22"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"    public List\u003cJob\u003e getJobs(Person person, Model model) {","lastModifiedDate":"2022-03-23"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(person, model);","lastModifiedDate":"2022-03-22"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"        // TODO: Updates UI, remove if not needed","lastModifiedDate":"2022-03-30"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"        model.updateFilteredJobList(job -\u003e map.get(job.getJobId()) !\u003d null","lastModifiedDate":"2022-03-31"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 map.get(job.getJobId()).contains(person.getPersonId()));","lastModifiedDate":"2022-03-31"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"        return model.getFilteredJobList();","lastModifiedDate":"2022-03-22"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"     * Returns a list of {@code Jobs} that a {@code Person} has.","lastModifiedDate":"2022-03-23"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"     * @return Map of jobs.","lastModifiedDate":"2022-03-23"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"    public Map\u003cID, Set\u003cID\u003e\u003e getAllJobs() {","lastModifiedDate":"2022-03-30"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"        return map;","lastModifiedDate":"2022-03-23"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"     * Sets the singleton instance of {@code Employment}.","lastModifiedDate":"2022-03-23"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"     * @param employment Instance to set.","lastModifiedDate":"2022-03-23"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"    public static void setInstance(Employment employment) {","lastModifiedDate":"2022-03-23"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(employment);","lastModifiedDate":"2022-03-30"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"        instance \u003d employment;","lastModifiedDate":"2022-03-23"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"     * Creates a new singleton instance of {@code Employment}.","lastModifiedDate":"2022-03-23"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"    public static void newInstance() {","lastModifiedDate":"2022-03-23"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"        instance \u003d new Employment();","lastModifiedDate":"2022-03-23"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":182,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":183,"author":{"gitId":"Spyobird"},"content":"     * Returns the instance of {@code Employment}.","lastModifiedDate":"2022-03-23"},{"lineNumber":184,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":185,"author":{"gitId":"Spyobird"},"content":"     * @return {@code Employment} instance.","lastModifiedDate":"2022-03-23"},{"lineNumber":186,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":187,"author":{"gitId":"Spyobird"},"content":"    public static Employment getInstance() {","lastModifiedDate":"2022-03-23"},{"lineNumber":188,"author":{"gitId":"Spyobird"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2022-03-23"},{"lineNumber":189,"author":{"gitId":"Spyobird"},"content":"            instance \u003d new Employment();","lastModifiedDate":"2022-03-23"},{"lineNumber":190,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":191,"author":{"gitId":"Spyobird"},"content":"        return instance;","lastModifiedDate":"2022-03-23"},{"lineNumber":192,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":193,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":194,"author":{"gitId":"Spyobird"},"content":"    protected static class EmploymentSerializer extends StdSerializer\u003cEmployment\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":195,"author":{"gitId":"Spyobird"},"content":"        private EmploymentSerializer(Class\u003cEmployment\u003e val) {","lastModifiedDate":"2022-03-23"},{"lineNumber":196,"author":{"gitId":"Spyobird"},"content":"            super(val);","lastModifiedDate":"2022-03-23"},{"lineNumber":197,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":198,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":199,"author":{"gitId":"Spyobird"},"content":"        private EmploymentSerializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":200,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":201,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":202,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":203,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":204,"author":{"gitId":"Spyobird"},"content":"        public void serialize(Employment value, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-23"},{"lineNumber":205,"author":{"gitId":"Spyobird"},"content":"            gen.writeObject(value.map);","lastModifiedDate":"2022-03-23"},{"lineNumber":206,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":207,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":208,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":209,"author":{"gitId":"Spyobird"},"content":"    protected static class EmploymentDeserializer extends StdDeserializer\u003cEmployment\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"Invalid employment!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":211,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":212,"author":{"gitId":"Spyobird"},"content":"        private EmploymentDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-23"},{"lineNumber":213,"author":{"gitId":"Spyobird"},"content":"            super(vc);","lastModifiedDate":"2022-03-23"},{"lineNumber":214,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":215,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":216,"author":{"gitId":"Spyobird"},"content":"        private EmploymentDeserializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":217,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":218,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":219,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":220,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":221,"author":{"gitId":"Spyobird"},"content":"        public Employment deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-23"},{"lineNumber":222,"author":{"gitId":"Spyobird"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":223,"author":{"gitId":"Spyobird"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-23"},{"lineNumber":224,"author":{"gitId":"Spyobird"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-23"},{"lineNumber":225,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":226,"author":{"gitId":"Spyobird"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-23"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":228,"author":{"gitId":"Spyobird"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":229,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"            // readValueAs Map is ok because we know `node` has to be a json object","lastModifiedDate":"2022-03-26"},{"lineNumber":231,"author":{"gitId":"Spyobird"},"content":"            Map\u003cID, Set\u003cID\u003e\u003e map \u003d node","lastModifiedDate":"2022-03-30"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":233,"author":{"gitId":"Spyobird"},"content":"                    .readValueAs(new TypeReference\u003cMap\u003cID, Set\u003cID\u003e\u003e\u003e(){});","lastModifiedDate":"2022-03-30"},{"lineNumber":234,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":235,"author":{"gitId":"Spyobird"},"content":"            return new Employment(map);","lastModifiedDate":"2022-03-23"},{"lineNumber":236,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":237,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":238,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":239,"author":{"gitId":"Spyobird"},"content":"        public Employment getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":240,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":241,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":242,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":243,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":5,"Spyobird":238}},{"path":"src/main/java/peoplesoft/model/employment/exceptions/DuplicateEmploymentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.model.employment.exceptions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"public class DuplicateEmploymentException extends RuntimeException {","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"Spyobird":4}},{"path":"src/main/java/peoplesoft/model/employment/exceptions/EmploymentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.model.employment.exceptions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"public class EmploymentNotFoundException extends RuntimeException {","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"Spyobird":4}},{"path":"src/main/java/peoplesoft/model/job/Job.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-26"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.BooleanNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":" * Represents a job. Immutable.","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"@JsonSerialize(using \u003d Job.JobSerializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"@JsonDeserialize(using \u003d Job.JobDeserializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"public class Job {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"    private final ID jobId;","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    private final String desc;","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"    private final Rate rate;","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    private final Duration duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"    private final boolean hasPaid;","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"     * Constructor for an immutable job.","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"     * All fields must not be null.","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    public Job(ID jobId, String desc, Rate rate, Duration duration, boolean hasPaid) {","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(jobId, desc, rate, duration, hasPaid);","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        this.jobId \u003d jobId;","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"        this.rate \u003d rate;","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        this.hasPaid \u003d hasPaid;","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"    public ID getJobId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        return jobId;","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"    public String getDesc() {","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        return desc;","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"    public Rate getRate() {","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"        return rate;","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"        return duration;","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"    public boolean hasPaid() {","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"        return hasPaid;","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"     * Returns the pay of the job.","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"     * Calculated from rate and duration.","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"     * @return Pay.","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"    public Money calculatePay() {","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"        return rate.calculateAmount(duration);","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"     * Returns a new instance of the job with isPaid as true;","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"     * @return Paid job.","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"    public Job setAsPaid() {","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"        return new Job(jobId, desc, rate, duration, true);","lastModifiedDate":"2022-03-23"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"     * Returns a new instance of the job with isPaid as false;","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"     * @return Unpaid job.","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"    public Job setAsNotPaid() {","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"        return new Job(jobId, desc, rate, duration, false);","lastModifiedDate":"2022-03-23"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"     * Returns true if both jobs have the same {@code jobId}.","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"     * This defines a weaker notion of equality between two jobs.","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"     * @param other the other Job to compare against","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"     * @return true if both jobs have the same {@code jobId}","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"    public boolean isSameJob(Job other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"            return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"        return other !\u003d null","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"            \u0026\u0026 other.getJobId().equals(getJobId());","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"Spyobird"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"        if (!(other instanceof Job)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"        Job otherJob \u003d (Job) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"        return otherJob.getJobId().equals(getJobId())","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 otherJob.getDesc().equals(getDesc())","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 otherJob.getRate().equals(getRate())","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 otherJob.getDuration().equals(getDuration())","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 otherJob.hasPaid() \u003d\u003d hasPaid();","lastModifiedDate":"2022-03-23"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"        return Objects.hash(jobId, desc, rate, duration, hasPaid);","lastModifiedDate":"2022-03-23"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"    public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-03-22"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"        builder.append(\"ID: \")","lastModifiedDate":"2022-03-23"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"                .append(getJobId())","lastModifiedDate":"2022-03-23"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"                .append(\"; Name: \")","lastModifiedDate":"2022-03-22"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"                .append(getDesc())","lastModifiedDate":"2022-03-22"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"                .append(\"; Rate: \")","lastModifiedDate":"2022-03-22"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"                .append(getRate())","lastModifiedDate":"2022-03-22"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"                .append(\"; Duration: \")","lastModifiedDate":"2022-03-22"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"                .append(getDuration().toHoursPart())","lastModifiedDate":"2022-03-23"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"                .append(\"H\")","lastModifiedDate":"2022-03-23"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"                .append(getDuration().toMinutesPart())","lastModifiedDate":"2022-03-23"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"                .append(\"M\")","lastModifiedDate":"2022-03-23"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"                .append(\"; Has paid: \")","lastModifiedDate":"2022-03-23"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"                .append(hasPaid());","lastModifiedDate":"2022-03-23"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"        return builder.toString();","lastModifiedDate":"2022-03-22"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"    protected static class JobSerializer extends StdSerializer\u003cJob\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"        private JobSerializer(Class\u003cJob\u003e val) {","lastModifiedDate":"2022-03-23"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"            super(val);","lastModifiedDate":"2022-03-23"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"        private JobSerializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"        public void serialize(Job value, JsonGenerator gen, SerializerProvider provider)throws IOException {","lastModifiedDate":"2022-03-23"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-23"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"jobId\", value.getJobId());","lastModifiedDate":"2022-03-28"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"            gen.writeStringField(\"desc\", value.getDesc());","lastModifiedDate":"2022-03-23"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"            gen.writeObjectField(\"rate\", value.getRate());","lastModifiedDate":"2022-03-23"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"            gen.writeObjectField(\"duration\", value.getDuration());","lastModifiedDate":"2022-03-23"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"            gen.writeBooleanField(\"hasPaid\", value.hasPaid());","lastModifiedDate":"2022-03-23"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-23"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":182,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":183,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":184,"author":{"gitId":"Spyobird"},"content":"    protected static class JobDeserializer extends StdDeserializer\u003cJob\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":185,"author":{"gitId":"Spyobird"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The job instance is invalid or missing!\";","lastModifiedDate":"2022-03-23"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-26"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"                k -\u003e String.format(\"This job\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":189,"author":{"gitId":"Spyobird"},"content":"        private JobDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-23"},{"lineNumber":190,"author":{"gitId":"Spyobird"},"content":"            super(vc);","lastModifiedDate":"2022-03-23"},{"lineNumber":191,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":192,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":193,"author":{"gitId":"Spyobird"},"content":"        private JobDeserializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":194,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":195,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":196,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":197,"author":{"gitId":"Spyobird"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-23"},{"lineNumber":198,"author":{"gitId":"Spyobird"},"content":"                throws JsonMappingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-26"},{"lineNumber":200,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":201,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"                Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"                INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-26"},{"lineNumber":206,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":207,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":208,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":209,"author":{"gitId":"Spyobird"},"content":"        public Job deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-23"},{"lineNumber":210,"author":{"gitId":"Spyobird"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":211,"author":{"gitId":"Spyobird"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-23"},{"lineNumber":212,"author":{"gitId":"Spyobird"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-23"},{"lineNumber":213,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":214,"author":{"gitId":"Spyobird"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-23"},{"lineNumber":215,"author":{"gitId":"Spyobird"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-23"},{"lineNumber":216,"author":{"gitId":"Spyobird"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":217,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":218,"author":{"gitId":"Spyobird"},"content":"            ObjectNode job \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-23"},{"lineNumber":219,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"            ID jobId \u003d getNonNullNode(job, \"jobId\", ctx)","lastModifiedDate":"2022-03-28"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-28"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(ID.class);","lastModifiedDate":"2022-03-28"},{"lineNumber":223,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"            String desc \u003d getNonNullNodeWithType(job, \"desc\", ctx, TextNode.class).textValue();","lastModifiedDate":"2022-03-26"},{"lineNumber":225,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"            Rate rate \u003d getNonNullNode(job, \"rate\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":228,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Rate.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":229,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"            Duration duration \u003d getNonNullNode(job, \"duration\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Duration.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":233,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"            Boolean hasPaid \u003d getNonNullNodeWithType(job, \"hasPaid\", ctx, BooleanNode.class).booleanValue();","lastModifiedDate":"2022-03-26"},{"lineNumber":235,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":236,"author":{"gitId":"Spyobird"},"content":"            return new Job(jobId, desc, rate, duration, hasPaid);","lastModifiedDate":"2022-03-23"},{"lineNumber":237,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":238,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":239,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":240,"author":{"gitId":"Spyobird"},"content":"        public Job getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":241,"author":{"gitId":"Spyobird"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-23"},{"lineNumber":242,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":243,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":244,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"zhongfu":61,"Spyobird":183}},{"path":"src/main/java/peoplesoft/model/job/JobList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"import java.util.List;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.JobNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":"public interface JobList extends Iterable\u003cJob\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"    // TODO: should jobs compare by jobs or jobId, since add it seems more intuitive","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"    // to compare by jobs but delete seems more intuitive to compare by jobId.","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    // For now it is jobId.","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"    boolean contains(ID jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    Job get(ID jobId) throws JobNotFoundException;","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"thewrik"},"content":"    void add(Job toAdd);","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"thewrik"},"content":"    void remove(Job toRemove);","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"    void setJob(Job targetJob, Job editedJob);","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"    void setJobs(List\u003cJob\u003e jobs);","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"thewrik"},"content":"    ObservableList\u003cJob\u003e asUnmodifiableObservableList();","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"thewrik"},"content":"    boolean jobsAreUnique(List\u003cJob\u003e jobs);","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":6,"Spyobird":3,"thewrik":21}},{"path":"src/main/java/peoplesoft/model/job/Money.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import java.math.RoundingMode;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import java.text.NumberFormat;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import java.util.Locale;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":" * Represents some value of money. Immutable.","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Money.MoneySerializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Money.MoneyDeserializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"public class Money {","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    private static final int VALUE_SCALE \u003d 6;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    private static final NumberFormat CURRENCY_FORMAT \u003d NumberFormat.getCurrencyInstance(Locale.US);","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"    public final BigDecimal value;","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"     * Constructs a {@code Money}.","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"     * @param value A value as a double.","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    public Money(double value) {","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"        this(BigDecimal.valueOf(value));","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"     * Constructs a {@code Money}.","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"     * @param value A value as a BigDecimal.","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"    public Money(BigDecimal value) {","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(value);","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"        CURRENCY_FORMAT.setRoundingMode(RoundingMode.HALF_UP);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        this.value \u003d value.setScale(VALUE_SCALE, RoundingMode.HALF_UP);","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a given string is a valid money string.","lastModifiedDate":"2022-03-19"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"     * TODO: should we accept strings with {@code $}, {@code ,}, etc?","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"    public static boolean isValidMoneyString(String moneyString) {","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"        try {","lastModifiedDate":"2022-03-19"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"            new BigDecimal(moneyString);","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"            return true;","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"            return false;","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"    public BigDecimal getValue() {","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"        return value;","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the sum of both values.","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"     * @param augend Value to add.","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"     * @return Sum.","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"    public Money add(Money augend) {","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"        return new Money(value.add(augend.value).setScale(VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"     * Returns a {@code Money} with the value equal the sum of both values.","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"     * @param augend Value to add.","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"     * @return Sum.","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    public Money add(BigDecimal augend) {","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        return new Money(value.add(augend).setScale(VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the difference of the second value from the first.","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"     * @param augend Value to subtract.","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"     * @return Difference.","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"    public Money subtract(Money augend) {","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"        return new Money(value.add(augend.value.negate()).setScale(VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the product of both values.","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"Spyobird"},"content":"     * @param multiplicand Value to multiply.","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"     * @return Product.","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"    public Money multiply(BigDecimal multiplicand) {","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        return new Money(value.multiply(multiplicand).setScale(VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the product of both values.","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"     * @param multiplicand Value to multiply.","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"     * @return Product.","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"    public Money multiply(Money multiplicand) {","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"Spyobird"},"content":"        return new Money(value.multiply(multiplicand.value).setScale(VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the quotient of the first value over the second.","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"     * @param divisor Value to divide.","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"     * @return Quotient.","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"    public Money divide(BigDecimal divisor) {","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"        return new Money(value.divide(divisor, VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"     * Returns a {@code Money} with the value equal the quotient of the first value over the second.","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"     * @param divisor Value to divide.","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"     * @return Quotient.","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"    public Money divide(Money divisor) {","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"        return new Money(value.divide(divisor.value, VALUE_SCALE, RoundingMode.HALF_UP));","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"     * Prints the 6 decimal place representation of the value.","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"     * @return Value as a string.","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"    public String printFullValue() {","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"        return value.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"                || (other instanceof Money // instanceof handles nulls","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 value.equals(((Money) other).value)); // state check","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"        // Might change if scale not matching is an issue","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"        return value.hashCode();","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"     * Prints the 2 decimal place currency format of the value.","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"     * @returns Value in currency format as a string.","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"    public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"        // Might change if scale not matching is an issue","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"        return CURRENCY_FORMAT.format(value);","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"    protected static class MoneySerializer extends StdSerializer\u003cMoney\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"        private MoneySerializer(Class\u003cMoney\u003e val) {","lastModifiedDate":"2022-03-19"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-19"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"        private MoneySerializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Money val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.value.toString()); // to preserve precision","lastModifiedDate":"2022-03-19"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"    protected static class MoneyDeserializer extends StdDeserializer\u003cMoney\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The money value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"        private MoneyDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-19"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-19"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":201,"author":{"gitId":"zhongfu"},"content":"        private MoneyDeserializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"        public Money deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-19"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-19"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-19"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-19"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"            String valString \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-19"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"            if (!Money.isValidMoneyString(valString)) {","lastModifiedDate":"2022-03-19"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-19"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"            return new Money(new BigDecimal(valString));","lastModifiedDate":"2022-03-19"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":223,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"        public Money getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":225,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":228,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"zhongfu":97,"Spyobird":131}},{"path":"src/main/java/peoplesoft/model/job/Rate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import static peoplesoft.model.job.util.DurationUtil.requirePositive;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import static peoplesoft.model.job.util.MoneyUtil.requireNonNegative;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-26"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":" * Represents a rate of payment, e.g. $5 per hour. Immutable.","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Rate.RateSerializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Rate.RateDeserializer.class)","lastModifiedDate":"2022-03-19"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"public class Rate {","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Value for rate should be a decimal number\";","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    public final Money amount;","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    public final Duration duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"     * Constructs a {@code Rate} instance.","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"     * @param amount Money per unit time","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"     * @param duration Unit time duration","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public Rate(Money amount, Duration duration) {","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        requireAllNonNull(amount, duration);","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"        requireNonNegative(amount);","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"        requirePositive(duration);","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        this.amount \u003d amount;","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"    public Money getAmount() {","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        return amount;","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        return duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"     * Calculates the resulting amount of {@code Money} from multiplying this rate","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"     * by the given","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"     * {@code Duration}.","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"     * @param totalDuration the duration to multiply this rate by","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"     * @return the resulting amount of {@code Money} at this rate for the given","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"     *         duration","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    public Money calculateAmount(Duration totalDuration) {","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"        return amount.multiply(BigDecimal.valueOf(totalDuration.dividedBy(duration)));","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"            return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        if (!(other instanceof Rate)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"            return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"        Rate otherRate \u003d (Rate) other;","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"        return amount.equals(otherRate.amount)","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 duration.equals(otherRate.duration);","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"        return Objects.hash(amount, duration);","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"     * Prints the 2 decimal place currency format of the value.","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"ovidharshini"},"content":"     * @return Value in currency format as a string.","lastModifiedDate":"2022-03-19"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"    public String toString() {","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"        // TODO make it more user friendly, e.g. $5 / hour","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"        return String.format(\"%s / %dH\", amount, duration.toHours());","lastModifiedDate":"2022-03-22"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"    protected static class RateSerializer extends StdSerializer\u003cRate\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"        private RateSerializer(Class\u003cRate\u003e val) {","lastModifiedDate":"2022-03-19"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-19"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"        private RateSerializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Rate val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-19"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"amount\", val.getAmount());","lastModifiedDate":"2022-03-19"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"            gen.writeStringField(\"duration\", val.getDuration().toString());","lastModifiedDate":"2022-03-19"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-19"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"    protected static class RateDeserializer extends StdDeserializer\u003cRate\u003e {","lastModifiedDate":"2022-03-19"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The rate instance is invalid or missing!\";","lastModifiedDate":"2022-03-19"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-26"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"                k -\u003e String.format(\"This rate\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-26"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"        private RateDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-19"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-19"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"        private RateDeserializer() {","lastModifiedDate":"2022-03-19"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-19"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-19"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"                throws JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-26"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"                Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"                INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-26"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"        public Rate deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-19"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-19"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-19"},{"lineNumber":159,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-19"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-19"},{"lineNumber":162,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-19"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"            ObjectNode rate \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-19"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"            Money amount \u003d getNonNullNode(rate, \"amount\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Money.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"            String durationString \u003d getNonNullNodeWithType(rate, \"duration\", ctx, TextNode.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"                    .textValue();","lastModifiedDate":"2022-03-26"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"            Duration duration;","lastModifiedDate":"2022-03-19"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"            try {","lastModifiedDate":"2022-03-19"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"                duration \u003d Duration.parse(durationString);","lastModifiedDate":"2022-03-19"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"            } catch (NullPointerException | DateTimeParseException e) {","lastModifiedDate":"2022-03-19"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(","lastModifiedDate":"2022-03-19"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"                    ctx, INVALID_VAL_FMTR.apply(\"duration\"), e);","lastModifiedDate":"2022-03-26"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-19"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"            return new Rate(amount, duration);","lastModifiedDate":"2022-03-19"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"        public Rate getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-19"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"zhongfu":180,"ovidharshini":7,"Spyobird":2}},{"path":"src/main/java/peoplesoft/model/job/UniqueJobList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-23"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"import java.util.List;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ArrayNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"thewrik"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.DuplicateJobException;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.JobNotFoundException;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":" * Implementation of {@code JobList}.","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"@JsonSerialize(using \u003d UniqueJobList.UniqueJobListSerializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"@JsonDeserialize(using \u003d UniqueJobList.UniqueJobListDeserializer.class)","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"public class UniqueJobList implements JobList {","lastModifiedDate":"2022-03-23"},{"lineNumber":38,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"thewrik"},"content":"    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"thewrik"},"content":"    private final ObservableList\u003cJob\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"thewrik"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    public boolean contains(ID jobId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        return internalList.stream().anyMatch(job -\u003e job.getJobId().equals(jobId));","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"     * Returns the job with the given id.","lastModifiedDate":"2022-03-28"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"     * @throws JobNotFoundException if the person does not exist","lastModifiedDate":"2022-03-28"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"    public Job get(ID jobId) throws JobNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(jobId);","lastModifiedDate":"2022-03-28"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        return internalList.stream()","lastModifiedDate":"2022-03-28"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"            .filter(j -\u003e j !\u003d null \u0026\u0026 jobId.equals(j.getJobId()))","lastModifiedDate":"2022-03-28"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"            .findAny()","lastModifiedDate":"2022-03-28"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"            .orElseThrow(JobNotFoundException::new);","lastModifiedDate":"2022-03-28"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"thewrik"},"content":"    public void add(Job toAdd) {","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"thewrik"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        if (contains(toAdd.getJobId())) {","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"thewrik"},"content":"            throw new DuplicateJobException();","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"thewrik"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"thewrik"},"content":"    public void remove(Job toRemove) {","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"thewrik"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"        if (!contains(toRemove.getJobId())) {","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"thewrik"},"content":"            throw new JobNotFoundException();","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"        internalList.removeIf(job -\u003e job.isSameJob(toRemove));","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"thewrik"},"content":"    public void setJob(Job targetJob, Job editedJob) {","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"thewrik"},"content":"        requireAllNonNull(targetJob, editedJob);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"thewrik"},"content":"        int index \u003d internalList.indexOf(targetJob);","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"thewrik"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"thewrik"},"content":"            throw new JobNotFoundException();","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"        if (!targetJob.isSameJob(editedJob) \u0026\u0026 contains(editedJob.getJobId())) {","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"thewrik"},"content":"            throw new DuplicateJobException();","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"thewrik"},"content":"        internalList.set(index, editedJob);","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"    public void setJobs(UniqueJobList replacement) {","lastModifiedDate":"2022-03-23"},{"lineNumber":98,"author":{"gitId":"thewrik"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"thewrik"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"thewrik"},"content":"    public void setJobs(List\u003cJob\u003e jobs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"thewrik"},"content":"        requireAllNonNull(jobs);","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"thewrik"},"content":"        if (!jobsAreUnique(jobs)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"thewrik"},"content":"            throw new DuplicateJobException();","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"thewrik"},"content":"        internalList.setAll(jobs);","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"thewrik"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"thewrik"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"thewrik"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"thewrik"},"content":"    public ObservableList\u003cJob\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"thewrik"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"thewrik"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"thewrik"},"content":"     * Returns true if {@code jobs} contains only unique persons.","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"thewrik"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"thewrik"},"content":"    public boolean jobsAreUnique(List\u003cJob\u003e jobs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"thewrik"},"content":"        for (int i \u003d 0; i \u003c jobs.size() - 1; i++) {","lastModifiedDate":"2022-03-17"},{"lineNumber":124,"author":{"gitId":"thewrik"},"content":"            for (int j \u003d i + 1; j \u003c jobs.size(); j++) {","lastModifiedDate":"2022-03-17"},{"lineNumber":125,"author":{"gitId":"thewrik"},"content":"                if (jobs.get(i).isSameJob(jobs.get(j))) {","lastModifiedDate":"2022-03-17"},{"lineNumber":126,"author":{"gitId":"thewrik"},"content":"                    return false;","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"thewrik"},"content":"                }","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"thewrik"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"thewrik"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":130,"author":{"gitId":"thewrik"},"content":"        return true;","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"thewrik"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"thewrik"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"                || (other instanceof UniqueJobList // instanceof handles nulls","lastModifiedDate":"2022-03-23"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 internalList.equals(((UniqueJobList) other).internalList));","lastModifiedDate":"2022-03-23"},{"lineNumber":138,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"thewrik"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"thewrik"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"thewrik"},"content":"    public Iterator\u003cJob\u003e iterator() {","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"thewrik"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-03-16"},{"lineNumber":148,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"    protected static class UniqueJobListSerializer extends StdSerializer\u003cUniqueJobList\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"        private UniqueJobListSerializer(Class\u003cUniqueJobList\u003e val) {","lastModifiedDate":"2022-03-23"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"            super(val);","lastModifiedDate":"2022-03-23"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"        private UniqueJobListSerializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"        public void serialize(UniqueJobList val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-23"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"            gen.writeObject(val.asUnmodifiableObservableList());","lastModifiedDate":"2022-03-23"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"    protected static class UniqueJobListDeserializer extends StdDeserializer\u003cUniqueJobList\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The job list is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"        private UniqueJobListDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-23"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"            super(vc);","lastModifiedDate":"2022-03-23"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":172,"author":{"gitId":"Spyobird"},"content":"        private UniqueJobListDeserializer() {","lastModifiedDate":"2022-03-23"},{"lineNumber":173,"author":{"gitId":"Spyobird"},"content":"            this(null);","lastModifiedDate":"2022-03-23"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"        public UniqueJobList deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-23"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"            throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":179,"author":{"gitId":"Spyobird"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-23"},{"lineNumber":180,"author":{"gitId":"Spyobird"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-23"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ArrayNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"            List\u003cJob\u003e jobList \u003d node // is ArrayNode","lastModifiedDate":"2022-03-26"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(new TypeReference\u003cList\u003cJob\u003e\u003e(){});","lastModifiedDate":"2022-03-26"},{"lineNumber":189,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":190,"author":{"gitId":"Spyobird"},"content":"            UniqueJobList ujl \u003d new UniqueJobList();","lastModifiedDate":"2022-03-23"},{"lineNumber":191,"author":{"gitId":"Spyobird"},"content":"            ujl.setJobs(jobList);","lastModifiedDate":"2022-03-23"},{"lineNumber":192,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":193,"author":{"gitId":"Spyobird"},"content":"            return ujl;","lastModifiedDate":"2022-03-23"},{"lineNumber":194,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":195,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":196,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":197,"author":{"gitId":"Spyobird"},"content":"        public UniqueJobList getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-23"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":199,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":200,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":201,"author":{"gitId":"thewrik"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":30,"Spyobird":74,"thewrik":97}},{"path":"src/main/java/peoplesoft/model/job/exceptions/DuplicateJobException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":" * Signals that the operation will result in duplicate Jobs (Jobs are considered duplicates if they have the same","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":" * identity).","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"thewrik"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"public class DuplicateJobException extends RuntimeException {","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"    public DuplicateJobException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":"        super(\"Operation would result in duplicate jobs\");","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"thewrik"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":1,"thewrik":10}},{"path":"src/main/java/peoplesoft/model/job/exceptions/JobNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":" * Signals that the operation is unable to find the specified job.","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"thewrik"},"content":"public class JobNotFoundException extends RuntimeException {}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":1,"thewrik":5}},{"path":"src/main/java/peoplesoft/model/job/exceptions/NegativeMoneyValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package peoplesoft.model.job.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Signals that the operation will result in money with negative value.","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"public class NegativeMoneyValueException extends RuntimeException {","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"    public NegativeMoneyValueException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"        super(\"Operation would result in money with negative value\");","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"ovidharshini":10}},{"path":"src/main/java/peoplesoft/model/job/exceptions/NonPositiveDurationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package peoplesoft.model.job.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Signals that the operation will result in non-positive duration.","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"public class NonPositiveDurationException extends RuntimeException {","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"    public NonPositiveDurationException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"        super(\"Operation would result in duration with non-positive value\");","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"ovidharshini":10}},{"path":"src/main/java/peoplesoft/model/job/exceptions/PaymentAlreadyPaidException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job.exceptions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"/**","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":" * Signals that the Payment has already been paid for.","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":" */","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"public class PaymentAlreadyPaidException extends RuntimeException {}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"zhongfu":6}},{"path":"src/main/java/peoplesoft/model/job/util/DurationUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package peoplesoft.model.job.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import peoplesoft.model.job.exceptions.NonPositiveDurationException;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" * Contains utility method for validating the value of {@code Duration}.","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"public class DurationUtil {","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"     * Throws NonPositiveDurationException if {@code duration} is not positive.","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    public static void requirePositive(Duration duration) {","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"        if (duration.isZero() || duration.isNegative()) {","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"            throw new NonPositiveDurationException();","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"ovidharshini":19}},{"path":"src/main/java/peoplesoft/model/job/util/MoneyUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package peoplesoft.model.job.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import peoplesoft.model.job.exceptions.NegativeMoneyValueException;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" * Contains utility method for validating the value of {@code Money}.","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"public class MoneyUtil {","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"     * Throws NegativeMoneyValueException if {@code money} is negative.","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"    public static void requireNonNegative(Money money) {","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"        if (money.getValue().signum() \u003c 0) {","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"            throw new NegativeMoneyValueException();","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"ovidharshini":18}},{"path":"src/main/java/peoplesoft/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Address.AddressSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Address.AddressDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    protected static class AddressSerializer extends StdSerializer\u003cAddress\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"        private AddressSerializer(Class\u003cAddress\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        private AddressSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Address val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.value);","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    protected static class AddressDeserializer extends StdDeserializer\u003cAddress\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The address value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        private AddressDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        private AddressDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"        public Address deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"            String address \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"            if (!Address.isValidAddress(address)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"            return new Address(address);","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"        public Address getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":69,"-":54}},{"path":"src/main/java/peoplesoft/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Email.EmailSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Email.EmailDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"    private static final String SPECIAL_CHARACTERS_NO_PERIOD \u003d \"+_-\";","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \"+\"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"            + \"(\"","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"                + \"([\" + SPECIAL_CHARACTERS_NO_PERIOD + \"]*|\\\\.)\"","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"                + ALPHANUMERIC_NO_UNDERSCORE + \"+\"","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"            + \")*\";","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE + \"+\"","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"            + \"(\"","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"                + \"-*\"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"                + ALPHANUMERIC_NO_UNDERSCORE + \"+\"","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"            + \")*\";","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    protected static class EmailSerializer extends StdSerializer\u003cEmail\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"        private EmailSerializer(Class\u003cEmail\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        private EmailSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Email val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.value);","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"    protected static class EmailDeserializer extends StdDeserializer\u003cEmail\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The email value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"        private EmailDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        private EmailDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"        public Email deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"            String email \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"            if (!Email.isValidEmail(email)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"            return new Email(email);","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"        public Email getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":83,"-":64}},{"path":"src/main/java/peoplesoft/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Name.NameSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Name.NameDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    protected static class NameSerializer extends StdSerializer\u003cName\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        private NameSerializer(Class\u003cName\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        private NameSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Name val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.fullName);","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    protected static class NameDeserializer extends StdDeserializer\u003cName\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The name value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"        private NameDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"        private NameDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        public Name deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"            String name \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"            if (!Name.isValidName(name)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"            return new Name(name);","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        public Name getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":69,"-":56}},{"path":"src/main/java/peoplesoft/model/person/Payment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-30"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-30"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.job.exceptions.PaymentAlreadyPaidException;","lastModifiedDate":"2022-03-30"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"/**","lastModifiedDate":"2022-03-30"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":" * Represents a Payment for a Person for completing a Job.","lastModifiedDate":"2022-03-30"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-03-30"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":" *","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":" * Note that there can only ever be one Payment for each person-job pairing; this will be the unique","lastModifiedDate":"2022-03-30"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":" * identifier for Payment objects","lastModifiedDate":"2022-03-30"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":" */","lastModifiedDate":"2022-03-30"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Payment.PaymentSerializer.class)","lastModifiedDate":"2022-03-30"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Payment.PaymentDeserializer.class)","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"public abstract class Payment {","lastModifiedDate":"2022-03-30"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    // Identity fields","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    private final ID personId;","lastModifiedDate":"2022-03-30"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"    private final ID jobId; // the job that resulted in the creation of this instance; should already be completed","lastModifiedDate":"2022-03-30"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"    // Data fields","lastModifiedDate":"2022-03-30"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"    private final Money amount;","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    private Payment(ID personId, ID jobId, Money amount) {","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        requireAllNonNull(personId, jobId, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2022-03-30"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        this.jobId \u003d jobId;","lastModifiedDate":"2022-03-30"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"        this.amount \u003d amount;","lastModifiedDate":"2022-03-30"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"    private Payment(Payment payment) {","lastModifiedDate":"2022-03-30"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(payment);","lastModifiedDate":"2022-03-30"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"        assert payment.personId !\u003d null","lastModifiedDate":"2022-03-30"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"            \u0026\u0026 payment.jobId !\u003d null","lastModifiedDate":"2022-03-30"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"            \u0026\u0026 payment.amount !\u003d null","lastModifiedDate":"2022-03-30"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"            : \"Payment fields should not be null!\";","lastModifiedDate":"2022-03-30"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        this.personId \u003d payment.personId;","lastModifiedDate":"2022-03-30"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"        this.jobId \u003d payment.jobId;","lastModifiedDate":"2022-03-30"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        this.amount \u003d payment.amount;","lastModifiedDate":"2022-03-30"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    static Payment createPayment(Person person, Job job, Money amount) {","lastModifiedDate":"2022-03-30"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        requireAllNonNull(person, job, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"        return new PendingPayment(person.getPersonId(), job.getJobId(), amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    public ID getPersonId() {","lastModifiedDate":"2022-03-30"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"        return personId;","lastModifiedDate":"2022-03-30"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    public ID getJobId() {","lastModifiedDate":"2022-03-30"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        return jobId;","lastModifiedDate":"2022-03-30"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"    public Money getAmount() {","lastModifiedDate":"2022-03-30"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        return amount;","lastModifiedDate":"2022-03-30"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-30"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"     * Returns true if both payments have the person and job fields.","lastModifiedDate":"2022-03-30"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"     * This defines a weaker notion of equality between two payments.","lastModifiedDate":"2022-03-30"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-30"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"    public boolean isSamePayment(Payment otherPayment) {","lastModifiedDate":"2022-03-30"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"        if (otherPayment \u003d\u003d this) {","lastModifiedDate":"2022-03-30"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"            return true;","lastModifiedDate":"2022-03-30"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"        return otherPayment !\u003d null","lastModifiedDate":"2022-03-30"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 getPersonId().equals(otherPayment.getPersonId())","lastModifiedDate":"2022-03-30"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 getJobId().equals(otherPayment.getJobId());","lastModifiedDate":"2022-03-30"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"            return true;","lastModifiedDate":"2022-03-30"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"        if (!(o instanceof Payment)) {","lastModifiedDate":"2022-03-30"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            return false;","lastModifiedDate":"2022-03-30"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"        Payment p \u003d (Payment) o;","lastModifiedDate":"2022-03-30"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"        return isSamePayment(p) \u0026\u0026 getAmount().equals(p.getAmount());","lastModifiedDate":"2022-03-30"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"    public String toString() {","lastModifiedDate":"2022-03-30"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"        return String.format(","lastModifiedDate":"2022-03-30"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"            \"Payment for: %s; for job: %s; amount: %s\",","lastModifiedDate":"2022-03-30"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"            personId, jobId, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-30"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2022-03-30"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        return Objects.hash(personId, jobId, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"    public abstract boolean isCompleted();","lastModifiedDate":"2022-03-30"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"    public abstract Payment pay();","lastModifiedDate":"2022-03-30"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"    private static class CompletedPayment extends Payment {","lastModifiedDate":"2022-03-30"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"        private CompletedPayment(Payment payment) {","lastModifiedDate":"2022-03-30"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"            super(payment);","lastModifiedDate":"2022-03-30"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"        // this one\u0027s only used for deser","lastModifiedDate":"2022-03-30"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"        private CompletedPayment(ID personId, ID jobId, Money money) {","lastModifiedDate":"2022-03-30"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"            super(personId, jobId, money);","lastModifiedDate":"2022-03-30"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"        public boolean isCompleted() {","lastModifiedDate":"2022-03-30"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"            return false;","lastModifiedDate":"2022-03-30"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"        public Payment pay() {","lastModifiedDate":"2022-03-30"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"            throw new PaymentAlreadyPaidException();","lastModifiedDate":"2022-03-30"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"            if (this \u003d\u003d o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"                return true;","lastModifiedDate":"2022-03-30"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-30"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"            return o instanceof CompletedPayment \u0026\u0026 super.equals(o);","lastModifiedDate":"2022-03-30"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":159,"author":{"gitId":"zhongfu"},"content":"        public String toString() {","lastModifiedDate":"2022-03-30"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"            return super.toString() + \"; paid: yes\";","lastModifiedDate":"2022-03-30"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":162,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"    private static class PendingPayment extends Payment {","lastModifiedDate":"2022-03-30"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"        private PendingPayment(ID personId, ID jobId, Money money) {","lastModifiedDate":"2022-03-30"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"            super(personId, jobId, money);","lastModifiedDate":"2022-03-30"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"        // PendingPayment(Payment) not included as we probably won\u0027t be creating instances that way","lastModifiedDate":"2022-03-30"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"        public boolean isCompleted() {","lastModifiedDate":"2022-03-30"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"            return false;","lastModifiedDate":"2022-03-30"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"        public Payment pay() {","lastModifiedDate":"2022-03-30"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"            return new CompletedPayment(this);","lastModifiedDate":"2022-03-30"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"            if (this \u003d\u003d o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"                return true;","lastModifiedDate":"2022-03-30"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-30"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"            return o instanceof PendingPayment \u0026\u0026 super.equals(o);","lastModifiedDate":"2022-03-30"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"        public String toString() {","lastModifiedDate":"2022-03-30"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"            return super.toString() + \"; paid: yes\";","lastModifiedDate":"2022-03-30"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"    protected static class PaymentSerializer extends StdSerializer\u003cPayment\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"        private PaymentSerializer(Class\u003cPayment\u003e val) {","lastModifiedDate":"2022-03-30"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-30"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":201,"author":{"gitId":"zhongfu"},"content":"        private PaymentSerializer() {","lastModifiedDate":"2022-03-30"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-30"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Payment val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-30"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-30"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"            String state \u003d val instanceof PendingPayment","lastModifiedDate":"2022-03-30"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"                    ? \"PENDING\"","lastModifiedDate":"2022-03-30"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"                    : val instanceof CompletedPayment","lastModifiedDate":"2022-03-30"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"                            ? \"COMPLETED\"","lastModifiedDate":"2022-03-30"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"                            : null;","lastModifiedDate":"2022-03-30"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"            if (state \u003d\u003d null) {","lastModifiedDate":"2022-03-30"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"                throw new IllegalStateException(\"Unknown payment state!\");","lastModifiedDate":"2022-03-30"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-30"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"            gen.writeStringField(\"state\", state);","lastModifiedDate":"2022-03-30"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"            // personId association is implicit (since Payment objs are contained within Persons)","lastModifiedDate":"2022-03-31"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"jobId\", val.getJobId());","lastModifiedDate":"2022-03-30"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"amount\", val.getAmount());","lastModifiedDate":"2022-03-30"},{"lineNumber":223,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-30"},{"lineNumber":225,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":228,"author":{"gitId":"zhongfu"},"content":"    protected static class PaymentDeserializer extends StdDeserializer\u003cPayment\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":229,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The payment instance is invalid or missing!\";","lastModifiedDate":"2022-03-30"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-30"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"                k -\u003e String.format(\"This payment\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-30"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":233,"author":{"gitId":"zhongfu"},"content":"        private PaymentDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-30"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-30"},{"lineNumber":235,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":236,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":237,"author":{"gitId":"zhongfu"},"content":"        private PaymentDeserializer() {","lastModifiedDate":"2022-03-30"},{"lineNumber":238,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-30"},{"lineNumber":239,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":240,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":241,"author":{"gitId":"zhongfu"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-30"},{"lineNumber":242,"author":{"gitId":"zhongfu"},"content":"                throws JsonMappingException {","lastModifiedDate":"2022-03-30"},{"lineNumber":243,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-30"},{"lineNumber":244,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":245,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":246,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-30"},{"lineNumber":247,"author":{"gitId":"zhongfu"},"content":"                Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-30"},{"lineNumber":248,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx,","lastModifiedDate":"2022-03-30"},{"lineNumber":249,"author":{"gitId":"zhongfu"},"content":"                INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-30"},{"lineNumber":250,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":251,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":252,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":253,"author":{"gitId":"zhongfu"},"content":"        public Payment deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-30"},{"lineNumber":254,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-30"},{"lineNumber":255,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-30"},{"lineNumber":256,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-30"},{"lineNumber":257,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":258,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-30"},{"lineNumber":259,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-30"},{"lineNumber":260,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-30"},{"lineNumber":261,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":262,"author":{"gitId":"zhongfu"},"content":"            ObjectNode payment \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-30"},{"lineNumber":263,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":264,"author":{"gitId":"zhongfu"},"content":"            String state \u003d getNonNullNodeWithType(payment, \"state\", ctx, TextNode.class)","lastModifiedDate":"2022-03-30"},{"lineNumber":265,"author":{"gitId":"zhongfu"},"content":"                    .textValue();","lastModifiedDate":"2022-03-30"},{"lineNumber":266,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":267,"author":{"gitId":"zhongfu"},"content":"            Object personIdAttr \u003d ctx.getAttribute(\"personId\");","lastModifiedDate":"2022-03-31"},{"lineNumber":268,"author":{"gitId":"zhongfu"},"content":"            if (!(personIdAttr instanceof ID)) {","lastModifiedDate":"2022-03-31"},{"lineNumber":269,"author":{"gitId":"zhongfu"},"content":"                // this would be a programming error, not a user error or w/e","lastModifiedDate":"2022-03-31"},{"lineNumber":270,"author":{"gitId":"zhongfu"},"content":"                // TODO should we still throw a JsonMappingException to recover gracefully?","lastModifiedDate":"2022-03-31"},{"lineNumber":271,"author":{"gitId":"zhongfu"},"content":"                throw new IllegalStateException(\"personId not present in deser ctx, or is of wrong type!\");","lastModifiedDate":"2022-03-31"},{"lineNumber":272,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-31"},{"lineNumber":273,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":274,"author":{"gitId":"zhongfu"},"content":"            ID personId \u003d (ID) personIdAttr;","lastModifiedDate":"2022-03-31"},{"lineNumber":275,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":276,"author":{"gitId":"zhongfu"},"content":"            ID jobId \u003d getNonNullNode(payment, \"jobId\", ctx)","lastModifiedDate":"2022-03-30"},{"lineNumber":277,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-30"},{"lineNumber":278,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(ID.class);","lastModifiedDate":"2022-03-30"},{"lineNumber":279,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":280,"author":{"gitId":"zhongfu"},"content":"            Money amount \u003d getNonNullNode(payment, \"amount\", ctx)","lastModifiedDate":"2022-03-30"},{"lineNumber":281,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-30"},{"lineNumber":282,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Money.class);","lastModifiedDate":"2022-03-30"},{"lineNumber":283,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":284,"author":{"gitId":"zhongfu"},"content":"            switch (state) {","lastModifiedDate":"2022-03-30"},{"lineNumber":285,"author":{"gitId":"zhongfu"},"content":"            case \"PENDING\":","lastModifiedDate":"2022-03-30"},{"lineNumber":286,"author":{"gitId":"zhongfu"},"content":"                return new PendingPayment(personId, jobId, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":287,"author":{"gitId":"zhongfu"},"content":"            case \"COMPLETED\":","lastModifiedDate":"2022-03-30"},{"lineNumber":288,"author":{"gitId":"zhongfu"},"content":"                return new CompletedPayment(personId, jobId, amount);","lastModifiedDate":"2022-03-30"},{"lineNumber":289,"author":{"gitId":"zhongfu"},"content":"            default:","lastModifiedDate":"2022-03-30"},{"lineNumber":290,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, INVALID_VAL_FMTR.apply(\"state\"));","lastModifiedDate":"2022-03-30"},{"lineNumber":291,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-30"},{"lineNumber":292,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":293,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":294,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":295,"author":{"gitId":"zhongfu"},"content":"        public Payment getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-30"},{"lineNumber":296,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-30"},{"lineNumber":297,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":298,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":299,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"zhongfu":299}},{"path":"src/main/java/peoplesoft/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2022-03-26"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ArrayNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ObjectNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Person.PersonSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Person.PersonDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"    private final ID id;","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"    private final Rate rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    private final Map\u003cID, Payment\u003e payments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    public Person(ID id, Name name, Phone phone, Email email, Address address, Rate rate, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-03-31"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"            Map\u003cID, Payment\u003e payments) {","lastModifiedDate":"2022-03-31"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"        requireAllNonNull(id, name, phone, email, address, rate, tags);","lastModifiedDate":"2022-03-29"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"        this.id \u003d id;","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"        this.rate \u003d rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        this.payments.putAll(payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    public ID getPersonId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"        return id;","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"    public Rate getRate() {","lastModifiedDate":"2022-03-29"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"        return rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"    public Map\u003cID, Payment\u003e getPayments() {","lastModifiedDate":"2022-03-31"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"        return Collections.unmodifiableMap(payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-31"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"            \u0026\u0026 getPersonId().equals(otherPerson.getPersonId());","lastModifiedDate":"2022-03-28"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"        return isSamePerson(otherPerson)","lastModifiedDate":"2022-03-28"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName())","lastModifiedDate":"2022-03-28"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"                \u0026\u0026 otherPerson.getRate().equals(getRate())","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2022-03-31"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 otherPerson.getPayments().equals(getPayments());","lastModifiedDate":"2022-03-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"        return Objects.hash(id, name, phone, email, address, rate, tags, payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"        builder.append(\"ID: \")","lastModifiedDate":"2022-03-28"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"                .append(getPersonId())","lastModifiedDate":"2022-03-28"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"                .append(\"; Name: \")","lastModifiedDate":"2022-03-28"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"                .append(getName())","lastModifiedDate":"2022-03-28"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"                .append(getAddress())","lastModifiedDate":"2022-03-29"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"                .append(\"; Base Pay Rate: \")","lastModifiedDate":"2022-03-29"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"                .append(getRate());","lastModifiedDate":"2022-03-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"        Map\u003cID, Payment\u003e payments \u003d getPayments();","lastModifiedDate":"2022-03-31"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"        if (!payments.isEmpty()) {","lastModifiedDate":"2022-03-31"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"            builder.append(\"; Payments: [\");","lastModifiedDate":"2022-03-31"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"            builder.append(payments.values().stream().map(String::valueOf).collect(Collectors.joining(\", \")));","lastModifiedDate":"2022-03-31"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"            builder.append(\"]\");","lastModifiedDate":"2022-03-31"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"    protected static class PersonSerializer extends StdSerializer\u003cPerson\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"        private PersonSerializer(Class\u003cPerson\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"        private PersonSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Person val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"            gen.writeStartObject();","lastModifiedDate":"2022-03-16"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"id\", val.getPersonId());","lastModifiedDate":"2022-03-28"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"name\", val.getName());","lastModifiedDate":"2022-03-16"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"phone\", val.getPhone());","lastModifiedDate":"2022-03-16"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"email\", val.getEmail());","lastModifiedDate":"2022-03-16"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"address\", val.getAddress());","lastModifiedDate":"2022-03-16"},{"lineNumber":201,"author":{"gitId":"Spyobird"},"content":"            gen.writeObjectField(\"rate\", val.getRate());","lastModifiedDate":"2022-03-29"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"            gen.writeObjectField(\"tagged\", val.getTags());","lastModifiedDate":"2022-03-16"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"            gen.writeArrayFieldStart(\"payments\");","lastModifiedDate":"2022-03-31"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"            for (Payment pymt : val.getPayments().values()) {","lastModifiedDate":"2022-03-31"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"                gen.writeObject(pymt);","lastModifiedDate":"2022-03-31"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-31"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndArray();","lastModifiedDate":"2022-03-31"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"            gen.writeEndObject();","lastModifiedDate":"2022-03-16"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"    protected static class PersonDeserializer extends StdDeserializer\u003cPerson\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The person instance is invalid or missing!\";","lastModifiedDate":"2022-03-16"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"        private static final UnaryOperator\u003cString\u003e INVALID_VAL_FMTR \u003d","lastModifiedDate":"2022-03-26"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"                k -\u003e String.format(\"This person\u0027s %s value is invalid!\", k);","lastModifiedDate":"2022-03-26"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"        private PersonDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":222,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":223,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":224,"author":{"gitId":"zhongfu"},"content":"        private PersonDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":225,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":226,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":227,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":228,"author":{"gitId":"zhongfu"},"content":"        private static JsonNode getNonNullNode(ObjectNode node, String key, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":229,"author":{"gitId":"zhongfu"},"content":"                    throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":230,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNode(node, key, ctx, INVALID_VAL_FMTR);","lastModifiedDate":"2022-03-26"},{"lineNumber":231,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":232,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":233,"author":{"gitId":"zhongfu"},"content":"        private static \u003cT\u003e T getNonNullNodeWithType(ObjectNode node, String key, DeserializationContext ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":234,"author":{"gitId":"zhongfu"},"content":"                    Class\u003cT\u003e cls) throws JsonMappingException {","lastModifiedDate":"2022-03-26"},{"lineNumber":235,"author":{"gitId":"zhongfu"},"content":"            return JsonUtil.getNonNullNodeWithType(node, key, ctx,","lastModifiedDate":"2022-03-26"},{"lineNumber":236,"author":{"gitId":"zhongfu"},"content":"                    INVALID_VAL_FMTR, cls);","lastModifiedDate":"2022-03-26"},{"lineNumber":237,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":238,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":239,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":240,"author":{"gitId":"zhongfu"},"content":"        public Person deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":241,"author":{"gitId":"zhongfu"},"content":"                    throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":242,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":243,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-16"},{"lineNumber":244,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":245,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ObjectNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":246,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-16"},{"lineNumber":247,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":248,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":249,"author":{"gitId":"zhongfu"},"content":"            ObjectNode person \u003d (ObjectNode) node;","lastModifiedDate":"2022-03-16"},{"lineNumber":250,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":251,"author":{"gitId":"zhongfu"},"content":"            ID id \u003d getNonNullNode(person, \"id\", ctx)","lastModifiedDate":"2022-03-28"},{"lineNumber":252,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-28"},{"lineNumber":253,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(ID.class);","lastModifiedDate":"2022-03-28"},{"lineNumber":254,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":255,"author":{"gitId":"zhongfu"},"content":"            Name name \u003d getNonNullNode(person, \"name\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":256,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":257,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Name.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":258,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":259,"author":{"gitId":"zhongfu"},"content":"            Phone phone \u003d getNonNullNode(person, \"phone\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":260,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":261,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Phone.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":262,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":263,"author":{"gitId":"zhongfu"},"content":"            Email email \u003d getNonNullNode(person, \"email\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":264,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":265,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Email.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":266,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":267,"author":{"gitId":"zhongfu"},"content":"            Address address \u003d getNonNullNode(person, \"address\", ctx)","lastModifiedDate":"2022-03-26"},{"lineNumber":268,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":269,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(Address.class);","lastModifiedDate":"2022-03-26"},{"lineNumber":270,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":271,"author":{"gitId":"Spyobird"},"content":"            Rate rate \u003d getNonNullNode(person, \"rate\", ctx)","lastModifiedDate":"2022-03-29"},{"lineNumber":272,"author":{"gitId":"Spyobird"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-29"},{"lineNumber":273,"author":{"gitId":"Spyobird"},"content":"                    .readValueAs(Rate.class);","lastModifiedDate":"2022-03-29"},{"lineNumber":274,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":275,"author":{"gitId":"zhongfu"},"content":"            Set\u003cTag\u003e tags \u003d getNonNullNodeWithType(person, \"tagged\", ctx, ArrayNode.class)","lastModifiedDate":"2022-03-26"},{"lineNumber":276,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":277,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(new TypeReference\u003cSet\u003cTag\u003e\u003e(){});","lastModifiedDate":"2022-03-26"},{"lineNumber":278,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":279,"author":{"gitId":"zhongfu"},"content":"            // we deserialize the Payment objects one by one","lastModifiedDate":"2022-03-31"},{"lineNumber":280,"author":{"gitId":"zhongfu"},"content":"            // because ctx.readValue() doesn\u0027t take TypeReferences","lastModifiedDate":"2022-03-31"},{"lineNumber":281,"author":{"gitId":"zhongfu"},"content":"            // and we need to use the ctx to pass the current person ID down","lastModifiedDate":"2022-03-31"},{"lineNumber":282,"author":{"gitId":"zhongfu"},"content":"            ctx.setAttribute(\"personId\", id);","lastModifiedDate":"2022-03-31"},{"lineNumber":283,"author":{"gitId":"zhongfu"},"content":"            Map\u003cID, Payment\u003e payments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":284,"author":{"gitId":"zhongfu"},"content":"            ArrayNode paymentsNode \u003d getNonNullNodeWithType(person, \"payments\", ctx, ArrayNode.class);","lastModifiedDate":"2022-03-31"},{"lineNumber":285,"author":{"gitId":"zhongfu"},"content":"            for (JsonNode paymentNode : paymentsNode) {","lastModifiedDate":"2022-03-31"},{"lineNumber":286,"author":{"gitId":"zhongfu"},"content":"                Payment pymt \u003d ctx.readValue(paymentNode.traverse(codec), Payment.class);","lastModifiedDate":"2022-03-31"},{"lineNumber":287,"author":{"gitId":"zhongfu"},"content":"                if (payments.put(pymt.getJobId(), pymt) !\u003d null) { // check if jobId already exists in the map","lastModifiedDate":"2022-03-31"},{"lineNumber":288,"author":{"gitId":"zhongfu"},"content":"                    throw JsonUtil.getWrappedIllegalValueException(ctx, INVALID_VAL_FMTR.apply(\"payments\"));","lastModifiedDate":"2022-03-31"},{"lineNumber":289,"author":{"gitId":"zhongfu"},"content":"                }","lastModifiedDate":"2022-03-31"},{"lineNumber":290,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-31"},{"lineNumber":291,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":292,"author":{"gitId":"zhongfu"},"content":"            return new Person(id, name, phone, email, address, rate, tags, payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":293,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":294,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":295,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":296,"author":{"gitId":"zhongfu"},"content":"        public Person getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":297,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-16"},{"lineNumber":298,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":299,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":171,"Spyobird":17,"-":112}},{"path":"src/main/java/peoplesoft/model/person/PersonContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":3,"author":{"gitId":"thewrik"},"content":"import java.util.List;","lastModifiedDate":"2022-03-11"},{"lineNumber":4,"author":{"gitId":"thewrik"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-11"},{"lineNumber":5,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.StringUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":8,"author":{"gitId":"thewrik"},"content":"/**","lastModifiedDate":"2022-03-11"},{"lineNumber":9,"author":{"gitId":"thewrik"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2022-03-11"},{"lineNumber":10,"author":{"gitId":"thewrik"},"content":" */","lastModifiedDate":"2022-03-11"},{"lineNumber":11,"author":{"gitId":"thewrik"},"content":"public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-03-11"},{"lineNumber":12,"author":{"gitId":"thewrik"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-03-11"},{"lineNumber":13,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":14,"author":{"gitId":"thewrik"},"content":"    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-03-11"},{"lineNumber":15,"author":{"gitId":"thewrik"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-03-11"},{"lineNumber":16,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":17,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":18,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-11"},{"lineNumber":19,"author":{"gitId":"thewrik"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-03-11"},{"lineNumber":20,"author":{"gitId":"thewrik"},"content":"        return !keywords.isEmpty() \u0026\u0026 keywords.stream()","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"thewrik"},"content":"                .allMatch(keyword -\u003e (","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"                        person.getTags().stream().anyMatch(","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"                            tag -\u003e keyword.equalsIgnoreCase(tag.getTagName())))","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"                        || StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":26,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"    @Override","lastModifiedDate":"2022-03-11"},{"lineNumber":28,"author":{"gitId":"thewrik"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-11"},{"lineNumber":29,"author":{"gitId":"thewrik"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-11"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-03-11"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"                \u0026\u0026 keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2022-03-11"},{"lineNumber":32,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":33,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":34,"author":{"gitId":"thewrik"},"content":"}","lastModifiedDate":"2022-03-11"}],"authorContributionMap":{"zhongfu":2,"thewrik":32}},{"path":"src/main/java/peoplesoft/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Phone.PhoneSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Phone.PhoneDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    protected static class PhoneSerializer extends StdSerializer\u003cPhone\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"        private PhoneSerializer(Class\u003cPhone\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"        private PhoneSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Phone val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.value);","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"    protected static class PhoneDeserializer extends StdDeserializer\u003cPhone\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The phone value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"        private PhoneDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"        private PhoneDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        public Phone deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"            String phone \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"            return new Phone(phone);","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"        public Phone getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":69,"-":49}},{"path":"src/main/java/peoplesoft/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-18"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-18"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-18"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.ObjectCodec;","lastModifiedDate":"2022-03-18"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-03-18"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-18"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-18"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-18"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-18"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-18"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-18"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-18"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.ArrayNode;","lastModifiedDate":"2022-03-26"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-18"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-18"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d UniquePersonList.UniquePersonListSerializer.class)","lastModifiedDate":"2022-03-18"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d UniquePersonList.UniquePersonListDeserializer.class)","lastModifiedDate":"2022-03-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    public boolean contains(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"        return internalList.stream().anyMatch(p -\u003e p !\u003d null \u0026\u0026 personId.equals(p.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"     * Returns the job with the given id.","lastModifiedDate":"2022-03-28"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"     * @throws PersonNotFoundException if the person does not exist","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"    public Person get(ID personId) throws PersonNotFoundException {","lastModifiedDate":"2022-03-28"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"        return internalList.stream()","lastModifiedDate":"2022-03-28"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"            .filter(p -\u003e p !\u003d null \u0026\u0026 personId.equals(p.getPersonId()))","lastModifiedDate":"2022-03-28"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"            .findAny()","lastModifiedDate":"2022-03-28"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"            .orElseThrow(PersonNotFoundException::new);","lastModifiedDate":"2022-03-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        if (contains(toAdd.getPersonId())) {","lastModifiedDate":"2022-03-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson.getPersonId())) {","lastModifiedDate":"2022-03-28"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"    protected static class UniquePersonListSerializer extends StdSerializer\u003cUniquePersonList\u003e {","lastModifiedDate":"2022-03-18"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"        private UniquePersonListSerializer(Class\u003cUniquePersonList\u003e val) {","lastModifiedDate":"2022-03-18"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-18"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"        private UniquePersonListSerializer() {","lastModifiedDate":"2022-03-18"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-18"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-18"},{"lineNumber":181,"author":{"gitId":"zhongfu"},"content":"        public void serialize(UniquePersonList val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-18"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"            gen.writeObject(val.asUnmodifiableObservableList());","lastModifiedDate":"2022-03-18"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"    protected static class UniquePersonListDeserializer extends StdDeserializer\u003cUniquePersonList\u003e {","lastModifiedDate":"2022-03-18"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The person list is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"        private UniquePersonListDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-18"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-18"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"        private UniquePersonListDeserializer() {","lastModifiedDate":"2022-03-18"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-18"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":196,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":197,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-18"},{"lineNumber":198,"author":{"gitId":"zhongfu"},"content":"        public UniquePersonList deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-18"},{"lineNumber":199,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-18"},{"lineNumber":200,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-18"},{"lineNumber":201,"author":{"gitId":"zhongfu"},"content":"            ObjectCodec codec \u003d p.getCodec();","lastModifiedDate":"2022-03-18"},{"lineNumber":202,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":203,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof ArrayNode)) {","lastModifiedDate":"2022-03-26"},{"lineNumber":204,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":205,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-26"},{"lineNumber":206,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":207,"author":{"gitId":"zhongfu"},"content":"            List\u003cPerson\u003e personList \u003d node // is ArrayNode","lastModifiedDate":"2022-03-26"},{"lineNumber":208,"author":{"gitId":"zhongfu"},"content":"                    .traverse(codec)","lastModifiedDate":"2022-03-26"},{"lineNumber":209,"author":{"gitId":"zhongfu"},"content":"                    .readValueAs(new TypeReference\u003cList\u003cPerson\u003e\u003e(){});","lastModifiedDate":"2022-03-26"},{"lineNumber":210,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":211,"author":{"gitId":"zhongfu"},"content":"            UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2022-03-18"},{"lineNumber":212,"author":{"gitId":"zhongfu"},"content":"            upl.setPersons(personList);","lastModifiedDate":"2022-03-18"},{"lineNumber":213,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":214,"author":{"gitId":"zhongfu"},"content":"            return upl;","lastModifiedDate":"2022-03-18"},{"lineNumber":215,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":216,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":217,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-18"},{"lineNumber":218,"author":{"gitId":"zhongfu"},"content":"        public UniquePersonList getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-18"},{"lineNumber":219,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":220,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":221,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":92,"-":130}},{"path":"src/main/java/peoplesoft/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"zhongfu":1,"-":10}},{"path":"src/main/java/peoplesoft/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person.exceptions;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"zhongfu":1,"-":5}},{"path":"src/main/java/peoplesoft/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d Tag.TagSerializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d Tag.TagDeserializer.class)","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"thewrik"},"content":"    public String getTagName() {","lastModifiedDate":"2022-03-11"},{"lineNumber":55,"author":{"gitId":"thewrik"},"content":"        return tagName;","lastModifiedDate":"2022-03-11"},{"lineNumber":56,"author":{"gitId":"thewrik"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":57,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    protected static class TagSerializer extends StdSerializer\u003cTag\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        private TagSerializer(Class\u003cTag\u003e val) {","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"        private TagSerializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"        public void serialize(Tag val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.tagName);","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    protected static class TagDeserializer extends StdDeserializer\u003cTag\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The tag value is invalid or missing!\";","lastModifiedDate":"2022-03-26"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"        private TagDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"        private TagDeserializer() {","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        public Tag deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"            String tag \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"            if (!Tag.isValidTagName(tag)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"            return new Tag(tag);","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        public Tag getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-26"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhongfu":69,"-":52,"thewrik":4}},{"path":"src/main/java/peoplesoft/model/util/ID.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.util;","lastModifiedDate":"2022-03-28"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-03-28"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-28"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-03-28"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.node.TextNode;","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"/**","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":" * Represents an ID for some sort of entity, e.g. a {@code Person} or {@code Job}.","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}","lastModifiedDate":"2022-03-28"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":" */","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"@JsonSerialize(using \u003d ID.IdSerializer.class)","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"@JsonDeserialize(using \u003d ID.IdDeserializer.class)","lastModifiedDate":"2022-03-28"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"public class ID implements Comparable\u003cID\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"            \"IDs should only begin and end with alphanumeric characters, \"","lastModifiedDate":"2022-03-28"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"            + \"contain alphanumeric characters and hyphens, \"","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"            + \"and should not be blank\";","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    /*","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]([\\\\p{Alnum}-]*[\\\\p{Alnum}])?\";","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public final String value;","lastModifiedDate":"2022-03-28"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"     * Constructs a {@code ID}.","lastModifiedDate":"2022-03-28"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"     * @param value A valid id.","lastModifiedDate":"2022-03-28"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public ID(String value) {","lastModifiedDate":"2022-03-28"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(value);","lastModifiedDate":"2022-03-28"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        checkArgument(isValidId(value), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-28"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"        this.value \u003d value;","lastModifiedDate":"2022-03-28"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"     * Constructs a {@code ID}.","lastModifiedDate":"2022-03-28"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-28"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"     * @param value A valid id.","lastModifiedDate":"2022-03-28"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    public ID(int value) {","lastModifiedDate":"2022-03-28"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"        String strValue \u003d String.valueOf(value);","lastModifiedDate":"2022-03-28"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        checkArgument(isValidId(strValue), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-28"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"        this.value \u003d strValue;","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"     * Returns true if a given string is a valid id.","lastModifiedDate":"2022-03-28"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    public static boolean isValidId(String test) {","lastModifiedDate":"2022-03-28"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-03-28"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    public String toString() {","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"        return value;","lastModifiedDate":"2022-03-28"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-28"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-28"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"                || (other instanceof ID // instanceof handles nulls","lastModifiedDate":"2022-03-28"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"                \u0026\u0026 value.equals(((ID) other).value)); // state check","lastModifiedDate":"2022-03-28"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-28"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        return value.hashCode();","lastModifiedDate":"2022-03-28"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"    public int compareTo(ID o) {","lastModifiedDate":"2022-03-30"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"        return value.compareTo(o.value);","lastModifiedDate":"2022-03-30"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"    protected static class IdSerializer extends StdSerializer\u003cID\u003e {","lastModifiedDate":"2022-03-28"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"        private IdSerializer(Class\u003cID\u003e val) {","lastModifiedDate":"2022-03-28"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"            super(val);","lastModifiedDate":"2022-03-28"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"        private IdSerializer() {","lastModifiedDate":"2022-03-28"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-28"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        public void serialize(ID val, JsonGenerator gen, SerializerProvider provider) throws IOException {","lastModifiedDate":"2022-03-28"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"            gen.writeString(val.value);","lastModifiedDate":"2022-03-28"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"    protected static class IdDeserializer extends StdDeserializer\u003cID\u003e {","lastModifiedDate":"2022-03-28"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"        private static final String MISSING_OR_INVALID_INSTANCE \u003d \"The id value is invalid or missing!\";","lastModifiedDate":"2022-03-28"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"        private IdDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-03-28"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"            super(vc);","lastModifiedDate":"2022-03-28"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"        private IdDeserializer() {","lastModifiedDate":"2022-03-28"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"            this(null);","lastModifiedDate":"2022-03-28"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        public ID deserialize(JsonParser p, DeserializationContext ctx)","lastModifiedDate":"2022-03-28"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"                throws IOException, JsonProcessingException {","lastModifiedDate":"2022-03-28"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"            JsonNode node \u003d p.readValueAsTree();","lastModifiedDate":"2022-03-28"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"            if (!(node instanceof TextNode)) {","lastModifiedDate":"2022-03-28"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-28"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-28"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"            String value \u003d ((TextNode) node).textValue();","lastModifiedDate":"2022-03-28"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"            if (!ID.isValidId(value)) {","lastModifiedDate":"2022-03-28"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"                throw JsonUtil.getWrappedIllegalValueException(ctx, ID.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-28"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"            }","lastModifiedDate":"2022-03-28"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"            return new ID(value);","lastModifiedDate":"2022-03-28"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"        public ID getNullValue(DeserializationContext ctx) throws JsonMappingException {","lastModifiedDate":"2022-03-28"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"            throw JsonUtil.getWrappedIllegalValueException(ctx, MISSING_OR_INVALID_INSTANCE);","lastModifiedDate":"2022-03-28"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-28"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-28"}],"authorContributionMap":{"zhongfu":136,"Spyobird":6}},{"path":"src/main/java/peoplesoft/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"            new Person(new ID(1), new Name(\"Nicole Tan\"), new Phone(\"99338558\"), new Email(\"nicole@stffhub.org\"),","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"                new Address(\"1 Tech Drive, S138572\"), new Rate(new Money(30), Duration.ofHours(1)),","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"                getTagSet(\"Intern\", \"Aircon\"), Map.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"            new Person(new ID(2), new Name(\"Kavya Singh\"), new Phone(\"96736637\"), new Email(\"kavya@stffhub.org\"),","lastModifiedDate":"2022-03-28"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"                new Address(\"2 Orchard Turn, S238801\"), new Rate(new Money(40), Duration.ofHours(1)),","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"                getTagSet(\"Senior\", \"Electrician\"), Map.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"            new Person(new ID(3), new Name(\"Ethan Lee\"), new Phone(\"91031282\"), new Email(\"ethan@stffhub.org\"),","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"                new Address(\"10 Anson Road, S079903\"), new Rate(new Money(20), Duration.ofHours(1)),","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"                getTagSet(\"Appliances\"), Map.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"            new Person(new ID(4), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@stffhub.org\"),","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Rate(new Money(48), Duration.ofHours(1)),","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"                getTagSet(\"Painting\"), Map.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"            new Person(new ID(5), new Name(\"Arjun Khatau\"), new Phone(\"80445044\"), new Email(\"arjun@stffhub.org\"),","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"                new Address(\"50 Collyer Quay, S049321\"), new Rate(new Money(33), Duration.ofHours(1)),","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"                getTagSet(\"Contract\", \"Aircon\"), Map.of())","lastModifiedDate":"2022-03-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"zhongfu":20,"Spyobird":8,"-":33}},{"path":"src/main/java/peoplesoft/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":" * Represents a storage for {@link peoplesoft.model.AddressBook}.","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":4,"-":41}},{"path":"src/main/java/peoplesoft/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.FileUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        Optional\u003cReadOnlyAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"                filePath, AddressBook.class);","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        return jsonAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"        JsonUtil.saveJsonFile(addressBook, filePath);","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhongfu":12,"-":64}},{"path":"src/main/java/peoplesoft/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":5,"-":42}},{"path":"src/main/java/peoplesoft/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"zhongfu":5,"-":27}},{"path":"src/main/java/peoplesoft/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":6,"-":72}},{"path":"src/main/java/peoplesoft/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":" * Represents a storage for {@link peoplesoft.model.UserPrefs}.","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"     * Saves the given {@link peoplesoft.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":6,"-":30}},{"path":"src/main/java/peoplesoft/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.BorderPane;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.Logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.CommandBox;","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.ResultDisplay;","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.SideBar;","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.scenes.HelpPage;","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.scenes.OverviewPage;","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.scenes.Page;","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    private SideBar sideBar;","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"    private OverviewPage overviewPage;","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    private HelpPage helpPage;","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"    private BorderPane bp;","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"    private StackPane pagePlaceholder;","lastModifiedDate":"2022-03-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"    private StackPane sideBarPlaceholder;","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"    private Button helpButton;","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"     * Gets the primary stage. Used to show fatal errors.","lastModifiedDate":"2022-03-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-12-18"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"     * @return the primary stage","lastModifiedDate":"2022-03-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2022-03-29"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"        return primaryStage;","lastModifiedDate":"2022-03-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":92,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"ian-from-dover"},"content":"        sideBar \u003d new SideBar(this);","lastModifiedDate":"2022-03-22"},{"lineNumber":94,"author":{"gitId":"ian-from-dover"},"content":"        sideBarPlaceholder.getChildren().add(sideBar.getRoot());","lastModifiedDate":"2022-03-22"},{"lineNumber":95,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":96,"author":{"gitId":"ian-from-dover"},"content":"        helpPage \u003d new HelpPage(resultDisplay);","lastModifiedDate":"2022-03-31"},{"lineNumber":97,"author":{"gitId":"ian-from-dover"},"content":"        overviewPage \u003d new OverviewPage(logic.getFilteredPersonList(), logic.getFilteredJobList());","lastModifiedDate":"2022-03-30"},{"lineNumber":98,"author":{"gitId":"ian-from-dover"},"content":"        loadOverviewPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":113,"author":{"gitId":"ian-from-dover"},"content":"    void show() {","lastModifiedDate":"2022-03-22"},{"lineNumber":114,"author":{"gitId":"ian-from-dover"},"content":"        primaryStage.show();","lastModifiedDate":"2022-03-22"},{"lineNumber":115,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":116,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":118,"author":{"gitId":"ian-from-dover"},"content":"     * Loads the page on the right side of the app","lastModifiedDate":"2022-03-22"},{"lineNumber":119,"author":{"gitId":"ian-from-dover"},"content":"     *","lastModifiedDate":"2022-03-29"},{"lineNumber":120,"author":{"gitId":"ian-from-dover"},"content":"     * @param page to be loaded","lastModifiedDate":"2022-03-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":122,"author":{"gitId":"ian-from-dover"},"content":"    private void loadPage(Page page) {","lastModifiedDate":"2022-03-29"},{"lineNumber":123,"author":{"gitId":"ian-from-dover"},"content":"        bp.setCenter(page.getRoot());","lastModifiedDate":"2022-03-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":126,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":127,"author":{"gitId":"ian-from-dover"},"content":"     * Swaps the currently displayed page with the Overview page","lastModifiedDate":"2022-03-29"},{"lineNumber":128,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":129,"author":{"gitId":"ian-from-dover"},"content":"    public void loadOverviewPage() {","lastModifiedDate":"2022-03-29"},{"lineNumber":130,"author":{"gitId":"ian-from-dover"},"content":"        loadPage(overviewPage);","lastModifiedDate":"2022-03-29"},{"lineNumber":131,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":132,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":134,"author":{"gitId":"ian-from-dover"},"content":"     * Swaps the currently displayed page with the Help page","lastModifiedDate":"2022-03-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"ian-from-dover"},"content":"    public void loadHelpPage() {","lastModifiedDate":"2022-03-29"},{"lineNumber":137,"author":{"gitId":"ian-from-dover"},"content":"        loadPage(helpPage);","lastModifiedDate":"2022-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"ian-from-dover"},"content":"    public void handleExit() {","lastModifiedDate":"2022-03-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"     * @see peoplesoft.logic.Logic#execute(String)","lastModifiedDate":"2022-03-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"ian-from-dover"},"content":"                loadHelpPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":164,"author":{"gitId":"ian-from-dover"},"content":"            } else if (commandResult.isExit()) {","lastModifiedDate":"2022-03-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"ian-from-dover"},"content":"            } else {","lastModifiedDate":"2022-03-29"},{"lineNumber":167,"author":{"gitId":"ian-from-dover"},"content":"                loadOverviewPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":8,"ian-from-dover":50,"-":119}},{"path":"src/main/java/peoplesoft/ui/PageSwitcher.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-29"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.SideBar;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"/**","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":" * A relation class between mainwindow and sidebar which handles the page switching","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":" * todo: to be completed after making PeopleCell and JobCell for the 2 lists and displaying them properly.","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":" *","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":" * responsible for changing sidebar\u0027s colours and listening to commands from mainwindow and switching in main window","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":" */","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"public class PageSwitcher {","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"    private MainWindow mw;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"    private SideBar sb;","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"    private enum PageValues {","lastModifiedDate":"2022-03-29"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"        OVERVIEW, HELP","lastModifiedDate":"2022-03-29"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"    private void switchOnCommand(PageValues p) throws IllegalArgumentException {","lastModifiedDate":"2022-03-29"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"        assert p !\u003d null;","lastModifiedDate":"2022-03-29"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"        switch(p) {","lastModifiedDate":"2022-03-29"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"        case HELP:","lastModifiedDate":"2022-03-29"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"            loadHelpPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"            break;","lastModifiedDate":"2022-03-29"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"        case OVERVIEW:","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"            loadOverviewPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"            break;","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"        default:","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"            throw new IllegalArgumentException(\"User attempted to switch to an invalid page.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"        }","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"    public void loadHelpPage() {","lastModifiedDate":"2022-03-29"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    public void loadOverviewPage() {","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":41}},{"path":"src/main/java/peoplesoft/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"zhongfu":1,"-":12}},{"path":"src/main/java/peoplesoft/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.MainApp;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.StringUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.Logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/logo/Logo32.png\";","lastModifiedDate":"2022-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"        alert.getDialogPane().getStylesheets().add(\"styles/DarkTheme.css\");","lastModifiedDate":"2022-03-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":5,"ian-from-dover":2,"-":81}},{"path":"src/main/java/peoplesoft/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.MainApp;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":2,"-":86}},{"path":"src/main/java/peoplesoft/ui/regions/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"         * @see peoplesoft.logic.Logic#execute(String)","lastModifiedDate":"2022-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"zhongfu":4,"ian-from-dover":2,"-":80}},{"path":"src/main/java/peoplesoft/ui/regions/JobCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"// import java.util.Comparator;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"// import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"/**","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":" */","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"public class JobCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    private static final String FXML \u003d \"JobListCard.fxml\";","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"    public final Job job;","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"    private final Image cross \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2022-03-30"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"            .getResourceAsStream(\"/images/apple-cross-emoji.png\")));","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"    private final Image tick \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2022-03-30"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"            .getResourceAsStream(\"/images/apple-tick-emoji.png\")));","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"    // what is shown is for proof of concept for now until jobs and payments are finalised","lastModifiedDate":"2022-03-30"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-03-30"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"    private Label idx; // displayed index, not job ID","lastModifiedDate":"2022-03-31"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    private Label desc; // string","lastModifiedDate":"2022-03-30"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"    private Label rate; // $1.00 / 1H","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"    private Label duration; // 1H0M","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"    private ImageView paidForIcon; // false","lastModifiedDate":"2022-03-30"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"    // @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"    // private FlowPane involved; // Todo: get the associated people from employment to display in here","lastModifiedDate":"2022-03-30"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"    // @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"    // private FlowPane tags; // Todo: implement tags when oviya merges her part","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-30"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2022-03-30"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-30"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"    public JobCard(Job job, int displayedIndex) {","lastModifiedDate":"2022-03-30"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"        super(FXML);","lastModifiedDate":"2022-03-30"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"        this.job \u003d job;","lastModifiedDate":"2022-03-30"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"        idx.setText(displayedIndex + \"\");","lastModifiedDate":"2022-03-30"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"        desc.setText(job.getDesc());","lastModifiedDate":"2022-03-30"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":"        rate.setText(job.getRate().toString());","lastModifiedDate":"2022-03-30"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"        duration.setText(job.getDuration().toString());","lastModifiedDate":"2022-03-30"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"        paidForIcon.setImage(job.hasPaid() ? tick : cross);","lastModifiedDate":"2022-03-30"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":"        /*","lastModifiedDate":"2022-03-30"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"        for when jobtags are a thing","lastModifiedDate":"2022-03-30"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"        job.getTags().stream()","lastModifiedDate":"2022-03-30"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2022-03-30"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2022-03-30"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":"         */","lastModifiedDate":"2022-03-30"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"    @Override","lastModifiedDate":"2022-03-30"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-30"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-30"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-30"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"            return true;","lastModifiedDate":"2022-03-30"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-30"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"        if (!(other instanceof JobCard)) {","lastModifiedDate":"2022-03-30"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"            return false;","lastModifiedDate":"2022-03-30"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"        }","lastModifiedDate":"2022-03-30"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"        // state check","lastModifiedDate":"2022-03-30"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"        JobCard card \u003d (JobCard) other;","lastModifiedDate":"2022-03-30"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"        assert idx !\u003d null;","lastModifiedDate":"2022-03-31"},{"lineNumber":83,"author":{"gitId":"ian-from-dover"},"content":"        assert card.idx !\u003d null;","lastModifiedDate":"2022-03-31"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"        return idx.getText().equals(card.idx.getText()) // same display id, not job ID","lastModifiedDate":"2022-03-31"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"                \u0026\u0026 Objects.equals(job, card.job);","lastModifiedDate":"2022-03-31"},{"lineNumber":87,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"ian-from-dover":88}},{"path":"src/main/java/peoplesoft/ui/regions/JobListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"public class JobListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    private static final String FXML \u003d \"JobListPanel.fxml\";","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(JobListPanel.class);","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    private ListView\u003cJob\u003e jobListView;","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a {@code JobListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    public JobListPanel(ObservableList\u003cJob\u003e jobList) {","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"        jobListView.setItems(jobList);","lastModifiedDate":"2022-03-31"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"        jobListView.setCellFactory(listView -\u003e new JobListViewCell());","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Job} using a {@code Job}.","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"    class JobListViewCell extends ListCell\u003cJob\u003e {","lastModifiedDate":"2022-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"        protected void updateItem(Job job, boolean empty) {","lastModifiedDate":"2022-03-30"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"            super.updateItem(job, empty);","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"            if (empty || job \u003d\u003d null) {","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"                // add a new divider before also!","lastModifiedDate":"2022-03-30"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"                // \u003cStackPane fx:id\u003d\"divider\" layoutX\u003d\"10.0\" layoutY\u003d\"21.0\"","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"                // prefHeight\u003d\"2.0\" style\u003d\"-fx-background-color: #33344B;\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"                setGraphic(new JobCard(job, getIndex() + 1).getRoot());","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":1,"ian-from-dover":20,"-":32}},{"path":"src/main/java/peoplesoft/ui/regions/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    private Label idx;","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"        idx.setText(displayedIndex + \"\");","lastModifiedDate":"2022-03-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"        return idx.getText().equals(card.idx.getText())","lastModifiedDate":"2022-03-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zhongfu":1,"ian-from-dover":5,"-":64}},{"path":"src/main/java/peoplesoft/ui/regions/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"                // add a new divider before also!","lastModifiedDate":"2022-03-30"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"                // \u003cStackPane fx:id\u003d\"divider\" layoutX\u003d\"10.0\" layoutY\u003d\"21.0\"","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"                // prefHeight\u003d\"2.0\" style\u003d\"-fx-background-color: #33344B;\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhongfu":2,"ian-from-dover":5,"-":46}},{"path":"src/main/java/peoplesoft/ui/regions/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    private Label resultDisplay;","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"ian-from-dover":4,"-":25}},{"path":"src/main/java/peoplesoft/ui/regions/SideBar.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.regions;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"import java.net.URL;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"import java.util.ResourceBundle;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"import javafx.fxml.Initializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.input.MouseEvent;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.MainWindow;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"public class SideBar extends UiPart\u003cRegion\u003e implements Initializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"    private static final String FXML \u003d \"SideBar.fxml\";","lastModifiedDate":"2022-03-29"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    private static final int FONT_SIZE_SIDEBAR \u003d 16;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"    private static final String ACTIVE_COLOR \u003d \"#6076FF\";","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"    private static final String INACTIVE_COLOR \u003d \"transparent\";","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    private Button activePage;","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"    private Button bOverview;","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"    private Button bHelp;","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"    private Button bExit;","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"    private final Font interMedium \u003d Font.loadFont(this.getClass()","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"            .getResourceAsStream(\"/fonts/Inter-Medium.otf\"), FONT_SIZE_SIDEBAR);","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    private final Font interRegular \u003d Font.loadFont(this.getClass()","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"            .getResourceAsStream(\"/fonts/Inter-Regular.otf\"), FONT_SIZE_SIDEBAR);","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"    private final Font interBold \u003d Font.loadFont(this.getClass()","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"            .getResourceAsStream(\"/fonts/Inter-Bold.otf\"), FONT_SIZE_SIDEBAR);","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a sidebar panel.","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"     * @param mw the main window used to change the page.","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"    public SideBar(MainWindow mw) {","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"        super(FXML);","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"        mainWindow \u003d mw;","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"     * Assigns parameters upon GUI initialisation.","lastModifiedDate":"2022-03-29"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"     *","lastModifiedDate":"2022-03-29"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":"     * @param location","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"     * @param resources","lastModifiedDate":"2022-03-29"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"    public void initialize(URL location, ResourceBundle resources) {","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":"        activePage \u003d bOverview;","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"    private void switchToOverview(MouseEvent event) {","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"        mainWindow.loadOverviewPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"        switchButtonColor(bOverview);","lastModifiedDate":"2022-03-29"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"    private void switchToHelp(MouseEvent event) {","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"        mainWindow.loadHelpPage();","lastModifiedDate":"2022-03-29"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"        switchButtonColor(bHelp);","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"    private void exitApp(MouseEvent event) {","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"        mainWindow.handleExit();","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"ian-from-dover"},"content":"        switchButtonColor(bExit);","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"    private void switchButtonColor(Button b) {","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"ian-from-dover"},"content":"        activePage.setStyle(\"-fx-background-color: \" + INACTIVE_COLOR);","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"        b.setStyle(\"-fx-background-color: \" + ACTIVE_COLOR + \"; -fx-background-radius: 10;\");","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"        activePage \u003d b;","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"ian-from-dover":91}},{"path":"src/main/java/peoplesoft/ui/scenes/HelpPage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.scenes;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"import java.awt.Desktop;","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"import java.net.URI;","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"import java.net.URISyntaxException;","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.control.TableView;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.ResultDisplay;","lastModifiedDate":"2022-03-31"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"public class HelpPage extends Page {","lastModifiedDate":"2022-03-29"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    public static final String USERGUIDE_URL \u003d","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"            \"https://ay2122s2-cs2103t-t11-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2022-03-29"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"    public static final String HELP_MESSAGE \u003d \"Open the User Guide\";","lastModifiedDate":"2022-03-29"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"    public static final String COPIED_MESSAGE \u003d \"Browser opened\";","lastModifiedDate":"2022-03-29"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"    private static ResultDisplay display;","lastModifiedDate":"2022-03-31"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpPage.class);","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"    private static final String FXML \u003d \"HelpPage.fxml\";","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"    private Button openInBrowserButton;","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"    private Label helpMessage;","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"     * Tutorial on how to add data to a table from","lastModifiedDate":"2022-03-31"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"     * https://medium.com/@keeptoo/adding-data-to-javafx-tableview-stepwise-df582acbae4f","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    private TableView\u003cString\u003e table;","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a new {@code HelpPage}","lastModifiedDate":"2022-03-29"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"    public HelpPage(ResultDisplay rd) {","lastModifiedDate":"2022-03-31"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"        super(FXML);","lastModifiedDate":"2022-03-29"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"        logger.fine(\"Opening PeopleSoft\u0027s Help page.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2022-03-29"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"        display \u003d rd;","lastModifiedDate":"2022-03-31"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"     * Opens the User Guide in the Browser.","lastModifiedDate":"2022-03-29"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"     * Solution referenced from https://stackoverflow.com/a/54869038/16777554","lastModifiedDate":"2022-03-29"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"    private void openInBrowser() {","lastModifiedDate":"2022-03-29"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"        logger.fine(\"URL to open: \" + USERGUIDE_URL); // change to fine logging","lastModifiedDate":"2022-03-29"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":"        String oS \u003d System.getProperty(\"os.name\").toLowerCase();","lastModifiedDate":"2022-03-29"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"        logger.fine(\"Operating system detected: \" + oS);","lastModifiedDate":"2022-03-29"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":"        try {","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"            if (Desktop.isDesktopSupported()) { // Windows","lastModifiedDate":"2022-03-29"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"                logger.fine(\"Using Desktop.browse on Windows to open webpage.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"                Desktop desktop \u003d Desktop.getDesktop();","lastModifiedDate":"2022-03-29"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"                desktop.browse(new URI(USERGUIDE_URL));","lastModifiedDate":"2022-03-29"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"            } else {","lastModifiedDate":"2022-03-29"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"                Runtime runtime \u003d Runtime.getRuntime();","lastModifiedDate":"2022-03-29"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"                if (oS.contains(\"mac\")) {","lastModifiedDate":"2022-03-29"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"                    logger.fine(\"Using \u0027open\u0027 on Mac to open webpage.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"                    Process open \u003d runtime.exec(\"open \" + USERGUIDE_URL);","lastModifiedDate":"2022-03-29"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"                    logger.fine(\"Opened. Exit value is \" + open.exitValue());","lastModifiedDate":"2022-03-29"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":"                } else if (oS.contains(\"nix\") || oS.contains(\"nux\")) {","lastModifiedDate":"2022-03-29"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"                    logger.fine(\"Using \u0027xdg-open\u0027 on Linux to open webpage.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"                    Process open \u003d runtime.exec(\"xdg-open \" + USERGUIDE_URL);","lastModifiedDate":"2022-03-29"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"                    logger.fine(\"Opened. Exit value is \" + open.exitValue());","lastModifiedDate":"2022-03-29"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"                } else {","lastModifiedDate":"2022-03-29"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"                    String msg \u003d \"Unable to launch browser due to the OS.\";","lastModifiedDate":"2022-03-31"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"                    logger.warning(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"                    display.setFeedbackToUser(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"                }","lastModifiedDate":"2022-03-29"},{"lineNumber":83,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":"            }","lastModifiedDate":"2022-03-29"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"            logger.fine(\"User Guide successfully opened in browser.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":87,"author":{"gitId":"ian-from-dover"},"content":"            display.setFeedbackToUser(COPIED_MESSAGE);","lastModifiedDate":"2022-03-31"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"        } catch (URISyntaxException se) {","lastModifiedDate":"2022-03-29"},{"lineNumber":90,"author":{"gitId":"ian-from-dover"},"content":"            String msg \u003d \"The URL in the application was wrong. Please contact developers.\";","lastModifiedDate":"2022-03-31"},{"lineNumber":91,"author":{"gitId":"ian-from-dover"},"content":"            logger.warning(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":92,"author":{"gitId":"ian-from-dover"},"content":"            display.setFeedbackToUser(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":93,"author":{"gitId":"ian-from-dover"},"content":"        } catch (IOException ie) {","lastModifiedDate":"2022-03-29"},{"lineNumber":94,"author":{"gitId":"ian-from-dover"},"content":"            String msg \u003d \"Unable to launch OS\u0027s browser. Please contact developers.\";","lastModifiedDate":"2022-03-31"},{"lineNumber":95,"author":{"gitId":"ian-from-dover"},"content":"            logger.warning(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":96,"author":{"gitId":"ian-from-dover"},"content":"            display.setFeedbackToUser(msg);","lastModifiedDate":"2022-03-31"},{"lineNumber":97,"author":{"gitId":"ian-from-dover"},"content":"        }","lastModifiedDate":"2022-03-29"},{"lineNumber":98,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":99,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":99}},{"path":"src/main/java/peoplesoft/ui/scenes/OverviewPage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.scenes;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.commons.core.LogsCenter;","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.JobListPanel;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.regions.PersonListPanel;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"public class OverviewPage extends Page {","lastModifiedDate":"2022-03-29"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpPage.class);","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"    private static final String FXML \u003d \"OverviewPage.fxml\";","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"    private JobListPanel jobListPanel;","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-29"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2022-03-29"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"    @FXML","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"    private StackPane jobListPanelPlaceholder;","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a {@code OverPage} with the given {@code ObservableList\u003cPerson\u003e}","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"    */","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"    public OverviewPage(ObservableList\u003cPerson\u003e filteredPersonList, ObservableList\u003cJob\u003e filteredJobList) {","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"        super(FXML);","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"        logger.fine(\"Opening PeopleSoft\u0027s Overview page.\");","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"        personListPanel \u003d new PersonListPanel(filteredPersonList);","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"        jobListPanel \u003d new JobListPanel(filteredJobList);","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"        jobListPanelPlaceholder.getChildren().add(jobListPanel.getRoot());","lastModifiedDate":"2022-03-30"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":39}},{"path":"src/main/java/peoplesoft/ui/scenes/Page.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"package peoplesoft.ui.scenes;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"import peoplesoft.ui.UiPart;","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"/**","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":" * Models a page in the PeopleSoft application.","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":" * All pages inherit from this class.","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":" */","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"public abstract class Page extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"     * Creates a {@code Page} from the {@code fxmlFileName}","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"    public Page(String fxmlFileName) {","lastModifiedDate":"2022-03-29"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"        super(fxmlFileName);","lastModifiedDate":"2022-03-29"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":18}},{"path":"src/main/resources/styles/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"/* Dark theme for PeopleSoft */","lastModifiedDate":"2022-03-29"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"/* Using HTTP Status Design Web App by uikit */","lastModifiedDate":"2022-03-31"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"/* Retrieved from https://uikit.to/http-status-design-web-app/ */","lastModifiedDate":"2022-03-31"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":".root {","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"    /* JavaFX CSS Parser only supports","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"       custom variables for colours and nothing else */","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"    /* Source: https://stackoverflow.com/questions/13566210/declaring-variable-in-javafx-css-file */","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"    /* Docs https://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html */","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"    /* Panel Colors */","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"    base: white;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"    section-bg: base;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"    section-border: #ababab;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"    cmd-bg-and-box-outline: #cdcdcd;","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"    tag: accent;","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"    tag-alt: #FFAA02;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"    list-cell-even: #cdcdcd;","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"    list-cell-odd: #dedede;","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    list-cell-selected: derive(list-cell-even, -10%);","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"    selected: accent;","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"    /* Font Colors */","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"    text-default: black;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    text-inverse: white;","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"    text-error: #FF5736;","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"    -fx-focus-color: #000000;","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"    /* Final Colors */","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"    bg: #1B1C31;","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    pane: #222338;","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"    pane-light: #33344B;","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"    accent: #6076FF;","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    text-norm: white;","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    text-faded: #858AAB;","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"    tag-accent-bg: #282B4C;","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"    tag-green: #19A589;","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"    tag-green-bg: #19A589;","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"    tag-yellow: #FF9860;","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"    tag-yellow-bg: #382F3C;","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"    tag-red: #E06767;","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"    tag-red-bg: #352A3D;","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":".background {","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: bg;","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"    -fx-base: base;","lastModifiedDate":"2022-03-29"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"    -fx-control-inner-background: base;","lastModifiedDate":"2022-03-29"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: base;","lastModifiedDate":"2022-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header-background {","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"        transparent","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header .label {","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-03-31"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-default;","lastModifiedDate":"2022-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(base, 20%);","lastModifiedDate":"2022-03-29"},{"lineNumber":90,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-color: transparent transparent transparent section-border;","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":96,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(base, 20%);","lastModifiedDate":"2022-03-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(base, 20%);","lastModifiedDate":"2022-03-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-03-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-color: selected;","lastModifiedDate":"2022-03-22"},{"lineNumber":114,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2022-03-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-default;","lastModifiedDate":"2022-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"ian-from-dover"},"content":".cell-big-label {","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-03-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-default;","lastModifiedDate":"2022-03-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"ian-from-dover"},"content":".cell-small-label {","lastModifiedDate":"2022-03-14"},{"lineNumber":128,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-03-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-default;","lastModifiedDate":"2022-03-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":134,"author":{"gitId":"ian-from-dover"},"content":"     -fx-background-color: accent;","lastModifiedDate":"2022-03-22"},{"lineNumber":135,"author":{"gitId":"ian-from-dover"},"content":"     -fx-text-fill: text-inverse;","lastModifiedDate":"2022-03-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":140,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-03-22"},{"lineNumber":141,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-size: 8pt;","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":145,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-faded !important;","lastModifiedDate":"2022-03-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(base, 30%);","lastModifiedDate":"2022-03-29"},{"lineNumber":150,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-color: derive(base, 30%);","lastModifiedDate":"2022-03-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":155,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(base, 30%);","lastModifiedDate":"2022-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":163,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-03-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":166,"author":{"gitId":"ian-from-dover"},"content":".scroll-bar .thumb { /* the bar itself */","lastModifiedDate":"2022-03-22"},{"lineNumber":167,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: pane-light;","lastModifiedDate":"2022-03-30"},{"lineNumber":168,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-insets: 1; /* larger means thinner bar */","lastModifiedDate":"2022-03-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":171,"author":{"gitId":"ian-from-dover"},"content":"/* make other scroll controls invisible */","lastModifiedDate":"2022-03-22"},{"lineNumber":172,"author":{"gitId":"ian-from-dover"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button,","lastModifiedDate":"2022-03-30"},{"lineNumber":173,"author":{"gitId":"ian-from-dover"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2022-03-30"},{"lineNumber":174,"author":{"gitId":"ian-from-dover"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2022-03-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-03-30"},{"lineNumber":184,"author":{"gitId":"ian-from-dover"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2022-03-30"},{"lineNumber":185,"author":{"gitId":"ian-from-dover"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2022-03-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"ian-from-dover"},"content":".cmd-txt-field {","lastModifiedDate":"2022-03-22"},{"lineNumber":194,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent cmd-bg-and-box-outline transparent cmd-bg-and-box-outline;","lastModifiedDate":"2022-03-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":196,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-03-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":198,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-inverse;","lastModifiedDate":"2022-03-22"},{"lineNumber":199,"author":{"gitId":"ian-from-dover"},"content":"    -fx-prompt-text-fill: text-faded;","lastModifiedDate":"2022-03-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":202,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":206,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":212,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-inverse;","lastModifiedDate":"2022-03-22"},{"lineNumber":213,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: tag;","lastModifiedDate":"2022-03-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":219,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":220,"author":{"gitId":"ian-from-dover"},"content":".main-pane {","lastModifiedDate":"2022-03-22"},{"lineNumber":221,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: pane;","lastModifiedDate":"2022-03-22"},{"lineNumber":222,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-radius: 11px;","lastModifiedDate":"2022-03-22"},{"lineNumber":223,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-22"},{"lineNumber":224,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":225,"author":{"gitId":"ian-from-dover"},"content":".border-pane {","lastModifiedDate":"2022-03-29"},{"lineNumber":226,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: bg;","lastModifiedDate":"2022-03-29"},{"lineNumber":227,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":228,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":229,"author":{"gitId":"ian-from-dover"},"content":".person-card .label {","lastModifiedDate":"2022-03-30"},{"lineNumber":230,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: text-inverse;","lastModifiedDate":"2022-03-30"},{"lineNumber":231,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"ian-from-dover":107,"-":124}},{"path":"src/main/resources/styles/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"    /* changes the element to this color */","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"    /* Called by Ui.CommandBox.java, declared as ERROR_STYLE_CLASS */","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: #FF5736 !important;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-background: #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ian-from-dover":3,"-":18}},{"path":"src/main/resources/styles/HelpPage.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":".root {","lastModifiedDate":"2022-03-29"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"    /* Final Colors */","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"    bg: #1B1C31;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"    pane: #222338;","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"    pane-light: #33344B;","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"    accent: #6076FF;","lastModifiedDate":"2022-03-30"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"    text-norm: white;","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"    text-faded: #858AAB;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"    tag-accent-bg: #282B4C;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"    tag-green: #19A589;","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"    tag-green-bg: #19A589;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"    tag-yellow: #FF9860;","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"    tag-yellow-bg: #382F3C;","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"    tag-red: #E06767;","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"    tag-red-bg: #352A3D;","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"    /* Font Colors */","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"    text-default: black;","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"    text-inverse: white;","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"    text-error: #FF5736;","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"    -fx-focus-color: #000000;","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2022-03-29"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"#copyButton {","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: #ffff00;","lastModifiedDate":"2022-03-30"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"#copyButton:hover {","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: gray;","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"#copyButton:armed {","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: #ffff00;","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"#helpMessageContainer {","lastModifiedDate":"2022-03-29"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(bg, 20%);","lastModifiedDate":"2022-03-29"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":".bottom-help-panel {","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: tag-green;","lastModifiedDate":"2022-03-30"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-radius: 11px;","lastModifiedDate":"2022-03-30"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-30"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"/* For styling the help table */","lastModifiedDate":"2022-03-29"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"/* Referenced from kinsley kajiva at https://gist.github.com/kinsleykajiva/ac452bc8280bc52be384e9af98f2ba0c */","lastModifiedDate":"2022-03-29"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header,","lastModifiedDate":"2022-03-29"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header-background .filler {","lastModifiedDate":"2022-03-29"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: bg;","lastModifiedDate":"2022-03-29"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":".table-view .column-header .label{","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-03-29"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2022-03-29"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"    -fx-alignment: CENTER_LEFT;","lastModifiedDate":"2022-03-29"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":".table-view .cell{","lastModifiedDate":"2022-03-29"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"    -fx-cell-size: 35;","lastModifiedDate":"2022-03-29"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2022-03-29"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: #29292D;","lastModifiedDate":"2022-03-29"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-color: #29292D;","lastModifiedDate":"2022-03-29"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-fill: lightgray;","lastModifiedDate":"2022-03-29"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"    -fx-alignment: CENTER_LEFT;","lastModifiedDate":"2022-03-29"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":".table-row-cell:selected {","lastModifiedDate":"2022-03-29"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: whitesmoke;","lastModifiedDate":"2022-03-29"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"    -fx-text-background-color: #6622CC;","lastModifiedDate":"2022-03-29"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"/* scroll bar */","lastModifiedDate":"2022-03-29"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":83,"author":{"gitId":"ian-from-dover"},"content":"/* The increment and decrement button CSS class of scrollbar */","lastModifiedDate":"2022-03-29"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":".table-view .increment-button, .table-view .decrement-button {","lastModifiedDate":"2022-03-29"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-03-29"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-radius: 2em;","lastModifiedDate":"2022-03-29"},{"lineNumber":87,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":90,"author":{"gitId":"ian-from-dover"},"content":"/* The main scrollbar **track** CSS class  */","lastModifiedDate":"2022-03-29"},{"lineNumber":91,"author":{"gitId":"ian-from-dover"},"content":".table-view .scroll-bar:horizontal .track,","lastModifiedDate":"2022-03-29"},{"lineNumber":92,"author":{"gitId":"ian-from-dover"},"content":".table-view .scroll-bar:vertical .track{","lastModifiedDate":"2022-03-29"},{"lineNumber":93,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-03-29"},{"lineNumber":94,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-color: derive(#6622CC, 80%);","lastModifiedDate":"2022-03-29"},{"lineNumber":95,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":96,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-radius: 2em;","lastModifiedDate":"2022-03-29"},{"lineNumber":97,"author":{"gitId":"ian-from-dover"},"content":"    -fx-border-radius: 2em;","lastModifiedDate":"2022-03-29"},{"lineNumber":98,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"},{"lineNumber":99,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":100,"author":{"gitId":"ian-from-dover"},"content":"/* The main scrollbar **thumb** CSS class which we drag every time (movable) */","lastModifiedDate":"2022-03-29"},{"lineNumber":101,"author":{"gitId":"ian-from-dover"},"content":".table-view .scroll-bar:horizontal .thumb,","lastModifiedDate":"2022-03-29"},{"lineNumber":102,"author":{"gitId":"ian-from-dover"},"content":".table-view .scroll-bar:vertical .thumb {","lastModifiedDate":"2022-03-29"},{"lineNumber":103,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-color: derive(#6622CC, 90%);","lastModifiedDate":"2022-03-29"},{"lineNumber":104,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-insets: 2, 0, 0;","lastModifiedDate":"2022-03-29"},{"lineNumber":105,"author":{"gitId":"ian-from-dover"},"content":"    -fx-background-radius: 2em;","lastModifiedDate":"2022-03-29"},{"lineNumber":106,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":107,"author":{"gitId":"ian-from-dover"},"content":"}","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":107}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"\u003cStackPane prefHeight\u003d\"50.0\" prefWidth\u003d\"990.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"    \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"45.0\" prefWidth\u003d\"990.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"            \u003cImageView fitHeight\u003d\"23.0\" fitWidth\u003d\"23.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"                \u003cimage\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"                    \u003cImage url\u003d\"@../images/buttons/command.png\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"                \u003c/image\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/ImageView\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"            \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"30.0\" prefWidth\u003d\"940.0\" promptText\u003d\"Type command here...\" styleClass\u003d\"cmd-txt-field\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"                \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"                    \u003cFont name\u003d\"Inter Regular\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"                \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/TextField\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"        \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"            \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" top\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"ian-from-dover":23,"-":4}},{"path":"src/main/resources/view/HelpPage.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003cVBox fx:id\u003d\"help\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"540.0\" prefWidth\u003d\"1050.0\" spacing\u003d\"30.0\" style\u003d\"-fx-background-color: transparent;\" stylesheets\u003d\"@../styles/HelpPage.css\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"        \u003cTableView fx:id\u003d\"table\" prefHeight\u003d\"2160.0\" prefWidth\u003d\"1050.0\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"            \u003ccolumns\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"                \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"Command\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"                \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"Format\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"                \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"Examples\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/columns\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"            \u003ccolumnResizePolicy\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/columnResizePolicy\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"        \u003c/TableView\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"        \u003cHBox fx:id\u003d\"helpMessageContainer\" alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" styleClass\u003d\"bottom-help-panel\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"                \u003cLabel fx:id\u003d\"helpMessage\" minWidth\u003d\"250.0\" prefHeight\u003d\"22.0\" prefWidth\u003d\"250.0\" text\u003d\"More details in the User Guide\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"                \u003cPane fx:id\u003d\"spacer\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" prefWidth\u003d\"4320.0\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"                      \u003cButton fx:id\u003d\"openInBrowserButton\" minWidth\u003d\"110.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#openInBrowser\" prefHeight\u003d\"25.0\" prefWidth\u003d\"110.0\" text\u003d\"Open in Browser\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"                \u003c/Button\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e\u003c/Pane\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/children\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"                \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"        \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-29"}],"authorContributionMap":{"ian-from-dover":39}},{"path":"src/main/resources/view/JobListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"\u003c!--Todo: update person-card style to card or separate into 2 kinds--\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"\u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"475.0\" spacing\u003d\"10.0\" styleClass\u003d\"person-card\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"idx\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"17.0\" text\u003d\"1\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"desc\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" text\u003d\"Fix washing machine\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"      \u003c!--      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"75.0\" prefWrapLength\u003d\"50.0\" /\u003e--\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"rate\" layoutX\u003d\"51.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"70.0\" text\u003d\"\\$12.06 / 1H\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"duration\" layoutX\u003d\"265.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"80.0\" text\u003d\"PT48H\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"      \u003cImageView fx:id\u003d\"paidForIcon\" fitHeight\u003d\"16.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"         \u003cimage\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"            \u003cImage url\u003d\"@../images/apple-tick-emoji.png\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/image\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/ImageView\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"ian-from-dover":26}},{"path":"src/main/resources/view/JobListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"  \u003cListView fx:id\u003d\"jobListView\" style\u003d\"-fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"ian-from-dover":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"\u003cfx:root height\u003d\"720.0\" maxWidth\u003d\"1280.0\" minHeight\u003d\"600\" minWidth\u003d\"860.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"PeopleSoft\" type\u003d\"javafx.stage.Stage\" width\u003d\"1280.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"        \u003cImage url\u003d\"@/images/logo/Logo32.png\" /\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"                \u003cURL value\u003d\"@../styles/DarkTheme.css\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"                \u003cURL value\u003d\"@../styles/Extensions.css\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox prefHeight\u003d\"720.0\" prefWidth\u003d\"1280.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"                \u003cchildren\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"                    \u003cStackPane fx:id\u003d\"sideBarPlaceholder\" prefHeight\u003d\"720.0\" prefWidth\u003d\"230.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"                    \u003cBorderPane fx:id\u003d\"bp\" prefHeight\u003d\"720.0\" prefWidth\u003d\"1050.0\" styleClass\u003d\"border-pane\"\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"                        \u003ctop\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"                            \u003cPane BorderPane.alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"                                \u003cchildren\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"                                    \u003cVBox fx:id\u003d\"topBox\" prefHeight\u003d\"150.0\" prefWidth\u003d\"990.0\" styleClass\u003d\"main-pane\"\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"                                        \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"                                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" focusTraversable\u003d\"true\" prefHeight\u003d\"50.0\" prefWidth\u003d\"990.0\" style\u003d\"-fx-background-color: transparent;\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"                                            \u003cStackPane fx:id\u003d\"divider\" layoutX\u003d\"10.0\" layoutY\u003d\"21.0\" prefHeight\u003d\"2.0\" style\u003d\"-fx-background-color: #33344B;\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"                                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" prefHeight\u003d\"73.0\" prefWidth\u003d\"990.0\" style\u003d\"-fx-background-color: transparent;\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"                                        \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"                                    \u003c/VBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"                                \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"                                \u003cBorderPane.margin\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"                                    \u003cInsets left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"                                \u003c/BorderPane.margin\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"                            \u003c/Pane\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"                        \u003c/top\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"                        \u003ccenter\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"                            \u003cStackPane fx:id\u003d\"pagePlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"                                \u003cBorderPane.margin\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"                                    \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"                                \u003c/BorderPane.margin\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"                            \u003c/StackPane\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"                        \u003c/center\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"                    \u003c/BorderPane\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"                \u003c/children\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"ian-from-dover":40,"-":13}},{"path":"src/main/resources/view/OverviewPage.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"\u003cHBox fx:id\u003d\"overview\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"540.0\" prefWidth\u003d\"1050.0\" spacing\u003d\"30.0\" style\u003d\"-fx-background-color: #1B1C31;\" stylesheets\u003d\"/styles/DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"      \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"480.0\" styleClass\u003d\"main-pane\"\u003e \u003c!-- bottom personlist --\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"            \u003cStackPane fx:id\u003d\"headerSpace\" alignment\u003d\"CENTER_LEFT\" focusTraversable\u003d\"true\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"60.0\" style\u003d\"-fx-background-color: transparent;\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel text\u003d\"Employees\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cFont name\u003d\"Inter Bold\" size\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"                  \u003c/Label\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cInsets left\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox fx:id\u003d\"listheader\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"480.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #33344B;\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"nm\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"17.0\" text\u003d\"#\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"name\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" text\u003d\"Name\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"tags\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"75.0\" text\u003d\"Tags\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"phone\" layoutX\u003d\"51.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"70.0\" text\u003d\"Phone\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"email\" layoutX\u003d\"265.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"80.0\" text\u003d\"Mail\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"address\" layoutX\u003d\"337.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"59.0\" text\u003d\"Address\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefHeight\u003d\"3000.0\" prefWidth\u003d\"480.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"      \u003cVBox fx:id\u003d\"personList1\" layoutX\u003d\"40.0\" layoutY\u003d\"40.0\" prefWidth\u003d\"480.0\" styleClass\u003d\"main-pane\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder11\" alignment\u003d\"CENTER_LEFT\" focusTraversable\u003d\"true\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"60.0\" style\u003d\"-fx-background-color: transparent;\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel text\u003d\"Jobs\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cFont name\u003d\"Inter Bold\" size\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"                  \u003c/Label\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cInsets left\u003d\"20.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox fx:id\u003d\"listheader1\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"480.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #33344B;\"\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"nm1\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"17.0\" text\u003d\"#\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"name1\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" text\u003d\"Description\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"tags1\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"75.0\" text\u003d\"Rate\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"phone1\" layoutX\u003d\"51.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"70.0\" text\u003d\"Duration\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"email1\" layoutX\u003d\"265.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"80.0\" text\u003d\"Paid For\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel fx:id\u003d\"address1\" layoutX\u003d\"337.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"59.0\" text\u003d\"In Charge\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"            \u003cStackPane fx:id\u003d\"jobListPanelPlaceholder\" prefHeight\u003d\"3000.0\" prefWidth\u003d\"990.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"      \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"ian-from-dover":78}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"475.0\" spacing\u003d\"10.0\" styleClass\u003d\"person-card\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"idx\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"17.0\" text\u003d\"1\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"name\" layoutX\u003d\"35.0\" layoutY\u003d\"27.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" text\u003d\"Nicole Lee Siying Rajara\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"75.0\" prefWrapLength\u003d\"50.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"phone\" layoutX\u003d\"51.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"70.0\" text\u003d\"62353535\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"email\" layoutX\u003d\"265.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"80.0\" text\u003d\"nicole@staffhub.org\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"      \u003cLabel fx:id\u003d\"address\" layoutX\u003d\"337.0\" layoutY\u003d\"27.0\" prefWidth\u003d\"59.0\" text\u003d\"S888888 1 Tech Drive\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ian-from-dover":13,"-":6}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"  \u003cListView fx:id\u003d\"personListView\" style\u003d\"-fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ian-from-dover":4,"-":4}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"73.0\" prefWidth\u003d\"990.0\" styleClass\u003d\"result-display\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"   \u003cLabel fx:id\u003d\"resultDisplay\" lineSpacing\u003d\"1.0\" prefHeight\u003d\"53.0\" prefWidth\u003d\"950.0\" styleClass\u003d\"result-display\" text\u003d\"The command\u0027s response will be displayed here\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"ian-from-dover":8,"-":4}},{"path":"src/main/resources/view/SideBar.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ian-from-dover"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ian-from-dover"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"ian-from-dover"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"ian-from-dover"},"content":"\u003cVBox fx:id\u003d\"SidePane\" prefHeight\u003d\"720.0\" prefWidth\u003d\"230.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #222338;\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"ian-from-dover"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"ian-from-dover"},"content":"      \u003cStackPane onMouseClicked\u003d\"#switchToOverview\" prefHeight\u003d\"100.0\" prefWidth\u003d\"230.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"ian-from-dover"},"content":"            \u003cImageView fitHeight\u003d\"28.0\" fitWidth\u003d\"146.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"ian-from-dover"},"content":"               \u003cimage\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cImage url\u003d\"@../images/sidebar/toplogo.png\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/image\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/ImageView\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/StackPane\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ian-from-dover"},"content":"      \u003cButton fx:id\u003d\"bOverview\" graphicTextGap\u003d\"16.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#switchToOverview\" prefHeight\u003d\"50.0\" prefWidth\u003d\"190.0\" style\u003d\"-fx-background-color: #6076FF; -fx-background-radius: 10;\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"ian-from-dover"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ian-from-dover"},"content":"            \u003cFont name\u003d\"Inter Italic\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ian-from-dover"},"content":"         \u003cgraphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" spacing\u003d\"16.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cImageView fitHeight\u003d\"16.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cimage\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cImage url\u003d\"@../images/sidebar/overview.png\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/image\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"ian-from-dover"},"content":"                  \u003c/ImageView\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel minWidth\u003d\"70.0\" text\u003d\"Overview\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-31"},{"lineNumber":33,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cFont size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/graphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"ian-from-dover"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"ian-from-dover"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/Button\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"ian-from-dover"},"content":"      \u003cButton fx:id\u003d\"bHelp\" graphicTextGap\u003d\"16.0\" layoutX\u003d\"30.0\" layoutY\u003d\"310.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#switchToHelp\" prefHeight\u003d\"50.0\" prefWidth\u003d\"190.0\" style\u003d\"-fx-background-color: transparent; -fx-background-radius: 10;\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"ian-from-dover"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"ian-from-dover"},"content":"            \u003cFont name\u003d\"Inter Italic\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"ian-from-dover"},"content":"         \u003cgraphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" spacing\u003d\"16.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cImageView fitHeight\u003d\"16.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cimage\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cImage url\u003d\"@../images/sidebar/help.png\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/image\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"ian-from-dover"},"content":"                  \u003c/ImageView\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel text\u003d\"Help\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cFont size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/graphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"ian-from-dover"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"ian-from-dover"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/Button\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"ian-from-dover"},"content":"      \u003cButton fx:id\u003d\"bExit\" graphicTextGap\u003d\"16.0\" layoutX\u003d\"30.0\" layoutY\u003d\"370.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#exitApp\" prefHeight\u003d\"50.0\" prefWidth\u003d\"190.0\" style\u003d\"-fx-background-color: transparent; -fx-background-radius: 10;\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"ian-from-dover"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"ian-from-dover"},"content":"            \u003cFont name\u003d\"Inter Italic\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"ian-from-dover"},"content":"         \u003cgraphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"ian-from-dover"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" spacing\u003d\"16.0\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"ian-from-dover"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cImageView fitHeight\u003d\"16.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cimage\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cImage url\u003d\"@../images/sidebar/exit.png\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/image\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"ian-from-dover"},"content":"                  \u003c/ImageView\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"ian-from-dover"},"content":"                  \u003cLabel text\u003d\"Exit\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"ian-from-dover"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"ian-from-dover"},"content":"                        \u003cFont size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"ian-from-dover"},"content":"                     \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"ian-from-dover"},"content":"               \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"ian-from-dover"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/graphic\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"ian-from-dover"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"ian-from-dover"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"ian-from-dover"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"ian-from-dover"},"content":"      \u003c/Button\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"ian-from-dover"},"content":"   \u003cpadding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"ian-from-dover"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"ian-from-dover"},"content":"   \u003c/padding\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"ian-from-dover"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"ian-from-dover":93}},{"path":"src/test/java/peoplesoft/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"zhongfu":1,"-":57}},{"path":"src/test/java/peoplesoft/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"zhongfu":1,"-":26}},{"path":"src/test/java/peoplesoft/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":2,"-":133}},{"path":"src/test/java/peoplesoft/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.core.index;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"zhongfu":2,"-":58}},{"path":"src/test/java/peoplesoft/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"ian-from-dover"},"content":"        assertNotNull(AppUtil.getImage(\"/images/logo/Logo32.png\"));","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"zhongfu":2,"ian-from-dover":1,"-":33}},{"path":"src/test/java/peoplesoft/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"zhongfu":3,"-":105}},{"path":"src/test/java/peoplesoft/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Config;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":4,"-":112}},{"path":"src/test/java/peoplesoft/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":2,"-":21}},{"path":"src/test/java/peoplesoft/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.SerializableTestClass;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.TestUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":3,"-":42}},{"path":"src/test/java/peoplesoft/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.commons.util;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"zhongfu":2,"-":141}},{"path":"src/test/java/peoplesoft/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.RATE_DESC_AMY;","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.CommandResult;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ListCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.storage.StorageManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"                + ADDRESS_DESC_AMY + RATE_DESC_AMY;","lastModifiedDate":"2022-03-29"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY)","lastModifiedDate":"2022-03-28"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"                .withNextId()","lastModifiedDate":"2022-03-28"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"                .withTags()","lastModifiedDate":"2022-03-28"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"                .build();","lastModifiedDate":"2022-03-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zhongfu":27,"Spyobird":2,"-":137}},{"path":"src/test/java/peoplesoft/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        Person validPerson \u003d new PersonBuilder().withId(new ID(95712384)).build();","lastModifiedDate":"2022-03-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"zhongfu":11,"-":35}},{"path":"src/test/java/peoplesoft/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"zhongfu":7,"-":106}},{"path":"src/test/java/peoplesoft/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"zhongfu":7,"-":25}},{"path":"src/test/java/peoplesoft/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"zhongfu":1,"-":53}},{"path":"src/test/java/peoplesoft/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    public static final double VALID_RATE_AMY \u003d 1.50;","lastModifiedDate":"2022-03-29"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"    public static final double VALID_RATE_BOB \u003d 12.7;","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"    public static final String RATE_DESC_AMY \u003d \" \" + PREFIX_RATE + VALID_RATE_AMY;","lastModifiedDate":"2022-03-29"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"    public static final String RATE_DESC_BOB \u003d \" \" + PREFIX_RATE + VALID_RATE_BOB;","lastModifiedDate":"2022-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"    public static final String INVALID_RATE_DESC \u003d \" \" + PREFIX_RATE + \"string\"; // string not allowed for rates","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"thewrik"},"content":"        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2022-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"zhongfu":14,"Spyobird":6,"-":113,"thewrik":1}},{"path":"src/test/java/peoplesoft/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"        // ensures that outOfBoundIndex is still in bounds of database list","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"zhongfu":14,"-":95}},{"path":"src/test/java/peoplesoft/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.Messages;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"        Person editedPerson \u003d new PersonBuilder()","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"                .withId(new ID(1)) // we\u0027re editing the person at index 0, i.e. id 1","lastModifiedDate":"2022-03-28"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"                .build();","lastModifiedDate":"2022-03-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"     * but smaller than size of database","lastModifiedDate":"2022-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        // ensures that outOfBoundIndex is still in bounds of database list","lastModifiedDate":"2022-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"zhongfu":28,"-":127}},{"path":"src/test/java/peoplesoft/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"zhongfu":10,"-":48}},{"path":"src/test/java/peoplesoft/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"zhongfu":5,"-":15}},{"path":"src/test/java/peoplesoft/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":33,"author":{"gitId":"thewrik"},"content":"                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":34,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":35,"author":{"gitId":"thewrik"},"content":"                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2022-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"thewrik"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\"Meier friends\");","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"thewrik"},"content":"        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2022-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"thewrik"},"content":"     * Parses {@code userInput} into a {@code PersonContainsKeywordsPredicate}.","lastModifiedDate":"2022-03-11"},{"lineNumber":79,"author":{"gitId":"thewrik"},"content":"     * @return","lastModifiedDate":"2022-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"thewrik"},"content":"    private PersonContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2022-03-11"},{"lineNumber":82,"author":{"gitId":"thewrik"},"content":"        return new PersonContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-03-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"zhongfu":10,"-":62,"thewrik":12}},{"path":"src/test/java/peoplesoft/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"zhongfu":5,"-":15}},{"path":"src/test/java/peoplesoft/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"zhongfu":8,"-":31}},{"path":"src/test/java/peoplesoft/logic/commands/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":" * A default model stub that have all of the methods failing.","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"    public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    public boolean hasPerson(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-28"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    public Person getPerson(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-28"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-22"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"    public boolean hasJob(ID jobId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"    public boolean hasJob(Job job) {","lastModifiedDate":"2022-03-28"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-28"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"    @Override","lastModifiedDate":"2022-03-28"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"    public Job getJob(ID jobId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-28"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":113,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"    public void deleteJob(Job target) {","lastModifiedDate":"2022-03-22"},{"lineNumber":115,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":117,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"    public void addJob(Job job) {","lastModifiedDate":"2022-03-22"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":123,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"    public void setJob(Job target, Job editedJob) {","lastModifiedDate":"2022-03-22"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {","lastModifiedDate":"2022-03-22"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {","lastModifiedDate":"2022-03-22"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-22"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":21,"Spyobird":116}},{"path":"src/test/java/peoplesoft/logic/commands/job/JobAddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"public class JobAddCommandTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"    private static final String CORRECT_ARGS \u003d \" n/name r/1.0 d/3\";","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"    public void constructor_nullArgs_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobAddCommand(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"    public void execute_nullModel_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobAddCommand(CORRECT_ARGS).execute(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    // TODO: Add model stubs to test command.","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    // Perhaps a common model stub class can be made.","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":23}},{"path":"src/test/java/peoplesoft/logic/commands/job/JobAssignCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"public class JobAssignCommandTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"    private static final String CORRECT_ARGS \u003d \" 1ef4 i/1\";","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    public void constructor_nullArgs_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobAssignCommand(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    public void execute_nullModel_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobAssignCommand(CORRECT_ARGS).execute(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"    public void execute_incorrectArgs_throwsCommandException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"        // TODO","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"    // TODO: Add model stubs to test command.","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"    // Perhaps a common model stub class can be made.","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    // TODO: May shift to parser depending on implementation","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    public void constructor_wrongFormatArgs_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"        // Empty name","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e new JobAssignCommand(\" i/1\"));","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        // Incorrect index parse","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e new JobAssignCommand(\"n/correct i/0\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":1,"Spyobird":38}},{"path":"src/test/java/peoplesoft/logic/commands/job/JobDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.ModelManager;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"public class JobDeleteCommandTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    private static final String CORRECT_ARGS \u003d \"correct\";","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    private static final String INCORRECT_ARGS \u003d \"incorrect\";","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"    private Job job \u003d new Job(new ID(CORRECT_ARGS), \"The Right Job\",","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"            new Rate(new Money(1), Duration.ofHours(1)), Duration.ofHours(2), false);","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"    public void constructor_nullArgs_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobDeleteCommand(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"    public void execute_nullModel_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobDeleteCommand(CORRECT_ARGS).execute(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    public void execute_incorrectArgs_throwsCommandException() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"        JobDeleteCommand cmd \u003d new JobDeleteCommand(INCORRECT_ARGS);","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        assertCommandFailure(cmd, expectedModel, JobDeleteCommand.MESSAGE_JOB_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"    public void execute_correctArgs_success() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"        model.addJob(job);","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"        JobDeleteCommand cmd \u003d new JobDeleteCommand(CORRECT_ARGS);","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"        assertCommandSuccess(cmd, model, String.format(JobDeleteCommand.MESSAGE_SUCCESS, job.getJobId()),","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"                expectedModel);","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":2,"Spyobird":51}},{"path":"src/test/java/peoplesoft/logic/commands/job/JobMarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.commands.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"public class JobMarkCommandTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"    private static final String CORRECT_ARGS \u003d \"correct\";","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"    private static final String INCORRECT_ARGS \u003d \"incorrect\";","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    public void constructor_nullArgs_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobMarkCommand(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    public void execute_nullModel_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new JobMarkCommand(CORRECT_ARGS).execute(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    public void execute_incorrectArgs_throwsCommandException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"        // TODO","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    // TODO: Model stub","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":27}},{"path":"src/test/java/peoplesoft/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_RATE_DESC;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.RATE_DESC_AMY;","lastModifiedDate":"2022-03-29"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.RATE_DESC_BOB;","lastModifiedDate":"2022-03-29"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_RATE_BOB;","lastModifiedDate":"2022-03-29"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"        PersonBuilder expectedPersonBuilder \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND);","lastModifiedDate":"2022-03-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-29"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"        // multiple rates - last rate accepted","lastModifiedDate":"2022-03-29"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"                        + RATE_DESC_AMY + RATE_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"                new AddCommand(expectedPersonBuilder.withNextId().build()));","lastModifiedDate":"2022-03-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"                .withNextId().build();","lastModifiedDate":"2022-03-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2022-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withNextId().build();","lastModifiedDate":"2022-03-28"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-03-29"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_AMY, new AddCommand(expectedPerson));","lastModifiedDate":"2022-03-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"        // missing rate prefix","lastModifiedDate":"2022-03-29"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"                + VALID_RATE_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"                + VALID_RATE_BOB, expectedMessage);","lastModifiedDate":"2022-03-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"        // invalid rate","lastModifiedDate":"2022-03-29"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2022-03-29"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"                + INVALID_RATE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Rate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2022-03-29"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"                + RATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2022-03-31"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-03-31"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"                        + ADDRESS_DESC_BOB + RATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"zhongfu":48,"Spyobird":44,"-":73}},{"path":"src/test/java/peoplesoft/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.FindCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.ListCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"        Person person \u003d new PersonBuilder().withNextId().build();","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"thewrik"},"content":"        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2022-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"zhongfu":21,"-":79,"thewrik":1}},{"path":"src/test/java/peoplesoft/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"zhongfu":1,"-":149}},{"path":"src/test/java/peoplesoft/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.Command;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"zhongfu":3,"-":35}},{"path":"src/test/java/peoplesoft/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"zhongfu":6,"-":26}},{"path":"src/test/java/peoplesoft/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"zhongfu":40,"-":171}},{"path":"src/test/java/peoplesoft/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.FindCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"thewrik"},"content":"                new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2022-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"zhongfu":6,"-":27,"thewrik":1}},{"path":"src/test/java/peoplesoft/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.logic.parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    private static final String INVALID_RATE \u003d \"hello\";","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    private static final String INVALID_DURATION \u003d \"world\";","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_STRING \u003d \"hello\";","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_RATE \u003d \"3.0\";","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_DURATION \u003d \"1.5\";","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":205,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":206,"author":{"gitId":"Spyobird"},"content":"    public void parseString_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":207,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseString(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":208,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":209,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":210,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":211,"author":{"gitId":"Spyobird"},"content":"    public void parseString_whitespace_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":212,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseString(WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":213,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":214,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":215,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":216,"author":{"gitId":"Spyobird"},"content":"    public void parseString_validValue_returnsString() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":217,"author":{"gitId":"Spyobird"},"content":"        assertEquals(VALID_STRING, ParserUtil.parseString(VALID_STRING));","lastModifiedDate":"2022-03-22"},{"lineNumber":218,"author":{"gitId":"Spyobird"},"content":"        // With whitespace","lastModifiedDate":"2022-03-22"},{"lineNumber":219,"author":{"gitId":"Spyobird"},"content":"        assertEquals(VALID_STRING, ParserUtil.parseString(WHITESPACE + VALID_STRING + WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":220,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":221,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":222,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":223,"author":{"gitId":"Spyobird"},"content":"    public void parseRate_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":224,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRate(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":225,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":226,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":227,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":228,"author":{"gitId":"Spyobird"},"content":"    public void parseRate_invalidValue_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":229,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRate(INVALID_RATE));","lastModifiedDate":"2022-03-22"},{"lineNumber":230,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":231,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":232,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":233,"author":{"gitId":"Spyobird"},"content":"    public void parseRate_validValue_returnsRate() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":234,"author":{"gitId":"Spyobird"},"content":"        Rate expectedRate \u003d new Rate(new Money(3.0), Duration.ofHours(1));","lastModifiedDate":"2022-03-22"},{"lineNumber":235,"author":{"gitId":"Spyobird"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(VALID_RATE));","lastModifiedDate":"2022-03-22"},{"lineNumber":236,"author":{"gitId":"Spyobird"},"content":"        // With whitespace","lastModifiedDate":"2022-03-22"},{"lineNumber":237,"author":{"gitId":"Spyobird"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(WHITESPACE + VALID_RATE + WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":238,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":239,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":240,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":241,"author":{"gitId":"Spyobird"},"content":"    public void parseDuration_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":242,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration(null));","lastModifiedDate":"2022-03-22"},{"lineNumber":243,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":244,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":245,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":246,"author":{"gitId":"Spyobird"},"content":"    public void parseDuration_invalidValue_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":247,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_RATE));","lastModifiedDate":"2022-03-22"},{"lineNumber":248,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":249,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":250,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":251,"author":{"gitId":"Spyobird"},"content":"    public void parseDuration_validValue_returnsDuration() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":252,"author":{"gitId":"Spyobird"},"content":"        Duration expectedDuration \u003d Duration.ofMinutes(90);","lastModifiedDate":"2022-03-22"},{"lineNumber":253,"author":{"gitId":"Spyobird"},"content":"        assertEquals(expectedDuration, ParserUtil.parseDuration(VALID_DURATION));","lastModifiedDate":"2022-03-22"},{"lineNumber":254,"author":{"gitId":"Spyobird"},"content":"        // With whitespace","lastModifiedDate":"2022-03-22"},{"lineNumber":255,"author":{"gitId":"Spyobird"},"content":"        assertEquals(expectedDuration, ParserUtil.parseDuration(WHITESPACE + VALID_DURATION + WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":256,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"zhongfu":10,"Spyobird":61,"-":186}},{"path":"src/test/java/peoplesoft/logic/parser/job/JobAddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"public class JobAddCommandParserTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"    private JobAddCommandParser parser \u003d new JobAddCommandParser();","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    public void parse_missingArgs_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" n/name r/1.0\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" n/name d/3\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" r/1.0 d/3\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    public void parse_wrongFormatArgs_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"        // Empty name","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" n/ r/1.0 d/3\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"        // Incorrect rate parse","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" n/name r/hello d/3\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"        // Incorrect duration parse","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" n/name r/1.0 d/world\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"    // TODO: create test for successful construction","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    // Current issue is that a new jobId will be made and that may not be deterministic","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":32}},{"path":"src/test/java/peoplesoft/logic/parser/job/JobAssignCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"public class JobAssignCommandParserTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"    private JobAssignCommandParser parser \u003d new JobAssignCommandParser();","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    public void parse_missingArgs_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"        // Missing index","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" test\"));","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"        // Missing preamble","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\" i/1\"));","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    // TODO: create test for successful construction","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    // Current issue is that a new jobId will be made and that may not be deterministic","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"Spyobird":23}},{"path":"src/test/java/peoplesoft/logic/parser/job/JobDeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"public class JobDeleteCommandParserTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_STRING \u003d \"valid\";","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"    private JobDeleteCommandParser parser \u003d new JobDeleteCommandParser();","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    public void parse_whitespace_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    public void parse_validValue_returnsString() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_STRING, parser.parse(VALID_STRING).toString());","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"        // With whitespace","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_STRING, parser.parse(WHITESPACE + VALID_STRING + WHITESPACE).toString());","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"        // TODO: Currently exactly the same as ParserUtil.parseString()","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":2,"Spyobird":27}},{"path":"src/test/java/peoplesoft/logic/parser/job/JobMarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.logic.parser.job;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"public class JobMarkCommandParserTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_STRING \u003d \"valid\";","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"    private JobMarkCommandParser parser \u003d new JobMarkCommandParser();","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    public void parse_whitespace_throwsParseException() {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(WHITESPACE));","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    public void parse_validValue_returnsString() throws Exception {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_STRING, parser.parse(VALID_STRING).toString());","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"        // With whitespace","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_STRING, parser.parse(WHITESPACE + VALID_STRING + WHITESPACE).toString());","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"        // TODO: Currently exactly the same as ParserUtil.parseString()","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"zhongfu":2,"Spyobird":27}},{"path":"src/test/java/peoplesoft/model/AddressBookSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.PersonUtil.serializePerson;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.serializeList;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.serializeObject;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.toNormalizedJsonString;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import java.util.LinkedHashMap;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import java.util.List;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-31"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.commons.core.JobIdFactory;","lastModifiedDate":"2022-03-23"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.PersonIdFactory;","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.Employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"public class AddressBookSerdesTest {","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    public void serialize_validNonEmptyAttrs_returnsValidSerialization() throws JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"        List\u003cPerson\u003e personList \u003d Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA);","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        List\u003cJob\u003e jobList \u003d List.of();","lastModifiedDate":"2022-03-23"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"        ab.setPersons(personList);","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        ab.setJobs(jobList);","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        List\u003cString\u003e serializedPersonList \u003d personList.stream()","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"                .map((p) -\u003e serializePerson(p))","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        // TODO","lastModifiedDate":"2022-03-23"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        /*List\u003cString\u003e serializedJobList \u003d jobList.stream()","lastModifiedDate":"2022-03-23"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"            .map((j) -\u003e serializeJob(j))","lastModifiedDate":"2022-03-23"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"            .collect(Collectors.toList());*/","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"        String serializedEmployment \u003d JsonUtil.toJsonString(Employment.getInstance().getAllJobs());","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"        String serializedJobIdState \u003d String.valueOf(JobIdFactory.getId());","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"        String serializedPersonIdState \u003d String.valueOf(PersonIdFactory.getId());","lastModifiedDate":"2022-03-28"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"        Map\u003cString, String\u003e entries \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        entries.put(\"persons\", serializeList(serializedPersonList));","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"        entries.put(\"jobs\", serializeList(List.of())); // TODO","lastModifiedDate":"2022-03-23"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"        entries.put(\"employment\", serializedEmployment);","lastModifiedDate":"2022-03-23"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        entries.put(\"jobIdState\", serializedJobIdState);","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        entries.put(\"personIdState\", serializedPersonIdState);","lastModifiedDate":"2022-03-28"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        String serialized \u003d serializeObject(entries);","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"        assertEquals(serialized, toNormalizedJsonString(ab));","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    public void serialize_emptyList_returnsValidSerialization() throws JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-03-19"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"        LinkedHashMap\u003cString, String\u003e map \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-23"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"        map.put(\"persons\", serializeList(List.of()));","lastModifiedDate":"2022-03-23"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"        map.put(\"jobs\", serializeList(List.of()));","lastModifiedDate":"2022-03-23"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        map.put(\"employment\", JsonUtil.toJsonString(Employment.getInstance().getAllJobs()));","lastModifiedDate":"2022-03-23"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"        map.put(\"jobIdState\", JsonUtil.toJsonString(JobIdFactory.getId()));","lastModifiedDate":"2022-03-23"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"        map.put(\"personIdState\", JsonUtil.toJsonString(PersonIdFactory.getId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"        String serialized \u003d serializeObject(map);","lastModifiedDate":"2022-03-23"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        // TODO not sure if these are deterministic","lastModifiedDate":"2022-03-23"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"        assertEquals(serialized, toNormalizedJsonString(ab));","lastModifiedDate":"2022-03-19"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"     * Tests Person.PersonDeserializer.getNullValue().","lastModifiedDate":"2022-03-19"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonObjectValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"385\", AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"string\\\"\", AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-19"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"                \"[\\\"i\u0027m\\\",\\\"an\\\",\\\"array\\\"]\", AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidAddressBookObject_throwsJsonMappingException() throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-19"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"                serializeObject(Map.of(\"person\", \"[]\")), // should be \"persons\"","lastModifiedDate":"2022-03-19"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"                AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-19"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"                serializeObject(Map.of()),","lastModifiedDate":"2022-03-19"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"                AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-19"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"                serializeObject(Map.of(\"persons\", \"null\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"                AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidPersonElement_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"        String serializedList \u003d serializeList(Arrays.asList(","lastModifiedDate":"2022-03-19"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"                serializePerson(ALICE),","lastModifiedDate":"2022-03-19"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"                serializePerson(","lastModifiedDate":"2022-03-19"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"                        \"15\",","lastModifiedDate":"2022-03-28"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"                        \"R@chel\",","lastModifiedDate":"2022-03-19"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"                        BENSON.getPhone().toString(),","lastModifiedDate":"2022-03-19"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"                        BENSON.getAddress().toString(),","lastModifiedDate":"2022-03-19"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"                        BENSON.getEmail().toString(),","lastModifiedDate":"2022-03-19"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"                        BENSON.getRate().getAmount().printFullValue(),","lastModifiedDate":"2022-03-29"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"                        Collections.singleton(\"friend\"),","lastModifiedDate":"2022-03-31"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"                        Set.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"                serializePerson(ELLE)));","lastModifiedDate":"2022-03-19"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        String serializedObject \u003d serializeObject(Map.of(\"persons\", serializedList));","lastModifiedDate":"2022-03-19"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serializedObject, AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_validSerialization_returnsAddressBook() throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"        List\u003cPerson\u003e personList \u003d Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA);","lastModifiedDate":"2022-03-19"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"        List\u003cJob\u003e jobList \u003d List.of();","lastModifiedDate":"2022-03-23"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-03-19"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"        ab.setPersons(personList);","lastModifiedDate":"2022-03-19"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"        ab.setJobs(jobList);","lastModifiedDate":"2022-03-23"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"        List\u003cString\u003e serializedPersonList \u003d personList.stream()","lastModifiedDate":"2022-03-19"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"                .map((p) -\u003e serializePerson(p))","lastModifiedDate":"2022-03-19"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-03-19"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"        // TODO","lastModifiedDate":"2022-03-23"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"        /*List\u003cString\u003e serializedJobList \u003d jobList.stream()","lastModifiedDate":"2022-03-23"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"            .map((j) -\u003e serializeJob(j))","lastModifiedDate":"2022-03-23"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"            .collect(Collectors.toList());*/","lastModifiedDate":"2022-03-23"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"        String serializedEmployment \u003d JsonUtil.toJsonString(Employment.getInstance().getAllJobs());","lastModifiedDate":"2022-03-23"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"        int id \u003d JobIdFactory.getId();","lastModifiedDate":"2022-03-23"},{"lineNumber":163,"author":{"gitId":"Spyobird"},"content":"        String serializedJobIdState \u003d JsonUtil.toJsonString(id);","lastModifiedDate":"2022-03-23"},{"lineNumber":164,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":165,"author":{"gitId":"Spyobird"},"content":"        LinkedHashMap\u003cString, String\u003e map \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-23"},{"lineNumber":166,"author":{"gitId":"Spyobird"},"content":"        map.put(\"persons\", serializeList(serializedPersonList));","lastModifiedDate":"2022-03-23"},{"lineNumber":167,"author":{"gitId":"Spyobird"},"content":"        map.put(\"jobs\", serializeList(List.of())); // TODO","lastModifiedDate":"2022-03-23"},{"lineNumber":168,"author":{"gitId":"Spyobird"},"content":"        map.put(\"employment\", serializedEmployment);","lastModifiedDate":"2022-03-23"},{"lineNumber":169,"author":{"gitId":"Spyobird"},"content":"        map.put(\"jobIdState\", serializedJobIdState);","lastModifiedDate":"2022-03-23"},{"lineNumber":170,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":171,"author":{"gitId":"Spyobird"},"content":"        String serialized \u003d serializeObject(map);","lastModifiedDate":"2022-03-23"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"        assertEquals(ab, JsonUtil.fromJsonString(serialized, AddressBook.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":174,"author":{"gitId":"Spyobird"},"content":"        // Checks if employment and jobIdState gets serialized correctly","lastModifiedDate":"2022-03-23"},{"lineNumber":175,"author":{"gitId":"Spyobird"},"content":"        assertEquals(Employment.getInstance().getAllJobs(),","lastModifiedDate":"2022-03-23"},{"lineNumber":176,"author":{"gitId":"Spyobird"},"content":"                JsonUtil.fromJsonString(serializedEmployment, HashMap.class));","lastModifiedDate":"2022-03-23"},{"lineNumber":177,"author":{"gitId":"Spyobird"},"content":"        assertEquals(id, JsonUtil.fromJsonString(serializedJobIdState, int.class));","lastModifiedDate":"2022-03-23"},{"lineNumber":178,"author":{"gitId":"Spyobird"},"content":"        // TODO if needed","lastModifiedDate":"2022-03-23"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"zhongfu":129,"Spyobird":51}},{"path":"src/test/java/peoplesoft/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        PersonAddressBookStub newData \u003d new PersonAddressBookStub(newPersons);","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        assertFalse(addressBook.hasPerson(ALICE.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"        assertTrue(addressBook.hasPerson(ALICE.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        assertTrue(addressBook.hasPerson(editedAlice.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"    private static class PersonAddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"        PersonAddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"        @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"        public ObservableList\u003cJob\u003e getJobList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":104,"author":{"gitId":"Spyobird"},"content":"            return FXCollections.observableArrayList();","lastModifiedDate":"2022-03-17"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"Spyobird"},"content":"    // TODO: JobAddressBookStub","lastModifiedDate":"2022-03-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"zhongfu":12,"Spyobird":10,"-":87}},{"path":"src/test/java/peoplesoft/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.PersonContainsKeywordsPredicate;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.AddressBookBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson((Person) null));","lastModifiedDate":"2022-03-28"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"    public void hasPerson_nullPersonId_throwsNullPointerException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson((ID) null));","lastModifiedDate":"2022-03-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":128,"author":{"gitId":"thewrik"},"content":"        modelManager.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2022-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"zhongfu":16,"-":122,"thewrik":1}},{"path":"src/test/java/peoplesoft/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"zhongfu":2,"-":19}},{"path":"src/test/java/peoplesoft/model/employment/EmploymentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Spyobird"},"content":"package peoplesoft.model.employment;","lastModifiedDate":"2022-03-30"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-30"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-30"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-30"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-30"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-30"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-30"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-30"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.exceptions.DuplicateEmploymentException;","lastModifiedDate":"2022-03-30"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.employment.exceptions.EmploymentNotFoundException;","lastModifiedDate":"2022-03-30"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Job;","lastModifiedDate":"2022-03-30"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-30"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-30"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-30"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"public class EmploymentTest {","lastModifiedDate":"2022-03-30"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    private static final Job EATING \u003d new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-30"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"            new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), false);","lastModifiedDate":"2022-03-30"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    private static final Job RUNNING \u003d new Job(new ID(3175), \"Running\",","lastModifiedDate":"2022-03-30"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"            new Rate(new Money(6), Duration.ofHours(4)), Duration.ofHours(8), true);","lastModifiedDate":"2022-03-30"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment(null));","lastModifiedDate":"2022-03-30"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"    public void associate_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"        // null job","lastModifiedDate":"2022-03-30"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().associate(null, ALICE));","lastModifiedDate":"2022-03-30"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        // null person","lastModifiedDate":"2022-03-30"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().associate(EATING, null));","lastModifiedDate":"2022-03-30"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"    public void associate_withoutDuplicates_success() {","lastModifiedDate":"2022-03-30"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"        // Associate eating to Alice","lastModifiedDate":"2022-03-30"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().get(EATING.getJobId()).contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"        // Associate eating to Bob","lastModifiedDate":"2022-03-30"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().get(EATING.getJobId()).contains(BOB.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        // Associate running to Alice","lastModifiedDate":"2022-03-30"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"        employment.associate(RUNNING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().containsKey(RUNNING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().get(RUNNING.getJobId()).contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"        // Running is not associated to Bob","lastModifiedDate":"2022-03-30"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().get(RUNNING.getJobId()).contains(BOB.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":61,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"    public void associate_duplicateEmployment_throwsDuplicateEmploymentException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":65,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        assertThrows(DuplicateEmploymentException.class, () -\u003e employment.associate(EATING, ALICE));","lastModifiedDate":"2022-03-30"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"    public void disassociate_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"        // null job","lastModifiedDate":"2022-03-30"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().disassociate(null, ALICE));","lastModifiedDate":"2022-03-30"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"        // null person","lastModifiedDate":"2022-03-30"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().disassociate(EATING, null));","lastModifiedDate":"2022-03-30"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"    public void disassociate_employmentExists_success() {","lastModifiedDate":"2022-03-30"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"        employment.associate(RUNNING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"        // Disassociate running from Alice","lastModifiedDate":"2022-03-30"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        employment.disassociate(RUNNING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(RUNNING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"        // Disassociate eating from Bob","lastModifiedDate":"2022-03-30"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"        employment.disassociate(EATING, BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().get(EATING.getJobId()).contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().get(EATING.getJobId()).contains(BOB.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"        // Disassociate eating from Alice","lastModifiedDate":"2022-03-30"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"        employment.disassociate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"    public void disassociate_employmentMissing_throwsEmploymentNotFoundException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":104,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"        // Job missing","lastModifiedDate":"2022-03-30"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"        assertThrows(EmploymentNotFoundException.class, () -\u003e employment.disassociate(RUNNING, ALICE));","lastModifiedDate":"2022-03-30"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":108,"author":{"gitId":"Spyobird"},"content":"        // Person missing","lastModifiedDate":"2022-03-30"},{"lineNumber":109,"author":{"gitId":"Spyobird"},"content":"        assertThrows(EmploymentNotFoundException.class, () -\u003e employment.disassociate(EATING, BOB));","lastModifiedDate":"2022-03-30"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":111,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":112,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":113,"author":{"gitId":"Spyobird"},"content":"    public void deletePerson_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().deletePerson(null));","lastModifiedDate":"2022-03-30"},{"lineNumber":115,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":117,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":118,"author":{"gitId":"Spyobird"},"content":"    public void deletePerson_success() {","lastModifiedDate":"2022-03-30"},{"lineNumber":119,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":120,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":121,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":122,"author":{"gitId":"Spyobird"},"content":"        employment.associate(RUNNING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":123,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":124,"author":{"gitId":"Spyobird"},"content":"        // Delete Bob","lastModifiedDate":"2022-03-30"},{"lineNumber":125,"author":{"gitId":"Spyobird"},"content":"        employment.deletePerson(BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":126,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":127,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().get(EATING.getJobId()).contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().get(EATING.getJobId()).contains(BOB.getPersonId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":129,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":130,"author":{"gitId":"Spyobird"},"content":"        // Delete Alice","lastModifiedDate":"2022-03-30"},{"lineNumber":131,"author":{"gitId":"Spyobird"},"content":"        employment.deletePerson(ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":132,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":133,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(RUNNING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":134,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"    public void deleteJob_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-30"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Employment().deleteJob(null));","lastModifiedDate":"2022-03-30"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-30"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"    public void deleteJob_success() {","lastModifiedDate":"2022-03-30"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"        Employment employment \u003d new Employment();","lastModifiedDate":"2022-03-30"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"        employment.associate(EATING, BOB);","lastModifiedDate":"2022-03-30"},{"lineNumber":146,"author":{"gitId":"Spyobird"},"content":"        employment.associate(RUNNING, ALICE);","lastModifiedDate":"2022-03-30"},{"lineNumber":147,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"        // Delete eating","lastModifiedDate":"2022-03-30"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"        employment.deleteJob(EATING);","lastModifiedDate":"2022-03-30"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(EATING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"        assertTrue(employment.getAllJobs().containsKey(RUNNING.getJobId()));","lastModifiedDate":"2022-03-30"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-30"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"        // Delete running","lastModifiedDate":"2022-03-30"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"        employment.deleteJob(RUNNING);","lastModifiedDate":"2022-03-30"},{"lineNumber":155,"author":{"gitId":"Spyobird"},"content":"        assertFalse(employment.getAllJobs().containsKey(RUNNING));","lastModifiedDate":"2022-03-30"},{"lineNumber":156,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-30"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-30"}],"authorContributionMap":{"Spyobird":157}},{"path":"src/test/java/peoplesoft/model/job/JobTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"Spyobird"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"class JobTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"    private static final Job EATING \u003d new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"            new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), false);","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    private static final Job RUNNING \u003d new Job(new ID(3175), \"Running\",","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"            new Rate(new Money(6), Duration.ofHours(4)), Duration.ofHours(8), true);","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"    public void calculatePay() {","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"        assertTrue(EATING.calculatePay().getValue().compareTo(BigDecimal.valueOf(132)) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"        assertTrue(RUNNING.calculatePay().getValue().compareTo(BigDecimal.valueOf(12)) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"    public void setAsPaid() {","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"        // paid -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"        assertTrue(EATING.setAsPaid().hasPaid());","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"        assertTrue(RUNNING.setAsPaid().hasPaid());","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    public void setAsNotPaid() {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"        // not paid -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"        assertFalse(EATING.setAsNotPaid().hasPaid());","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"        assertFalse(RUNNING.setAsNotPaid().hasPaid());","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"    public void testEquals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        assertTrue(EATING.equals(EATING));","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"        assertTrue(EATING.equals(new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"        assertFalse(EATING.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"        // another type -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        assertFalse(EATING.equals(\"Eating\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        // another value -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"        assertFalse(EATING.equals(RUNNING));","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1044), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(2)), Duration.ofDays(1), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1043), \"Running\",","lastModifiedDate":"2022-03-28"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(6), Duration.ofHours(1)), Duration.ofDays(1), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(2), false)));","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        assertFalse(EATING.equals(new Job(new ID(1043), \"Eating\",","lastModifiedDate":"2022-03-28"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"                new Rate(new Money(5.5), Duration.ofHours(1)), Duration.ofDays(1), true)));","lastModifiedDate":"2022-03-23"},{"lineNumber":69,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"zhongfu":15,"Spyobird":55}},{"path":"src/test/java/peoplesoft/model/job/MoneySerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"public class MoneySerdesTest {","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public static final String VERY_BIG_NUMBER_STRING \u003d","lastModifiedDate":"2022-03-31"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"            \"10443888814131525066917527107166243825799642490473837803842334832839539079715574\"","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"                    + \"56848826811934997558340890106714439262837987573438185793607263236087851365277945\"","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"                    + \"95697654370999834036159013438371831442807001185594622637631883939771274567233468\"","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"                    + \"43445866174968079087058037040712840487401186091144679777835980290066869389768817\"","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"                    + \"87785946905630190260940599579453432823469303026696443059025015972399867714215541\"","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"                    + \"69383555988529148631823791443449673408781187263949647510018904134900841706167509\"","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"                    + \"36683338505510329720882695507699836163694119330152137968258371880918336567512213\"","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"                    + \"18492846368125550225998300412344784862595674492194617023806505913245610825731835\"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"                    + \"38008760862210283427019769820231316901767800667519548507992163641937028537512478\"","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"                    + \"40149071591354599827905133996115517942711068311340905842728842797915548497829543\"","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"                    + \"23534517065223269061394905987693002122963395687782878948440616007412945674919823\"","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"                    + \"05057164237715481632138063104590291613692670834285644073044789997190178146576347\"","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"                    + \"32238502672530598997959960907994692017746248177184498674556592501783290704731194\"","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"                    + \"33165550807568221846571746373296884912819520317457002440926616910874148385078411\"","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"                    + \"92980452298185733897764810312608590300130241346718972667321649151113160292078173\"","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"                    + \"8033436090243804708340403154190336.123456\";","lastModifiedDate":"2022-03-31"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-31"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-31"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"5194817623.542413\\\"\", JsonUtil.toJsonString(new Money(new BigDecimal(\"5194817623.542413\"))));","lastModifiedDate":"2022-03-31"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"-1.000000\\\"\", JsonUtil.toJsonString(new Money(new BigDecimal(\"-1\"))));","lastModifiedDate":"2022-03-31"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"0.000000\\\"\", JsonUtil.toJsonString(new Money(new BigDecimal(\"0.00\"))));","lastModifiedDate":"2022-03-31"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"0.000000\\\"\", JsonUtil.toJsonString(new Money(new BigDecimal(\"0.00\"))));","lastModifiedDate":"2022-03-31"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"\" + VERY_BIG_NUMBER_STRING + \"\\\"\",","lastModifiedDate":"2022-03-31"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.toJsonString(new Money(new BigDecimal(VERY_BIG_NUMBER_STRING))));","lastModifiedDate":"2022-03-31"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"     * Tests Money.MoneyDeserializer.getNullValue().","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonDecimalStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"500\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"123.456\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"hello world!\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"{\\\"issa\\\":\\\"object!\\\"}\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid decimal strings.","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidMoney_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" 123.456\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"--5 \\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\",234\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"123456.789\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"123456.789000000\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"-123456.789\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"-123456.789\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"0\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"000000\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"0\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"-0\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"        assertEquals(","lastModifiedDate":"2022-03-19"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"                new Money(new BigDecimal(VERY_BIG_NUMBER_STRING)),","lastModifiedDate":"2022-03-31"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"\" + VERY_BIG_NUMBER_STRING + \"\\\"\", Money.class));","lastModifiedDate":"2022-03-31"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"        // things that are valid BigDecimal string reprs, but might be a little weird","lastModifiedDate":"2022-03-19"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        // TODO should these pass?","lastModifiedDate":"2022-03-19"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"100000\")), JsonUtil.fromJsonString(\"\\\"1e5\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Money(new BigDecimal(\"1234567.890123\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"1.234567890123e6\\\"\", Money.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"zhongfu":91}},{"path":"src/test/java/peoplesoft/model/job/MoneyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"Spyobird"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"public class MoneyTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"Spyobird"},"content":"    private static final Money ZERO \u003d new Money(0);","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"Spyobird"},"content":"    private static final Money ONE \u003d new Money(1);","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"Spyobird"},"content":"    private static final Money TWO \u003d new Money(2);","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"Spyobird"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NumberFormatException.class, () -\u003e new Money(Double.NaN));","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NumberFormatException.class, () -\u003e new Money(Double.POSITIVE_INFINITY));","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"Spyobird"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Money(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"Spyobird"},"content":"    public void add() {","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"Spyobird"},"content":"        // wrong addition -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ZERO.add(ZERO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.add(ONE).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"Spyobird"},"content":"        // correct addition -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.add(ZERO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.add(ONE).getValue().compareTo(BigDecimal.valueOf(2)) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    public void subtract() {","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"Spyobird"},"content":"        // wrong subtraction -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ZERO.subtract(ZERO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.subtract(ONE).getValue().compareTo(BigDecimal.valueOf(2)) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        // correct subtraction -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.subtract(ZERO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.subtract(ONE).getValue().compareTo(BigDecimal.ZERO) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"Spyobird"},"content":"    public void multiply() {","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"Spyobird"},"content":"        // wrong multiplication -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ZERO.multiply(ZERO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.multiply(ONE).getValue().compareTo(BigDecimal.ZERO) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        // correct multiplication -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ONE.multiply(ZERO).getValue().compareTo(BigDecimal.ZERO) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.multiply(ONE).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"    public void divide() {","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"        // division by zero -\u003e throws error","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        assertThrows(ArithmeticException.class, () -\u003e ONE.divide(ZERO));","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"Spyobird"},"content":"        assertThrows(ArithmeticException.class, () -\u003e ONE.divide(ZERO));","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"Spyobird"},"content":"        // wrong division -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ZERO.divide(BigDecimal.valueOf(1)).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.divide(ONE).getValue().compareTo(BigDecimal.ZERO) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"Spyobird"},"content":"        // correct division -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ZERO.divide(BigDecimal.valueOf(1)).getValue().compareTo(BigDecimal.ZERO) \u003d\u003d 0);","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"Spyobird"},"content":"        assertTrue(TWO.divide(TWO).getValue().compareTo(BigDecimal.ONE) \u003d\u003d 0);","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"Spyobird"},"content":"    public void printFullValue() {","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"Spyobird"},"content":"        assertEquals(ZERO.printFullValue(), \"0.000000\");","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"Spyobird"},"content":"        assertEquals(ONE.printFullValue(), \"1.000000\");","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(12.38).printFullValue(), \"12.380000\");","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(0.2736541).printFullValue(), \"0.273654\");","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(93.7265328).printFullValue(), \"93.726533\");","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"    public void testEquals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"        // same value -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"        Money otherOne \u003d new Money(1);","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        Money yetAnotherOne \u003d new Money(BigDecimal.ONE);","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"        Money theLastOne \u003d new Money(BigDecimal.valueOf(1000, 3));","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.equals(otherOne));","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.equals(yetAnotherOne));","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.equals(theLastOne));","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"Spyobird"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"Spyobird"},"content":"        assertTrue(ONE.equals(ONE));","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"Spyobird"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.equals(null));","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"Spyobird"},"content":"        // another type -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.equals(1));","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"Spyobird"},"content":"        // another value -\u003e returns false","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ONE.equals(TWO));","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"Spyobird"},"content":"    public void testToString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"Spyobird"},"content":"        assertEquals(ZERO.toString(), \"$0.00\");","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"Spyobird"},"content":"        assertEquals(ONE.toString(), \"$1.00\");","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(32.50).toString(), \"$32.50\");","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"Spyobird"},"content":"        // rounding","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(7.472).toString(), \"$7.47\");","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"Spyobird"},"content":"        assertEquals(new Money(19.1294).toString(), \"$19.13\");","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"Spyobird"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"zhongfu":7,"Spyobird":109}},{"path":"src/test/java/peoplesoft/model/job/RateSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.serializeObject;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.toNormalizedJsonString;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import java.util.LinkedHashMap;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"public class RateSerdesTest {","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"    private static final Rate VALID_RATE \u003d new Rate(","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"            new Money(new BigDecimal(\"19.25\")),","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"            Duration.ofMinutes(90));","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_AMOUNT \u003d \"\\\"19.250000\\\"\";","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_DURATION \u003d \"\\\"PT1H30M\\\"\";","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_SERIALIZATION \u003d serializeRate(VALID_AMOUNT, VALID_DURATION);","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"    private static String serializeRate(String amount, String duration) {","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        Map\u003cString, String\u003e map \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        map.put(\"amount\", amount);","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"        map.put(\"duration\", duration);","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"        return serializeObject(map);","lastModifiedDate":"2022-03-19"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_SERIALIZATION, toNormalizedJsonString(VALID_RATE));","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"     * Tests Person.PersonDeserializer.getNullValue().","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonRateValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"385\", Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"string\\\"\", Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-19"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidAmount_throwsJsonMappingException() throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializeRate(\"\\\" 19.25\\\"\", VALID_DURATION);","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullAmount_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializeRate(\"null\", VALID_DURATION);","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidDuration_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializeRate(VALID_AMOUNT, \"\\\"five hours\\\"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullDuration_throwsJsonMappingException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializeRate(VALID_AMOUNT, \"null\");","lastModifiedDate":"2022-03-19"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_validSerialization_returnsRate() throws IOException {","lastModifiedDate":"2022-03-19"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_RATE, JsonUtil.fromJsonString(VALID_SERIALIZATION, Rate.class));","lastModifiedDate":"2022-03-19"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"zhongfu":93}},{"path":"src/test/java/peoplesoft/model/job/RateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package peoplesoft.model.job;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"import peoplesoft.model.job.exceptions.NegativeMoneyValueException;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"import peoplesoft.model.job.exceptions.NonPositiveDurationException;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"public class RateTest {","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"    public void rate() {","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(new Rate(new Money(5.0), Duration.ofHours(1)), new Rate(new Money(5.0), Duration.ofHours(1)));","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(new Rate(new Money(0), Duration.ofHours(1)), new Rate(new Money(0), Duration.ofHours(1)));","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"    public void rate_addNegativeMoney_throwsNegativeMoneyValueException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"        assertThrows(NegativeMoneyValueException.class, () -\u003e new Rate(new Money(-1.0), Duration.ofHours(1)));","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"    public void rate_addInvalidDuration_throwsNonPositiveDurationException() {","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"        // negative duration value -\u003e throw NonPositiveDurationException","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"        assertThrows(NonPositiveDurationException.class, () -\u003e new Rate(new Money(1.0), Duration.ofHours(-1)));","lastModifiedDate":"2022-03-19"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"        // Duration.ZERO -\u003e throw NonPositiveDurationException","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"        assertThrows(NonPositiveDurationException.class, () -\u003e new Rate(new Money(1.0), Duration.ZERO));","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"ovidharshini":34}},{"path":"src/test/java/peoplesoft/model/person/AddressSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"public class AddressSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"Test address\\\"\", JsonUtil.toJsonString(new Address(\"Test address\")));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Tests Address.AddressDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"5\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings, i.e. those where the first character is not non-whitespace.","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidAddress_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" \\\"\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\\t\\\"\", Address.class)); // tab","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Address(\"3\"), JsonUtil.fromJsonString(\"\\\"3\\\"\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Address(\"4 Oxley Road, #14-02, Singapore 325021\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"4 Oxley Road, #14-02, Singapore 325021\\\"\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Address(\"Test address\"), JsonUtil.fromJsonString(\"\\\"Test address\\\"\", Address.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":54}},{"path":"src/test/java/peoplesoft/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"zhongfu":2,"-":34}},{"path":"src/test/java/peoplesoft/model/person/EmailSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"public class EmailSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"test+email@example.com\\\"\", JsonUtil.toJsonString(new Email(\"test+email@example.com\")));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Tests Email.EmailDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"5\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings.","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidEmail_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" \\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\\t\\\"\", Email.class)); // tab","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"hello@world.\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"                \"\\\"random\\\\\\\"_quote@in.here\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Email(\"random_email@gmail.com\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"random_email@gmail.com\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Email(\"a__little__+__funky4@example.com\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"a__little__+__funky4@example.com\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Email(\"35192341@xn--h9ja3mb.xn--fiqs8s\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"35192341@xn--h9ja3mb.xn--fiqs8s\\\"\", Email.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":61}},{"path":"src/test/java/peoplesoft/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@xn--h9ja3mb.xn--fiqs8s\")); // idn punycode","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"        assertTrue(Email.isValidEmail(\"so__many___underscores@example.com\")); // consecutive underscores in local part","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"zhongfu":4,"-":66}},{"path":"src/test/java/peoplesoft/model/person/IdSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-28"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-28"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-28"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"public class IdSerdesTest {","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"Test-id\\\"\", JsonUtil.toJsonString(new ID(\"Test-id\")));","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     * Tests ID.IDDeserializer.getNullValue().","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"5\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"{\\\"issa\\\":\\\"object!\\\"}\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings, i.e. those where the first character is not alphanumeric.","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidID_throwsJsonMappingException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"-e10\\\"\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"%\\\"\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-28"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new ID(\"3\"), JsonUtil.fromJsonString(\"\\\"3\\\"\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new ID(\"TestId-1234\"), JsonUtil.fromJsonString(\"\\\"TestId-1234\\\"\", ID.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-28"}],"authorContributionMap":{"zhongfu":52}},{"path":"src/test/java/peoplesoft/model/person/IdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-28"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-28"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-28"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"public class IdTest {","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ID(null));","lastModifiedDate":"2022-03-28"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"        String invalidId \u003d \"\";","lastModifiedDate":"2022-03-28"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ID(invalidId));","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void isValidId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        // null id","lastModifiedDate":"2022-03-28"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"        assertThrows(NullPointerException.class, () -\u003e ID.isValidId(null));","lastModifiedDate":"2022-03-28"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"        // invalid id","lastModifiedDate":"2022-03-28"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"\")); // empty string","lastModifiedDate":"2022-03-28"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"-\")); // hyphen only","lastModifiedDate":"2022-03-28"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"peter-\")); // ends with non-alphanumeric characters","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"-peter\")); // starts with non-alphanumeric characters","lastModifiedDate":"2022-03-28"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"        assertFalse(ID.isValidId(\"pe*ter\")); // contains invalid characters","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"        // valid id","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ID.isValidId(\"peterjack\")); // alphabets only","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ID.isValidId(\"12345\")); // numbers only","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ID.isValidId(\"peterthe2nd\")); // alphanumeric characters","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ID.isValidId(\"CapitalTan50\")); // with capital letters","lastModifiedDate":"2022-03-28"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ID.isValidId(\"1234abcd-ef56-78gh-ijkl-mno9pqr0stuv\")); // long ids","lastModifiedDate":"2022-03-28"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-28"}],"authorContributionMap":{"zhongfu":44}},{"path":"src/test/java/peoplesoft/model/person/NameSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"public class NameSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"Test name\\\"\", JsonUtil.toJsonString(new Name(\"Test name\")));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Tests Name.NameDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"5\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"{\\\"issa\\\":\\\"object!\\\"}\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings, i.e. those where the first character is not alphanumeric.","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidName_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" \\\"\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"%\\\"\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Name(\"3\"), JsonUtil.fromJsonString(\"\\\"3\\\"\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Name(\"Test name\"), JsonUtil.fromJsonString(\"\\\"Test name\\\"\", Name.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":51}},{"path":"src/test/java/peoplesoft/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"zhongfu":2,"-":38}},{"path":"src/test/java/peoplesoft/model/person/PersonContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"thewrik"},"content":"public class PersonContainsKeywordsPredicateTest {","lastModifiedDate":"2022-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate firstPredicate \u003d new PersonContainsKeywordsPredicate(","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"thewrik"},"content":"                firstPredicateKeywordList);","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate secondPredicate \u003d new PersonContainsKeywordsPredicate(","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"thewrik"},"content":"                secondPredicateKeywordList);","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate firstPredicateCopy \u003d new PersonContainsKeywordsPredicate(","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"thewrik"},"content":"                firstPredicateKeywordList);","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"thewrik"},"content":"    public void test_personContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"thewrik"},"content":"                Collections.singletonList(\"Alice\"));","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"thewrik"},"content":"        // Multiple keywords with tags","lastModifiedDate":"2022-03-11"},{"lineNumber":56,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\", \"intern\", \"tech\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":57,"author":{"gitId":"thewrik"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"thewrik"},"content":"                \"Alice Bob\").withTags(\"Intern\", \"Tech\").build()));","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"thewrik"},"content":"    public void test_personDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"thewrik"},"content":"        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2022-03-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"thewrik"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-03-11"},{"lineNumber":72,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":73,"author":{"gitId":"thewrik"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2022-03-11"},{"lineNumber":74,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"thewrik"},"content":"        // Multiple keywords with tags, with non-matching tag","lastModifiedDate":"2022-03-11"},{"lineNumber":80,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\", \"intern\", \"tech\"));","lastModifiedDate":"2022-03-11"},{"lineNumber":81,"author":{"gitId":"thewrik"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"Intern\").build()));","lastModifiedDate":"2022-03-11"},{"lineNumber":82,"author":{"gitId":"thewrik"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":83,"author":{"gitId":"thewrik"},"content":"        // Keywords match phone, email and address, but does not match name or tags","lastModifiedDate":"2022-03-11"},{"lineNumber":84,"author":{"gitId":"thewrik"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"thewrik"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"zhongfu":2,"-":57,"thewrik":30}},{"path":"src/test/java/peoplesoft/model/person/PersonSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-26"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.PersonUtil.serializePerson;","lastModifiedDate":"2022-03-18"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.serializeList;","lastModifiedDate":"2022-03-31"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.toNormalizedJsonString;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import java.util.List;","lastModifiedDate":"2022-03-31"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"public class PersonSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"Spyobird"},"content":"    private static final String INVALID_RATE \u003d \"string\";","lastModifiedDate":"2022-03-29"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    private static final Set\u003cString\u003e INVALID_TAGS \u003d Collections.singleton(\"#friend\");","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_PERSONID \u003d BENSON.getPersonId().toString();","lastModifiedDate":"2022-03-28"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"    private static final String VALID_RATE \u003d BENSON.getRate().getAmount().printFullValue();","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"    private static final Set\u003cString\u003e VALID_TAGS \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"            BENSON.getTags().stream().map((tag) -\u003e tag.tagName).collect(Collectors.toSet());","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    private static final Set\u003cString\u003e VALID_PAYMENTS \u003d Set.of();","lastModifiedDate":"2022-03-31"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"    private static final String VALID_SERIALIZATION \u003d serializePerson(BENSON);","lastModifiedDate":"2022-03-18"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"        assertEquals(VALID_SERIALIZATION, toNormalizedJsonString(BENSON));","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"     * Tests Person.PersonDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonPersonValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"385\", Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"string\\\"\", Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullPersonId_throwsJsonMappingException() {","lastModifiedDate":"2022-03-28"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"                null, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE, VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidName_throwsJsonMappingException() throws IOException {","lastModifiedDate":"2022-03-28"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-28"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE,","lastModifiedDate":"2022-03-31"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"                VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-28"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullName_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, null, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE, VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidPhone_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE, VALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullPhone_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, null, VALID_ADDRESS, VALID_EMAIL, VALID_RATE, VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidEmail_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, INVALID_EMAIL, VALID_RATE, VALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullEmail_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, null, VALID_RATE, VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidAddress_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_EMAIL, VALID_RATE, VALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nullAddress_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, null, VALID_EMAIL, VALID_RATE, VALID_TAGS, VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-29"},{"lineNumber":144,"author":{"gitId":"Spyobird"},"content":"    public void deserialize_invalidRate_throwsJsonMappingException() {","lastModifiedDate":"2022-03-29"},{"lineNumber":145,"author":{"gitId":"Spyobird"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-29"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, INVALID_RATE, VALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":148,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":149,"author":{"gitId":"Spyobird"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-29"},{"lineNumber":150,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":151,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":152,"author":{"gitId":"Spyobird"},"content":"    @Test","lastModifiedDate":"2022-03-29"},{"lineNumber":153,"author":{"gitId":"Spyobird"},"content":"    public void deserialize_nullRate_throwsJsonMappingException() {","lastModifiedDate":"2022-03-29"},{"lineNumber":154,"author":{"gitId":"Spyobird"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-29"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, null, VALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":157,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":158,"author":{"gitId":"Spyobird"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-29"},{"lineNumber":159,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":160,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":161,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":162,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidTags_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE, INVALID_TAGS,","lastModifiedDate":"2022-03-31"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"                VALID_PAYMENTS);","lastModifiedDate":"2022-03-31"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-26"},{"lineNumber":173,"author":{"gitId":"zhongfu"},"content":"     * This test tests for invalid tag arrays, e.g. where we get a string instead of an array for the {@code tagged}","lastModifiedDate":"2022-03-26"},{"lineNumber":174,"author":{"gitId":"zhongfu"},"content":"     * field.","lastModifiedDate":"2022-03-26"},{"lineNumber":175,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":176,"author":{"gitId":"zhongfu"},"content":"     * The message should be one that was generated by our custom serializer, instead of by Jackson.","lastModifiedDate":"2022-03-26"},{"lineNumber":177,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-26"},{"lineNumber":178,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-26"},{"lineNumber":179,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidTagArray_throwsJsonMappingExceptionWithMsg() {","lastModifiedDate":"2022-03-26"},{"lineNumber":180,"author":{"gitId":"zhongfu"},"content":"        final String serialized \u003d serializePerson(","lastModifiedDate":"2022-03-26"},{"lineNumber":181,"author":{"gitId":"Spyobird"},"content":"                VALID_PERSONID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_EMAIL, VALID_RATE,","lastModifiedDate":"2022-03-29"},{"lineNumber":182,"author":{"gitId":"zhongfu"},"content":"                \"\\\"invalid tag array representation\\\"\", serializeList(List.of()));","lastModifiedDate":"2022-03-31"},{"lineNumber":183,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":184,"author":{"gitId":"zhongfu"},"content":"        JsonMappingException ex \u003d assertThrows(","lastModifiedDate":"2022-03-26"},{"lineNumber":185,"author":{"gitId":"zhongfu"},"content":"                JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, Person.class));","lastModifiedDate":"2022-03-26"},{"lineNumber":186,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":187,"author":{"gitId":"zhongfu"},"content":"        assertTrue(ex.getMessage().startsWith(\"This person\u0027s tagged value is invalid!\"),","lastModifiedDate":"2022-03-26"},{"lineNumber":188,"author":{"gitId":"zhongfu"},"content":"                String.format(\"Got exception with unexpected message \u0027%s\u0027\", ex.getMessage()));","lastModifiedDate":"2022-03-26"},{"lineNumber":189,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":190,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":191,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":192,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_validSerialization_returnsPerson() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":193,"author":{"gitId":"zhongfu"},"content":"        assertEquals(BENSON, JsonUtil.fromJsonString(VALID_SERIALIZATION, Person.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":194,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":195,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":176,"Spyobird":19}},{"path":"src/test/java/peoplesoft/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_RATE_BOB;","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"        // same id, all other attributes different -\u003e returns true","lastModifiedDate":"2022-03-28"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2022-03-28"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2022-03-28"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"                .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"                .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2022-03-28"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"                .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2022-03-28"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"                .withRate(VALID_RATE_BOB)","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"                .withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2022-03-28"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"                .build();","lastModifiedDate":"2022-03-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"        // different id, all other attributes same -\u003e returns false","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withId(new ID(500)).build();","lastModifiedDate":"2022-03-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":86,"author":{"gitId":"Spyobird"},"content":"        // different rate -\u003e returns false","lastModifiedDate":"2022-03-29"},{"lineNumber":87,"author":{"gitId":"Spyobird"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withRate(VALID_RATE_BOB).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":88,"author":{"gitId":"Spyobird"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2022-03-29"},{"lineNumber":89,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"zhongfu":21,"Spyobird":6,"-":67}},{"path":"src/test/java/peoplesoft/model/person/PhoneSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"public class PhoneSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"1817483815\\\"\", JsonUtil.toJsonString(new Phone(\"1817483815\")));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Tests Phone.PhoneDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"385\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings, i.e. those where the first character is not non-whitespace.","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidPhone_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" \\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\\t\\\"\", Phone.class)); // tab","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"+15555555555\\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"hello\\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Phone(\"315\"), JsonUtil.fromJsonString(\"\\\"315\\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Phone(\"401959394939691849581729385719823791234134613\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"401959394939691849581729385719823791234134613\\\"\", Phone.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":55}},{"path":"src/test/java/peoplesoft/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"zhongfu":2,"-":38}},{"path":"src/test/java/peoplesoft/model/person/UniquePersonListSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-18"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-18"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-18"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.PersonUtil.serializePerson;","lastModifiedDate":"2022-03-18"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.serializeList;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TestUtil.toNormalizedJsonString;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-18"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-03-18"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-03-18"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-03-18"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-03-18"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2022-03-18"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-18"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-18"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-18"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import java.util.List;","lastModifiedDate":"2022-03-18"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-31"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-18"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-18"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-18"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-18"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-18"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"public class UniquePersonListSerdesTest {","lastModifiedDate":"2022-03-18"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"    public void serialize_validNonEmptyList_returnsValidSerialization() throws JsonProcessingException {","lastModifiedDate":"2022-03-18"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        List\u003cPerson\u003e personList \u003d Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA);","lastModifiedDate":"2022-03-18"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"        UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2022-03-18"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"        upl.setPersons(personList);","lastModifiedDate":"2022-03-18"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"        List\u003cString\u003e serializedPersonList \u003d personList.stream()","lastModifiedDate":"2022-03-18"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"                .map((p) -\u003e serializePerson(p))","lastModifiedDate":"2022-03-18"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-03-18"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"        String serialized \u003d serializeList(serializedPersonList);","lastModifiedDate":"2022-03-18"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertEquals(serialized, toNormalizedJsonString(upl));","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"    public void serialize_emptyList_returnsValidSerialization() throws JsonProcessingException {","lastModifiedDate":"2022-03-18"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2022-03-18"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"        String serialized \u003d serializeList(Arrays.asList());","lastModifiedDate":"2022-03-18"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"        assertEquals(serialized, toNormalizedJsonString(upl));","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"     * Tests Person.PersonDeserializer.getNullValue().","lastModifiedDate":"2022-03-18"},{"lineNumber":56,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":60,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonListValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-18"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"385\", UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"string\\\"\", UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonPersonElement_throwsJsonMappingException() throws IOException {","lastModifiedDate":"2022-03-18"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"                serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"                    serializePerson(BENSON),","lastModifiedDate":"2022-03-18"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"                    \"\\\"hello!\\\"\",","lastModifiedDate":"2022-03-18"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"                    serializePerson(ELLE))),","lastModifiedDate":"2022-03-18"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"                UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"                serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"                    \"null\")),","lastModifiedDate":"2022-03-18"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"                UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"                serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"                    \"1234\")),","lastModifiedDate":"2022-03-18"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"                UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"                serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"                    \"\\\"i\u0027m a list!\\\"\")),","lastModifiedDate":"2022-03-18"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"                UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-18"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"                serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"                    \"[null]\")),","lastModifiedDate":"2022-03-18"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"                UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidPersonElement_throwsJsonMappingException() {","lastModifiedDate":"2022-03-18"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"        String serialized \u003d serializeList(Arrays.asList(","lastModifiedDate":"2022-03-18"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"                serializePerson(ALICE),","lastModifiedDate":"2022-03-18"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"                serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"                    \"15\",","lastModifiedDate":"2022-03-28"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"                    \"R@chel\",","lastModifiedDate":"2022-03-18"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"                    BENSON.getPhone().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"                    BENSON.getAddress().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":110,"author":{"gitId":"zhongfu"},"content":"                    BENSON.getEmail().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":111,"author":{"gitId":"Spyobird"},"content":"                    BENSON.getRate().getAmount().printFullValue(), // TODO","lastModifiedDate":"2022-03-29"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"                    Collections.singleton(\"friend\"),","lastModifiedDate":"2022-03-31"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"                    Set.of()),","lastModifiedDate":"2022-03-31"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"                serializePerson(ELLE)));","lastModifiedDate":"2022-03-18"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(serialized, UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_validSerialization_returnsPerson() throws IOException {","lastModifiedDate":"2022-03-18"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"        List\u003cPerson\u003e personList \u003d Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA);","lastModifiedDate":"2022-03-18"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"        UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2022-03-18"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"        upl.setPersons(personList);","lastModifiedDate":"2022-03-18"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"        List\u003cString\u003e serializedPersonList \u003d personList.stream()","lastModifiedDate":"2022-03-18"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"                .map((p) -\u003e serializePerson(p))","lastModifiedDate":"2022-03-18"},{"lineNumber":128,"author":{"gitId":"zhongfu"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-03-18"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"        String serialized \u003d serializeList(serializedPersonList);","lastModifiedDate":"2022-03-18"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"        assertEquals(upl, JsonUtil.fromJsonString(serialized, UniquePersonList.class));","lastModifiedDate":"2022-03-18"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-18"}],"authorContributionMap":{"zhongfu":133,"Spyobird":1}},{"path":"src/test/java/peoplesoft/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.person;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.testutil.PersonBuilder;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertFalse(uniquePersonList.contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"        assertTrue(uniquePersonList.contains(ALICE.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"        assertTrue(uniquePersonList.contains(editedAlice.getPersonId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"zhongfu":12,"-":158}},{"path":"src/test/java/peoplesoft/model/tag/TagSerdesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.tag;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"public class TagSerdesTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"    public void serialize() throws JsonProcessingException {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"        assertEquals(\"\\\"TestTag3\\\"\", JsonUtil.toJsonString(new Tag(\"TestTag3\")));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"     * Tests Tag.TagDeserializer.getNullValue().","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_null_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"null\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_nonStringValue_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"5\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"[\\\"im an array lol\\\"]\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"zhongfu"},"content":"                \"{\\\"issa\\\":\\\"object!\\\"}\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"zhongfu"},"content":"     * Tests deserialization invalid strings, i.e. those where the first character is not non-whitespace.","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"zhongfu"},"content":"    public void deserialize_invalidTag_throwsJsonMappingException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\" \\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"\\\\t\\\"\", Tag.class)); // tab","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"zhongfu"},"content":"        assertThrows(JsonMappingException.class, () -\u003e JsonUtil.fromJsonString(\"\\\"a_b\\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"zhongfu"},"content":"    public void deserialize() throws IOException {","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Tag(\"3\"), JsonUtil.fromJsonString(\"\\\"3\\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Tag(\"TagWithS0meNumb3r5\"),","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"zhongfu"},"content":"                JsonUtil.fromJsonString(\"\\\"TagWithS0meNumb3r5\\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"zhongfu"},"content":"        assertEquals(new Tag(\"TestTag\"), JsonUtil.fromJsonString(\"\\\"TestTag\\\"\", Tag.class));","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"zhongfu":55}},{"path":"src/test/java/peoplesoft/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.model.tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"zhongfu":2,"-":24}},{"path":"src/test/java/peoplesoft/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.HOON;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.IDA;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhongfu":9,"-":101}},{"path":"src/test/java/peoplesoft/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zhongfu":5,"-":118}},{"path":"src/test/java/peoplesoft/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.storage;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.GuiSettings;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.UserPrefs;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":6,"-":62}},{"path":"src/test/java/peoplesoft/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":3,"-":31}},{"path":"src/test/java/peoplesoft/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"zhongfu":1,"-":33}},{"path":"src/test/java/peoplesoft/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-29"},{"lineNumber":10,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        descriptor.setRate(person.getRate());","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":78,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":79,"author":{"gitId":"Spyobird"},"content":"     * Sets the {@code Rate} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2022-03-29"},{"lineNumber":80,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":81,"author":{"gitId":"Spyobird"},"content":"    public EditPersonDescriptorBuilder withRate(double rate) {","lastModifiedDate":"2022-03-29"},{"lineNumber":82,"author":{"gitId":"Spyobird"},"content":"        descriptor.setRate(new Rate(new Money(rate), Duration.ofHours(1)));","lastModifiedDate":"2022-03-29"},{"lineNumber":83,"author":{"gitId":"Spyobird"},"content":"        return this;","lastModifiedDate":"2022-03-29"},{"lineNumber":84,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"zhongfu":8,"Spyobird":12,"-":79}},{"path":"src/test/java/peoplesoft/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-28"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":5,"author":{"gitId":"Spyobird"},"content":"import java.time.Duration;","lastModifiedDate":"2022-03-29"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-03-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.PersonIdFactory;","lastModifiedDate":"2022-03-28"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Money;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"Spyobird"},"content":"import peoplesoft.model.job.Rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Address;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Email;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Name;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Payment;","lastModifiedDate":"2022-03-31"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Phone;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.ID;","lastModifiedDate":"2022-03-28"},{"lineNumber":22,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"    public static final double DEFAULT_RATE \u003d 1.50;","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"zhongfu"},"content":"    private ID personId;","lastModifiedDate":"2022-03-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"    private Rate rate;","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"zhongfu"},"content":"    private Map\u003cID, Payment\u003e payments;","lastModifiedDate":"2022-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"zhongfu"},"content":"        personId \u003d PersonIdFactory.nextId();","lastModifiedDate":"2022-03-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"Spyobird"},"content":"        rate \u003d new Rate(new Money(DEFAULT_RATE), Duration.ofHours(1));","lastModifiedDate":"2022-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"zhongfu"},"content":"        payments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"        personId \u003d personToCopy.getPersonId();","lastModifiedDate":"2022-03-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"Spyobird"},"content":"        rate \u003d personToCopy.getRate();","lastModifiedDate":"2022-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"        payments \u003d new HashMap\u003c\u003e(personToCopy.getPayments());","lastModifiedDate":"2022-03-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"     * Sets the {@code personId} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-28"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    public PersonBuilder withId(ID personId) {","lastModifiedDate":"2022-03-28"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"        requireNonNull(personId);","lastModifiedDate":"2022-03-28"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2022-03-28"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"        return this;","lastModifiedDate":"2022-03-28"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"     * Sets the {@code personId} of the {@code Person} that we are building to the current PersonIdFactory id.","lastModifiedDate":"2022-03-28"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"    public PersonBuilder withCurrentId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"        return withId(new ID(PersonIdFactory.getId()));","lastModifiedDate":"2022-03-28"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-28"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"     * Sets the {@code personId} of the {@code Person} that we are building to the current PersonIdFactory id.","lastModifiedDate":"2022-03-28"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-28"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"    public PersonBuilder withNextId() {","lastModifiedDate":"2022-03-28"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"        return withId(new ID(PersonIdFactory.getId() + 1));","lastModifiedDate":"2022-03-28"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-28"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":135,"author":{"gitId":"Spyobird"},"content":"    /**","lastModifiedDate":"2022-03-29"},{"lineNumber":136,"author":{"gitId":"Spyobird"},"content":"     * Sets the {@code Rate} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-29"},{"lineNumber":137,"author":{"gitId":"Spyobird"},"content":"     */","lastModifiedDate":"2022-03-29"},{"lineNumber":138,"author":{"gitId":"Spyobird"},"content":"    public PersonBuilder withRate(double rate) {","lastModifiedDate":"2022-03-29"},{"lineNumber":139,"author":{"gitId":"Spyobird"},"content":"        this.rate \u003d new Rate(new Money(rate), Duration.ofHours(1));","lastModifiedDate":"2022-03-29"},{"lineNumber":140,"author":{"gitId":"Spyobird"},"content":"        return this;","lastModifiedDate":"2022-03-29"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"    }","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"","lastModifiedDate":"2022-03-29"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-31"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"     * Sets the {@code payments} field of the {@code Person} that we are building, using an {@code Iterable}","lastModifiedDate":"2022-03-31"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"     * of {@code Payment}s","lastModifiedDate":"2022-03-31"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-31"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"    public PersonBuilder withPayments(Iterable\u003cPayment\u003e payments) {","lastModifiedDate":"2022-03-31"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"        this.payments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"        for (Payment pymt : payments) {","lastModifiedDate":"2022-03-31"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"            requireNonNull(pymt);","lastModifiedDate":"2022-03-31"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"            this.payments.put(pymt.getJobId(), pymt);","lastModifiedDate":"2022-03-31"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-31"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"        return this;","lastModifiedDate":"2022-03-31"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-31"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"        return new Person(personId, name, phone, email, address, rate, tags, payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"zhongfu":58,"Spyobird":15,"-":87}},{"path":"src/test/java/peoplesoft/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_RATE;","lastModifiedDate":"2022-03-29"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import java.util.LinkedHashMap;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.AddCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Payment;","lastModifiedDate":"2022-03-31"},{"lineNumber":18,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.tag.Tag;","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"        // TODO might need more elegance","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"Spyobird"},"content":"        sb.append(PREFIX_RATE + person.getRate().getAmount().printFullValue() + \" \");","lastModifiedDate":"2022-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"        descriptor.getRate().ifPresent(rate -\u003e sb.append(PREFIX_RATE).append(rate.getAmount().printFullValue())","lastModifiedDate":"2022-03-29"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"                .append(\" \"));","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"     * Generate a rudimentary JSON serialization of a {@code Person}.","lastModifiedDate":"2022-03-18"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"     * @param person the {@code Person} to be serialized","lastModifiedDate":"2022-03-18"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"     * @return a JSON serialization of the given {@code Person}","lastModifiedDate":"2022-03-18"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"    public static String serializePerson(Person person) {","lastModifiedDate":"2022-03-18"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"        return serializePerson(","lastModifiedDate":"2022-03-18"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"            person.getPersonId().toString(),","lastModifiedDate":"2022-03-28"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"            person.getName().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"            person.getPhone().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"            person.getAddress().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"            person.getEmail().toString(),","lastModifiedDate":"2022-03-18"},{"lineNumber":85,"author":{"gitId":"Spyobird"},"content":"            person.getRate().getAmount().printFullValue(), // TODO","lastModifiedDate":"2022-03-29"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"            person.getTags().stream().map((tag) -\u003e tag.tagName).collect(Collectors.toSet()),","lastModifiedDate":"2022-03-31"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"            person.getPayments().values().stream().map(PersonUtil::serializePayment).collect(Collectors.toSet()));","lastModifiedDate":"2022-03-31"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"     * Generates a rudimentary JSON serialization of a {@code Person} with the given details.","lastModifiedDate":"2022-03-19"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"     * @param name the string representation of the {@code Person}\u0027s name","lastModifiedDate":"2022-03-18"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"     * @param phone the string representation of the {@code Person}\u0027s phone number","lastModifiedDate":"2022-03-18"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"     * @param address the string representation of the {@code Person}\u0027s address","lastModifiedDate":"2022-03-18"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"     * @param email the string representation of the {@code Person}\u0027s email address","lastModifiedDate":"2022-03-18"},{"lineNumber":97,"author":{"gitId":"Spyobird"},"content":"     * @param rate the string representation of the {@code Person}\u0027s rate","lastModifiedDate":"2022-03-29"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"     * @param tags a {@code Set} of the tags assigned to the {@code Person}","lastModifiedDate":"2022-03-18"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"     * @param payments a {@code Set} of serialized representations of each {@code Payment}","lastModifiedDate":"2022-03-31"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"     * @return a JSON serialization of the given {@code Person}","lastModifiedDate":"2022-03-18"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"    public static String serializePerson(String personId, String name, String phone, String address, String email,","lastModifiedDate":"2022-03-28"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"                String rate, Set\u003cString\u003e tags, Set\u003cString\u003e payments) {","lastModifiedDate":"2022-03-31"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        return serializePerson(","lastModifiedDate":"2022-03-26"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"                personId,","lastModifiedDate":"2022-03-28"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"                name,","lastModifiedDate":"2022-03-26"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"                phone,","lastModifiedDate":"2022-03-26"},{"lineNumber":108,"author":{"gitId":"zhongfu"},"content":"                address,","lastModifiedDate":"2022-03-26"},{"lineNumber":109,"author":{"gitId":"zhongfu"},"content":"                email,","lastModifiedDate":"2022-03-26"},{"lineNumber":110,"author":{"gitId":"Spyobird"},"content":"                rate,","lastModifiedDate":"2022-03-29"},{"lineNumber":111,"author":{"gitId":"zhongfu"},"content":"                TestUtil.serializeList(","lastModifiedDate":"2022-03-26"},{"lineNumber":112,"author":{"gitId":"zhongfu"},"content":"                        tags.stream()","lastModifiedDate":"2022-03-26"},{"lineNumber":113,"author":{"gitId":"zhongfu"},"content":"                                .map((tag) -\u003e tag \u003d\u003d null ? \"null\" : \"\\\"\" + tag + \"\\\"\")","lastModifiedDate":"2022-03-26"},{"lineNumber":114,"author":{"gitId":"zhongfu"},"content":"                                .collect(Collectors.toList())),","lastModifiedDate":"2022-03-31"},{"lineNumber":115,"author":{"gitId":"zhongfu"},"content":"                TestUtil.serializeList(","lastModifiedDate":"2022-03-31"},{"lineNumber":116,"author":{"gitId":"zhongfu"},"content":"                        payments.stream()","lastModifiedDate":"2022-03-31"},{"lineNumber":117,"author":{"gitId":"zhongfu"},"content":"                                .map(String::valueOf) // assuming we already have strnig reprs","lastModifiedDate":"2022-03-31"},{"lineNumber":118,"author":{"gitId":"zhongfu"},"content":"                                .collect(Collectors.toList())));","lastModifiedDate":"2022-03-26"},{"lineNumber":119,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-26"},{"lineNumber":120,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-26"},{"lineNumber":121,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-26"},{"lineNumber":122,"author":{"gitId":"zhongfu"},"content":"     * Generates a rudimentary JSON serialization of a {@code Person} with the given details.","lastModifiedDate":"2022-03-26"},{"lineNumber":123,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-26"},{"lineNumber":124,"author":{"gitId":"zhongfu"},"content":"     * @param name the string representation of the {@code Person}\u0027s name","lastModifiedDate":"2022-03-26"},{"lineNumber":125,"author":{"gitId":"zhongfu"},"content":"     * @param phone the string representation of the {@code Person}\u0027s phone number","lastModifiedDate":"2022-03-26"},{"lineNumber":126,"author":{"gitId":"zhongfu"},"content":"     * @param address the string representation of the {@code Person}\u0027s address","lastModifiedDate":"2022-03-26"},{"lineNumber":127,"author":{"gitId":"zhongfu"},"content":"     * @param email the string representation of the {@code Person}\u0027s email address","lastModifiedDate":"2022-03-26"},{"lineNumber":128,"author":{"gitId":"Spyobird"},"content":"     * @param rate the string representation of the {@code Person}\u0027s rate","lastModifiedDate":"2022-03-29"},{"lineNumber":129,"author":{"gitId":"zhongfu"},"content":"     * @param tags the string representation of the tags assigned to the {@code Person}","lastModifiedDate":"2022-03-26"},{"lineNumber":130,"author":{"gitId":"zhongfu"},"content":"     * @return a JSON serialization of the given {@code Person}","lastModifiedDate":"2022-03-26"},{"lineNumber":131,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-26"},{"lineNumber":132,"author":{"gitId":"zhongfu"},"content":"    public static String serializePerson(String personId, String name, String phone, String address, String email,","lastModifiedDate":"2022-03-28"},{"lineNumber":133,"author":{"gitId":"zhongfu"},"content":"                String rate, String tags, String payments) {","lastModifiedDate":"2022-03-31"},{"lineNumber":134,"author":{"gitId":"zhongfu"},"content":"        Map\u003cString, String\u003e map \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-19"},{"lineNumber":135,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":136,"author":{"gitId":"zhongfu"},"content":"        map.put(\"id\", personId \u003d\u003d null ? \"null\" : \"\\\"\" + personId + \"\\\"\");","lastModifiedDate":"2022-03-28"},{"lineNumber":137,"author":{"gitId":"zhongfu"},"content":"        map.put(\"name\", name \u003d\u003d null ? \"null\" : \"\\\"\" + name + \"\\\"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":138,"author":{"gitId":"zhongfu"},"content":"        map.put(\"phone\", phone \u003d\u003d null ? \"null\" : \"\\\"\" + phone + \"\\\"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":139,"author":{"gitId":"zhongfu"},"content":"        map.put(\"email\", email \u003d\u003d null ? \"null\" : \"\\\"\" + email + \"\\\"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":140,"author":{"gitId":"zhongfu"},"content":"        map.put(\"address\", address \u003d\u003d null ? \"null\" : \"\\\"\" + address + \"\\\"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":141,"author":{"gitId":"Spyobird"},"content":"        map.put(\"rate\", rate \u003d\u003d null ? \"null\" : \"{\\n  \\\"amount\\\" : \\\"\" + rate + \"\\\",\\n  \\\"duration\\\"\"","lastModifiedDate":"2022-03-29"},{"lineNumber":142,"author":{"gitId":"Spyobird"},"content":"                + \" : \\\"PT1H\\\"\\n}\");","lastModifiedDate":"2022-03-29"},{"lineNumber":143,"author":{"gitId":"zhongfu"},"content":"        map.put(\"tagged\", tags);","lastModifiedDate":"2022-03-26"},{"lineNumber":144,"author":{"gitId":"zhongfu"},"content":"        map.put(\"payments\", payments);","lastModifiedDate":"2022-03-31"},{"lineNumber":145,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":146,"author":{"gitId":"zhongfu"},"content":"        return TestUtil.serializeObject(map);","lastModifiedDate":"2022-03-31"},{"lineNumber":147,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-31"},{"lineNumber":148,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":149,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-31"},{"lineNumber":150,"author":{"gitId":"zhongfu"},"content":"     * Serializes a {@code Payment} object into a rudimentary JSON representation.","lastModifiedDate":"2022-03-31"},{"lineNumber":151,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-31"},{"lineNumber":152,"author":{"gitId":"zhongfu"},"content":"    public static String serializePayment(Payment pymt) {","lastModifiedDate":"2022-03-31"},{"lineNumber":153,"author":{"gitId":"zhongfu"},"content":"        return serializePayment(","lastModifiedDate":"2022-03-31"},{"lineNumber":154,"author":{"gitId":"zhongfu"},"content":"                pymt.isCompleted() ? \"COMPLETED\" : \"PENDING\",","lastModifiedDate":"2022-03-31"},{"lineNumber":155,"author":{"gitId":"zhongfu"},"content":"                pymt.getPersonId().toString(),","lastModifiedDate":"2022-03-31"},{"lineNumber":156,"author":{"gitId":"zhongfu"},"content":"                pymt.getJobId().toString(),","lastModifiedDate":"2022-03-31"},{"lineNumber":157,"author":{"gitId":"zhongfu"},"content":"                pymt.getAmount().toString());","lastModifiedDate":"2022-03-31"},{"lineNumber":158,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-31"},{"lineNumber":159,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":160,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-31"},{"lineNumber":161,"author":{"gitId":"zhongfu"},"content":"     * Creates a JSON representation of a {@code Payment} object using the given fields.","lastModifiedDate":"2022-03-31"},{"lineNumber":162,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-31"},{"lineNumber":163,"author":{"gitId":"zhongfu"},"content":"    public static String serializePayment(String state, String personId, String jobId, String amount) {","lastModifiedDate":"2022-03-31"},{"lineNumber":164,"author":{"gitId":"zhongfu"},"content":"        Map\u003cString, String\u003e map \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2022-03-31"},{"lineNumber":165,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-31"},{"lineNumber":166,"author":{"gitId":"zhongfu"},"content":"        map.put(\"state\", state \u003d\u003d null ? \"null\" : \"\\\"\" + state + \"\\\"\");","lastModifiedDate":"2022-03-31"},{"lineNumber":167,"author":{"gitId":"zhongfu"},"content":"        map.put(\"personId\", state \u003d\u003d null ? \"null\" : \"\\\"\" + personId + \"\\\"\");","lastModifiedDate":"2022-03-31"},{"lineNumber":168,"author":{"gitId":"zhongfu"},"content":"        map.put(\"jobId\", state \u003d\u003d null ? \"null\" : \"\\\"\" + jobId + \"\\\"\");","lastModifiedDate":"2022-03-31"},{"lineNumber":169,"author":{"gitId":"zhongfu"},"content":"        map.put(\"amount\", state \u003d\u003d null ? \"null\" : \"\\\"\" + amount + \"\\\"\");","lastModifiedDate":"2022-03-31"},{"lineNumber":170,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":171,"author":{"gitId":"zhongfu"},"content":"        return TestUtil.serializeObject(map);","lastModifiedDate":"2022-03-31"},{"lineNumber":172,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"zhongfu":110,"Spyobird":11,"-":52}},{"path":"src/test/java/peoplesoft/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":1,"-":71}},{"path":"src/test/java/peoplesoft/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import java.util.List;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import java.util.Map;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"zhongfu"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.util.JsonUtil;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.Model;","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":61,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"zhongfu"},"content":"     * Returns a JSON-serialized representation of the given object. Output is pretty-printed, but with","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"zhongfu"},"content":"     * carriage returns removed, unlike {@code JsonUtil.toJsonString()}. Handy for running tests with.","lastModifiedDate":"2022-03-19"},{"lineNumber":65,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"zhongfu"},"content":"     * @param \u003cT\u003e the type of the object to be serialized","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"zhongfu"},"content":"     * @param obj the object to be serialized","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"zhongfu"},"content":"     * @return the JSON-serialized object","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"zhongfu"},"content":"     * @throws JsonProcessingException if there was an error while serializing the object","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"zhongfu"},"content":"    public static \u003cT\u003e String toNormalizedJsonString(T obj) throws JsonProcessingException {","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"zhongfu"},"content":"        return JsonUtil.toJsonString(obj).replace(\"\\r\", \"\");","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":75,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"zhongfu"},"content":"     * Generates a rudimentary JSON serialization of an object with the key-value pairs in the given map. The","lastModifiedDate":"2022-03-19"},{"lineNumber":77,"author":{"gitId":"zhongfu"},"content":"     * keys are to be raw (non-escaped, non-quoted) strings, while the values are to be JSON representations","lastModifiedDate":"2022-03-19"},{"lineNumber":78,"author":{"gitId":"zhongfu"},"content":"     * of the actual value to be included.","lastModifiedDate":"2022-03-19"},{"lineNumber":79,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":80,"author":{"gitId":"zhongfu"},"content":"     * @param map the key-value pairs to be included in the object","lastModifiedDate":"2022-03-19"},{"lineNumber":81,"author":{"gitId":"zhongfu"},"content":"     * @return a JSON serialization of the given map","lastModifiedDate":"2022-03-19"},{"lineNumber":82,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":83,"author":{"gitId":"zhongfu"},"content":"    public static String serializeObject(Map\u003cString, String\u003e map) {","lastModifiedDate":"2022-03-19"},{"lineNumber":84,"author":{"gitId":"zhongfu"},"content":"        if (map.size() \u003d\u003d 0) {","lastModifiedDate":"2022-03-19"},{"lineNumber":85,"author":{"gitId":"zhongfu"},"content":"            return \"{}\";","lastModifiedDate":"2022-03-19"},{"lineNumber":86,"author":{"gitId":"zhongfu"},"content":"        } else {","lastModifiedDate":"2022-03-19"},{"lineNumber":87,"author":{"gitId":"zhongfu"},"content":"            return \"{\\n\"","lastModifiedDate":"2022-03-19"},{"lineNumber":88,"author":{"gitId":"zhongfu"},"content":"                + map.keySet().stream()","lastModifiedDate":"2022-03-19"},{"lineNumber":89,"author":{"gitId":"zhongfu"},"content":"                    .map((key) -\u003e \"  \\\"\" + key + \"\\\" : \"","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"zhongfu"},"content":"                        + String.join(\"\\n  \", map.get(key).split(\"\\n\")))","lastModifiedDate":"2022-03-19"},{"lineNumber":91,"author":{"gitId":"zhongfu"},"content":"                    .collect(Collectors.joining(\",\\n\"))","lastModifiedDate":"2022-03-19"},{"lineNumber":92,"author":{"gitId":"zhongfu"},"content":"                + \"\\n}\";","lastModifiedDate":"2022-03-19"},{"lineNumber":93,"author":{"gitId":"zhongfu"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":94,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":95,"author":{"gitId":"zhongfu"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":96,"author":{"gitId":"zhongfu"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":97,"author":{"gitId":"zhongfu"},"content":"     * Generates a rudimentary JSON serialization of a list as an JSON array. The elements of the list are to","lastModifiedDate":"2022-03-19"},{"lineNumber":98,"author":{"gitId":"zhongfu"},"content":"     * be the JSON representations of the actual value to be included.","lastModifiedDate":"2022-03-19"},{"lineNumber":99,"author":{"gitId":"zhongfu"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":100,"author":{"gitId":"zhongfu"},"content":"     * @param list a list of JSON representations of values","lastModifiedDate":"2022-03-19"},{"lineNumber":101,"author":{"gitId":"zhongfu"},"content":"     * @return a JSON serialization of an array of the given elements","lastModifiedDate":"2022-03-19"},{"lineNumber":102,"author":{"gitId":"zhongfu"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":103,"author":{"gitId":"zhongfu"},"content":"    public static String serializeList(List\u003cString\u003e list) {","lastModifiedDate":"2022-03-19"},{"lineNumber":104,"author":{"gitId":"zhongfu"},"content":"        return \"[ \"","lastModifiedDate":"2022-03-19"},{"lineNumber":105,"author":{"gitId":"zhongfu"},"content":"            + list.stream().collect(Collectors.joining(\", \"))","lastModifiedDate":"2022-03-19"},{"lineNumber":106,"author":{"gitId":"zhongfu"},"content":"            + (list.size() \u003e 0 ? \" ]\" : \"]\");","lastModifiedDate":"2022-03-19"},{"lineNumber":107,"author":{"gitId":"zhongfu"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhongfu":57,"-":51}},{"path":"src/test/java/peoplesoft/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.commons.core.index.Index;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"zhongfu":2,"-":10}},{"path":"src/test/java/peoplesoft/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.testutil;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":8,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-03-19"},{"lineNumber":11,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_RATE_AMY;","lastModifiedDate":"2022-03-29"},{"lineNumber":12,"author":{"gitId":"Spyobird"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_RATE_BOB;","lastModifiedDate":"2022-03-29"},{"lineNumber":13,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.AddressBook;","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.model.person.Person;","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"Spyobird"},"content":"            .withPhone(\"94351253\").withRate(30.2)","lastModifiedDate":"2022-03-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"Spyobird"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withRate(10.8)","lastModifiedDate":"2022-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRate(40).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRate(60)","lastModifiedDate":"2022-03-29"},{"lineNumber":40,"author":{"gitId":"Spyobird"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2022-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRate(108.6).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRate(42.7624).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRate(64.314159265).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRate(10).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"Spyobird"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRate(20.2).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"Spyobird"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRate(VALID_RATE_AMY)","lastModifiedDate":"2022-03-29"},{"lineNumber":57,"author":{"gitId":"Spyobird"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"Spyobird"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRate(VALID_RATE_BOB)","lastModifiedDate":"2022-03-29"},{"lineNumber":60,"author":{"gitId":"Spyobird"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"zhongfu":13,"Spyobird":16,"-":51}},{"path":"src/test/java/peoplesoft/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"zhongfu":1,"-":34}},{"path":"src/test/java/peoplesoft/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zhongfu"},"content":"package peoplesoft.ui;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"zhongfu"},"content":"import static peoplesoft.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"zhongfu"},"content":"import peoplesoft.MainApp;","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"zhongfu":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"\u003c?import peoplesoft.ui.TestFxmlObject?\u003e","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"zhongfu":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"zhongfu"},"content":"\u003cfx:root type\u003d\"peoplesoft.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"zhongfu":1,"-":5}}]
