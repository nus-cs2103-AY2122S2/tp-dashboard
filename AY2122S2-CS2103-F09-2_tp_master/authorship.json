[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S2-CS2103-F09-2/tp/actions)","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"_Find yourself having trouble managing all the important friendships in your university life?_","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"**Amigos** is here to help!","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"With **Amigos**, you can:","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"* Keep track of important details about your friends","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"* Maintain your friendships by keeping up-to-date logs about your friends, such as their likes/dislikes, aspirations and so on!","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"* Remember key events you are doing with friends","lastModifiedDate":"2022-02-25"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"Amigos is also _super fast_ to use, and optimized for keyboard input while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"For more information on how to get started, check out the **[Amigos User Guide](docs/UserGuide.md)**.","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"**Acknowledgements**: This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"limweiliang":15,"-":3}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at","lastModifiedDate":"2016-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html","lastModifiedDate":"2016-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":274,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":275,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":276,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":306,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":307,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":308,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":309,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":328,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":329,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":330,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":350,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":354,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":355,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":361,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":362,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":368,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":369,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":378,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":383,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":384,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":385,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":394,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":395,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":396,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":399,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":400,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanyjnaaman":1,"-":399}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"### Aryan Sarswat","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"\u003cimg src\u003d\"images/aryansarswat.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"[[github](https://github.com/AryanSarswat)]","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"[[portfolio](team/aryansarswat.md)]","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"* Role: Developer","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"* Responsibilities:","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"### Dione Goh","lastModifiedDate":"2022-02-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"\u003cimg src\u003d\"images/dionegoh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"[[github](http://github.com/dionegoh)]","lastModifiedDate":"2022-02-24"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"[[portfolio](team/dionegoh.md)]","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"* Role: Developer","lastModifiedDate":"2022-02-24"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"* Responsibilities: [to be discussed]","lastModifiedDate":"2022-02-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"### Lim Wei Liang","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"\u003cimg src\u003d\"images/limweiliang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"[[github](http://github.com/limweiliang)] [[portfolio](team/limweiliang.md)]","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"* Responsibilities: [To be discussed]","lastModifiedDate":"2022-02-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"### Naaman Tan","lastModifiedDate":"2022-02-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"\u003cimg src\u003d\"images/tanyjnaaman.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"[[github](http://github.com/tanyjnaaman)]","lastModifiedDate":"2022-02-26"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"[[portfolio](team/tanyjnaaman.md)]","lastModifiedDate":"2022-02-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"* Responsibilities:","lastModifiedDate":"2022-02-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dionegoh":6,"tanyjnaaman":5,"AryanSarswat":6,"-":30,"limweiliang":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"AryanSarswat"},"content":"* tech-savvy university students","lastModifiedDate":"2022-03-03"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"AryanSarswat"},"content":"* can type fast and has plenty of experience with CLI application","lastModifiedDate":"2022-03-03"},{"lineNumber":263,"author":{"gitId":"AryanSarswat"},"content":"* is often busy and struggles to manage important details about their relationships","lastModifiedDate":"2022-03-03"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":265,"author":{"gitId":"AryanSarswat"},"content":"**Value proposition**: The program will help busy university students to manage their friendships by keeping track of important details. An example of possible features include the tracking of birthdays, money owed, upcoming meetings etc. and providing relevant reminders, in addition to basic functionalities.","lastModifiedDate":"2022-02-26"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"| Priority | As a …​        | I want to …​                                                                            | So that I can…​                                                                                             |","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"AryanSarswat"},"content":"|----------|----------------|-----------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-02-26"},{"lineNumber":273,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | add new friends                                                                         | keep track of any new friends I make                                                                        |","lastModifiedDate":"2022-02-26"},{"lineNumber":274,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | remove friends I am no longer in contact with                                           | keep my friends list updated and remove irrelevant contacts                                                 |","lastModifiedDate":"2022-03-15"},{"lineNumber":275,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | view all details, descriptions and logs that I previously wrote about my friend         | do a quick recap of important details about my friend                                                       |","lastModifiedDate":"2022-03-15"},{"lineNumber":276,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | view all my friends                                                                     | ensure that the information I have added is saved and check all of my friends\u0027 details                      |","lastModifiedDate":"2022-03-15"},{"lineNumber":277,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | add events relating to my friends                                                       | keep track of any future events                                                                             |","lastModifiedDate":"2022-03-15"},{"lineNumber":278,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | remove an event                                                                         | cancel events previously added to keep my event list updated                                                |","lastModifiedDate":"2022-03-15"},{"lineNumber":279,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | review my events for the next day along with their relevant details                     | take note and be prepared for the next day                                                                  |","lastModifiedDate":"2022-02-26"},{"lineNumber":280,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | Forgetful user | keep track of things that my friend has recently talked about                           | appear invested in my relationship and not forget important things about my friends                         |","lastModifiedDate":"2022-02-26"},{"lineNumber":281,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | Forgetful user | add descriptions and details about my friends that I would like to remember             | not stress about remember these details for the next time we meet                                           |","lastModifiedDate":"2022-02-26"},{"lineNumber":282,"author":{"gitId":"dionegoh"},"content":"| `* * *`  | User           | remove a previous log recorded about a friend                                           | clear irrelevant details about my friend                                                                    |","lastModifiedDate":"2022-03-15"},{"lineNumber":283,"author":{"gitId":"dionegoh"},"content":"| `* *`    | User           | update details about friends                                                            | keep my friends list up-to-date                                                                             |","lastModifiedDate":"2022-03-15"},{"lineNumber":284,"author":{"gitId":"dionegoh"},"content":"| `* *`    | User           | update details of events                                                                | correct outdated or wrong information entered about any event                                               |","lastModifiedDate":"2022-03-15"},{"lineNumber":285,"author":{"gitId":"dionegoh"},"content":"| `* *`    | User           | update previous logs recorded about a friend                                            | ensure that information about my friend is up-to-date and accurate                                          |","lastModifiedDate":"2022-03-15"},{"lineNumber":286,"author":{"gitId":"dionegoh"},"content":"| `* *`    | User           | tag friends under different categories                                                  | better classify and organise my friend circle                                                               |","lastModifiedDate":"2022-03-15"},{"lineNumber":287,"author":{"gitId":"dionegoh"},"content":"| `* *`    | User           | use a name search to find friends                                                       | view the friend I want to check out efficiently instead of scrolling through the list of friends            |","lastModifiedDate":"2022-03-15"},{"lineNumber":288,"author":{"gitId":"dionegoh"},"content":"| `* *`    | New User       | access a help page                                                                      | learn how to use certain commands I am unfamiliar with                                                      |","lastModifiedDate":"2022-03-17"},{"lineNumber":289,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | New User       | undo a command                                                                          | revert back accidental commands                                                                             | ","lastModifiedDate":"2022-02-26"},{"lineNumber":290,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | New User       | reset the application to its default state                                              | properly experiment with the application before using it properly                                           |","lastModifiedDate":"2022-02-26"},{"lineNumber":291,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Forgetful User | use a keyword search to find a note written about someone                               | find out who I spoke to about a certain issue                                                               |","lastModifiedDate":"2022-02-26"},{"lineNumber":292,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Amateur User   | shorten command lengths                                                                 | increase my efficiency while using this application                                                         |","lastModifiedDate":"2022-02-26"},{"lineNumber":293,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Seasoned User  | see which of my friends I am closest to and which of them I have not visited in a while | reflect more about how I spend my time with my friend and maybe catch up with ones I have not met in awhile | ","lastModifiedDate":"2022-02-26"},{"lineNumber":294,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Seasoned User  | chain commands                                                                          | reduce the number of commands I need to type thereby increasing efficiency                                  |","lastModifiedDate":"2022-02-26"},{"lineNumber":295,"author":{"gitId":"AryanSarswat"},"content":"| `*`      | New User       | know which features of the application I am not using as often                          | fully utilise the application to its maximum capability                                                     | ","lastModifiedDate":"2022-02-26"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"dionegoh"},"content":"(For all use cases below, the **System** is the `Amigos` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-02-24"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"dionegoh"},"content":"**Use case: F01 - Add a friend**","lastModifiedDate":"2022-02-28"},{"lineNumber":302,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":303,"author":{"gitId":"dionegoh"},"content":"**Guarantees** ","lastModifiedDate":"2022-02-28"},{"lineNumber":304,"author":{"gitId":"dionegoh"},"content":"* A new friend will be added into Amigos only if there does not already exist a friend with the same name in it.","lastModifiedDate":"2022-02-28"},{"lineNumber":305,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":306,"author":{"gitId":"dionegoh"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":307,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":308,"author":{"gitId":"dionegoh"},"content":"1. User requests to add a friend.","lastModifiedDate":"2022-02-28"},{"lineNumber":309,"author":{"gitId":"dionegoh"},"content":"2. Amigos proceeds to add the friend.","lastModifiedDate":"2022-02-28"},{"lineNumber":310,"author":{"gitId":"dionegoh"},"content":"3. Amigos clears the user input.","lastModifiedDate":"2022-02-28"},{"lineNumber":311,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":312,"author":{"gitId":"dionegoh"},"content":"   Use case ends. ","lastModifiedDate":"2022-02-28"},{"lineNumber":313,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":314,"author":{"gitId":"dionegoh"},"content":"**Extensions**","lastModifiedDate":"2022-02-28"},{"lineNumber":315,"author":{"gitId":"dionegoh"},"content":"* 1a. A friend with the same name already exists in Amigos.","lastModifiedDate":"2022-02-28"},{"lineNumber":316,"author":{"gitId":"dionegoh"},"content":"    * 1a1. Amigos displays the existing friend with the same name and the corresponding error message.","lastModifiedDate":"2022-02-28"},{"lineNumber":317,"author":{"gitId":"dionegoh"},"content":"    * 1a2. Amigos clears the user input.","lastModifiedDate":"2022-02-28"},{"lineNumber":318,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":319,"author":{"gitId":"dionegoh"},"content":"    Use case ends","lastModifiedDate":"2022-02-28"},{"lineNumber":320,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":321,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":322,"author":{"gitId":"dionegoh"},"content":"**Use case: F02 - Edit a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":323,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":324,"author":{"gitId":"dionegoh"},"content":"**Guarantees**","lastModifiedDate":"2022-02-28"},{"lineNumber":325,"author":{"gitId":"dionegoh"},"content":"* The field(s) of an existing friend will be updated only if the user input is valid.","lastModifiedDate":"2022-03-03"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"dionegoh"},"content":"1.  User requests to list friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":330,"author":{"gitId":"dionegoh"},"content":"2.  Amigos shows a list of friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":331,"author":{"gitId":"dionegoh"},"content":"3.  User requests to edit details of a specific friend in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":332,"author":{"gitId":"dionegoh"},"content":"4.  Amigos edits the details of the friend accordingly and clears user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"dionegoh"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-24"},{"lineNumber":340,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":341,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":342,"author":{"gitId":"dionegoh"},"content":"* 3a. No name is entered by the user.","lastModifiedDate":"2022-02-24"},{"lineNumber":343,"author":{"gitId":"dionegoh"},"content":"    * 3a1. Amigos requests user to enter a name.","lastModifiedDate":"2022-02-28"},{"lineNumber":344,"author":{"gitId":"dionegoh"},"content":"    * 3a2. User reenters the command along with a valid name and other relevant fields (at least one) to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":347,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"dionegoh"},"content":"* 3b. Amigos finds no contact with the given name.","lastModifiedDate":"2022-02-28"},{"lineNumber":350,"author":{"gitId":"dionegoh"},"content":"    * 3b1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-28"},{"lineNumber":351,"author":{"gitId":"dionegoh"},"content":"    * 3b2. User reenters the command along with a valid name and other relevant fields (at least one) to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":354,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":355,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":356,"author":{"gitId":"dionegoh"},"content":"* 3c. A valid name is entered by user but no fields to edit are given.","lastModifiedDate":"2022-03-03"},{"lineNumber":357,"author":{"gitId":"dionegoh"},"content":"    * 3c1. Amigos requests user to enter at least one field to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":358,"author":{"gitId":"dionegoh"},"content":"    * 3c2. User reenters command and name, along with at least one field to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":361,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":362,"author":{"gitId":"dionegoh"},"content":"**Use case: F03 - Delete a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":364,"author":{"gitId":"dionegoh"},"content":"**Guarantees** ","lastModifiedDate":"2022-02-28"},{"lineNumber":365,"author":{"gitId":"dionegoh"},"content":"* An existing friend in Amigos will be deleted only if the name input matches that of an existing friend in Amigos.","lastModifiedDate":"2022-03-03"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"dionegoh"},"content":"1.  User requests to list friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":370,"author":{"gitId":"dionegoh"},"content":"2.  Amigos shows a list of friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":371,"author":{"gitId":"dionegoh"},"content":"3.  User requests to delete a specific friend in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":372,"author":{"gitId":"dionegoh"},"content":"4.  Amigos deletes the friend and clears the user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"dionegoh"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-24"},{"lineNumber":380,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":381,"author":{"gitId":"dionegoh"},"content":"* 2b. User requests to delete all friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":382,"author":{"gitId":"dionegoh"},"content":"   * 2b1. Amigos deletes all friends and clears the user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":383,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"dionegoh"},"content":"* 3a. No name is entered by the user. ","lastModifiedDate":"2022-02-24"},{"lineNumber":388,"author":{"gitId":"dionegoh"},"content":"   * 3a1. Amigos requests user to enter a name.","lastModifiedDate":"2022-02-28"},{"lineNumber":389,"author":{"gitId":"dionegoh"},"content":"   * 3a2. User reenters the command along with a valid name.","lastModifiedDate":"2022-03-03"},{"lineNumber":390,"author":{"gitId":"dionegoh"},"content":"     ","lastModifiedDate":"2022-02-24"},{"lineNumber":391,"author":{"gitId":"dionegoh"},"content":"   Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b again. ","lastModifiedDate":"2022-03-03"},{"lineNumber":392,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":393,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":394,"author":{"gitId":"dionegoh"},"content":"* 3b. Amigos finds no contact with the given name.","lastModifiedDate":"2022-02-28"},{"lineNumber":395,"author":{"gitId":"dionegoh"},"content":"    * 3b1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-28"},{"lineNumber":396,"author":{"gitId":"dionegoh"},"content":"    * 3b2. User reenters the command along with a valid name. ","lastModifiedDate":"2022-03-03"},{"lineNumber":397,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":398,"author":{"gitId":"dionegoh"},"content":"    Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b again.","lastModifiedDate":"2022-03-03"},{"lineNumber":399,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"AryanSarswat"},"content":"**Use case: F04 - Checking details of a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":402,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":403,"author":{"gitId":"AryanSarswat"},"content":"**MSS**","lastModifiedDate":"2022-03-03"},{"lineNumber":404,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":405,"author":{"gitId":"AryanSarswat"},"content":"1. User requests to see all friends in Amigos.","lastModifiedDate":"2022-03-03"},{"lineNumber":406,"author":{"gitId":"AryanSarswat"},"content":"2. Amigos switches the GUI to the friends tab and shows all friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":407,"author":{"gitId":"AryanSarswat"},"content":"4. User requests to view full details of a particular friend.","lastModifiedDate":"2022-03-03"},{"lineNumber":408,"author":{"gitId":"AryanSarswat"},"content":"5. Amigos displays a page containing the full details of that particular friend accompanied by some logs.","lastModifiedDate":"2022-03-03"},{"lineNumber":409,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":410,"author":{"gitId":"AryanSarswat"},"content":"Use case ends","lastModifiedDate":"2022-03-03"},{"lineNumber":411,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":412,"author":{"gitId":"AryanSarswat"},"content":"**Extensions**","lastModifiedDate":"2022-03-03"},{"lineNumber":413,"author":{"gitId":"AryanSarswat"},"content":"* 3a. There are no existing friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":414,"author":{"gitId":"AryanSarswat"},"content":"    * 3a.1 Amigos displays an empty interface with the message “No friends yet”.","lastModifiedDate":"2022-03-03"},{"lineNumber":415,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":416,"author":{"gitId":"AryanSarswat"},"content":"      Use case ends","lastModifiedDate":"2022-03-03"},{"lineNumber":417,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":418,"author":{"gitId":"AryanSarswat"},"content":"* 4a. User wants to see all the logs of a person","lastModifiedDate":"2022-03-03"},{"lineNumber":419,"author":{"gitId":"AryanSarswat"},"content":"    * 4a.1 Amigos displays a page containing the full details of that friend accompanied by all the logs","lastModifiedDate":"2022-03-03"},{"lineNumber":420,"author":{"gitId":"AryanSarswat"},"content":"      ","lastModifiedDate":"2022-03-03"},{"lineNumber":421,"author":{"gitId":"AryanSarswat"},"content":"      Use Case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":422,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":423,"author":{"gitId":"AryanSarswat"},"content":"* 4b. Amigos detects an issue in the input (e.g. incorrect input format, cannot find friend in the system)","lastModifiedDate":"2022-03-03"},{"lineNumber":424,"author":{"gitId":"AryanSarswat"},"content":"    * 4b.1 Amigos displays the error feedback to the user.","lastModifiedDate":"2022-03-03"},{"lineNumber":425,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":426,"author":{"gitId":"AryanSarswat"},"content":"      Use case resumes at 4","lastModifiedDate":"2022-03-03"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L01 - Adding a new log to a friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":429,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":430,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":431,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, log will be added to friend details and saved in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":436,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to add a new log to a specific friend. ","lastModifiedDate":"2022-03-01"},{"lineNumber":437,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command ","lastModifiedDate":"2022-02-26"},{"lineNumber":438,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos displays the friend and the specific log, and clears the input","lastModifiedDate":"2022-03-01"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":445,"author":{"gitId":"tanyjnaaman"},"content":"  * 2a1. Amigos clears the input, and requests user to check input and reenter.","lastModifiedDate":"2022-03-01"},{"lineNumber":446,"author":{"gitId":"tanyjnaaman"},"content":"  * 2a2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":447,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":448,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":449,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":450,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":451,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that user has requested for a pop-up window in the command.","lastModifiedDate":"2022-03-01"},{"lineNumber":452,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos creates a separate window, allowing for long-form text to be keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":453,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in long form text into pop-up window, with first line as title.","lastModifiedDate":"2022-02-26"},{"lineNumber":454,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b3. User confirms entry, closing the window.","lastModifiedDate":"2022-02-26"},{"lineNumber":455,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":456,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":457,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":458,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":459,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that an invalid format of the command has been keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":460,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d1. Amigos clears the input and prompts the user with potential corrections, and requests for input.","lastModifiedDate":"2022-03-01"},{"lineNumber":461,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":462,"author":{"gitId":"tanyjnaaman"},"content":"  ","lastModifiedDate":"2022-02-26"},{"lineNumber":463,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":464,"author":{"gitId":"tanyjnaaman"},"content":"  ","lastModifiedDate":"2022-02-26"},{"lineNumber":465,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":466,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L02 - Editing a log of a single friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":467,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":468,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":469,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, specified log will be overwritten and saved in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":470,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":471,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":472,"author":{"gitId":"tanyjnaaman"},"content":"**MSS**","lastModifiedDate":"2022-02-26"},{"lineNumber":473,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":474,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":475,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to edit a log in a specific friend. ","lastModifiedDate":"2022-03-01"},{"lineNumber":476,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command. ","lastModifiedDate":"2022-02-26"},{"lineNumber":477,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos clears the input and displays the friend and the specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"tanyjnaaman"},"content":"**Extensions**","lastModifiedDate":"2022-02-26"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":485,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-26"},{"lineNumber":486,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a2. User corrects command (if desired), and keys in edited command.","lastModifiedDate":"2022-02-26"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":489,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":490,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":491,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that the user has not requested to edit a specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":492,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos clears the input and provides a list of all logs (their titles) and an accompanying index, asking the user to key in the index.","lastModifiedDate":"2022-03-01"},{"lineNumber":493,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in the index.","lastModifiedDate":"2022-02-26"},{"lineNumber":494,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":495,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":496,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":497,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":498,"author":{"gitId":"tanyjnaaman"},"content":"* 2c. Amigos detects that an invalid format of the command has been keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":499,"author":{"gitId":"tanyjnaaman"},"content":"    * 2c1. Amigos clears the input and prompts the user with potential corrections, and requests for input.","lastModifiedDate":"2022-03-01"},{"lineNumber":500,"author":{"gitId":"tanyjnaaman"},"content":"    * 2c2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":501,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":502,"author":{"gitId":"tanyjnaaman"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":503,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":504,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":505,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":506,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that user has requested for a pop-up window in the command.","lastModifiedDate":"2022-03-01"},{"lineNumber":507,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d1. Amigos creates a separate window, allowing for long-form text to be keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":508,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d2. User keys in long form text into pop-up window in an appropriate format.","lastModifiedDate":"2022-03-01"},{"lineNumber":509,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d3. User confirms entry, closing the window.","lastModifiedDate":"2022-02-26"},{"lineNumber":510,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":511,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":512,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":513,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":514,"author":{"gitId":"tanyjnaaman"},"content":"* 2e. Amigos detects that the requested friend has no logs to be edited.","lastModifiedDate":"2022-03-01"},{"lineNumber":515,"author":{"gitId":"tanyjnaaman"},"content":"    * 2e1. Amigos clears the input and notifies the user that this friend has no logs to be edited.","lastModifiedDate":"2022-03-01"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":517,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":520,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L03 - Deleting a log/logs from a friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":522,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":523,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, log will be deleted from friend and reflected in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":525,"author":{"gitId":"tanyjnaaman"},"content":"**MSS**","lastModifiedDate":"2022-02-26"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":527,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to delete a log/logs in a specific friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":528,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command.","lastModifiedDate":"2022-02-26"},{"lineNumber":529,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos clears the input and provides feedback of deletion success.","lastModifiedDate":"2022-03-01"},{"lineNumber":530,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":531,"author":{"gitId":"tanyjnaaman"},"content":"   Use case ends.","lastModifiedDate":"2022-02-26"},{"lineNumber":532,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":533,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":534,"author":{"gitId":"tanyjnaaman"},"content":"**Extensions**","lastModifiedDate":"2022-02-26"},{"lineNumber":535,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":536,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":537,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-26"},{"lineNumber":538,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a2. User corrects command (if desired), and keys in edited command.","lastModifiedDate":"2022-02-26"},{"lineNumber":539,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":540,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":541,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":542,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":543,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that the user has not requested to delete a specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":544,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos clears the input and lists all logs of the friend with an index.","lastModifiedDate":"2022-03-01"},{"lineNumber":545,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in index, and deletes the log.","lastModifiedDate":"2022-02-26"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":547,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":548,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":549,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":550,"author":{"gitId":"tanyjnaaman"},"content":"* 2c. Amigos detects User has requested to delete all logs of all friends.","lastModifiedDate":"2022-03-01"},{"lineNumber":551,"author":{"gitId":"tanyjnaaman"},"content":"  * 2c1. All logs in all friend are deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":552,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":553,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":554,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":555,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":556,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that User has requested to delete all logs of a friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":557,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d1. Amigos deletes all logs of the friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":558,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":559,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":560,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":561,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":562,"author":{"gitId":"tanyjnaaman"},"content":"* 2e. Amigos detects an invalid combination of arguments.","lastModifiedDate":"2022-03-01"},{"lineNumber":563,"author":{"gitId":"tanyjnaaman"},"content":"  * 2e1. Amigos clears the input and requests the user to check input and reenter if necessary.","lastModifiedDate":"2022-03-01"},{"lineNumber":564,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":565,"author":{"gitId":"tanyjnaaman"},"content":"* 2f. Amigos detects that the requested friend has no logs.","lastModifiedDate":"2022-03-01"},{"lineNumber":566,"author":{"gitId":"tanyjnaaman"},"content":"    * 2f1. Amigos clears the input and notifies the user that this friend has no logs to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"tanyjnaaman"},"content":"  Use case ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"limweiliang"},"content":"**Use Case: E01 - Adding a new event**","lastModifiedDate":"2022-03-03"},{"lineNumber":571,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":572,"author":{"gitId":"limweiliang"},"content":"**Preconditions**: User can remember the event details they want. (e.g. names of friends to add)","lastModifiedDate":"2022-03-02"},{"lineNumber":573,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":574,"author":{"gitId":"limweiliang"},"content":"**Guarantees**: A new event will be created in Amigos, as long as the command was executed successfully.","lastModifiedDate":"2022-03-02"},{"lineNumber":575,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":576,"author":{"gitId":"limweiliang"},"content":"**MSS**:","lastModifiedDate":"2022-03-02"},{"lineNumber":577,"author":{"gitId":"limweiliang"},"content":"1. User chooses to add a new event, entering the details accordingly.","lastModifiedDate":"2022-03-02"},{"lineNumber":578,"author":{"gitId":"limweiliang"},"content":"2. System applies the change and reflects the new event details to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":579,"author":{"gitId":"limweiliang"},"content":"3. System clears the user input.","lastModifiedDate":"2022-03-02"},{"lineNumber":580,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":581,"author":{"gitId":"limweiliang"},"content":"   Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":582,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":583,"author":{"gitId":"limweiliang"},"content":"**Extensions**:","lastModifiedDate":"2022-03-02"},{"lineNumber":584,"author":{"gitId":"limweiliang"},"content":"* 1a. System detects an issue in the given input. (e.g. missing/wrong flag, wrong formatting)","lastModifiedDate":"2022-03-02"},{"lineNumber":585,"author":{"gitId":"limweiliang"},"content":"    * 1a1. System displays the error feedback to the user. ","lastModifiedDate":"2022-03-02"},{"lineNumber":586,"author":{"gitId":"limweiliang"},"content":"    * 1a2. User edits and resends the input to the system. ","lastModifiedDate":"2022-03-02"},{"lineNumber":587,"author":{"gitId":"limweiliang"},"content":"    ","lastModifiedDate":"2022-03-02"},{"lineNumber":588,"author":{"gitId":"limweiliang"},"content":"  Use case resumes at 1 but may reach 1a again if the input remains erroneous.","lastModifiedDate":"2022-03-02"},{"lineNumber":589,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":590,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":591,"author":{"gitId":"limweiliang"},"content":"* 1b. System detects that an event with the same details already exists. ","lastModifiedDate":"2022-03-02"},{"lineNumber":592,"author":{"gitId":"limweiliang"},"content":"  * 1b1. System displays the duplicate event to the user and the corresponding error message. ","lastModifiedDate":"2022-03-02"},{"lineNumber":593,"author":{"gitId":"limweiliang"},"content":"  * 1b2. User cancels the operation.","lastModifiedDate":"2022-03-02"},{"lineNumber":594,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":595,"author":{"gitId":"limweiliang"},"content":"  Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":596,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":597,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":598,"author":{"gitId":"limweiliang"},"content":"* 3a. User realises they made a mistake in the event details. ","lastModifiedDate":"2022-03-02"},{"lineNumber":599,"author":{"gitId":"limweiliang"},"content":"  * 3a1. User \u003cu\u003eedits the event details (E02)\u003c/u\u003e.","lastModifiedDate":"2022-03-02"},{"lineNumber":600,"author":{"gitId":"limweiliang"},"content":"  ","lastModifiedDate":"2022-03-02"},{"lineNumber":601,"author":{"gitId":"limweiliang"},"content":"  Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":602,"author":{"gitId":"limweiliang"},"content":"       ","lastModifiedDate":"2022-03-02"},{"lineNumber":603,"author":{"gitId":"limweiliang"},"content":"**Use Case: E02 - Editing an existing event**","lastModifiedDate":"2022-03-03"},{"lineNumber":604,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":605,"author":{"gitId":"limweiliang"},"content":"**Preconditions**: The event has already been created, and the user can remember what they want to change the event details to.","lastModifiedDate":"2022-03-02"},{"lineNumber":606,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":607,"author":{"gitId":"limweiliang"},"content":"**Guarantees**: An existing event will be edited, as long as the command is executed successfully.","lastModifiedDate":"2022-03-02"},{"lineNumber":608,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":609,"author":{"gitId":"limweiliang"},"content":"**MSS**:","lastModifiedDate":"2022-03-02"},{"lineNumber":610,"author":{"gitId":"limweiliang"},"content":"   1. User chooses to search for the details of a specific event.","lastModifiedDate":"2022-03-02"},{"lineNumber":611,"author":{"gitId":"limweiliang"},"content":"   2. System shows the search results to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":612,"author":{"gitId":"limweiliang"},"content":"   3. User edits the details of an existing event through the system input.","lastModifiedDate":"2022-03-02"},{"lineNumber":613,"author":{"gitId":"limweiliang"},"content":"   4. System applies the change and reflects the updated event details to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":614,"author":{"gitId":"limweiliang"},"content":"   5. System clears the user input.","lastModifiedDate":"2022-03-02"},{"lineNumber":615,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":616,"author":{"gitId":"limweiliang"},"content":"      Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":617,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":618,"author":{"gitId":"limweiliang"},"content":"**Extensions:**","lastModifiedDate":"2022-03-02"},{"lineNumber":619,"author":{"gitId":"limweiliang"},"content":"   * 3a. System detects an issue in the given input (e.g. missing/wrong flag, wrong formatting).","lastModifiedDate":"2022-03-02"},{"lineNumber":620,"author":{"gitId":"limweiliang"},"content":"     * 3a1. System displays the error feedback to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":621,"author":{"gitId":"limweiliang"},"content":"     * 3a2. User resends the command to the system.","lastModifiedDate":"2022-03-02"},{"lineNumber":622,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":623,"author":{"gitId":"limweiliang"},"content":"     Use case resumes at 3 but may reach 3a again if the command remains erroneous.","lastModifiedDate":"2022-03-02"},{"lineNumber":624,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":625,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":626,"author":{"gitId":"limweiliang"},"content":"   * 3b. System detects that an event with the same details already exists. ","lastModifiedDate":"2022-03-02"},{"lineNumber":627,"author":{"gitId":"limweiliang"},"content":"     * 3b1. System displays the duplicate event to the user and the corresponding error message. ","lastModifiedDate":"2022-03-02"},{"lineNumber":628,"author":{"gitId":"limweiliang"},"content":"     * 3b2. User cancels the operation.","lastModifiedDate":"2022-03-02"},{"lineNumber":629,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":630,"author":{"gitId":"limweiliang"},"content":"     Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"limweiliang"},"content":"**Use case: E03 - Checking all events**","lastModifiedDate":"2022-03-03"},{"lineNumber":633,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":634,"author":{"gitId":"AryanSarswat"},"content":"**Guarantees**","lastModifiedDate":"2022-03-03"},{"lineNumber":635,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":636,"author":{"gitId":"AryanSarswat"},"content":"* If any events exist within the system they will be displayed.","lastModifiedDate":"2022-03-03"},{"lineNumber":637,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":638,"author":{"gitId":"AryanSarswat"},"content":"**MSS**","lastModifiedDate":"2022-03-03"},{"lineNumber":639,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":640,"author":{"gitId":"AryanSarswat"},"content":"1. User requests to show all events","lastModifiedDate":"2022-03-03"},{"lineNumber":641,"author":{"gitId":"AryanSarswat"},"content":"2. Amigos switches the GUI to the events tab and displays all the stored events.","lastModifiedDate":"2022-03-17"},{"lineNumber":642,"author":{"gitId":"AryanSarswat"},"content":"    ","lastModifiedDate":"2022-03-03"},{"lineNumber":643,"author":{"gitId":"AryanSarswat"},"content":"   Use case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":644,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":645,"author":{"gitId":"AryanSarswat"},"content":"**Extensions**","lastModifiedDate":"2022-03-03"},{"lineNumber":646,"author":{"gitId":"AryanSarswat"},"content":"* 2a. There are no events to show.","lastModifiedDate":"2022-03-03"},{"lineNumber":647,"author":{"gitId":"AryanSarswat"},"content":"    * 2a1. Amigos displays an empty interface with no entries and the message “No events”.","lastModifiedDate":"2022-03-17"},{"lineNumber":648,"author":{"gitId":"AryanSarswat"},"content":"    ","lastModifiedDate":"2022-03-03"},{"lineNumber":649,"author":{"gitId":"AryanSarswat"},"content":"    Use case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":653,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"AryanSarswat"},"content":"2. Should be able to hold up to 200 friends with up to 100 events/logs per person without a noticeable sluggishness in performance for typical usage (time taken to process any one command is 1 second at most).","lastModifiedDate":"2022-03-03"},{"lineNumber":655,"author":{"gitId":"AryanSarswat"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish all the basic tasks faster using commands than using the mouse.","lastModifiedDate":"2022-03-17"},{"lineNumber":656,"author":{"gitId":"AryanSarswat"},"content":"4. The project only supports managing of the user friendships and not other types of relationships.","lastModifiedDate":"2022-03-03"},{"lineNumber":657,"author":{"gitId":"AryanSarswat"},"content":"5. The application should work with different screen sizes, resolutions and window sizes (minimum resolution is 600x450).","lastModifiedDate":"2022-03-17"},{"lineNumber":658,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":659,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"AryanSarswat"},"content":"* **Log**: Details of interaction between user and friend","lastModifiedDate":"2022-02-26"},{"lineNumber":663,"author":{"gitId":"AryanSarswat"},"content":"* **Event**: Upcoming meeting/ date of significance for a friend","lastModifiedDate":"2022-02-26"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":668,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":671,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":676,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":677,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":679,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":680,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":682,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":683,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":684,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":685,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":686,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":687,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":688,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":689,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":690,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":691,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":692,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":693,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":695,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":700,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":701,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":702,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dionegoh":85,"tanyjnaaman":118,"AryanSarswat":65,"-":386,"limweiliang":62}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep track of important details. It is optimized for use via a Command Line interface while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"# Quick start","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"2. Download the latest `amigos.jar` from [here](https://github.com/AY2122S2-CS2103-F09-2/tp/releases/tag/v1.1).","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your application.","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"5. Type the command in the command box and press Enter to execute it. e.g:","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"   * **`showfriends`** : Lists all friends.","lastModifiedDate":"2022-03-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"# Features","lastModifiedDate":"2022-02-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"  e.g. in `addfriend n/NAME`, `NAME` is a parameter which can be used as `addfriend n/John Doe`.","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `showfriends`, `showevents` and `exit`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"  e.g. if the command specifies `showfriends 123`, it will be interpreted as `showfriends`.","lastModifiedDate":"2022-03-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"* Arguments connected by a `?` are exclusively-or - i.e. only one or the other can be provided. ","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"  e.g. in `addlog INDEX ? n/NAME`, either `INDEX` or `NAME` must be provided, but not both.","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"## Friend Management","lastModifiedDate":"2022-03-04"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"Amigos is designed to help you keep track of the friends in your life.","lastModifiedDate":"2022-03-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"### Adding a friend: `addfriend`","lastModifiedDate":"2022-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"Adds a new friend to Amigos. A friend has:","lastModifiedDate":"2022-03-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"**Format**: `addfriend n/NAME  [p/PHONE_NUMBER] [e/EMAIL]  [a/ADDRESS] [d/DESCRIPTION] [t/TAG]…`","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"* Note that `NAME` field is minimally compulsory. `p/`, `em/`, `a/` and `d/` `t/` flags and their arguments are optional.","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"* Note that there can be no duplicate friends having the same name.","lastModifiedDate":"2022-02-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"* `addfriend n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Physics Major, Sarah’s friend. Met at Freshman Dinner.`","lastModifiedDate":"2022-02-23"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"* `addfriend n/John Doe t/Friend t/Banker`","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"### Editing a friend : `editfriend`","lastModifiedDate":"2022-03-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"Edits an existing friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"**Format**: `editfriend cn/CURRENT_NAME [nn/NEW_NAME]  [np/NEW_PHONE_NUMBER] [ne/NEW_EMAIL] [na/NEW_ADDRESS] [nd/NEW_DESCRIPTION] [t/TAG]…`","lastModifiedDate":"2022-03-17"},{"lineNumber":80,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"* Edits an existing friend in Amigos. Field `CURRENT_NAME` is compulsory to identify the existing friend.","lastModifiedDate":"2022-03-04"},{"lineNumber":82,"author":{"gitId":"dionegoh"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2022-03-03"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"* Existing values will be overwritten to the input values.","lastModifiedDate":"2022-03-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"* `editfriend cn/John Doe na/John street, block 456, #01-01 ne/johndoe@example.com` edits the address","lastModifiedDate":"2022-03-03"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"  and email of John Doe to be `John street, block 456, #01-01` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-03-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"### Deleting a friend : `deletefriend`","lastModifiedDate":"2022-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"Deletes a friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"**Format**: `deletefriend n/[NAME]`","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"* `NAME` field must be provided unless all friends are being deleted then just the -a flag is needed.","lastModifiedDate":"2022-03-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"dionegoh"},"content":"* `deletefriend n/John Doe`","lastModifiedDate":"2022-02-23"},{"lineNumber":101,"author":{"gitId":"dionegoh"},"content":"* `deletefriend -a`","lastModifiedDate":"2022-02-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"### Show a specific friend: `showfriend`","lastModifiedDate":"2022-03-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"Shows page containing the full details related to an existing friend in Amigos. By default, only the latest 10 logs are displayed in this page.","lastModifiedDate":"2022-03-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"**Format**: `showfriend n/NAME -alllogs`","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"* NAME field **must** be provided.","lastModifiedDate":"2022-03-03"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"* If the `-alllogs` flag is provided all the logs contained in that person will be displayed instead of the default 10 logs.","lastModifiedDate":"2022-03-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"* `showfriend n/John Doe` Will open up the page containing full details related to John Doe - his name, address, phone number, email, description, logs, and upcoming events with him.","lastModifiedDate":"2022-03-03"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"* `showfriend n/John Doe -alllogs` Will do the same as above except every single log will be displayed","lastModifiedDate":"2022-03-03"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":117,"author":{"gitId":"dionegoh"},"content":"### Show all friends : `showfriends`","lastModifiedDate":"2022-03-03"},{"lineNumber":118,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":119,"author":{"gitId":"AryanSarswat"},"content":"Shows all friends in Amigos. Switches GUI to the friends tab.","lastModifiedDate":"2022-03-04"},{"lineNumber":120,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"**Format**: `showfriends`","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":123,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"## Logs management","lastModifiedDate":"2022-03-03"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"Amigos provides functionality to manage logs, which are essentially detailed notes about a specific friend.","lastModifiedDate":"2022-03-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"### Adding a log: `addlog`","lastModifiedDate":"2022-02-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"Adds a log to an existing friend at the specified `INDEX` in Amigos.","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"The `INDEX` refers to the index number shown in the displayed person\u0027s list.","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"**Format**: `addlog INDEX ? n/NAME ttl/[TITLE] d/[DESCRIPTION]`","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"* Exactly one of `INDEX` or the `NAME` fields is compulsory.","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"* If the `TITLE` argument is provided, then the `DESCRIPTON` argument is optional.","lastModifiedDate":"2022-02-26"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"* If neither `TITLE` nor `DESCRIPTION` arguments are provided, then a GUI","lastModifiedDate":"2022-02-26"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"  pop up will prompt the user to key in the title and longer-form text as the description.","lastModifiedDate":"2022-02-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"* `addlog 1 ttl/has a pet named poki`","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"* `addlog John ttl/recommended movies d/the martian, interstellar, three idiots`","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"### Editing a log: `editlog`","lastModifiedDate":"2022-02-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"AryanSarswat"},"content":"Edits an existing log of an existing friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"limweiliang"},"content":"**Format**: `editlog n/[NAME] id/[LOG_INDEX] nt/[NEW_TITLE] nd/[NEW_DESCRIPTION]`","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"* The `NAME` field is compulsory.","lastModifiedDate":"2022-02-26"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"* If `LOG_INDEX` is not provided, then all logs, each with an accompanying index, will allow a user to","lastModifiedDate":"2022-02-26"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"  choose which log to apply the changes to.","lastModifiedDate":"2022-02-26"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"* At least one of the `NEW_TITLE` or `NEW_DESCRIPTION` arguments must be provided.","lastModifiedDate":"2022-02-26"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"  Both will directly overwrite the current values.","lastModifiedDate":"2022-02-26"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"* If neither `NEW_TITLE` nor `NEW_DESCRIPTION` arguments are provided, then a GUI","lastModifiedDate":"2022-02-26"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"  pop up will prompt the user to key in the title and longer-form text as the description.","lastModifiedDate":"2022-02-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"limweiliang"},"content":"**Examples:**","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"* `editlog n/John Doe id/1 nt/has a pet named Poki`","lastModifiedDate":"2022-02-26"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"* `editlog n/Andrew Tan id/1 nt/recommended movies and shows nd/the martian, interstellar, three idiots, peaky blinders`","lastModifiedDate":"2022-02-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"### Deleting a log: `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"Deletes an existing log of an existing friend in Amigos.","lastModifiedDate":"2022-02-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"limweiliang"},"content":"**Format**: `deletelog INDEX id/LOG_INDEX -a`","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"* The `INDEX` field is compulsory.","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"* If `INDEX` is provided as well as a `-a` flag, then all logs of tht person will","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"  be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"* If `LOG_INDEX` is not provided and there is no `-a` flat, then all logs, each with an","lastModifiedDate":"2022-02-26"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"  accompanying index, will allow a user to choose one log to delete.","lastModifiedDate":"2022-02-26"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"* If no `INDEX` or `LOG_INDEX` is provided, but `-a` is provided, then all possible logs","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"  of all friends will be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"limweiliang"},"content":"**Examples:**","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"limweiliang"},"content":"* `deletelog n/John Doe id/1`","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"limweiliang"},"content":"* `deletelog n/John Doe -a `","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"limweiliang"},"content":"* `deletelog -a`","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"limweiliang"},"content":"## Event Management","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"limweiliang"},"content":"Amigos also allows you to keep track of your social events!","lastModifiedDate":"2022-02-26"},{"lineNumber":182,"author":{"gitId":"limweiliang"},"content":"![Events Page](images/EventPage.png)","lastModifiedDate":"2022-02-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"limweiliang"},"content":"### Creating an event: `addevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":185,"author":{"gitId":"limweiliang"},"content":"Adds a new event, which can be optionally linked to any number of existing friends.","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":187,"author":{"gitId":"limweiliang"},"content":"**Format**: `addevent n/EVENT_NAME dt/DATE_TIME [d/DESCRIPTION] [f/FRIEND_NAME]...`","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":189,"author":{"gitId":"limweiliang"},"content":"* There **cannot** be any duplicate events with the same name and date.","lastModifiedDate":"2022-02-26"},{"lineNumber":190,"author":{"gitId":"limweiliang"},"content":"* All given `FRIEND_NAME` values must match the `NAME` of an existing friend in Amigos.","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":193,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":194,"author":{"gitId":"limweiliang"},"content":"* `addevent n/John’s Birthday dt/15-08-2021 1700 d/Remember to get a present! f/John Low f/Alex Yeo`","lastModifiedDate":"2022-03-15"},{"lineNumber":195,"author":{"gitId":"limweiliang"},"content":"* `addevent n/Christmas Party dt/25-12-2022`","lastModifiedDate":"2022-02-26"},{"lineNumber":196,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":197,"author":{"gitId":"limweiliang"},"content":"### Editing an event: `editevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":198,"author":{"gitId":"limweiliang"},"content":"Edits an existing event.","lastModifiedDate":"2022-02-26"},{"lineNumber":199,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":200,"author":{"gitId":"limweiliang"},"content":"**Format**: `editevent INDEX [n/EVENT_NAME] [dt/DATE_TIME] [d/DESCRIPTION] [af/ADD_FRIEND_NAME]... rf/[REMOVE_FRIEND_NAME]...`","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":202,"author":{"gitId":"limweiliang"},"content":"* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed events list. The index **must be a positive integer** 1, 2, 3, ...","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"limweiliang"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"limweiliang"},"content":"* The `EVENT_NAME`, `DATE_TIME` and `DESCRIPTION` arguments directly overwrite the existing details.","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"limweiliang"},"content":"* The `ADD_FRIEND_NAME` and `REMOVE_FRIEND_NAME` arguments add/remove friends tied to the event respectively, and must match the `NAME` of an existing friend in Amigos.","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":207,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":208,"author":{"gitId":"limweiliang"},"content":"* `editevent 2 dt/16-08-2022 1600 af/Jacky Jones rf/Sarah Lim rf/Alex Yeo` will edit the date \u0026 time of the 2nd event to `16-08-2022 1600`, adds `Jacky Jones`, and removes `Sarah Lim` and `Alex Yeo` from the event.","lastModifiedDate":"2022-03-15"},{"lineNumber":209,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":210,"author":{"gitId":"limweiliang"},"content":"### Deleting events: `deleteevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":211,"author":{"gitId":"limweiliang"},"content":"Delete existing event(s).","lastModifiedDate":"2022-02-26"},{"lineNumber":212,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":213,"author":{"gitId":"limweiliang"},"content":"**Format**: `deleteevent INDEX`","lastModifiedDate":"2022-03-15"},{"lineNumber":214,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":215,"author":{"gitId":"limweiliang"},"content":"* Deletes the event at the specified `INDEX`.","lastModifiedDate":"2022-03-15"},{"lineNumber":216,"author":{"gitId":"limweiliang"},"content":"* The index refers to the index number shown in the displayed events list.","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"limweiliang"},"content":"* The index **must be a positive integer** 1, 2, 3, ...","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":219,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":220,"author":{"gitId":"limweiliang"},"content":"* `deleteevent 2`","lastModifiedDate":"2022-03-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"AryanSarswat"},"content":"### Show all events : `showevents`","lastModifiedDate":"2022-03-03"},{"lineNumber":223,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":224,"author":{"gitId":"AryanSarswat"},"content":"Shows all events stored in Amigos. Switches GUI to the events tab.","lastModifiedDate":"2022-03-04"},{"lineNumber":225,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":226,"author":{"gitId":"limweiliang"},"content":"**Format**: `showevents`","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":228,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":229,"author":{"gitId":"limweiliang"},"content":"## Miscellaneous","lastModifiedDate":"2022-03-04"},{"lineNumber":230,"author":{"gitId":"limweiliang"},"content":"### Viewing help : `help`","lastModifiedDate":"2022-03-04"},{"lineNumber":231,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":232,"author":{"gitId":"limweiliang"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2022-03-04"},{"lineNumber":233,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":234,"author":{"gitId":"limweiliang"},"content":"**Format**: `help`","lastModifiedDate":"2022-03-15"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2022-03-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2022-03-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":240,"author":{"gitId":"limweiliang"},"content":"**Format**: `exit`","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2022-03-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":244,"author":{"gitId":"limweiliang"},"content":"Amigos data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-03-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":246,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2022-03-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":248,"author":{"gitId":"limweiliang"},"content":"Amigos data is saved as a JSON file `[JAR file location]/data/amigos.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-03-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":250,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2022-03-04"},{"lineNumber":251,"author":{"gitId":"limweiliang"},"content":"If your changes to the data file makes its format invalid, Amigos will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-03-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"AryanSarswat"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Amigos home folder.","lastModifiedDate":"2022-03-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2022-02-26"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":266,"author":{"gitId":"dionegoh"},"content":"| Action                     | Format, Examples                                                                                                                                                                                                                              |","lastModifiedDate":"2022-02-26"},{"lineNumber":267,"author":{"gitId":"AryanSarswat"},"content":"|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-17"},{"lineNumber":268,"author":{"gitId":"AryanSarswat"},"content":"| **Add Friend**             | `addfriend n/NAME [p/PHONE_NUMBER] [e/EMAIL]  [a/ADDRESS] [d/DESCRIPTION] [t/TAG]…` \u003cbr\u003e e.g., `addfriend n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Physics Major, Sarah’s friend. Met at Freshman Dinner` |","lastModifiedDate":"2022-03-17"},{"lineNumber":269,"author":{"gitId":"AryanSarswat"},"content":"| **Edit friend**            | `editfriend cn/CURRENT_NAME [nn/NEW_NAME]  [np/NEW_PHONE_NUMBER] [ne/NEW_EMAIL] [na/NEW_ADDRESS] [nd/NEW_DESCRIPTION] [t/TAG]…`\u003cbr\u003e e.g., `editfriend cn/John Doe na/John street, block 456, #01-01 ne/johndoe@example.com`                   |","lastModifiedDate":"2022-03-17"},{"lineNumber":270,"author":{"gitId":"dionegoh"},"content":"| **Delete Friend**          | `deletefriend n/[NAME]` \u003cbr\u003e `deletefriend -a` \u003cbr\u003e e.g., `deletefriend n/John Doe`                                                                                                                                                           |","lastModifiedDate":"2022-03-03"},{"lineNumber":271,"author":{"gitId":"dionegoh"},"content":"| **Show a specific friend** | `showfriend n/NAME -alllogs`                                                                                                                                                                                                                  |","lastModifiedDate":"2022-03-03"},{"lineNumber":272,"author":{"gitId":"dionegoh"},"content":"| **Show all friends**       | `showfriends`                                                                                                                                                                                                                                 |","lastModifiedDate":"2022-03-03"},{"lineNumber":273,"author":{"gitId":"tanyjnaaman"},"content":"| **Add log**                | `addlog n/[NAME] t/[TITLE] d/[DESCRIPTION]`                                                                                                                                                                                                   |","lastModifiedDate":"2022-03-03"},{"lineNumber":274,"author":{"gitId":"tanyjnaaman"},"content":"| **Edit log**               | `editlog n/[NAME] id/[LOG_INDEX] nt/[NEW_TITLE] nd/[NEW_DESCRIPTION]`                                                                                                                                                                         |","lastModifiedDate":"2022-03-03"},{"lineNumber":275,"author":{"gitId":"tanyjnaaman"},"content":"| **Delete log**             | `deletelog n/[NAME] id/[LOG_INDEX] -a`                                                                                                                                                                                                        |","lastModifiedDate":"2022-03-03"},{"lineNumber":276,"author":{"gitId":"limweiliang"},"content":"| **Add Event**              | `addevent n/EVENT_NAME dt/DATE_TIME [d/DESCRIPTION] [f/FRIEND_NAME]...` \u003cbr\u003e e.g.,`addevent n/John’s Birthday dt/15-08-2021 1700 d/Remember to get a present! f/John Low f/Alex Yeo`                                                          |","lastModifiedDate":"2022-03-15"},{"lineNumber":277,"author":{"gitId":"limweiliang"},"content":"| **Edit Event**             | `editevent INDEX [n/EVENT_NAME] [dt/DATE_TIME] [d/DESCRIPTION] [af/ADD_FRIEND_NAME]... rf/[REMOVE_FRIEND_NAME]...` \u003cbr\u003e e.g., `editevent 2 dt/16-08-2022 1600 af/Jacky Jones rf/Sarah Lim rf/Alex Yeo`                                        |","lastModifiedDate":"2022-03-15"},{"lineNumber":278,"author":{"gitId":"limweiliang"},"content":"| **Delete Event**           | `deleteevent INDEX` \u003cbr\u003e e.g., `deleteevent 2`                                                                                                                                                                                                |","lastModifiedDate":"2022-03-15"},{"lineNumber":279,"author":{"gitId":"AryanSarswat"},"content":"| **Show all events**        | `showevents`                                                                                                                                                                                                                                  |","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"dionegoh":22,"tanyjnaaman":37,"AryanSarswat":23,"-":109,"limweiliang":88}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"dionegoh"},"content":"    content: \"Amigos\";","lastModifiedDate":"2022-02-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"dionegoh":1,"-":294}},{"path":"docs/team/aryansarswat.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"layout: page","lastModifiedDate":"2022-02-23"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"title: Aryan Sarswat\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-23"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-23"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep track of important details. It is optimized for use via a Command Line interface while still having the benefits of a Graphical User Interface (GUI). The user enters commands through the GUI which is built using JavaFX. It is written in Java and has over 10kLoC.","lastModifiedDate":"2022-02-23"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-23"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"* **showevents**: Added the ability to view all upcoming events.","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"  * What it does:","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"  * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"  * Highlights","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"  * Credits:","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003daryansarswat\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"* **Project management**:","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-23"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-23"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    * User Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"        * Added documentation for the features `showfriends`, `showfriend` and `showevents` [\\#72]()","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2022-02-23"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        * Added User Stories, Glossary and Non-functional requirements","lastModifiedDate":"2022-02-23"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"        * Added Use cases for `showfriends`, `showfriend` and `showevents` [\\#74]()","lastModifiedDate":"2022-02-23"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"* **Community**:","lastModifiedDate":"2022-02-23"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"* **Tools**:","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"}],"authorContributionMap":{"AryanSarswat":36}},{"path":"docs/team/dionegoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"layout: page","lastModifiedDate":"2022-02-23"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"title: Dione Goh\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-23"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-23"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep","lastModifiedDate":"2022-02-23"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"track of important details. It is optimized for use via a Command Line interface while still having the benefits of a ","lastModifiedDate":"2022-02-23"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"Graphical User Interface (GUI). The user enters commands through the GUI which is built using JavaFX. ","lastModifiedDate":"2022-02-23"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"It is written in Java and has over 10kLoC.","lastModifiedDate":"2022-02-23"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"* **addfriend**: Added the functionality to allow user to add a friend into the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to add a friend into address book by typing in the relevant command into the GUI.","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    * Highlights: ","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    * Credits: ","lastModifiedDate":"2022-02-23"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"* **deletefriend**: Added the functionality to allow user to delete a friend from the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to delete a friend from the address book by typing in the relevant command into the GUI. ","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    * Highlights:","lastModifiedDate":"2022-02-23"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"    * Credits: ","lastModifiedDate":"2022-02-23"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"* **editfriend**: Added the functionality to allow user to edit details of a friend from the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to edit a friend from the address book by typing in the relevant command into the GUI.","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    * Highlights:","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"    * Credits:","lastModifiedDate":"2022-02-23"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003ddionegoh\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"* **Project management**:","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    * Update site-wide settings [\\#21](https://github.com/AY2122S2-CS2103-F09-2/tp/pull/21)","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-23"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    *","lastModifiedDate":"2022-02-23"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-23"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    * User Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        * Added documentation for the features `addfriend`, `deletefriend`, and `editfriend`\u0027 ","lastModifiedDate":"2022-02-23"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"      [\\#22](https://github.com/AY2122S2-CS2103-F09-2/tp/pull/22)","lastModifiedDate":"2022-02-23"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        * Added use cases for `addfriend`, `deletefriend`, and `editfriend`.","lastModifiedDate":"2022-02-23"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"* **Community**:","lastModifiedDate":"2022-02-23"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"    * PRs reviewed (with non-trivial review comments): ","lastModifiedDate":"2022-02-23"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"    * Contributed to forum discussions (examples: )","lastModifiedDate":"2022-02-23"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: )","lastModifiedDate":"2022-02-23"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"* **Tools**:","lastModifiedDate":"2022-02-23"}],"authorContributionMap":{"dionegoh":52}},{"path":"docs/team/limweiliang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"layout: page","lastModifiedDate":"2022-02-26"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"title: Lim Wei Liang\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-26"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-26"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"Amigos is a desktop application that helps tech-savvy university students manage their friendships by helping them track important details. It is optimized for use via a CLI and has a GUI created with JavaFX. It is written in Java and has X kLoC.","lastModifiedDate":"2022-02-26"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dlimweiliang\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"* **New features**: (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"  * What it does:","lastModifiedDate":"2022-02-26"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"  * Justification:","lastModifiedDate":"2022-02-26"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"  * Highlights: ","lastModifiedDate":"2022-02-26"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"  * Credits:","lastModifiedDate":"2022-02-26"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-26"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"  * Updated XXX (Pull requests [\\#XX](), [\\#XX]())","lastModifiedDate":"2022-02-26"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-26"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"  * User Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"    * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"  * Developer Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-02-26"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"  * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"* **Review/Mentoring contributions**:","lastModifiedDate":"2022-02-26"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"  * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"* **Contributions to the wider community**:","lastModifiedDate":"2022-02-26"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#XX](), ","lastModifiedDate":"2022-02-26"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"  * Contributed to forum discussions (examples: [X]())","lastModifiedDate":"2022-02-26"}],"authorContributionMap":{"limweiliang":37}},{"path":"docs/team/tanyjnaaman.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"layout: page","lastModifiedDate":"2022-02-26"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"title: Naaman Tan\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-26"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-26"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"Amigos is a desktop application to help tech-savvy university students","lastModifiedDate":"2022-02-26"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"manage their friendships by helping them to keep track of important","lastModifiedDate":"2022-02-26"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"details. It is optimized for use via a Command Line interface while","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"### Summary of contributions","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"* **New Feature: Logs** Added the ability to create, edit and delete log.","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    * What it does:","lastModifiedDate":"2022-02-26"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    * Justification:","lastModifiedDate":"2022-02-26"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    * Highlights:","lastModifiedDate":"2022-02-26"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"* **Enhancement: todo**","lastModifiedDate":"2022-02-26"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dtanyjnaaman\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-26"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-26"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    * User Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        * Added documentation for the features `addlog`, `editlog` and `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        * Added documentation for use cases of the features `addlog`, `editlog` and `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"* **Team-based tasks**","lastModifiedDate":"2022-02-26"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    * Set up GitHub team org/repo and maintained issue tracker for milestone v1.1","lastModifiedDate":"2022-02-26"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"}],"authorContributionMap":{"tanyjnaaman":31}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"        ReadOnlyAddressBook initialAddressBookData;","lastModifiedDate":"2022-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2022-03-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"            initialAddressBookData \u003d new AddressBook();","lastModifiedDate":"2022-03-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"            initialAddressBookData \u003d new AddressBook();","lastModifiedDate":"2022-03-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"        return new ModelManager(initialAddressBookData, userPrefs);","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":177,"limweiliang":5}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_INDEX_IS_NOT_NON_ZERO_UNSIGNED_INTEGER \u003d \"Index is not a non-zero unsigned integer\";","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_INVALID_PERSON_NAME \u003d \"The name provided is not a valid name!\";","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"This friend does not exist in Amigos\";","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_INVALID_EVENT_FRIENDS \u003d \"An event contains friend names that do not exist!\";","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":3,"AryanSarswat":1,"-":13,"limweiliang":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    ObservableList\u003cEvent\u003e getEventsList();","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"AryanSarswat":4,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"    public ObservableList\u003cEvent\u003e getEventsList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"        return model.getEventsList();","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"AryanSarswat":6,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"addfriend\";","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a friend to the address book. \"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\"","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_DESCRIPTION + \"Loves to eat sushi\"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New friend added: %1$s\";","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This friend already exists in the address book\";","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":10,"-":60}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_FRIENDS;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIEND_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":" * Adds an event to Amigos.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"    public static final String COMMAND_WORD \u003d \"addevent\";","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to Amigos. \"","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_NAME + \"EVENT_NAME \"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_DATETIME + \"DATE_TIME \"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"            + \"[\" + PREFIX_FRIEND_NAME + \"FRIEND_NAME]...\\n\"","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_NAME + \"John\u0027s Birthday \"","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_DATETIME + \"15-08-2021 1700 \"","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_DESCRIPTION + \"Remember to get a present! \"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_FRIEND_NAME + \"John Low \"","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"            + PREFIX_FRIEND_NAME + \"Amy Lim\";","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists!\";","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"    private final Event toAdd;","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"     * Creates an AddCommand to add the specified {@code Event}","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(event);","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"        toAdd \u003d event;","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"        if (model.hasEvent(toAdd)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"        if (!model.areEventFriendsValid(toAdd)) {","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"            throw new CommandException(MESSAGE_INVALID_EVENT_FRIENDS);","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"        model.addEvent(toAdd);","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, true);","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"AryanSarswat":1,"limweiliang":67}},{"path":"src/main/java/seedu/address/logic/commands/AddLogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.LogName;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":" * Adds a log to a person in the address book.","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String COMMAND_WORD \u003d \"addlog\";","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a log to an existing friend in Amigos. \"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"            + \"INDEX ? \" + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_TITLE + \"TITLE\"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"            + \" [\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"            + \"1 \"","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_TITLE + \"Likes apples\";","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_ADD_LOG_SUCCESS \u003d \"New log added!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_DUPLICATE_LOG \u003d \"This log already exists for this friend.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d Messages.MESSAGE_INVALID_PERSON_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    private final Index index;","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    private final Person personWithNameToAddLog;","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"    private final AddLogDescriptor addLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"    private final boolean byName;","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates an AddLogCommand to add the specified {@code Log} to the","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"     * specified {@code Person}.","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    public AddLogCommand(Index index, AddLogDescriptor addLogDescriptor) {","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(index, addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        this.personWithNameToAddLog \u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        this.addLogDescriptor \u003d addLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        this.byName \u003d false;","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates an AddLogCommand to add the specified {@code Log} to the specified","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"     * {@code Person}.","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    public AddLogCommand(FriendName name, AddLogDescriptor addLogDescriptor) {","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(name, addLogDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        this.personWithNameToAddLog \u003d new Person(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        this.index \u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        this.addLogDescriptor \u003d addLogDescriptor;","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        this.byName \u003d true;","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        Person personToEdit;","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"        if (this.byName) {","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"            // find person with same name","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cPerson\u003e personsToEdit \u003d model.getAddressBook()","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"                    .getPersonList().stream()","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"                    .filter(p -\u003e p.hasSameName(this.personWithNameToAddLog))","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"            // if person not found, throw an error","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"            if (personsToEdit.size() \u003c 1) {","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"            assert (personsToEdit.size() \u003d\u003d 1);","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"            personToEdit \u003d personsToEdit.get(0);","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"            // get list of persons from model","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"            // get person and modify","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"            if (this.index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-10"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"            personToEdit \u003d lastShownList.get(this.index.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        // create person with added logs","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson \u003d createAddedLogPerson(personToEdit, this.addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        // add to address book","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        model.setPerson(personToEdit, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        return new CommandResult(MESSAGE_ADD_LOG_SUCCESS);","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code Person} with the details of {@code personToEdit}, with logs modified by","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"     * {@code addLogDescriptor}.","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws CommandException if {@code addLogDescriptor} results in an invalid {@code Log}","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"     *                          being created.","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"    private static Person createAddedLogPerson(Person personToEdit, AddLogDescriptor addLogDescriptor)","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"            throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(personToEdit, addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d personToEdit.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        Phone phone \u003d personToEdit.getPhone();","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        Email email \u003d personToEdit.getEmail();","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        Address address \u003d personToEdit.getAddress();","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        Description description \u003d personToEdit.getDescription();","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        Set\u003cTag\u003e tags \u003d personToEdit.getTags();","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e updatedLogs \u003d addLogDescriptor.getLogsAfterAdd(personToEdit); // main logic encompassed here","lastModifiedDate":"2022-03-10"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        return new Person(name, phone, email, address, description, tags, updatedLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"        if (!(other instanceof AddLogCommand)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        // cast","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand a \u003d (AddLogCommand) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"        // compare descriptors","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        if (!this.addLogDescriptor.equals(a.addLogDescriptor)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"            return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"        // compare name or index","lastModifiedDate":"2022-03-15"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        if ((this.byName) \u0026\u0026 (a.byName)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"            assert ((this.index \u003d\u003d null) \u0026\u0026 (a.index \u003d\u003d null));","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"            return this.personWithNameToAddLog.equals(a.personWithNameToAddLog);","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"        } else if ((!this.byName) \u0026\u0026 (!a.byName)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"            assert ((this.personWithNameToAddLog \u003d\u003d null) \u0026\u0026 (a.personWithNameToAddLog \u003d\u003d null));","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"            return this.index.equals(a.index);","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"        return \"Index: \" + this.index.toString() + \"\\nContent:\\n\" + this.addLogDescriptor.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"     * Stores the details of the edited log to edit a person\u0027s logs with, as well as the person\u0027s","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"     * original details.","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"    public static class AddLogDescriptor {","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"        private String newTitle;","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"        private String newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"         * Constructs a new {@code AddLogDescriptor} object.","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        public AddLogDescriptor() {","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"            this.newTitle \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"            this.newDescription \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"        public void setNewTitle(String newTitle) {","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"            this.newTitle \u003d newTitle;","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"        public void setNewDescription(String newDescription) {","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"            this.newDescription \u003d newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns true if title has been edited.","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"        public boolean isTitleEdited() {","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"            return this.newTitle !\u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns a list of {@code Log} objects that include the {@code Person}\u0027s original logs","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"         * as well as the new logs.","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        public List\u003cLog\u003e getLogsAfterAdd(Person personToEdit) throws CommandException {","lastModifiedDate":"2022-03-10"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity checks","lastModifiedDate":"2022-03-10"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.newTitle !\u003d null);","lastModifiedDate":"2022-03-10"},{"lineNumber":219,"author":{"gitId":"AryanSarswat"},"content":"            assert (LogName.isValidLogName(this.newTitle));","lastModifiedDate":"2022-03-16"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"            Log toAdd \u003d new Log(this.newTitle, this.newDescription); // create log to be added","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"            if (personToEdit.containsLog(toAdd)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_LOG); // ensure not a duplicate log being inserted","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cLog\u003e newLogs \u003d new ArrayList\u003c\u003e(personToEdit.getLogs());","lastModifiedDate":"2022-03-10"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"            newLogs.add(toAdd); // add log","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"            return newLogs;","lastModifiedDate":"2022-03-10"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"            // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"                return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"            // instanceof","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"            if (!(other instanceof AddLogDescriptor)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"                return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"            // cast and check by wrapping into log object","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"            AddLogDescriptor a \u003d (AddLogDescriptor) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"            Log thisLog \u003d new Log(this.newTitle, this.newDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"tanyjnaaman"},"content":"            Log otherLog \u003d new Log(a.newTitle, a.newDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"tanyjnaaman"},"content":"            return thisLog.equals(otherLog);","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"tanyjnaaman"},"content":"        public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"tanyjnaaman"},"content":"            return \"Title: \" + this.newTitle + \"\\nDescription: \\n\" + this.newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dionegoh":1,"tanyjnaaman":251,"AryanSarswat":6}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    /** The application should switch to event */","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    private final boolean event;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    /**PersonListPanel will switch to expanded view showing all details of a friend */","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"    private final boolean showDetails;","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean event, boolean showDetails) {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"        this.event \u003d event;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"        this.showDetails \u003d showDetails;","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean event) {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        this.event \u003d event;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        this.showDetails \u003d false;","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"        this.event \u003d false;","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        this.showDetails \u003d false;","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        this(feedbackToUser, false, false, false, false);","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"    public boolean isEvent() {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"        return event;","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"    public boolean isShowFriendCommand() {","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"dionegoh"},"content":"        return showDetails;","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 event \u003d\u003d otherCommandResult.event;","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"AryanSarswat"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit, event);","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":21,"AryanSarswat":21,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"deletefriend\";","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"            + \": Deletes the friend identified by index or name.\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NAME + \"NAME (name of a friend who exists in Amigos) OR \"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"            + \"INDEX (a positive integer)\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"John Doe\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted friend: %1$s\";","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    //these dummy fields are needed to instantiate a person to be used to check if such a name entered exists","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    // in the address book","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"    private static final Phone dummyPhone \u003d new Phone(\"12345678\");","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    private static final Email dummyEmail \u003d new Email(\"dummyemail@gmail.com\");","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    private static final Address dummyAddress \u003d new Address(\"Dummy Address\");","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"    private final FriendName nameOfPersonToDelete;","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"    private final boolean isDeletionByIndex;","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"     * Constructs a DeleteCommand for deletion by name","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"     * @param nameOfPersonToDelete The name of the person to be deleted","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    public DeleteCommand(FriendName nameOfPersonToDelete) {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"        this.nameOfPersonToDelete \u003d nameOfPersonToDelete;","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"        this.targetIndex \u003d null;","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        this.isDeletionByIndex \u003d false;","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"     * Constructs a DeleteCommand for deletion by index","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"     * @param targetIndex The index of the person to be deleted on the filtered list on GUI","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        this.nameOfPersonToDelete \u003d null;","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"        this.isDeletionByIndex \u003d true;","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"        if (isDeletionByIndex) { //deletion by index","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"dionegoh"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"dionegoh"},"content":"            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"dionegoh"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"dionegoh"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"dionegoh"},"content":"        } else { //deletion by name","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"            Person personWithNameToDelete \u003d new Person(nameOfPersonToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"            if (!model.hasPerson(personWithNameToDelete)) { //model.hasPerson considers 2 Persons with same name","lastModifiedDate":"2022-03-10"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"                //to be the same Person","lastModifiedDate":"2022-03-10"},{"lineNumber":89,"author":{"gitId":"dionegoh"},"content":"                throw new CommandException(Messages.MESSAGE_PERSON_DOES_NOT_EXIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-10"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"            //todo : make this more oop","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"            ObservableList\u003cPerson\u003e personList \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2022-03-10"},{"lineNumber":93,"author":{"gitId":"dionegoh"},"content":"            Person personToDelete \u003d personWithNameToDelete; //dummy person","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"            for (Person personFromList : personList) {","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"dionegoh"},"content":"                if (personFromList.isSamePerson(personWithNameToDelete)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"                    personToDelete \u003d new Person(personFromList.getName(),","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"dionegoh"},"content":"                            personFromList.getPhone(), personFromList.getEmail(),","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"dionegoh"},"content":"                            personFromList.getAddress(), personFromList.getDescription(),","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"dionegoh"},"content":"                            personFromList.getTags(), personFromList.getLogs());","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"dionegoh"},"content":"                    model.deletePerson(personFromList);","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"dionegoh"},"content":"                    break;","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"dionegoh"},"content":"                }","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-17"},{"lineNumber":112,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-17"},{"lineNumber":113,"author":{"gitId":"dionegoh"},"content":"        } else if (other instanceof DeleteCommand) {","lastModifiedDate":"2022-03-17"},{"lineNumber":114,"author":{"gitId":"dionegoh"},"content":"            DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2022-03-17"},{"lineNumber":115,"author":{"gitId":"dionegoh"},"content":"            if (otherDeleteCommand.isDeletionByIndex \u0026\u0026 this.isDeletionByIndex) {","lastModifiedDate":"2022-03-17"},{"lineNumber":116,"author":{"gitId":"dionegoh"},"content":"                //assertion to ensure that if it is deletion by index, then targetIndex will not be null","lastModifiedDate":"2022-03-17"},{"lineNumber":117,"author":{"gitId":"dionegoh"},"content":"                assert(otherDeleteCommand.targetIndex !\u003d null \u0026\u0026 this.targetIndex !\u003d null);","lastModifiedDate":"2022-03-17"},{"lineNumber":118,"author":{"gitId":"dionegoh"},"content":"                return otherDeleteCommand.targetIndex.equals(this.targetIndex);","lastModifiedDate":"2022-03-17"},{"lineNumber":119,"author":{"gitId":"dionegoh"},"content":"            } else if (!otherDeleteCommand.isDeletionByIndex \u0026\u0026 !this.isDeletionByIndex) {","lastModifiedDate":"2022-03-17"},{"lineNumber":120,"author":{"gitId":"dionegoh"},"content":"                //assertion to ensure that if it is deletion by name, then name will not be null","lastModifiedDate":"2022-03-17"},{"lineNumber":121,"author":{"gitId":"dionegoh"},"content":"                assert(otherDeleteCommand.nameOfPersonToDelete !\u003d null \u0026\u0026 this.nameOfPersonToDelete !\u003d null);","lastModifiedDate":"2022-03-17"},{"lineNumber":122,"author":{"gitId":"dionegoh"},"content":"                return otherDeleteCommand.nameOfPersonToDelete.equals(this.nameOfPersonToDelete);","lastModifiedDate":"2022-03-17"},{"lineNumber":123,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":124,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":125,"author":{"gitId":"dionegoh"},"content":"        return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":82,"tanyjnaaman":1,"AryanSarswat":3,"-":41}},{"path":"src/main/java/seedu/address/logic/commands/DeleteLogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.isNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOG_INDEX;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.parser.DeleteLogCommandParser;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":" * Deletes a log from a person in the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"public class DeleteLogCommand extends Command {","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String COMMAND_WORD \u003d \"deletelog\";","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a log from an existing friend in Amigos. \"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            + \"[INDEX ? \" + PREFIX_NAME + \"NAME] [\"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_LOG_INDEX + \"LOG_INDEX]\"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"            + \" [\" + FLAG_ALL + \"]\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"            + \"1 \"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_LOG_INDEX + \"2\";","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_DELETE_LOG_SUCCESS \u003d \"Log deleted.\";","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_LOG_NOT_FOUND \u003d \"The specified log does not exist!\";","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    // data fields","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    private final DeleteLogDescriptor descriptor;","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code DeleteLogCommand} object.","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    public DeleteLogCommand(DeleteLogDescriptor descriptor) {","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(descriptor);","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        this.descriptor \u003d descriptor;","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code DeleteLogCommand} object.","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    public DeleteLogCommand(boolean isForOnePerson, boolean isForDeletingAllLogs,","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"                            Index personIndex, Index logIndex) {","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(isForOnePerson, isForDeletingAllLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        this.descriptor \u003d new DeleteLogDescriptor(isForOnePerson,","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"                isForDeletingAllLogs, personIndex, null, logIndex, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code DeleteLogCommand} object.","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"    public DeleteLogCommand(boolean isForOnePerson, boolean isForDeletingAllLogs,","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"                            FriendName personName, Index logIndex) {","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(isForOnePerson, isForDeletingAllLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        this.descriptor \u003d new DeleteLogDescriptor(isForOnePerson,","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"                isForDeletingAllLogs, null, personName, logIndex, true);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code DeleteLogCommand} object, specifically one for","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"     * deleting all logs of all persons.","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"    public DeleteLogCommand(boolean isForDeletingAllLogs) {","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"        assert (isForDeletingAllLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        this.descriptor \u003d new DeleteLogDescriptor(false,","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"                true, null, null, null, false);","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        // apply delete to model","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        return this.descriptor.applyDelete(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        if (!(other instanceof DeleteLogCommand)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        // cast","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand d \u003d (DeleteLogCommand) other;","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        return this.descriptor.equals(d.descriptor);","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        return this.descriptor.toString();","lastModifiedDate":"2022-03-09"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"     * Stores the details of the nature of deletion, whether it is to","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"     * delete a specific log, all logs of a person or all logs of all persons.","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"    public static class DeleteLogDescriptor {","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        private final boolean isForOnePerson;","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        private final boolean isForDeletingAllLogs;","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        private final Index personIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        private final Person personWithNameToDeleteLog;","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        private final Index logIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        private final boolean byName;","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"         * Creates a {@code} DeleteLogDescriptor} object that wraps the details of deletion.","lastModifiedDate":"2022-03-15"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        private DeleteLogDescriptor(boolean isForOnePerson, boolean isForDeletingAllLogs,","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"AryanSarswat"},"content":"                                    Index personIndex, FriendName name, Index logIndex, boolean byName) {","lastModifiedDate":"2022-03-17"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"            this.isForOnePerson \u003d isForOnePerson;","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"            this.isForDeletingAllLogs \u003d isForDeletingAllLogs;","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"            this.personIndex \u003d personIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"            this.personWithNameToDeleteLog \u003d isNull(name) ? null : new Person(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"            this.logIndex \u003d logIndex;","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"            this.byName \u003d byName;","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity checks","lastModifiedDate":"2022-03-15"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"            assert (!(this.personIndex !\u003d null \u0026\u0026 this.personWithNameToDeleteLog !\u003d null)); // cannot be overdefined","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"            if (!this.byName) {","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"                assert (((logIndex \u003d\u003d null","lastModifiedDate":"2022-03-10"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"                        || (!isForDeletingAllLogs \u0026\u0026 isForOnePerson \u0026\u0026 personIndex !\u003d null)))","lastModifiedDate":"2022-03-10"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"                        \u0026\u0026 ((!isForOnePerson \u0026\u0026 personIndex \u003d\u003d null)","lastModifiedDate":"2022-03-10"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"                        || isForOnePerson \u0026\u0026 personIndex !\u003d null));","lastModifiedDate":"2022-03-10"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"            } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"                assert (((logIndex \u003d\u003d null","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"                        || (!isForDeletingAllLogs \u0026\u0026 isForOnePerson \u0026\u0026 personWithNameToDeleteLog !\u003d null)))","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"                        \u0026\u0026 ((!isForOnePerson \u0026\u0026 personWithNameToDeleteLog \u003d\u003d null)","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"                        || isForOnePerson \u0026\u0026 personWithNameToDeleteLog !\u003d null));","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"         * Applies the deletion logic to the model and returns as","lastModifiedDate":"2022-03-09"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"         * {@code CommandResult} object.","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"         * @throws CommandException if invalid data state encountered.","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"        public CommandResult applyDelete(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"            CommandResult result;","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"            if (isForOnePerson \u0026\u0026 !isForDeletingAllLogs) {","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"                // case 1: delete specific log of specific person","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"                result \u003d this.deleteSpecificPersonLog(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"            } else if (isForOnePerson \u0026\u0026 isForDeletingAllLogs) {","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"                // case 2: delete all logs of specific person","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"                result \u003d this.deleteAllLogsOfPerson(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"            } else if (!isForOnePerson \u0026\u0026 isForDeletingAllLogs) {","lastModifiedDate":"2022-03-09"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"                // case 3: delete all logs all persons","lastModifiedDate":"2022-03-09"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"                result \u003d this.deleteAllLogs(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(DeleteLogCommandParser.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"            return result;","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"         * Deletes all {@code Logs} objects of all persons in the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"         **/","lastModifiedDate":"2022-03-09"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"        public CommandResult deleteAllLogs(Model model) {","lastModifiedDate":"2022-03-09"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity check","lastModifiedDate":"2022-03-09"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.isForDeletingAllLogs \u0026\u0026 !this.isForOnePerson","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"                    \u0026\u0026 this.personIndex \u003d\u003d null \u0026\u0026 this.logIndex \u003d\u003d null);","lastModifiedDate":"2022-03-09"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"            // get all persons and delete all","lastModifiedDate":"2022-03-09"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cPerson\u003e allPersonsList \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"            for (Person person : allPersonsList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"                Person editedPerson \u003d copyPersonButWithEmptyLogs(person);","lastModifiedDate":"2022-03-09"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"                model.setPerson(person, editedPerson);","lastModifiedDate":"2022-03-09"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"            return new CommandResult(MESSAGE_DELETE_LOG_SUCCESS);","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"        private Person getPersonToEdit(Model model) throws CommandException {","lastModifiedDate":"2022-03-17"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"            // todo: can consider implementing model method getByIndexOrName, since repeated","lastModifiedDate":"2022-03-17"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"            // across all functionalities that support both index and name","lastModifiedDate":"2022-03-17"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity checks","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.personIndex !\u003d null || this.personWithNameToDeleteLog !\u003d null);","lastModifiedDate":"2022-03-15"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"            // get person to edit","lastModifiedDate":"2022-03-17"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"            Person personToEdit \u003d null;","lastModifiedDate":"2022-03-17"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"            if (this.byName) {","lastModifiedDate":"2022-03-15"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"                // sanity check","lastModifiedDate":"2022-03-09"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"                requireNonNull(this.personWithNameToDeleteLog);","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"                // find person with same name","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"                List\u003cPerson\u003e personsToEdit \u003d model.getAddressBook()","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"                        .getPersonList().stream()","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"                        .filter(p -\u003e p.hasSameName(this.personWithNameToDeleteLog))","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2022-03-15"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"                // if person not found, throw an error","lastModifiedDate":"2022-03-15"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"                if (personsToEdit.size() \u003c 1) {","lastModifiedDate":"2022-03-15"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"                    throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"                }","lastModifiedDate":"2022-03-15"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"                assert (personsToEdit.size() \u003d\u003d 1);","lastModifiedDate":"2022-03-15"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"                personToEdit \u003d personsToEdit.get(0);","lastModifiedDate":"2022-03-15"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"            } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"                // sanity check","lastModifiedDate":"2022-03-15"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"                requireNonNull(this.personIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"                // get list of persons from model","lastModifiedDate":"2022-03-09"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"                List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"                // get person and modify","lastModifiedDate":"2022-03-09"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"                if (this.personIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":247,"author":{"gitId":"tanyjnaaman"},"content":"                }","lastModifiedDate":"2022-03-09"},{"lineNumber":248,"author":{"gitId":"tanyjnaaman"},"content":"                personToEdit \u003d lastShownList.get(this.personIndex.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":249,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":250,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":251,"author":{"gitId":"tanyjnaaman"},"content":"            // another sanity check","lastModifiedDate":"2022-03-17"},{"lineNumber":252,"author":{"gitId":"tanyjnaaman"},"content":"            requireNonNull(personToEdit);","lastModifiedDate":"2022-03-17"},{"lineNumber":253,"author":{"gitId":"tanyjnaaman"},"content":"            return personToEdit;","lastModifiedDate":"2022-03-17"},{"lineNumber":254,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":255,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":256,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-17"},{"lineNumber":257,"author":{"gitId":"tanyjnaaman"},"content":"         * Carries out deletion logic for deletion of all {@code Log} objects of a specified person.","lastModifiedDate":"2022-03-17"},{"lineNumber":258,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-17"},{"lineNumber":259,"author":{"gitId":"tanyjnaaman"},"content":"         * @throws CommandException if person specified is not in address book.","lastModifiedDate":"2022-03-17"},{"lineNumber":260,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-17"},{"lineNumber":261,"author":{"gitId":"tanyjnaaman"},"content":"        public CommandResult deleteAllLogsOfPerson(Model model) throws CommandException {","lastModifiedDate":"2022-03-17"},{"lineNumber":262,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":263,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity checks","lastModifiedDate":"2022-03-17"},{"lineNumber":264,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.isForDeletingAllLogs \u0026\u0026 this.isForOnePerson \u0026\u0026 this.logIndex \u003d\u003d null);","lastModifiedDate":"2022-03-17"},{"lineNumber":265,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.personIndex !\u003d null || this.personWithNameToDeleteLog !\u003d null);","lastModifiedDate":"2022-03-17"},{"lineNumber":266,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":267,"author":{"gitId":"tanyjnaaman"},"content":"            // \u003d\u003d\u003d\u003d\u003d GET PERSON \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":268,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":269,"author":{"gitId":"tanyjnaaman"},"content":"            Person personToEdit \u003d this.getPersonToEdit(model);","lastModifiedDate":"2022-03-17"},{"lineNumber":270,"author":{"gitId":"tanyjnaaman"},"content":"            Person deletedLogsPerson \u003d copyPersonButWithEmptyLogs(personToEdit);","lastModifiedDate":"2022-03-09"},{"lineNumber":271,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":272,"author":{"gitId":"tanyjnaaman"},"content":"            // add to address book","lastModifiedDate":"2022-03-09"},{"lineNumber":273,"author":{"gitId":"tanyjnaaman"},"content":"            model.setPerson(personToEdit, deletedLogsPerson);","lastModifiedDate":"2022-03-09"},{"lineNumber":274,"author":{"gitId":"tanyjnaaman"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":275,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":276,"author":{"gitId":"tanyjnaaman"},"content":"            return new CommandResult(MESSAGE_DELETE_LOG_SUCCESS);","lastModifiedDate":"2022-03-09"},{"lineNumber":277,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":278,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":279,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":280,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":281,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns a {@code Person} object that is identical except without any logs.","lastModifiedDate":"2022-03-09"},{"lineNumber":282,"author":{"gitId":"tanyjnaaman"},"content":"         * A helper method.","lastModifiedDate":"2022-03-09"},{"lineNumber":283,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":284,"author":{"gitId":"tanyjnaaman"},"content":"        public static Person copyPersonButWithEmptyLogs(Person personToEdit) {","lastModifiedDate":"2022-03-09"},{"lineNumber":285,"author":{"gitId":"tanyjnaaman"},"content":"            requireAllNonNull(personToEdit);","lastModifiedDate":"2022-03-09"},{"lineNumber":286,"author":{"gitId":"AryanSarswat"},"content":"            FriendName name \u003d personToEdit.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":287,"author":{"gitId":"tanyjnaaman"},"content":"            Phone phone \u003d personToEdit.getPhone();","lastModifiedDate":"2022-03-09"},{"lineNumber":288,"author":{"gitId":"tanyjnaaman"},"content":"            Email email \u003d personToEdit.getEmail();","lastModifiedDate":"2022-03-09"},{"lineNumber":289,"author":{"gitId":"tanyjnaaman"},"content":"            Address address \u003d personToEdit.getAddress();","lastModifiedDate":"2022-03-09"},{"lineNumber":290,"author":{"gitId":"tanyjnaaman"},"content":"            Description description \u003d personToEdit.getDescription();","lastModifiedDate":"2022-03-15"},{"lineNumber":291,"author":{"gitId":"tanyjnaaman"},"content":"            Set\u003cTag\u003e tags \u003d personToEdit.getTags();","lastModifiedDate":"2022-03-09"},{"lineNumber":292,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cLog\u003e emptyLogs \u003d new ArrayList\u003c\u003e(); // main logic encompassed here","lastModifiedDate":"2022-03-09"},{"lineNumber":293,"author":{"gitId":"tanyjnaaman"},"content":"            return new Person(name, phone, email, address, description, tags, emptyLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":294,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":295,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":296,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":297,"author":{"gitId":"tanyjnaaman"},"content":"         * Deletes a specific {@code Log} of a specified person.","lastModifiedDate":"2022-03-09"},{"lineNumber":298,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-09"},{"lineNumber":299,"author":{"gitId":"tanyjnaaman"},"content":"         * @throws CommandException if {@code Person} or {@code Log} is not found.","lastModifiedDate":"2022-03-09"},{"lineNumber":300,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":301,"author":{"gitId":"tanyjnaaman"},"content":"        public CommandResult deleteSpecificPersonLog(Model model) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":302,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":303,"author":{"gitId":"tanyjnaaman"},"content":"            // sanity checks","lastModifiedDate":"2022-03-09"},{"lineNumber":304,"author":{"gitId":"tanyjnaaman"},"content":"            requireNonNull(model);","lastModifiedDate":"2022-03-09"},{"lineNumber":305,"author":{"gitId":"tanyjnaaman"},"content":"            assert (this.isForOnePerson","lastModifiedDate":"2022-03-15"},{"lineNumber":306,"author":{"gitId":"tanyjnaaman"},"content":"                    \u0026\u0026 !this.isForDeletingAllLogs","lastModifiedDate":"2022-03-15"},{"lineNumber":307,"author":{"gitId":"tanyjnaaman"},"content":"                    \u0026\u0026 this.logIndex !\u003d null);","lastModifiedDate":"2022-03-15"},{"lineNumber":308,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":309,"author":{"gitId":"tanyjnaaman"},"content":"            assert (!((this.personIndex \u003d\u003d null \u0026\u0026 this.personWithNameToDeleteLog \u003d\u003d null)","lastModifiedDate":"2022-03-15"},{"lineNumber":310,"author":{"gitId":"tanyjnaaman"},"content":"                    || (this.personIndex !\u003d null \u0026\u0026 this.personWithNameToDeleteLog !\u003d null)));","lastModifiedDate":"2022-03-15"},{"lineNumber":311,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":312,"author":{"gitId":"tanyjnaaman"},"content":"            // \u003d\u003d\u003d\u003d\u003d GET PERSON \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":313,"author":{"gitId":"tanyjnaaman"},"content":"            Person personToEdit \u003d this.getPersonToEdit(model);","lastModifiedDate":"2022-03-17"},{"lineNumber":314,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":315,"author":{"gitId":"tanyjnaaman"},"content":"            Person deletedLogPerson \u003d createdDeletedLogPerson(personToEdit, this.logIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":316,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":317,"author":{"gitId":"tanyjnaaman"},"content":"            // add to address book","lastModifiedDate":"2022-03-09"},{"lineNumber":318,"author":{"gitId":"tanyjnaaman"},"content":"            model.setPerson(personToEdit, deletedLogPerson);","lastModifiedDate":"2022-03-09"},{"lineNumber":319,"author":{"gitId":"tanyjnaaman"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-03-09"},{"lineNumber":320,"author":{"gitId":"tanyjnaaman"},"content":"            return new CommandResult(MESSAGE_DELETE_LOG_SUCCESS);","lastModifiedDate":"2022-03-09"},{"lineNumber":321,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":322,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":323,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":324,"author":{"gitId":"tanyjnaaman"},"content":"         * Creates a {@code Person} with the details of {@code personToEdit}, with log equal to","lastModifiedDate":"2022-03-09"},{"lineNumber":325,"author":{"gitId":"tanyjnaaman"},"content":"         * {@code toDelete} removed.","lastModifiedDate":"2022-03-09"},{"lineNumber":326,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-09"},{"lineNumber":327,"author":{"gitId":"tanyjnaaman"},"content":"         * @throws CommandException if {@code toDelete} does not exist in the logs of {@code personToEdit}","lastModifiedDate":"2022-03-09"},{"lineNumber":328,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":329,"author":{"gitId":"tanyjnaaman"},"content":"        public static Person createdDeletedLogPerson(Person personToEdit, Index toDelete) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":330,"author":{"gitId":"tanyjnaaman"},"content":"            requireAllNonNull(personToEdit, toDelete);","lastModifiedDate":"2022-03-09"},{"lineNumber":331,"author":{"gitId":"AryanSarswat"},"content":"            FriendName name \u003d personToEdit.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":332,"author":{"gitId":"tanyjnaaman"},"content":"            Phone phone \u003d personToEdit.getPhone();","lastModifiedDate":"2022-03-09"},{"lineNumber":333,"author":{"gitId":"tanyjnaaman"},"content":"            Email email \u003d personToEdit.getEmail();","lastModifiedDate":"2022-03-09"},{"lineNumber":334,"author":{"gitId":"tanyjnaaman"},"content":"            Address address \u003d personToEdit.getAddress();","lastModifiedDate":"2022-03-09"},{"lineNumber":335,"author":{"gitId":"tanyjnaaman"},"content":"            Set\u003cTag\u003e tags \u003d personToEdit.getTags();","lastModifiedDate":"2022-03-09"},{"lineNumber":336,"author":{"gitId":"tanyjnaaman"},"content":"            Description description \u003d personToEdit.getDescription();","lastModifiedDate":"2022-03-15"},{"lineNumber":337,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cLog\u003e updatedLogs \u003d getLogsAfterDelete(personToEdit, toDelete); // main logic encompassed here","lastModifiedDate":"2022-03-09"},{"lineNumber":338,"author":{"gitId":"tanyjnaaman"},"content":"            return new Person(name, phone, email, address, description, tags, updatedLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":339,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":340,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":341,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-09"},{"lineNumber":342,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns a list of {@code Log} objects that include the {@code Person}\u0027s original logs","lastModifiedDate":"2022-03-09"},{"lineNumber":343,"author":{"gitId":"tanyjnaaman"},"content":"         * less the specified {@code Log} to be deleted.","lastModifiedDate":"2022-03-09"},{"lineNumber":344,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-09"},{"lineNumber":345,"author":{"gitId":"tanyjnaaman"},"content":"        public static List\u003cLog\u003e getLogsAfterDelete(Person personToEdit, Index toDeleteIndex) throws CommandException {","lastModifiedDate":"2022-03-09"},{"lineNumber":346,"author":{"gitId":"tanyjnaaman"},"content":"            requireAllNonNull(personToEdit, toDeleteIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":347,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":348,"author":{"gitId":"tanyjnaaman"},"content":"            // check that safe to remove","lastModifiedDate":"2022-03-09"},{"lineNumber":349,"author":{"gitId":"tanyjnaaman"},"content":"            List\u003cLog\u003e logs \u003d new ArrayList\u003cLog\u003e(personToEdit.getLogs());","lastModifiedDate":"2022-03-09"},{"lineNumber":350,"author":{"gitId":"tanyjnaaman"},"content":"            if (toDeleteIndex.getZeroBased() \u003e\u003d logs.size()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":351,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(MESSAGE_LOG_NOT_FOUND);","lastModifiedDate":"2022-03-09"},{"lineNumber":352,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":353,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":354,"author":{"gitId":"tanyjnaaman"},"content":"            // remove by index","lastModifiedDate":"2022-03-09"},{"lineNumber":355,"author":{"gitId":"tanyjnaaman"},"content":"            logs.remove(toDeleteIndex.getZeroBased());","lastModifiedDate":"2022-03-09"},{"lineNumber":356,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":357,"author":{"gitId":"tanyjnaaman"},"content":"            return logs;","lastModifiedDate":"2022-03-09"},{"lineNumber":358,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":359,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":360,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":361,"author":{"gitId":"tanyjnaaman"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":362,"author":{"gitId":"tanyjnaaman"},"content":"            // short circuit if same object","lastModifiedDate":"2022-03-09"},{"lineNumber":363,"author":{"gitId":"tanyjnaaman"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":364,"author":{"gitId":"tanyjnaaman"},"content":"                return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":365,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":366,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":367,"author":{"gitId":"tanyjnaaman"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-03-09"},{"lineNumber":368,"author":{"gitId":"tanyjnaaman"},"content":"            if (!(other instanceof DeleteLogDescriptor)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":369,"author":{"gitId":"tanyjnaaman"},"content":"                return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":370,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":371,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":372,"author":{"gitId":"tanyjnaaman"},"content":"            // cast","lastModifiedDate":"2022-03-09"},{"lineNumber":373,"author":{"gitId":"tanyjnaaman"},"content":"            DeleteLogDescriptor d \u003d (DeleteLogDescriptor) other;","lastModifiedDate":"2022-03-09"},{"lineNumber":374,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":375,"author":{"gitId":"tanyjnaaman"},"content":"            // person index must be same","lastModifiedDate":"2022-03-09"},{"lineNumber":376,"author":{"gitId":"tanyjnaaman"},"content":"            boolean isSamePerson \u003d bothNullOrEqual(this.personIndex, d.personIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":377,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":378,"author":{"gitId":"tanyjnaaman"},"content":"            // log index must be same","lastModifiedDate":"2022-03-09"},{"lineNumber":379,"author":{"gitId":"tanyjnaaman"},"content":"            boolean isSameLog \u003d bothNullOrEqual(this.logIndex, d.logIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":380,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":381,"author":{"gitId":"tanyjnaaman"},"content":"            // person to delete must be same","lastModifiedDate":"2022-03-15"},{"lineNumber":382,"author":{"gitId":"tanyjnaaman"},"content":"            boolean isSamePersonByName \u003d bothNullOrEqual(this.personWithNameToDeleteLog, d.personWithNameToDeleteLog);","lastModifiedDate":"2022-03-15"},{"lineNumber":383,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":384,"author":{"gitId":"tanyjnaaman"},"content":"            // remaining must be same","lastModifiedDate":"2022-03-09"},{"lineNumber":385,"author":{"gitId":"tanyjnaaman"},"content":"            return (isSameLog \u0026\u0026 isSamePerson \u0026\u0026 isSamePersonByName","lastModifiedDate":"2022-03-15"},{"lineNumber":386,"author":{"gitId":"tanyjnaaman"},"content":"                    \u0026\u0026 this.isForOnePerson \u003d\u003d d.isForOnePerson","lastModifiedDate":"2022-03-09"},{"lineNumber":387,"author":{"gitId":"tanyjnaaman"},"content":"                    \u0026\u0026 this.isForDeletingAllLogs \u003d\u003d d.isForDeletingAllLogs);","lastModifiedDate":"2022-03-09"},{"lineNumber":388,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":389,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":390,"author":{"gitId":"tanyjnaaman"},"content":"        private static boolean bothNullOrEqual(Object propertyOfOne, Object propertyOfOther) {","lastModifiedDate":"2022-03-15"},{"lineNumber":391,"author":{"gitId":"tanyjnaaman"},"content":"            if ((propertyOfOne \u003d\u003d null \u0026\u0026 propertyOfOther !\u003d null)","lastModifiedDate":"2022-03-15"},{"lineNumber":392,"author":{"gitId":"tanyjnaaman"},"content":"                    || propertyOfOne !\u003d null \u0026\u0026 propertyOfOther \u003d\u003d null) {","lastModifiedDate":"2022-03-15"},{"lineNumber":393,"author":{"gitId":"tanyjnaaman"},"content":"                return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":394,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":395,"author":{"gitId":"tanyjnaaman"},"content":"            return (propertyOfOne \u003d\u003d null \u0026\u0026 propertyOfOther \u003d\u003d null","lastModifiedDate":"2022-03-15"},{"lineNumber":396,"author":{"gitId":"tanyjnaaman"},"content":"                    || propertyOfOne.equals(propertyOfOther));","lastModifiedDate":"2022-03-15"},{"lineNumber":397,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":398,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":399,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":400,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":401,"author":{"gitId":"tanyjnaaman"},"content":"        public String toString() {","lastModifiedDate":"2022-03-16"},{"lineNumber":402,"author":{"gitId":"tanyjnaaman"},"content":"            return \"For one person: \" + this.isForOnePerson","lastModifiedDate":"2022-03-16"},{"lineNumber":403,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nFor all logs: \" + this.isForDeletingAllLogs","lastModifiedDate":"2022-03-16"},{"lineNumber":404,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nBy Name: \" + this.byName","lastModifiedDate":"2022-03-16"},{"lineNumber":405,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nPerson with name: \" + this.personWithNameToDeleteLog","lastModifiedDate":"2022-03-16"},{"lineNumber":406,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nPerson index: \" + this.personIndex","lastModifiedDate":"2022-03-16"},{"lineNumber":407,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nLog Index: \" + this.logIndex;","lastModifiedDate":"2022-03-16"},{"lineNumber":408,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":409,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":410,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":411,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-09"},{"lineNumber":412,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":413,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":414,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":415,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":416,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"tanyjnaaman":410,"AryanSarswat":6}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_EMAIL;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PHONE;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"editfriend\";","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_NAME + \"NEW_NAME] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_PHONE + \"NEW_PHONE] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_EMAIL + \"NEW_EMAIL] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_ADDRESS + \"NEW_ADDRESS] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_DESCRIPTION + \"NEW_DESCRIPTION] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"            + \"[\" + PREFIX_NEW_TAG + \"NEW_TAG]...\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NEW_PHONE + \"91234567 \"","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NEW_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"AryanSarswat"},"content":"        FriendName updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"        Description updatedDescription \u003d editPersonDescriptor.getDescription().orElse(personToEdit.getDescription());","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e updatedLogs \u003d editPersonDescriptor.getLogs().orElse(personToEdit.getLogs());","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedDescription, updatedTags,","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"                updatedLogs);","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"AryanSarswat"},"content":"        private FriendName name;","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"dionegoh"},"content":"        private Description description;","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"        private List\u003cLog\u003e logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"dionegoh"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"            setLogs(toCopy.logs);","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"dionegoh"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, description, tags);","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"AryanSarswat"},"content":"        public void setName(FriendName name) {","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cFriendName\u003e getName() {","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"dionegoh"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"dionegoh"},"content":"            this.description \u003d description;","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"dionegoh"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"dionegoh"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"         * Sets {@code logs} to this object\u0027s {@code logs}.","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-07"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"        public void setLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"            this.logs \u003d logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-07"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns an unmodifiable list of logs, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-03-07"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-03-07"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-07"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"         * @return {@code Optional#empty()} if {@code logs} is null.","lastModifiedDate":"2022-03-07"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-07"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"        public Optional\u003cList\u003cLog\u003e\u003e getLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"            return (logs !\u003d null) ? Optional.of(Collections.unmodifiableList(logs)) : Optional.empty();","lastModifiedDate":"2022-03-07"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":259,"author":{"gitId":"dionegoh"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2022-03-15"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"dionegoh":30,"tanyjnaaman":23,"AryanSarswat":6,"-":204}},{"path":"src/main/java/seedu/address/logic/commands/EditEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_FRIENDNAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_FRIENDNAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import java.util.List;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":" * Edits the details of an existing event in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"public class EditEventCommand extends Command {","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    public static final String COMMAND_WORD \u003d \"editevent\";","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"            + \"[\" + PREFIX_NAME + \"NEW_EVENT_NAME] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"            + \"[\" + PREFIX_DATETIME + \"NEW_DATE_TIME] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"NEW_DESCRIPTION] \"","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"            + \"[\" + PREFIX_ADD_FRIENDNAME + \"ADD_FRIEND_NAME]… \"","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"            + \"[\" + PREFIX_REMOVE_FRIENDNAME + \"REMOVE_FRIEND_NAME]…\\n\"","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"            + PREFIX_NAME + \"2nd Birthday \"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"            + PREFIX_DATETIME + \"16-08-2021 1600\";","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"    public final Index index;","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    public final EditEventDescriptor editEventDescriptor;","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"     * @param index of the event in the event list to edit","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"     * @param editEventDescriptor details to edit the event with","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(index);","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(editEventDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getEventsList();","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"        model.setEvent(eventToEdit, editedEvent);","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent), false, false, true);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"     * Creates and returns a {@code Event} with the details of {@code eventToEdit}","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"AryanSarswat"},"content":"     * edited with {@code editEventDescriptor}.","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"AryanSarswat"},"content":"    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"AryanSarswat"},"content":"        assert eventToEdit !\u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"        EventName updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"AryanSarswat"},"content":"        DateTime updatedDateTime \u003d editEventDescriptor.getDateTime().orElse(eventToEdit.getDateTime());","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"AryanSarswat"},"content":"        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e addFriendNames \u003d editEventDescriptor.getAddFriendNames().orElse(null);","lastModifiedDate":"2022-03-17"},{"lineNumber":97,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e removeFriendNames \u003d editEventDescriptor.getRemoveFriendNames().orElse(null);","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e currentFriendName \u003d eventToEdit.getFriendNames();","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e updatedFriendNames \u003d new HashSet\u003c\u003e(currentFriendName);","lastModifiedDate":"2022-03-17"},{"lineNumber":100,"author":{"gitId":"AryanSarswat"},"content":"        if (removeFriendNames !\u003d null) {","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"AryanSarswat"},"content":"            updatedFriendNames.removeAll(removeFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"        if (addFriendNames !\u003d null) {","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"AryanSarswat"},"content":"            updatedFriendNames.addAll(addFriendNames);","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"AryanSarswat"},"content":"        return new Event(updatedName, updatedDateTime, updatedDescription, updatedFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"AryanSarswat"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"AryanSarswat"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"AryanSarswat"},"content":"            return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"AryanSarswat"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"AryanSarswat"},"content":"        if (!(other instanceof EditEventCommand)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"AryanSarswat"},"content":"            return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"AryanSarswat"},"content":"        // state check","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand e \u003d (EditEventCommand) other;","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"AryanSarswat"},"content":"        return index.equals(e.index)","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":127,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"AryanSarswat"},"content":"     * Stores the details to edit the event with. Each non-empty field value will replace the","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"AryanSarswat"},"content":"     * corresponding field value of the event.","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"AryanSarswat"},"content":"    public static class EditEventDescriptor {","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"AryanSarswat"},"content":"        private EventName name;","lastModifiedDate":"2022-03-17"},{"lineNumber":134,"author":{"gitId":"AryanSarswat"},"content":"        private DateTime dateTime;","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"AryanSarswat"},"content":"        private Description description;","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"AryanSarswat"},"content":"        private Set\u003cFriendName\u003e addFriendNames;","lastModifiedDate":"2022-03-17"},{"lineNumber":137,"author":{"gitId":"AryanSarswat"},"content":"        private Set\u003cFriendName\u003e removeFriendNames;","lastModifiedDate":"2022-03-17"},{"lineNumber":138,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"AryanSarswat"},"content":"        public EditEventDescriptor() {}","lastModifiedDate":"2022-03-15"},{"lineNumber":141,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":143,"author":{"gitId":"AryanSarswat"},"content":"         * Copy constructor.","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"AryanSarswat"},"content":"         * A defensive copy of {@code EventDescriptor} is used internally.","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":146,"author":{"gitId":"AryanSarswat"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"AryanSarswat"},"content":"            setName(toCopy.name);","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"AryanSarswat"},"content":"            setDateTime(toCopy.dateTime);","lastModifiedDate":"2022-03-15"},{"lineNumber":149,"author":{"gitId":"AryanSarswat"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"AryanSarswat"},"content":"            setAddFriendNames(toCopy.addFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"AryanSarswat"},"content":"            setRemoveFriendNames(toCopy.removeFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":153,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"AryanSarswat"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"AryanSarswat"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"AryanSarswat"},"content":"            return CollectionUtil.isAnyNonNull(name, dateTime, description, addFriendNames, removeFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"AryanSarswat"},"content":"        public void setName(EventName name) {","lastModifiedDate":"2022-03-17"},{"lineNumber":162,"author":{"gitId":"AryanSarswat"},"content":"            this.name \u003d name;","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cEventName\u003e getName() {","lastModifiedDate":"2022-03-17"},{"lineNumber":166,"author":{"gitId":"AryanSarswat"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"AryanSarswat"},"content":"        public void setDateTime(DateTime dateTime) {","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"AryanSarswat"},"content":"            this.dateTime \u003d dateTime;","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cDateTime\u003e getDateTime() {","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"AryanSarswat"},"content":"            return Optional.ofNullable(dateTime);","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"AryanSarswat"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"AryanSarswat"},"content":"            this.description \u003d description;","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"AryanSarswat"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"AryanSarswat"},"content":"         * Sets {@code addFriendsNames} to this object\u0027s {@code addFriendsNames}.","lastModifiedDate":"2022-03-16"},{"lineNumber":187,"author":{"gitId":"AryanSarswat"},"content":"         * A defensive copy of {@code friendsNames} is used internally.","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"AryanSarswat"},"content":"        public void setAddFriendNames(Set\u003cFriendName\u003e addFriendsNames) {","lastModifiedDate":"2022-03-17"},{"lineNumber":190,"author":{"gitId":"AryanSarswat"},"content":"            this.addFriendNames \u003d (addFriendsNames !\u003d null) ? new HashSet\u003c\u003e(addFriendsNames) : null;","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":194,"author":{"gitId":"AryanSarswat"},"content":"         * Returns an unmodifiable name set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-03-16"},{"lineNumber":195,"author":{"gitId":"AryanSarswat"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"AryanSarswat"},"content":"         * Returns {@code Optional#empty()} if {@code names} is null.","lastModifiedDate":"2022-03-16"},{"lineNumber":197,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cSet\u003cFriendName\u003e\u003e getAddFriendNames() {","lastModifiedDate":"2022-03-17"},{"lineNumber":199,"author":{"gitId":"AryanSarswat"},"content":"            return (addFriendNames !\u003d null) ? Optional.of(Collections.unmodifiableSet(addFriendNames)) : Optional.empty();","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"AryanSarswat"},"content":"         * Sets {@code removeFriendsNames} to this object\u0027s {@code removeFriendsNames}.","lastModifiedDate":"2022-03-16"},{"lineNumber":204,"author":{"gitId":"AryanSarswat"},"content":"         * A defensive copy of {@code friendsNames} is used internally.","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"AryanSarswat"},"content":"        public void setRemoveFriendNames(Set\u003cFriendName\u003e removeFriendNames) {","lastModifiedDate":"2022-03-17"},{"lineNumber":207,"author":{"gitId":"AryanSarswat"},"content":"            this.removeFriendNames \u003d (removeFriendNames !\u003d null) ? new HashSet\u003c\u003e(removeFriendNames) : null;","lastModifiedDate":"2022-03-15"},{"lineNumber":208,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":209,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":210,"author":{"gitId":"AryanSarswat"},"content":"        /**","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"AryanSarswat"},"content":"         * Returns an unmodifiable name set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-03-16"},{"lineNumber":212,"author":{"gitId":"AryanSarswat"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-03-15"},{"lineNumber":213,"author":{"gitId":"AryanSarswat"},"content":"         * Returns {@code Optional#empty()} if {@code names} is null.","lastModifiedDate":"2022-03-16"},{"lineNumber":214,"author":{"gitId":"AryanSarswat"},"content":"         */","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"AryanSarswat"},"content":"        public Optional\u003cSet\u003cFriendName\u003e\u003e getRemoveFriendNames() {","lastModifiedDate":"2022-03-17"},{"lineNumber":216,"author":{"gitId":"AryanSarswat"},"content":"            return (removeFriendNames !\u003d null) ? Optional.of(Collections.unmodifiableSet(removeFriendNames)) : Optional.empty();","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"AryanSarswat"},"content":"        @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":220,"author":{"gitId":"AryanSarswat"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":221,"author":{"gitId":"AryanSarswat"},"content":"            // short circuit if same object","lastModifiedDate":"2022-03-15"},{"lineNumber":222,"author":{"gitId":"AryanSarswat"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"AryanSarswat"},"content":"                return true;","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"AryanSarswat"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"AryanSarswat"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"AryanSarswat"},"content":"            if (!(other instanceof EditEventDescriptor)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"AryanSarswat"},"content":"                return false;","lastModifiedDate":"2022-03-15"},{"lineNumber":229,"author":{"gitId":"AryanSarswat"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":230,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":231,"author":{"gitId":"AryanSarswat"},"content":"            // state check","lastModifiedDate":"2022-03-15"},{"lineNumber":232,"author":{"gitId":"AryanSarswat"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;","lastModifiedDate":"2022-03-15"},{"lineNumber":233,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":234,"author":{"gitId":"AryanSarswat"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2022-03-15"},{"lineNumber":235,"author":{"gitId":"AryanSarswat"},"content":"                    \u0026\u0026 getDateTime().equals(e.getDateTime())","lastModifiedDate":"2022-03-15"},{"lineNumber":236,"author":{"gitId":"AryanSarswat"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2022-03-15"},{"lineNumber":237,"author":{"gitId":"AryanSarswat"},"content":"                    \u0026\u0026 getAddFriendNames().equals(e.getAddFriendNames())","lastModifiedDate":"2022-03-15"},{"lineNumber":238,"author":{"gitId":"AryanSarswat"},"content":"                    \u0026\u0026 getRemoveFriendNames().equals(e.getRemoveFriendNames());","lastModifiedDate":"2022-03-15"},{"lineNumber":239,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":240,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"AryanSarswat":241}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":" * Finds and lists all friends in address book whose name contains any of the argument keywords.","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"findfriend\";","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all friends whose names contain any of \"","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"dionegoh":3,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":" * Lists all friends in the address book to the user.","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"showfriends\";","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all friends\";","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":3,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/ShowEventsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":" * Lists all events in the address book to the user.","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"public class ShowEventsCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"    public static final String COMMAND_WORD \u003d \"showevents\";","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"    public String toString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"        return COMMAND_WORD;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        return (other instanceof ShowEventsCommand);","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":32}},{"path":"src/main/java/seedu/address/logic/commands/ShowFriendCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSON_DOES_NOT_EXIST;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"public class ShowFriendCommand extends Command {","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"showfriend\";","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_USAGE \u003d \"COMMAND_WORD : Shows full details of a friend in\"","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"            + \" the address book. \"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NAME + \" NAME \\n\"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NAME + \"John Doe\";","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Details of %1$s shown below\";","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    private final Person toShow;","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"    public ShowFriendCommand(Person person) {","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(person);","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"        toShow \u003d person;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"        if (!model.hasPerson(toShow)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"            throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        //updates UI to only show a single person","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"        model.updateFilteredPersonList(x -\u003e x.isSamePerson(toShow));","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toShow.getName()), false,","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"                false, false, true);","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"                || (other instanceof ShowFriendCommand // instanceof handles nulls","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"                \u0026\u0026 toShow.isSamePerson(((ShowFriendCommand) other).toShow));","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":58}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"                        PREFIX_DESCRIPTION, PREFIX_TAG);","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        Phone phone \u003d argMultimap.getValue(PREFIX_PHONE).isPresent()","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"                ? ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get())","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"                : null;","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        Email email \u003d argMultimap.getValue(PREFIX_EMAIL).isPresent()","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"                ? ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get())","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"                : null;","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"        Address address \u003d argMultimap.getValue(PREFIX_ADDRESS).isPresent()","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"                ? ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get())","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"                : null;","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"        Description description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"                ? ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get())","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"                : new Description(null);","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        Person person \u003d new Person(name, phone, email, address, description, tagList, null); // explicitly no logs","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"dionegoh":11,"tanyjnaaman":6,"AryanSarswat":4,"-":41,"limweiliang":1}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIEND_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":" * Parses input arguments and creates a new AddEventCommand object","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DESCRIPTION, PREFIX_FRIEND_NAME);","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_DATETIME)","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        EventName name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        // Optional Fields","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"        Description description;","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        } else {","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"            description \u003d new Description(null);","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"        Set\u003cFriendName\u003e friendNames \u003d ParserUtil.parseFriendNames(argMultimap.getAllValues(PREFIX_FRIEND_NAME));","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        Event event \u003d new Event(name, dateTime, description, friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"        return new AddEventCommand(event);","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"AryanSarswat":5,"limweiliang":49}},{"path":"src/main/java/seedu/address/logic/parser/AddLogCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand.AddLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":" * Parses input arguments and creates a new AddLogCommand object","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandParser implements Parser\u003cAddLogCommand\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLogCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"     * Parses a string of arguments and creates an {@code AddLogCommand}.","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws ParseException if command string is formatted wrongly","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    public AddLogCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TITLE, PREFIX_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d null;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        Index index \u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        // ensure title prefix is present","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        // ensure exactly one of index or name prefix is present","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        boolean hasIndex \u003d !argMultimap.getPreamble().isEmpty();","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        boolean hasName \u003d arePrefixesPresent(argMultimap, PREFIX_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        if ((!hasIndex \u0026\u0026 !hasName)","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"            || (hasIndex \u0026\u0026 hasName)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        // parse index or name","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        if (hasIndex) {","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"            name \u003d ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        // read other arguments","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogDescriptor addLogDescriptor \u003d new AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"            addLogDescriptor.setNewTitle(ParserUtil.parseTitle(argMultimap","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"                    .getValue(PREFIX_TITLE).get()));","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"            addLogDescriptor.setNewDescription(ParserUtil.parseLogDescription(argMultimap","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"                    .getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        // check validity","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        if (!addLogDescriptor.isTitleEdited()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        if (hasIndex) {","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"            command \u003d new AddLogCommand(index, addLogDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"            command \u003d new AddLogCommand(name, addLogDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        return command;","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"dionegoh":1,"tanyjnaaman":78,"AryanSarswat":3}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.DeleteLogCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.ShowEventsCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.commands.ShowFriendCommand;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"        case ShowFriendCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"            return new ShowFriendCommandParser().parse(arguments);","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2022-03-10"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"        case ShowEventsCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"            return new ShowEventsCommand();","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"        case AddLogCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"            return new AddLogCommandParser().parse(arguments);","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        case DeleteLogCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"            return new DeleteLogCommandParser().parse(arguments);","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"AryanSarswat"},"content":"        case EditEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"            return new EditEventCommandParser().parse(arguments);","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":4,"tanyjnaaman":8,"AryanSarswat":8,"-":76,"limweiliang":4}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"    public boolean arePrefixesPresent(Prefix... prefixes) {","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        return argumentMultimap.arePrefixesPresent(prefixes);","lastModifiedDate":"2022-03-10"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        return this.argMultimap.toString();","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"tanyjnaaman":11,"-":60,"limweiliang":11}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_CURRENT_NAME \u003d new Prefix(\"cn/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_NAME \u003d new Prefix(\"nn/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_PHONE \u003d new Prefix(\"np/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_EMAIL \u003d new Prefix(\"ne/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_ADDRESS \u003d new Prefix(\"na/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_DESCRIPTION \u003d new Prefix(\"nd/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    public static final Prefix PREFIX_NEW_TAG \u003d new Prefix(\"nt/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ttl/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Prefix PREFIX_LOG_INDEX \u003d new Prefix(\"id/\");","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Prefix FLAG_ALL \u003d new Prefix(\"-a\");","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    public static final Prefix PREFIX_FRIEND_NAME \u003d new Prefix(\"f/\");","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"    public static final Prefix PREFIX_ADD_FRIENDNAME \u003d new Prefix(\"af/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"    public static final Prefix PREFIX_REMOVE_FRIENDNAME \u003d new Prefix(\"rf/\");","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"dionegoh":9,"tanyjnaaman":3,"AryanSarswat":2,"-":16,"limweiliang":2}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INDEX_IS_NOT_NON_ZERO_UNSIGNED_INTEGER;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"        Pattern p \u003d Pattern.compile(\"^-?\\\\d*\\\\.{0,1}\\\\d+$\"); //Regex to match all numeric Strings","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"        boolean isDeletionByIndex \u003d isNumeric(p, args);","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        if (isDeletionByIndex) { //deletion by index","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"            try {","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"                Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"                return new DeleteCommand(index);","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"                throw new ParseException(MESSAGE_INDEX_IS_NOT_NON_ZERO_UNSIGNED_INTEGER);","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"        } else { //deletion by name","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"            FriendName name \u003d ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"            return new DeleteCommand(name);","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"     * Checks whether the argument entered by user is numeric","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"     * @param p Regex to check if the argument entered by user is numeric","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"     * @param strNum Argument entered by user.","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"     * @return True if the argument entered by user is numeric","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"    private static boolean isNumeric(Pattern p, String strNum) {","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"        String strNumTrimmed \u003d strNum.trim();","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        return p.matcher(strNumTrimmed).matches();","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"dionegoh":43,"AryanSarswat":2,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/DeleteLogCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOG_INDEX;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.DeleteLogCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":" * Parses the input arguments and creates a new DeleteLogCommand object.","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"public class DeleteLogCommandParser implements Parser\u003cDeleteLogCommand\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLogCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"     * Parses a string of arguments and creates a {@code DeleteLogCommand}.","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws ParseException if arguments are formatted wrongly.","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    public DeleteLogCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        // tokenize","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOG_INDEX, FLAG_ALL);","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        // check that log index is present, or all flag present, but not both","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_LOG_INDEX) \u003d\u003d arePrefixesPresent(argMultimap, FLAG_ALL)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        FriendName personName \u003d null;","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        boolean hasIndex \u003d !argMultimap.getPreamble().isEmpty();","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        boolean hasName \u003d arePrefixesPresent(argMultimap, PREFIX_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        boolean isForOnePerson \u003d hasIndex ^ hasName;","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        boolean isForDeletingAllLogs \u003d false;","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        // parse index or name","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        if (hasIndex) {","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"            personIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        } else if (hasName) {","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"                personName \u003d ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        // read other arguments","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getValue(PREFIX_LOG_INDEX).isPresent()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"            logIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LOG_INDEX).get());","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        if (arePrefixesPresent(argMultimap, FLAG_ALL)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"            isForDeletingAllLogs \u003d true;","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        // check for validity","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: delete specific log, specific person","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        // case 2: delete all logs, specific person","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        // case 3: delete all logs","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        if (!(isForOnePerson \u0026\u0026 !isForDeletingAllLogs \u0026\u0026 logIndex !\u003d null","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"                || isForOnePerson \u0026\u0026 isForDeletingAllLogs \u0026\u0026 logIndex \u003d\u003d null","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"                || !isForOnePerson \u0026\u0026 isForDeletingAllLogs \u0026\u0026 logIndex \u003d\u003d null \u0026\u0026 !hasIndex)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        // call correct constructor","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand command;","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        if (hasIndex) {","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"            command \u003d new DeleteLogCommand(isForOnePerson, isForDeletingAllLogs, personIndex, logIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"            if (personName \u003d\u003d null) { // means delete all","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"                command \u003d new DeleteLogCommand(isForDeletingAllLogs);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"            } else {","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"                command \u003d new DeleteLogCommand(isForOnePerson, isForDeletingAllLogs, personName, logIndex);","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        return command;","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"tanyjnaaman":88,"AryanSarswat":3}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_EMAIL;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PHONE;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NEW_NAME, PREFIX_NEW_PHONE,","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"                        PREFIX_NEW_EMAIL, PREFIX_NEW_ADDRESS, PREFIX_NEW_DESCRIPTION, PREFIX_NEW_TAG);","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"        if (argMultimap.getValue(PREFIX_NEW_NAME).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"            editPersonDescriptor.setName(ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NEW_NAME).get()));","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"        if (argMultimap.getValue(PREFIX_NEW_PHONE).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_NEW_PHONE).get()));","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        if (argMultimap.getValue(PREFIX_NEW_EMAIL).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_NEW_EMAIL).get()));","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        if (argMultimap.getValue(PREFIX_NEW_ADDRESS).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_NEW_ADDRESS).get()));","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"        if (argMultimap.getValue(PREFIX_NEW_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"            editPersonDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NEW_DESCRIPTION).get()));","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_NEW_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"dionegoh":18,"tanyjnaaman":1,"AryanSarswat":2,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/EditEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_FRIENDNAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_FRIENDNAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Collection;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Optional;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":" * Parses input arguments and creates a new EditEventCommand object","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEventCommand","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"     * and returns an EditEventCommand object for execution.","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DESCRIPTION,","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"                        PREFIX_ADD_FRIENDNAME, PREFIX_REMOVE_FRIENDNAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        Index index;","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"        try {","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"            editEventDescriptor.setName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"            editEventDescriptor.setDateTime(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"            editEventDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"        parseNamesForEdit(argMultimap.getAllValues(PREFIX_ADD_FRIENDNAME)).ifPresent(editEventDescriptor::setAddFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"        parseNamesForEdit(argMultimap.getAllValues(PREFIX_REMOVE_FRIENDNAME)).ifPresent(editEventDescriptor::setRemoveFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        return new EditEventCommand(index, editEventDescriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cName\u003e} if {@code names} is non-empty.","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"     * If {@code names} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"     * {@code Set\u003cName\u003e} containing zero names.","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    private Optional\u003cSet\u003cFriendName\u003e\u003e parseNamesForEdit(Collection\u003cString\u003e names) throws ParseException {","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"        assert names !\u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"        if (names.isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"            return Optional.empty();","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"        return Optional.of(ParserUtil.parseFriendNames(names));","lastModifiedDate":"2022-03-17"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"AryanSarswat":80}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.LogName;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    public static FriendName parseFriendName(String name) throws ParseException {","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(name); //when a name is entered by user, it should not be null","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"        if (!FriendName.isValidFriendName(trimmedName)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"            throw new ParseException(FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"        return new FriendName(trimmedName);","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"     * Parses a {@code String name} into a {@code EventName}.","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    public static EventName parseEventName(String name) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(name); //when a name is entered by user, it should not be null","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"        if (!EventName.isValidEventName(trimmedName)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"        return new EventName(trimmedName);","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(phone); //when a phone number is entered by user, it should not be null","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(address); //when an address is entered by user, it should not be null","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(email); //when an email is entered by user, it should not be null","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"     * Parses a {@code String dateTime} into a {@code DateTime}.","lastModifiedDate":"2022-03-10"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"     * @throws ParseException if the given {@code String dateTime} is invalid.","lastModifiedDate":"2022-03-10"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"    public static DateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2022-03-10"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2022-03-10"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"limweiliang"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-10"},{"lineNumber":128,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":129,"author":{"gitId":"limweiliang"},"content":"        return new DateTime(trimmedDateTime);","lastModifiedDate":"2022-03-10"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cName\u003e}.","lastModifiedDate":"2022-03-10"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":135,"author":{"gitId":"AryanSarswat"},"content":"    public static Set\u003cFriendName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(names);","lastModifiedDate":"2022-03-10"},{"lineNumber":137,"author":{"gitId":"AryanSarswat"},"content":"        final Set\u003cFriendName\u003e nameSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"        for (String name : names) {","lastModifiedDate":"2022-03-10"},{"lineNumber":139,"author":{"gitId":"AryanSarswat"},"content":"            nameSet.add(parseFriendName(name));","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":141,"author":{"gitId":"limweiliang"},"content":"        return nameSet;","lastModifiedDate":"2022-03-10"},{"lineNumber":142,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":143,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":144,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"dionegoh"},"content":"     * Parses a {@code String description} into an {@code Description}.","lastModifiedDate":"2022-03-10"},{"lineNumber":146,"author":{"gitId":"dionegoh"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"dionegoh"},"content":"     * @throws ParseException if the given {@code description} is invalid.","lastModifiedDate":"2022-03-10"},{"lineNumber":149,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"AryanSarswat"},"content":"    public static Description parseDescription(String description) throws ParseException {","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"dionegoh"},"content":"        requireNonNull(description); //when a description is entered by user, it should not be null","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"dionegoh"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"dionegoh"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"dionegoh"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"dionegoh"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"     * Parses a String title.","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws ParseException if the given {@code title} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"    public static String parseTitle(String title) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"AryanSarswat"},"content":"        if (!LogName.isValidLogName(title)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":194,"author":{"gitId":"AryanSarswat"},"content":"            throw new ParseException(LogName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"        return title; // TODO: 8/3/2022 refactor into Title object next time","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"AryanSarswat"},"content":"     * Parses a list of friend names","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"AryanSarswat"},"content":"     * @throws ParseException if a given {@code names} is invalid","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"AryanSarswat"},"content":"    public static Set\u003cFriendName\u003e parseFriendNames(Collection\u003cString\u003e names) throws ParseException {","lastModifiedDate":"2022-03-17"},{"lineNumber":205,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(names);","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"AryanSarswat"},"content":"        final Set\u003cFriendName\u003e nameSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-17"},{"lineNumber":207,"author":{"gitId":"AryanSarswat"},"content":"        for (String name: names) {","lastModifiedDate":"2022-03-15"},{"lineNumber":208,"author":{"gitId":"AryanSarswat"},"content":"            nameSet.add(parseFriendName(name));","lastModifiedDate":"2022-03-17"},{"lineNumber":209,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":210,"author":{"gitId":"AryanSarswat"},"content":"        return nameSet;","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":212,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":213,"author":{"gitId":"dionegoh"},"content":"    public static String parseLogDescription(String description) throws ParseException {","lastModifiedDate":"2022-03-10"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        return description; // no restrictions on description at the moment","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"dionegoh":19,"tanyjnaaman":15,"AryanSarswat":43,"-":115,"limweiliang":24}},{"path":"src/main/java/seedu/address/logic/parser/ShowFriendCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.commands.ShowFriendCommand;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":" * Parses input arguments and creates a new ShowFriendCommand object","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"public class ShowFriendCommandParser implements Parser\u003cShowFriendCommand\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"     * Parses string input argument entered by user","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"     * @param args Input entered by user.","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"     * @return A new ShowFriendCommand containing the person to be shown.","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"     * @throws ParseException If the input entered is invalid.","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    public ShowFriendCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowFriendCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        FriendName name \u003d ParserUtil.parseFriendName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        Person person \u003d new Person(name);","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"        return new ShowFriendCommand(person);","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":37}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.UniqueEventList;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":" * Duplicates are not allowed for both persons and events (by .isSamePerson/.isSameEvent comparison)","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Override Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"     * Replaces the contents of the event list with {@code events}.","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"        this.events.setEvents(events);","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person/Event Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"     * Returns true if a event with the same identity as {@code event} exists in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"        return events.contains(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"     * Adds a event to the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"     * The event must not already exist in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"    public void addEvent(Event p) {","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"        events.add(p);","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"limweiliang"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"limweiliang"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"    public void removeEvent(Event key) {","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"        events.remove(key);","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"limweiliang"},"content":"     * Replaces the given event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"limweiliang"},"content":"     * The person identity of {@code editedEvent} must not be the same as another existing event in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"limweiliang"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"limweiliang"},"content":"        events.setEvent(target, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"limweiliang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-03-16"},{"lineNumber":150,"author":{"gitId":"limweiliang"},"content":"        builder.append(persons.asUnmodifiableObservableList().size()).append(\" persons\");","lastModifiedDate":"2022-03-16"},{"lineNumber":151,"author":{"gitId":"limweiliang"},"content":"        builder.append(events.asUnmodifiableObservableList().size()).append(\" events\");","lastModifiedDate":"2022-03-16"},{"lineNumber":152,"author":{"gitId":"limweiliang"},"content":"        return builder.toString();","lastModifiedDate":"2022-03-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":161,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":162,"author":{"gitId":"limweiliang"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":163,"author":{"gitId":"limweiliang"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-16"},{"lineNumber":164,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":168,"author":{"gitId":"limweiliang"},"content":"        if (other \u003d\u003d this) { // short circuit if same object","lastModifiedDate":"2022-03-16"},{"lineNumber":169,"author":{"gitId":"limweiliang"},"content":"            return true;","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":171,"author":{"gitId":"limweiliang"},"content":"        if (!(other instanceof AddressBook)) { // handles nulls","lastModifiedDate":"2022-03-16"},{"lineNumber":172,"author":{"gitId":"limweiliang"},"content":"            return false;","lastModifiedDate":"2022-03-16"},{"lineNumber":173,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":174,"author":{"gitId":"limweiliang"},"content":"        AddressBook otherBook \u003d (AddressBook) other;","lastModifiedDate":"2022-03-16"},{"lineNumber":175,"author":{"gitId":"limweiliang"},"content":"        return persons.equals(otherBook.persons) \u0026\u0026 events.equals(otherBook.events);","lastModifiedDate":"2022-03-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"limweiliang"},"content":"        return Objects.hash(persons, events);","lastModifiedDate":"2022-03-16"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":111,"limweiliang":71}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"     * Returns true if an event with the same identity as {@code event} exists in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"    boolean hasEvent(Event event);","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"     * Adds the given event.","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"     * {@code event} must not already exist in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"    void addEvent(Event event);","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"     * Deletes the given event.","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"     * The event must exist in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"    void deleteEvent(Event target);","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"    void setEvent(Event target, Event editedPerson);","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"     * Returns true if all friend names in Event correspond to actual Friend objects.","lastModifiedDate":"2022-03-10"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"    boolean areEventFriendsValid(Event toAdd);","lastModifiedDate":"2022-03-10"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"    /** Returns an unmodifiable view of the events list */","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"    ObservableList\u003cEvent\u003e getEventsList();","lastModifiedDate":"2022-03-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"AryanSarswat":2,"-":88,"limweiliang":31}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    private final ObservableList\u003cEvent\u003e eventList;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"                + \" and user prefs \" + userPrefs);","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        eventList \u003d this.addressBook.getEventList();","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook - Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook - Event \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(event);","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"        return addressBook.hasEvent(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"limweiliang"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"    public void deleteEvent(Event target) {","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"limweiliang"},"content":"        addressBook.removeEvent(target);","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-10"},{"lineNumber":140,"author":{"gitId":"limweiliang"},"content":"    public boolean areEventFriendsValid(Event toAdd) {","lastModifiedDate":"2022-03-10"},{"lineNumber":141,"author":{"gitId":"limweiliang"},"content":"        return toAdd.areFriendNamesValid(addressBook);","lastModifiedDate":"2022-03-10"},{"lineNumber":142,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":143,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":144,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":145,"author":{"gitId":"AryanSarswat"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":148,"author":{"gitId":"limweiliang"},"content":"        addressBook.setEvent(target, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":149,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"limweiliang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":162,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"AryanSarswat"},"content":"    public ObservableList\u003cEvent\u003e getEventsList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"AryanSarswat"},"content":"        return eventList;","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"AryanSarswat":13,"-":147,"limweiliang":31}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"     * Returns an unmodifiable view of the events list.","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"     * This list will not contain any duplicate events.","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":17,"limweiliang":7}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { // this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"        sb.append(\"\\nLocal address book file location : \" + addressBookFilePath);","lastModifiedDate":"2022-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":85,"limweiliang":1}},{"path":"src/main/java/seedu/address/model/common/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.common;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":" * Represents a Person\u0027s description in the address book.","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"public class Description {","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, \"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"            + \"and it should not be empty if the /d flag has been input by user\";","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"    /*","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"     * The first character of the description must not be a whitespace,","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][\\\\S\\\\s]*\";","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    public final String value;","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"     * Constructs an {@code Description}.","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"     * @param description A valid description.","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    public Description(String description) {","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"            value \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"            checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"            value \u003d description;","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"     * Returns true if a given string is a valid description.","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    public String toString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        return value;","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"        } else if (other instanceof Description) {","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"            if (value \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"                return Objects.isNull(((Description) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"            } else if (Objects.isNull(((Description) other).value)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"                return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"                return value.equals(((Description) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"        return value.hashCode();","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"dionegoh":70,"AryanSarswat":2}},{"path":"src/main/java/seedu/address/model/common/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.common;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"public abstract class Name {","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"    public final String fullName;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"     * Constructs a {@code Name}","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"     * @param name a valid name","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"    protected Name(String name) {","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"        requireNonNull(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"        this.fullName \u003d name;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"    public String toString() {","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"        return fullName;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"        return fullName.hashCode();","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"AryanSarswat":28}},{"path":"src/main/java/seedu/address/model/event/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":" * Represents an Event\u0027s date-time.","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"public class DateTime {","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The date \u0026 time needs to be in the following format: \"","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"            + \"DD-MM-YYYY hhmm\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"            + \"Tip: 0s can be omitted where ambiguity will not be created.\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"            + \"e.g. 5-5-2021 instead of 05-05-2021 is a valid input.\";","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"            DateTimeFormatter.ofPattern(\"d-M-yyyy Hmm\");","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\");","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"    private final LocalDateTime value;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"     * Constructs an {@code DateTime}.","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"     * @param dateTimeString A valid date-time String, in the format DD-MM-YYYY hhmm.","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"    public DateTime(String dateTimeString) {","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(dateTimeString);","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"        checkArgument(isValidDateTime(dateTimeString), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"        value \u003d LocalDateTime.parse(dateTimeString, INPUT_FORMATTER);","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"     * Returns true if a given string is in a valid date time format.","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"     * @param dateTimeString String to check validity for.","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"     * @return True if the given string is in a valid date time format.","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"    public static Boolean isValidDateTime(String dateTimeString) {","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        try {","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeString, INPUT_FORMATTER);","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"        return value.toLocalDate();","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"     * Returns the dateTime in the correct input format for the DateTime constructor.","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"     * @return dateTime in the correct input format for the DateTime constructor.","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"    public String toInputFormat() {","lastModifiedDate":"2022-03-10"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"        return value.format(INPUT_FORMATTER);","lastModifiedDate":"2022-03-10"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"    public String toString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"        return value.format(OUTPUT_FORMATTER);","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"        if (!(other instanceof DateTime)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"        DateTime otherDateTime \u003d (DateTime) other;","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"        return this.value.equals(otherDateTime.value);","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        return value.hashCode();","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"limweiliang":87}},{"path":"src/main/java/seedu/address/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":" * Represents an Event in Amigos.","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":" * Guarantees: fields are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"public class Event {","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"    // Identity fields","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    private final EventName name;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    private final DateTime dateTime;","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    // Data fields","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    private final Description description;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"    private final Set\u003cFriendName\u003e friendNames \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"     * Constructor for event.","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"     * @param name        name of event","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"     * @param description description of event","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"     * @param dateTime    date and time of event","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"     * @param friendNames     set of friend\u0027s Names linked with the event.","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    public Event(EventName name, DateTime dateTime, Description description, Set\u003cFriendName\u003e friendNames) {","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        requireAllNonNull(name, dateTime, description, friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        this.friendNames.addAll(friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    public EventName getName() {","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"        return name;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"    private LocalDate getDate() {","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"        return dateTime.getDate();","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"    public DateTime getDateTime() {","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"        return dateTime;","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"    public Description getDescription() {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"        return description;","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"     * Returns an immutable person set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"     * if modification is attempted.","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    public Set\u003cFriendName\u003e getFriendNames() {","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"        return Collections.unmodifiableSet(friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"     * Returns true if all friend names correspond to actual Friends in the AddressBook.","lastModifiedDate":"2022-03-10"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"     * @return true if all friend names correspond to actual Friends in the AddressBook.","lastModifiedDate":"2022-03-10"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"    public boolean areFriendNamesValid(AddressBook addressBook) {","lastModifiedDate":"2022-03-10"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"        // There ought to be a better way of doing this - search AddressBook by name perhaps?","lastModifiedDate":"2022-03-10"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        // worth thinking about - how to enforce search specifically by name, rather than relying","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        // on the ::hasPerson(Person) method. todo implement search by name (specifically name objects match)","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"        // todo change this to take in a ReadOnlyAddressBook","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"        for (FriendName name : getFriendNames()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"            Person beingLookedFor \u003d new Person(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"            if (!addressBook.hasPerson(beingLookedFor)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"                return false;","lastModifiedDate":"2022-03-10"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"            }","lastModifiedDate":"2022-03-10"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"        return true;","lastModifiedDate":"2022-03-10"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"     * Returns true if both events have the same name and date.","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"     * This defines a weaker notion of equality between two events and is used to","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"     * prevent duplication.","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"     * @param otherEvent The other event to compare to.","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"     * @return True if both events have the same name and date.","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"        if (otherEvent \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"        return otherEvent !\u003d null","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 otherEvent.getName().equals(getName())","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 otherEvent.getDate().equals(getDate());","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"     * Returns true if both events have the exact same fields.","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"     * This defines a stronger notion of equality between two events.","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"AryanSarswat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"AryanSarswat"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"AryanSarswat"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"AryanSarswat"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"AryanSarswat"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"AryanSarswat"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"AryanSarswat"},"content":"        return otherEvent.getName().equals(getName())","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 otherEvent.getDateTime().equals(getDateTime())","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 otherEvent.getDescription().equals(getDescription())","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"                \u0026\u0026 otherEvent.getFriendNames().equals(getFriendNames());","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"AryanSarswat"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"AryanSarswat"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"        return Objects.hash(name, dateTime, description, friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"    public String toString() {","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"limweiliang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"        builder.append(getName())","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"limweiliang"},"content":"                .append(\"; DateTime: \")","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"limweiliang"},"content":"                .append(getDateTime())","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"limweiliang"},"content":"                .append(\"; Description: \")","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"limweiliang"},"content":"                .append(getDescription());","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e friendNames \u003d getFriendNames();","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"limweiliang"},"content":"        if (!friendNames.isEmpty()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":145,"author":{"gitId":"limweiliang"},"content":"            builder.append(\"; Friends: \");","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"limweiliang"},"content":"            friendNames.forEach(name -\u003e builder.append(name).append(\" \"));","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"limweiliang"},"content":"        return builder.toString();","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":5,"AryanSarswat":56,"limweiliang":89}},{"path":"src/main/java/seedu/address/model/event/EventName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Name;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"public class EventName extends Name {","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should only contain alphanumeric characters, \"","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"            + \"special characters and spaces, and it should not be blank.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9][^\\\\t\\\\n\\\\r\\\\f]*\";","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"     * Constructs a {@code FriendName}.","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    public EventName(String name) {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        super(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        checkArgument(isValidEventName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    public static boolean isValidEventName(String test) {","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        // Ensure in implementation Regex is not null","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"                || (other instanceof EventName // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 fullName.equals(((EventName) other).fullName)); // state check","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":1,"AryanSarswat":14,"-":29,"limweiliang":2}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import java.util.List;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":" * as to ensure that the event with exactly the same fields will be removed.","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":" *","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":" *","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"     * Adds an event to the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"    public void add(Event toAdd) {","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"     * Removes the equivalent event from the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"     * The event must exist in the list.","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"     * The person identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"    public void setEvents(UniqueEventList replacement) {","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"     * Replaces the contents of this list with {@code events}.","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"        if (!eventsAreUnique(events)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"        internalList.setAll(events);","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"                        \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-09"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"     * Returns true if {@code events} contains only unique events.","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"     * @param events","lastModifiedDate":"2022-03-09"},{"lineNumber":127,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"limweiliang"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"limweiliang"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"                    return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"                }","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"        return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"AryanSarswat":20,"limweiliang":118}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":" * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":" * name and date).","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"public class DuplicateEventException extends RuntimeException {","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"    public DuplicateEventException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"        super(\"Operation would result in duplicate events\");","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"limweiliang":11}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":" * Signals that the operation is unable to find the specified event.","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"public class EventNotFoundException extends RuntimeException {}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"limweiliang":6}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, \"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"            + \"and it should not be empty if the /a flag has been entered by user. \";","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"            value \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        } else if (other instanceof Address) {","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"            if (value \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"                return Objects.isNull(((Address) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"            } else if (Objects.isNull(((Address) other).value)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"                return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"                return value.equals(((Address) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":20,"-":53}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"            value \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        } else if (other instanceof Email) {","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"            if (value \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"                return Objects.isNull(((Email) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"            } else if (Objects.isNull(((Email) other).value)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"                return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"                return value.equals(((Email) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":18,"-":67}},{"path":"src/main/java/seedu/address/model/person/FriendName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Name;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":" * Represents a Friend\u0027s name in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidFriendName(String)}","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"public class FriendName extends Name {","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z][\\\\p{Alnum} ]*\";","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"     * Constructs a {@code FriendName}.","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    public FriendName(String name) {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        super(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        checkArgument(isValidFriendName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    public static boolean isValidFriendName(String test) {","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        // Ensure in implementation Regex is not null","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"                || (other instanceof FriendName // instanceof handles nulls","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 fullName.equals(((FriendName) other).fullName)); // state check","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":1,"AryanSarswat":14,"-":31}},{"path":"src/main/java/seedu/address/model/person/Log.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":" * Represents a note or log tied to a Person in the address book.","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"public class Log {","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"    // default values","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"    public static final String DEFAULT_NO_DESCRIPTION \u003d null;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    // immutable attributes","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    private final LogName title;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"    private final Description description;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a Log object.","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"     * @param title       Title of the log.","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"     * @param description Description tied to the log. Can be null.","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    public Log(String title, String description) {","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        this.title \u003d new LogName(title);","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    public Description getDescription() {","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(this.description);","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        return this.description;","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    public LogName getTitle() {","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(this.title);","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        return this.title;","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if other Log is considered the same as this Log.","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"     * By convention, we consider two Logs the same if their titles are the same.","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"     * @param other The other log.","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"     * @return True if other log is considered the same.","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean isSameLog(Log other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        return this.getTitle().equals(other.getTitle());","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        return this.title + \"\\n\" + this.description + \"\\n\\n\";","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"                || (other instanceof Log","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (this.getTitle().equals(((Log) other).getTitle())) //getters ensure non-null","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (this.getDescription().equals(((Log) other).getDescription())));","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        return this.title.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":61,"AryanSarswat":10}},{"path":"src/main/java/seedu/address/model/person/LogName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Name;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":" * Represents a Person\u0027s log name in the address book.","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLogName(String)}","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"public class LogName extends Name {","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"    public static final int TITLE_LENGTH_CONSTRAINT \u003d 50;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Titles of logs must satisfy:\\n\"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"                    + \"1. Not be trivial (i.e. not empty or contain only spaces)\\n\"","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"                    + \"2. Be at most \" + TITLE_LENGTH_CONSTRAINT + \" characters long. \"","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"                    + \"This is because of display limitations.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    /*","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum}\\\\p{Punct}][\\\\p{Alnum}\\\\p{Punct}\\\\s]{1,\" + (TITLE_LENGTH_CONSTRAINT - 1) + \"}\";","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"     * Constructs a {@code FriendName}.","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"     * @param name A valid name.","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"    public LogName(String name) {","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"        super(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        checkArgument(isValidLogName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"    public static boolean isValidLogName(String test) {","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"        // Ensure in implementation Regex is not null","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"                || (other instanceof LogName // instanceof handles nulls","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 fullName.equals(((LogName) other).fullName)); // state check","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"AryanSarswat":50}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.isNull;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import java.util.List;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    private final FriendName name;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    private final Phone phone;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    private final Email email;","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    private final Description description;","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    private final UniqueLogList logs \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a person.","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"     * @param name        Name of the person. Compulsory.","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"     * @param phone       Phone object of the person. If null, default to no phone.","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"     * @param email       Phone object of the person. If null, default to no email.","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"     * @param address     Phone object of the person. If null, default to no address.","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"     * @param description Phone object of the person. If null, default to no description.","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"     * @param tags        Set of tags of the person. If null, default to no tags.","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"     * @param logs        Log list of the person. if null, default to no logs.","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"    public Person(FriendName name, Phone phone, Email email, Address address, Description description, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"                  List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(name);","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        this.phone \u003d isNull(phone) ? new Phone(null) : phone;","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        this.email \u003d isNull(email) ? new Email(null) : email;","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        this.address \u003d isNull(address) ? new Address(null) : address;","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        this.description \u003d isNull(description) ? new Description(null) : description;","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        this.tags.addAll(isNull(tags) ? new HashSet\u003c\u003e() : tags);","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs.setLogs(isNull(logs) ? new ArrayList\u003c\u003e() : logs);","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(this.name, this.phone, this.email,","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"                this.address, this.description, this.tags, this.logs);","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"     * Overloaded constructor for person without tags and logs.","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"    public Person(FriendName name, Phone phone, Email email, Address address) {","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(name, phone, email, address);","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d new Description(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        this.tags.addAll(new HashSet\u003c\u003e());","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"        this.logs.setLogs(new ArrayList\u003c\u003e());","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"     * Overloaded method to construct a person with only a name.","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"     * @param name Name of the person. Compulsory.","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"    public Person(FriendName name) {","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"        this.phone \u003d new Phone(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"        this.email \u003d new Email(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"        this.address \u003d new Address(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d new Description(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"        this.tags.addAll(new HashSet\u003c\u003e());","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"        this.logs.setLogs(new ArrayList\u003c\u003e());","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"AryanSarswat"},"content":"     * Overloaded constructor for person with no email.","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"AryanSarswat"},"content":"    public Person(FriendName name, Phone phone, Email email, Address address, Description description, Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(name, phone, address, description, tags);","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":97,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":99,"author":{"gitId":"AryanSarswat"},"content":"        this.logs.setLogs(new ArrayList\u003c\u003e());","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":102,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"     * Overloaded constructor for person with no description.","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"    public Person(FriendName name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"        requireAllNonNull(name, phone, email, address, tags, logs);","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-10"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-03-10"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-03-10"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d new Description(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs.setLogs(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"AryanSarswat"},"content":"    public FriendName getName() {","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":132,"author":{"gitId":"dionegoh"},"content":"    public Description getDescription() {","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"dionegoh"},"content":"        return description;","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"    public List\u003cLog\u003e getLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        return this.logs.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean containsLog(Log log) {","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"        return this.logs.contains(log);","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if both persons are the same, which we define to be","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"     * having the same name.","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if both persons explicitly have the same name.","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean hasSameName(Person otherPerson) {","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        return this.name.equals(otherPerson.name);","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":191,"author":{"gitId":"dionegoh"},"content":"                \u0026\u0026 otherPerson.getDescription().equals(getDescription())","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2022-03-07"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 otherPerson.getLogs().equals(getLogs());","lastModifiedDate":"2022-03-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":199,"author":{"gitId":"dionegoh"},"content":"        return Objects.hash(name, phone, email, address, description, tags, logs);","lastModifiedDate":"2022-03-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":206,"author":{"gitId":"dionegoh"},"content":"                .append(getPhone().value \u003d\u003d null ? \"\" : (\"; Phone: \" + getPhone()))","lastModifiedDate":"2022-03-09"},{"lineNumber":207,"author":{"gitId":"dionegoh"},"content":"                .append(getEmail().value \u003d\u003d null ? \"\" : (\"; Email: \" + getEmail()))","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"dionegoh"},"content":"                .append(getAddress().value \u003d\u003d null ? \"\" : (\"; Address: \" + getAddress()))","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"dionegoh"},"content":"                .append(getDescription().value \u003d\u003d null ? \"\"","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"dionegoh"},"content":"                        : (\"; Description: \" + getDescription()));","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e logs \u003d this.getLogs();","lastModifiedDate":"2022-03-07"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        if (!logs.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"            builder.append(\": Logs: \\n\");","lastModifiedDate":"2022-03-07"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"            logs.forEach(builder::append);","lastModifiedDate":"2022-03-07"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":31,"tanyjnaaman":48,"AryanSarswat":31,"-":115}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"            value \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"        } else if (other instanceof Phone) {","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"            if (value \u003d\u003d null) {","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"                return Objects.isNull(((Phone) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"            } else if (Objects.isNull(((Phone) other).value)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"                return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"                return value.equals(((Phone) other).value);","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"        } else {","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"            return false;","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":18,"-":49}},{"path":"src/main/java/seedu/address/model/person/UniqueLogList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.DuplicateLogException;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.LogNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":" * A list of Logs that enforces the uniqueness between its elements and does not","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":" * allow nulls.","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":" * \u003cp\u003eA log is considered unique by comparing {@code Log#isSameLog(Log)}. As such, adding and updating","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":" * of Logs uses Log#isSameLog(Log) for equality to ensure that the Log being added or updated is unique","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":" * in terms of \"identity\" in the UniqueLogList.Deleting of Logs uses Log#equals(Object) for equality to ensure","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":" * that the Log being deleted is exactly correct.","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":" * \u003cp\u003eSupports a minimal set of list operations.","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":" * @see Log#isSameLog(Log)","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"public class UniqueLogList {","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    // observable list allows Java FX listeners to track changes","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    private final ObservableList\u003cLog\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    private final ObservableList\u003cLog\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if the list contains an equivalent log as the given argument.","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean contains(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.stream().anyMatch(log::isSameLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if the list contains a log that matches exactly the","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"     * given {@code Log}. A stronger form of contains.","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean containsExactly(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.stream().anyMatch(log::equals);","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"     * Adds a log to the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"     * An identical log must not already exist in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"    public void addLog(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        if (this.contains(log)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        internalList.add(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"     * Replaces the {@code target} in the list with the {@code editedLog}.","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"     * The {@code target} log must exist in the list, and the identity of the {@code editedLog}","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"     * must be different from all existing logs in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLog(Log targetLog, Log editedLog) {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(targetLog, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        if (!targetLog.isSameLog(editedLog) \u0026\u0026 this.contains(editedLog)) { // trying to insert something already inside","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        int index \u003d this.internalList.indexOf(targetLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"            throw new LogNotFoundException();","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        this.internalList.set(index, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"     * Removes the equivalent log from the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"     * The log must exist in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog(Log toRemove) {","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        if (!this.internalList.remove(toRemove)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"            throw new LogNotFoundException();","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"     * Replaces the contents of the list with all of {@code logs}.","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"     * {@code logs} must not contain duplicate log.","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        if (!this.logsAreUnique(logs)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        this.internalList.setAll(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if and only if {@code logs} contains only unique (by title) logs.","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean logsAreUnique(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        int n \u003d logs.size();","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        for (int i \u003d 0; i \u003c n - 1; i++) { // iterate like N choose 2","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"            for (int j \u003d i + 1; j \u003c n; j++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"                if (logs.get(i).isSameLog(logs.get(j))) {","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"                    return false;","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"                }","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns the list of logs as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"    public ObservableList\u003cLog\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalUnmodifiableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":132}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateLogException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":" * identity).","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"public class DuplicateLogException extends RuntimeException {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"    public DuplicateLogException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"        super(\"Operation would result in duplicate logs\");","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/LogNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":" * Signals that the operation is unable to find the specified log.","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"public class LogNotFoundException extends RuntimeException {}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Description(\"Friends since high school\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"friends\"), null),","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Description(\"Friday lunch buddy\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"colleagues\", \"friends\"), null),","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Description(\"Deskmate in CS1010S\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"neighbours\"), null),","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Description(\"Loves to steal my food\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"family\"), null),","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Description(\"Friends since junior college\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"classmates\"), null),","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"            new Person(new FriendName(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Description(\"Takes the same bus as me\"),","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"colleagues\"), null)","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    public static Event[] getSampleEvents() {","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        return new Event[] {","lastModifiedDate":"2022-03-10"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"            new Event(new EventName(\"Alex Birthday\"), new DateTime(\"10-03-2022 1430\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"                    new Description(\"Remember to bring cake.\"), getNameSet(\"Alex Yeoh\", \"David Li\")),","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"            new Event(new EventName(\"Weekends at Bernice\"), new DateTime(\"10-04-2022 1835\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"                 new Description(null), getNameSet(\"Bernice Yu\")),","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"            new Event(new EventName(\"Boardgame Night\"), new DateTime(\"12-04-2022 1945\"),","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"                 new Description(\"We will be playing Monopoly.\"),","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"                 getNameSet(\"Roy Balakrishnan\", \"Irfan Ibrahim\"))","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"        for (Event sampleEvent : getSampleEvents()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"            sampleAb.addEvent(sampleEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"     * Returns a name set containing the list of strings given.","lastModifiedDate":"2022-03-10"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"    public static Set\u003cFriendName\u003e getNameSet(String... strings) {","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2022-03-10"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"                .map(FriendName::new)","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2022-03-10"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"dionegoh":6,"tanyjnaaman":7,"AryanSarswat":14,"-":44,"limweiliang":17}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-03-10"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import java.util.List;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"    private final String name;","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    private final String dateTime;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"    private final String description;","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    private final List\u003cJsonAdaptedName\u003e friendNames \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details.","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"name\") String name, @JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"                            @JsonProperty(\"description\") String description,","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"                            @JsonProperty(\"friendNames\") List\u003cJsonAdaptedName\u003e friendNames) {","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        if (friendNames !\u003d null) {","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"            this.friendNames.addAll(friendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2022-03-10"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"        dateTime \u003d source.getDateTime().toInputFormat();","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"        description \u003d source.getDescription().value;","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"        friendNames.addAll(source.getFriendNames().stream()","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"                .map(JsonAdaptedName::new)","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2022-03-10"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"        final List\u003cFriendName\u003e eventFriendNames \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"        for (JsonAdaptedName friendName : friendNames) {","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"            eventFriendNames.add(friendName.toModelType());","lastModifiedDate":"2022-03-10"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        final Set\u003cFriendName\u003e modelFriendNames \u003d new HashSet\u003c\u003e(eventFriendNames);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, FriendName.class.getSimpleName()));","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"        if (!FriendName.isValidFriendName(name)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        final EventName modelName \u003d new EventName(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2022-03-10"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-03-10"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"                    DateTime.class.getSimpleName()));","lastModifiedDate":"2022-03-10"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"        if (!DateTime.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-03-10"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-10"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        final DateTime modelDateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2022-03-10"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"        if (description !\u003d null \u0026\u0026 !Description.isValidDescription(description)) {","lastModifiedDate":"2022-03-10"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-10"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2022-03-10"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"        return new Event(modelName, modelDateTime, modelDescription, modelFriendNames);","lastModifiedDate":"2022-03-10"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-10"}],"authorContributionMap":{"AryanSarswat":9,"limweiliang":85}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedLog.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.LogName;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":" * Jackson-friendly version of {@link Log}","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"public class JsonAdaptedLog {","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    private final String title;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    private final String description;","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a {@code JsonAdaptedLog} with the given {@code title} and {@code desccription}.","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"     * Assumes that title and description are both valid and non-null.","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"    public JsonAdaptedLog(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description) {","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a {@code JsonAdaptedLog} with the given {@code Log}.","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    public JsonAdaptedLog(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"        this.title \u003d log.getTitle().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d log.getDescription().toString();","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"     * Converts a {@code JsonAdoptedLog} to a {@code Log} object.","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws IllegalValueException if constructed {@code Log} contains","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"     *                               illegal values.","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    public Log toModelType() throws IllegalValueException {","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"        if (!LogName.isValidLogName(this.title)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(LogName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        return new Log(this.title, this.description);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":43,"AryanSarswat":5}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-03-10"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":" * Jackson-friendly version of {@link FriendName}.","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"class JsonAdaptedName {","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"    private final String name;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"     * Constructs a {@code JsonAdaptedName} with the given {@code name}.","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"    public JsonAdaptedName(String name) {","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"     * Converts a given {@code Name} into this class for Jackson use.","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    public JsonAdaptedName(FriendName source) {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"        name \u003d source.fullName;","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"    @JsonValue","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"    public String getName() {","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"        return name;","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"     * Converts this Jackson-friendly adapted name object into the model\u0027s {@code Name} object.","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted name.","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"    public FriendName toModelType() throws IllegalValueException {","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        if (!FriendName.isValidFriendName(name)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        return new FriendName(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-10"}],"authorContributionMap":{"AryanSarswat":7,"limweiliang":40}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"    private final String description;","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    private final List\u003cJsonAdaptedLog\u003e logs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"            @JsonProperty(\"logs\") List\u003cJsonAdaptedLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        if (logs !\u003d null) {","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"            this.logs.addAll(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"        description \u003d source.getDescription().value;","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        logs.addAll(source.getLogs().stream()","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"                .map(JsonAdaptedLog::new)","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, FriendName.class.getSimpleName()));","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"        if (!FriendName.isValidFriendName(name)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"AryanSarswat"},"content":"            throw new IllegalValueException(FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"AryanSarswat"},"content":"        final FriendName modelName \u003d new FriendName(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"        if (phone !\u003d null \u0026\u0026 !Phone.isValidPhone(phone)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"        if (email !\u003d null \u0026\u0026 !Email.isValidEmail(email)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"dionegoh"},"content":"        if (address !\u003d null \u0026\u0026 !Address.isValidAddress(address)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"        if (description !\u003d null \u0026\u0026 !Description.isValidDescription(description)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cLog\u003e personLogs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        for (JsonAdaptedLog log : logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"            personLogs.add(log.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cLog\u003e modelLogs \u003d personLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"dionegoh"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelDescription,","lastModifiedDate":"2022-03-10"},{"lineNumber":126,"author":{"gitId":"dionegoh"},"content":"                modelTags, modelLogs);","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"dionegoh":16,"tanyjnaaman":18,"AryanSarswat":6,"-":88}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_FRIENDS;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons and events","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"        this.events.addAll(events);","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"            if (!(event.areFriendNamesValid(addressBook))) {","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_EVENT_FRIENDS);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"            if (addressBook.hasEvent(event)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"            addressBook.addEvent(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":58,"limweiliang":22}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage},","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"     * and {@code UserPrefStorage}.","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":76,"limweiliang":2}},{"path":"src/main/java/seedu/address/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"    public final Event event;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"    private Label name;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    private Label id;","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"    private Label dateTime;","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"    private Label description;","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    private FlowPane friends;","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"     * Creates a {@code EventCard} with the given {@code Event} and index to display.","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        super(FXML);","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        this.event \u003d event;","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"        name.setText(event.getName().fullName);","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"        dateTime.setText(event.getDateTime().toString());","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"        description.setText(event.getDescription().value);","lastModifiedDate":"2022-03-10"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"        friends.setHgap(4);","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"        event.getFriendNames().stream()","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"                .forEach(friend -\u003e friends.getChildren().add(new Label(friend.fullName)));","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        if (!(other instanceof EventCard)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"        // state check","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        EventCard card \u003d (EventCard) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"                \u0026\u0026 event.equals(card.event);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":72}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":" * Panel containing the list of Events.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"     * Creates a {@code EventListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"        super(FXML);","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}.","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    private class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"                setGraphic(null);","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"                setText(null);","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"            } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":49}},{"path":"src/main/java/seedu/address/ui/ExpandedPersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import java.util.List;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":" * An UI component that displays the full information of a {@code Person}.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"public class ExpandedPersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"    private static final String FXML \u003d \"ExpandedPersonListCard.fxml\";","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    private final Person person;","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"    private Label name;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    private Label phone;","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    private Label address;","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    private Label email;","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"    private Label description;","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"    private FlowPane tags;","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    private Label logs;","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    public ExpandedPersonCard(Person person) {","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"        super(FXML);","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        phone.setText(person.getPhone().value \u003d\u003d null ? \"\" : \"Phone: \" + person.getPhone().value);","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        address.setText(person.getAddress().value \u003d\u003d null ? \"\" : \"Address: \" + person.getAddress().value);","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"        email.setText(person.getEmail().value \u003d\u003d null ? \"\" : \"Email: \" + person.getEmail().value);","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        description.setText(person.getDescription().value \u003d\u003d null","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"                ? \"\"","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"                : person.getDescription().value);","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"        person.getTags().stream()","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"        //displaying each log","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"        List\u003cLog\u003e logList \u003d person.getLogs();","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"        int numberOfLogs \u003d logList.size();","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"        for (int i \u003d 1; i \u003c\u003d numberOfLogs; i++) {","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"            sb.append(i + \". \" + logList.get(i - 1).toString() + \"\\n\");","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"        logs.setText(sb.toString());","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"dionegoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"dionegoh"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"dionegoh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"dionegoh"},"content":"            return true;","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"dionegoh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"        if (!(other instanceof ExpandedPersonCard)) {","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"            return false;","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"dionegoh"},"content":"        // state check","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"        ExpandedPersonCard card \u003d (ExpandedPersonCard) other;","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"        return person.equals(card.person);","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":93}},{"path":"src/main/java/seedu/address/ui/ExpandedPersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":" * Panel containing the view of an expanded person card.","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"public class ExpandedPersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    private static final String FXML \u003d \"ExpandedPersonListPanel.fxml\";","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ExpandedPersonListPanel.class);","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"    public ExpandedPersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        super(FXML);","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    private class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"                setGraphic(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"                setText(null);","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"                setGraphic(new ExpandedPersonCard(person).getRoot());","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":48}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s2-cs2103-f09-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":101,"limweiliang":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.control.Tab;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    private ExpandedPersonListPanel expandedPersonListPanel;","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    private StackPane eventListPanelPlaceholder;","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"    @FXML","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"    private StackPane expandedPersonListPanelPlaceholder;","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    private TabPane tabs;","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    private Tab personListTab;","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"    private Tab eventsListTab;","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"dionegoh"},"content":"        expandedPersonListPanel \u003d new ExpandedPersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"dionegoh"},"content":"        expandedPersonListPanelPlaceholder.getChildren();","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"dionegoh"},"content":"        expandedPersonListPanelPlaceholder.getChildren().add(expandedPersonListPanel.getRoot());","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"AryanSarswat"},"content":"        eventListPanel \u003d new EventListPanel(logic.getEventsList());","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"AryanSarswat"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":193,"author":{"gitId":"AryanSarswat"},"content":"    private void changeInterface(CommandResult commandResult) {","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"AryanSarswat"},"content":"        boolean event \u003d commandResult.isEvent();","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"dionegoh"},"content":"        boolean isExpandedCard \u003d commandResult.isShowFriendCommand();","lastModifiedDate":"2022-03-16"},{"lineNumber":196,"author":{"gitId":"AryanSarswat"},"content":"        if (event) {","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"AryanSarswat"},"content":"            tabs.getSelectionModel().select(eventsListTab);","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"AryanSarswat"},"content":"            eventListPanelPlaceholder.requestFocus();","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"AryanSarswat"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"AryanSarswat"},"content":"            tabs.getSelectionModel().select(personListTab);","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"dionegoh"},"content":"            if (isExpandedCard) {","lastModifiedDate":"2022-03-16"},{"lineNumber":202,"author":{"gitId":"dionegoh"},"content":"                expandedPersonListPanelPlaceholder.requestFocus();","lastModifiedDate":"2022-03-16"},{"lineNumber":203,"author":{"gitId":"dionegoh"},"content":"                expandedPersonListPanelPlaceholder.toFront();","lastModifiedDate":"2022-03-16"},{"lineNumber":204,"author":{"gitId":"dionegoh"},"content":"            } else {","lastModifiedDate":"2022-03-16"},{"lineNumber":205,"author":{"gitId":"AryanSarswat"},"content":"                personListPanelPlaceholder.requestFocus();","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"dionegoh"},"content":"                personListPanelPlaceholder.toFront();","lastModifiedDate":"2022-03-16"},{"lineNumber":207,"author":{"gitId":"dionegoh"},"content":"            }","lastModifiedDate":"2022-03-16"},{"lineNumber":208,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"AryanSarswat"},"content":"            changeInterface(commandResult);","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"dionegoh":17,"AryanSarswat":28,"-":194}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"    private final Person person;","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"    @FXML","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"    private FlowPane logs;","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        phone.setText(person.getPhone().value \u003d\u003d null ? \"\" : person.getPhone().value);","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        address.setText(person.getAddress().value \u003d\u003d null ? \"\" : person.getAddress().value);","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"        email.setText(person.getEmail().value \u003d\u003d null ? \"\" : person.getEmail().value);","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        logs.setHgap(4);","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        int index \u003d 1;","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        for (Log log: person.getLogs()) {","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"            logs.getChildren().add(new Label(index + \". \" + log.getTitle()));","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"            index++;","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"dionegoh":4,"AryanSarswat":9,"-":73}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    private class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"AryanSarswat":1,"-":46}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/amigos.png\";","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"AryanSarswat":1,"-":87}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":".tab-pane .tab-header-area .tab-header-background {","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"    -fx-tab-min-width:90px;","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    -fx-alignment: center;","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-color: green;","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":".tab-pane .tab {","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-color: #e6e6e6;","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":".tab-pane .tab:selected","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"{","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-color: #3c3c3c;","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":".tab:selected .tab-label {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"    -fx-text-fill: #96b946;","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":".tab .tab-label {","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    -fx-text-fill: #828282;","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    -fx-font-size: 12px;","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":148,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"dionegoh"},"content":".cell_header_label {","lastModifiedDate":"2022-03-16"},{"lineNumber":153,"author":{"gitId":"dionegoh"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-03-16"},{"lineNumber":154,"author":{"gitId":"dionegoh"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2022-03-16"},{"lineNumber":155,"author":{"gitId":"dionegoh"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2022-03-16"},{"lineNumber":156,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":157,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":158,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"dionegoh"},"content":".cell_name_label {","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"dionegoh"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-03-16"},{"lineNumber":166,"author":{"gitId":"dionegoh"},"content":"    -fx-font-size: 40px;","lastModifiedDate":"2022-03-16"},{"lineNumber":167,"author":{"gitId":"dionegoh"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2022-03-16"},{"lineNumber":168,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":169,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":327,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":334,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":339,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":341,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":345,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":347,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":359,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":370,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":379,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":381,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":384,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":386,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":393,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":394,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":395,"author":{"gitId":"AryanSarswat"},"content":"#logs .label {","lastModifiedDate":"2022-03-10"},{"lineNumber":396,"author":{"gitId":"AryanSarswat"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-03-10"},{"lineNumber":397,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-color: #91693e;","lastModifiedDate":"2022-03-10"},{"lineNumber":398,"author":{"gitId":"AryanSarswat"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2022-03-10"},{"lineNumber":399,"author":{"gitId":"AryanSarswat"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2022-03-10"},{"lineNumber":400,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2022-03-10"},{"lineNumber":401,"author":{"gitId":"AryanSarswat"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2022-03-10"},{"lineNumber":402,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-10"},{"lineNumber":403,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":404,"author":{"gitId":"AryanSarswat"},"content":"#friends .label {","lastModifiedDate":"2022-03-10"},{"lineNumber":405,"author":{"gitId":"AryanSarswat"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-03-10"},{"lineNumber":406,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-color: #9FCC2E;","lastModifiedDate":"2022-03-10"},{"lineNumber":407,"author":{"gitId":"AryanSarswat"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2022-03-10"},{"lineNumber":408,"author":{"gitId":"AryanSarswat"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2022-03-10"},{"lineNumber":409,"author":{"gitId":"AryanSarswat"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2022-03-10"},{"lineNumber":410,"author":{"gitId":"AryanSarswat"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2022-03-10"},{"lineNumber":411,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-10"}],"authorContributionMap":{"dionegoh":12,"AryanSarswat":47,"-":352}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date_time\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"         \u003cFlowPane fx:id\u003d\"friends\" layoutX\u003d\"25.0\" layoutY\u003d\"54.0\" /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":40}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":8}},{"path":"src/main/resources/view/ExpandedPersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefWidth\u003d\"220.0\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_name_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"                  \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"               \u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"        \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"       \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$description\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"            \u003copaqueInsets\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"               \u003cInsets /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"            \u003c/opaqueInsets\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"            \u003cVBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"               \u003cInsets top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"            \u003c/VBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"         \u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"            \u003cfont\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"               \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"            \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$address\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"            \u003cfont\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"               \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"            \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$email\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"            \u003cfont\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"               \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"            \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"         \u003cLabel styleClass\u003d\"cell_header_label\" text\u003d\"Upcoming Events:\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"            \u003cVBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"               \u003cInsets top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"            \u003c/VBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"            \u003cfont\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"               \u003cFont size\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"            \u003c/font\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"         \u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"         \u003cLabel styleClass\u003d\"cell_header_label\" text\u003d\"Logs:\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"            \u003cVBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"               \u003cInsets top\u003d\"30.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"            \u003c/VBox.margin\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"            \u003cfont\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"               \u003cFont size\u003d\"19.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"            \u003c/font\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"         \u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"         \u003cLabel fx:id\u003d\"logs\" layoutX\u003d\"25.0\" layoutY\u003d\"46.0\" text\u003d\"\\\\$logs\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"               \u003cInsets top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"            \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":75}},{"path":"src/main/resources/view/ExpandedPersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"dionegoh":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import java.lang.String?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Amigos App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    \u003cImage url\u003d\"@/images/amigos.png\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"            \u003cTabPane fx:id\u003d\"tabs\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"              \u003ctabs\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"                \u003cTab fx:id\u003d\"personListTab\" text\u003d\"Friends\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"                  \u003ccontent\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"                    \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" styleClass\u003d\"background\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"                           \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"                               \u003cStackPane fx:id\u003d\"expandedPersonListPanelPlaceholder\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"0.0\" prefWidth\u003d\"199.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"                               \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"0.0\" prefWidth\u003d\"199.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"                           \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"                        \u003c/AnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"                  \u003c/content\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"                \u003c/Tab\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"                \u003cTab fx:id\u003d\"eventsListTab\" text\u003d\"Events\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"                  \u003ccontent\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"                    \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" styleClass\u003d\"background\"\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"                           \u003cchildren\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"                              \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" prefHeight\u003d\"0.0\" prefWidth\u003d\"199.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"                           \u003c/children\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"                        \u003c/AnchorPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"                  \u003c/content\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"                \u003c/Tab\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"              \u003c/tabs\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"               \u003cstyleClass\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"                  \u003cString fx:value\u003d\"column-header-background\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"                  \u003cString fx:value\u003d\"background\" /\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"               \u003c/styleClass\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"            \u003c/TabPane\u003e","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" layoutX\u003d\"10.0\" layoutY\u003d\"45.0\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"dionegoh":1,"AryanSarswat":42,"-":42}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"         \u003cFlowPane fx:id\u003d\"logs\" layoutX\u003d\"25.0\" layoutY\u003d\"46.0\" /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"AryanSarswat":9,"-":32}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSON_DOES_NOT_EXIST;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"    public void execute_invalidExecutionError_throwsCommandException() {","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"        String deleteCommand \u003d \"deletefriend n/fakename\";","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"        assertCommandException(deleteCommand, MESSAGE_PERSON_DOES_NOT_EXIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"dionegoh":4,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.ModelStub;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    public void execute_personWithDescriptionAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        Person validPerson \u003d new PersonBuilder().withDescription(\"This!   Is@ a DE7s!criptiOn~\").build();","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"dionegoh":12,"-":114,"limweiliang":1}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalAddressBookWithEvents;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.TypicalEvents;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":" * Contains integration tests (interaction with the Model) for {@code AddEventCommand}.","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"public class AddEventCommandIntegrationTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"    private Model model;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithEvents(), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"    public void execute_newEvent_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"        Event validEvent \u003d new EventBuilder().withNames(TypicalEvents.ALEX_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getUserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"        expectedModel.addEvent(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"        assertEventCommandSuccess(new AddEventCommand(validEvent), model,","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"    public void execute_duplicateEvent_throwsCommandException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        Event eventInList \u003d model.getAddressBook().getEventList().get(0);","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"        assertCommandFailure(new AddEventCommand(eventInList), model, AddEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    public void execute_invalidFriendNames_throwsCommandException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        Event invalidFriendNameEvent \u003d new EventBuilder().withNames(\"invalid name\").build();","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        assertCommandFailure(new AddEventCommand(invalidFriendNameEvent),","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"                model, Messages.MESSAGE_INVALID_EVENT_FRIENDS);","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":54}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_FRIENDS;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.ModelStub;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"class AddEventCommandTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"                AddEventCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e addEventCommand.execute(modelStub));","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    public void execute_invalidEventFriends_throwsCommandException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        ModelStubWithoutEventFriends modelStub \u003d new ModelStubWithoutEventFriends();","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"                MESSAGE_INVALID_EVENT_FRIENDS, () -\u003e addEventCommand.execute(modelStub));","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"    public void equals() {","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"        Event otherEvent \u003d new EventBuilder().withName(\"other event\").build();","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"        AddEventCommand addValidEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"        AddEventCommand addOtherEventCommand \u003d new AddEventCommand(otherEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"        assertEquals(addValidEventCommand, addValidEventCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"        AddEventCommand addValidEventCommandCopy \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"        assertEquals(addValidEventCommand, addValidEventCommandCopy);","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(1, addValidEventCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(null, addValidEventCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(addValidEventCommand, addOtherEventCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"    private static class ModelStubWithEvent extends ModelStub {","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"        private final Event event;","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"        ModelStubWithEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"            this.event \u003d event;","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"            return this.event.isSameEvent(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"        public boolean areEventFriendsValid(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"            return true;","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"     * A Model stub without the correct event friends.","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"    private static class ModelStubWithoutEventFriends extends ModelStub {","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"            return false;","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"        public boolean areEventFriendsValid(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"            return false;","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"     * A Model stub that always accepts the event being added.","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"    private static class ModelStubAcceptingEventAdded extends ModelStub {","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"limweiliang"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"limweiliang"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"limweiliang"},"content":"            return eventsAdded.stream().anyMatch(event::isSameEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"limweiliang"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"limweiliang"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"limweiliang"},"content":"            eventsAdded.add(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"limweiliang"},"content":"        public boolean areEventFriendsValid(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"limweiliang"},"content":"            return true;","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":143}},{"path":"src/test/java/seedu/address/logic/commands/AddLogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AddLogCommand.","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLogCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_INDEX \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_PERSON_NOT_FOUND \u003d AddLogCommand.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    // \u003d\u003d\u003d\u003d\u003d UNIT TESTS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand other;","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor otherDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        Index otherIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_AMY);","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"        FriendName otherName \u003d new FriendName(VALID_NAME_BOB);","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"some title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        String otherTitle \u003d \"some other title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, command);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, \"some other type\");","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(otherIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(otherName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, other);","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        otherDescriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        otherDescriptor.setNewTitle(otherTitle);","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(targetIndex, otherDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"    /* \u003d\u003d\u003d\u003d\u003d INTEGRATION TESTS WITH MODEL \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"    Integration tests with Model component. Note that we do tests for both filtered and unfiltered lists","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"    as these states control what the user sees, but regardless the changes apply to the true underlying","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"    data state of the model.","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_withIndexValidIInputUnfilteredList_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        String expectedMessage \u003d AddLogCommand.MESSAGE_ADD_LOG_SUCCESS;","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        Log log;","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        Person basePerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        // only title","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        // title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, description);","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_withNameValidIInputUnfilteredList_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        String expectedMessage \u003d AddLogCommand.MESSAGE_ADD_LOG_SUCCESS;","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName;","lastModifiedDate":"2022-03-16"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        Log log;","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"        Person basePerson;","lastModifiedDate":"2022-03-15"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson;","lastModifiedDate":"2022-03-15"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-15"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-15"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"        // only title","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, null);","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d basePerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"        // title and description","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, description);","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d basePerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-15"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_withIndexValidInputFilteredList_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"        String expectedMessage \u003d AddLogCommand.MESSAGE_ADD_LOG_SUCCESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName;","lastModifiedDate":"2022-03-16"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"        Log log;","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"        Person basePerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"        // only title","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, null);","lastModifiedDate":"2022-03-10"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-10"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d basePerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"        // title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, description);","lastModifiedDate":"2022-03-10"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-10"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d basePerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_withIndexDuplicateLog_failure() {","lastModifiedDate":"2022-03-15"},{"lineNumber":250,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"tanyjnaaman"},"content":"        Log log \u003d new Log(title, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"tanyjnaaman"},"content":"        Model testModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"tanyjnaaman"},"content":"        Person withLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d UNFILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":265,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-08"},{"lineNumber":266,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":267,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-08"},{"lineNumber":268,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":269,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-08"},{"lineNumber":270,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":271,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":272,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":273,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-08"},{"lineNumber":274,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":275,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d FILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":276,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":277,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":278,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":279,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-08"},{"lineNumber":280,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":281,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-08"},{"lineNumber":282,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-08"},{"lineNumber":283,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":284,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-08"},{"lineNumber":285,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":286,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":287,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":288,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-08"},{"lineNumber":289,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":290,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":291,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":292,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_withNameDuplicateLog_failure() {","lastModifiedDate":"2022-03-15"},{"lineNumber":293,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":294,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-15"},{"lineNumber":295,"author":{"gitId":"tanyjnaaman"},"content":"        Log log \u003d new Log(title, null);","lastModifiedDate":"2022-03-15"},{"lineNumber":296,"author":{"gitId":"tanyjnaaman"},"content":"        Model testModel;","lastModifiedDate":"2022-03-15"},{"lineNumber":297,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":298,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName;","lastModifiedDate":"2022-03-16"},{"lineNumber":299,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-15"},{"lineNumber":300,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-15"},{"lineNumber":301,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-15"},{"lineNumber":302,"author":{"gitId":"tanyjnaaman"},"content":"        Person withLogPerson;","lastModifiedDate":"2022-03-15"},{"lineNumber":303,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":304,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d UNFILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":305,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":306,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":307,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-15"},{"lineNumber":308,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":309,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-15"},{"lineNumber":310,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d withLogPerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":311,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-15"},{"lineNumber":312,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":313,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-15"},{"lineNumber":314,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":315,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-15"},{"lineNumber":316,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":317,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-15"},{"lineNumber":318,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":319,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d FILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":320,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":321,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-15"},{"lineNumber":322,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":323,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-15"},{"lineNumber":324,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":325,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-15"},{"lineNumber":326,"author":{"gitId":"tanyjnaaman"},"content":"        targetName \u003d withLogPerson.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":327,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-15"},{"lineNumber":328,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":329,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-15"},{"lineNumber":330,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":331,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-15"},{"lineNumber":332,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":333,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-15"},{"lineNumber":334,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":335,"author":{"gitId":"tanyjnaaman"},"content":"    @Test //todo","lastModifiedDate":"2022-03-15"},{"lineNumber":336,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_invalidInputUnfilteredList_failure() {","lastModifiedDate":"2022-03-10"},{"lineNumber":337,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":338,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":339,"author":{"gitId":"tanyjnaaman"},"content":"        String invalidTitle \u003d \"\";","lastModifiedDate":"2022-03-08"},{"lineNumber":340,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":341,"author":{"gitId":"tanyjnaaman"},"content":"        Index outOfBoundIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":342,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":343,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":344,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":345,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INVALID INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":346,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":347,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":348,"author":{"gitId":"tanyjnaaman"},"content":"        outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":349,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":350,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":351,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":352,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":353,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":354,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":355,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INVALID NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":356,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":357,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":358,"author":{"gitId":"AryanSarswat"},"content":"        FriendName notInList \u003d new FriendName(\"somegibberish\");","lastModifiedDate":"2022-03-16"},{"lineNumber":359,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(notInList, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":360,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":361,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":362,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":363,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INVALID TITLE \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":364,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":365,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(AssertionError.class, () -\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":366,"author":{"gitId":"tanyjnaaman"},"content":"            Model m \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":367,"author":{"gitId":"tanyjnaaman"},"content":"            AddLogCommand.AddLogDescriptor d \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-10"},{"lineNumber":368,"author":{"gitId":"tanyjnaaman"},"content":"            d.setNewTitle(invalidTitle);","lastModifiedDate":"2022-03-10"},{"lineNumber":369,"author":{"gitId":"tanyjnaaman"},"content":"            Command c \u003d new AddLogCommand(INDEX_FIRST_PERSON, d);","lastModifiedDate":"2022-03-10"},{"lineNumber":370,"author":{"gitId":"tanyjnaaman"},"content":"            c.execute(m);","lastModifiedDate":"2022-03-10"},{"lineNumber":371,"author":{"gitId":"tanyjnaaman"},"content":"        });","lastModifiedDate":"2022-03-10"},{"lineNumber":372,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":373,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d MISSING TITLE \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":374,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(AssertionError.class, () -\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":375,"author":{"gitId":"tanyjnaaman"},"content":"            Command c \u003d new AddLogCommand(INDEX_FIRST_PERSON, new AddLogCommand.AddLogDescriptor());","lastModifiedDate":"2022-03-10"},{"lineNumber":376,"author":{"gitId":"tanyjnaaman"},"content":"            Model m \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":377,"author":{"gitId":"tanyjnaaman"},"content":"            c.execute(m);","lastModifiedDate":"2022-03-10"},{"lineNumber":378,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":379,"author":{"gitId":"tanyjnaaman"},"content":"        });","lastModifiedDate":"2022-03-10"},{"lineNumber":380,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":381,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":382,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":375,"AryanSarswat":7}},{"path":"src/test/java/seedu/address/logic/commands/AddLogDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogDescriptorTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor other;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"some title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"        String differentTitle \u003d \"other title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d \"some description\";","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"        String differentDescription \u003d \"some other description\";","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        // same title -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        // same title and description -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, \"string object\");","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        // different title same desc -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(differentTitle);","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        // same title different desc -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(differentDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":63}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FRIEND_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_EMAIL;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PHONE;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    public static final String VALID_DESCRIPTION_AMY \u003d \"Met in primary school\";","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"    public static final String VALID_DESCRIPTION_BOB \u003d \"Met in high school\";","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE \u003d \"some valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE_PRECEDING_SPACE \u003d \" still a valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED \u003d \"still a valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_DESCRIPTION \u003d \"some description!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_DESCRIPTION_OTHER \u003d \"some other description!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_NAME \u003d \"Some valid event\";","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_NAME_OTHER \u003d \"Some other valid event\";","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"    public static final String VALID_EVENT_DATETIME_AMY \u003d \"10-10-2020 1835\";","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"    public static final String VALID_EVENT_DATETIME_AMY_DIFF_TIME \u003d \"10-10-2020 1830\";","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_DATETIME \u003d \"15-12-2000 2201\";","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_DATETIME_OTHER \u003d \"15-12-2020 1400\";","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_DESCRIPTION \u003d \"Some valid description\";","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"    public static final String VALID_EVENT_DESCRIPTION_OTHER \u003d \"Some other valid description\";","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_NAME_DESC_AMY \u003d \" \" + PREFIX_NEW_NAME + VALID_NAME_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_NAME_DESC_BOB \u003d \" \" + PREFIX_NEW_NAME + VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_PHONE_DESC_AMY \u003d \" \" + PREFIX_NEW_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_PHONE_DESC_BOB \u003d \" \" + PREFIX_NEW_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_EMAIL_DESC_AMY \u003d \" \" + PREFIX_NEW_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_EMAIL_DESC_BOB \u003d \" \" + PREFIX_NEW_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_ADDRESS_DESC_AMY \u003d \" \" + PREFIX_NEW_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_ADDRESS_DESC_BOB \u003d \" \" + PREFIX_NEW_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_NEW_DESCRIPTION + VALID_DESCRIPTION_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_NEW_DESCRIPTION + VALID_DESCRIPTION_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_TAG_DESC_FRIEND \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"    public static final String NEW_TAG_DESC_HUSBAND \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_TITLE_DESC \u003d \" \" + PREFIX_TITLE + VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_TITLE_DESC_PRECEDING_SPACE \u003d \" \" + PREFIX_TITLE + VALID_LOG_TITLE_PRECEDING_SPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_DESCRIPTION_DIFFERENT_DESC \u003d \" \" + PREFIX_DESCRIPTION + VALID_LOG_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_NAME_DESC_A \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_NAME_DESC_B \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_DATETIME_DESC_A \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_DATETIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_DATETIME_DESC_B \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_DATETIME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_DESCRIPTION_DESC_A \u003d \" \" + PREFIX_DESCRIPTION + VALID_EVENT_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_DESCRIPTION_DESC_B \u003d \" \" + PREFIX_DESCRIPTION + VALID_EVENT_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"    public static final String EVENT_FRIEND_NAME_DESC_A \u003d \" \" + PREFIX_FRIEND_NAME + VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"    public static final String EVENT_FRIEND_NAME_DESC_B \u003d \" \" + PREFIX_FRIEND_NAME + VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_ADDFRIEND_DESC_A \u003d \" \" + PREFIX_ADD_FRIENDNAME + VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_ADDFRIEND_DESC_B \u003d \" \" + PREFIX_ADD_FRIENDNAME + VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_REMOVEFRIEND_DESC_A \u003d \" \" + PREFIX_REMOVE_FRIENDNAME + VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"    public static final String EVENT_REMOVEFRIEND_DESC_B \u003d \" \" + PREFIX_REMOVE_FRIENDNAME + VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":115,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_NAME_DESC \u003d \" \" + PREFIX_NEW_NAME + \"James\u0026\";","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":117,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_PHONE_DESC \u003d \" \" + PREFIX_NEW_PHONE + \"911a\";","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_EMAIL_DESC \u003d \" \" + PREFIX_NEW_EMAIL + \"bob!yahoo\";","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":121,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_ADDRESS_DESC \u003d \" \" + PREFIX_NEW_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":123,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_TAG_DESC \u003d \" \" + PREFIX_NEW_TAG + \"hubby*\";","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_NEW_DESCRIPTION_DESC \u003d \" \" + PREFIX_NEW_DESCRIPTION","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"dionegoh"},"content":"            + \" \"; //empty descriptions not allowed","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String INVALID_LOG_TITLE_EMPTY_STRING_DESC \u003d \" \" + PREFIX_TITLE + \"\";","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String INVALID_LOG_TITLE_ONLY_SPACES_DESC \u003d \" \" + PREFIX_TITLE + \"     \";","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"AryanSarswat"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\\nBirthday\";","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"AryanSarswat"},"content":"    public static final String INVALID_EVENT_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + \"1400-20-10 %%\";","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"limweiliang"},"content":"    public static final String INVALID_EVENT_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\";","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"limweiliang"},"content":"    public static final String INVALID_EVENT_FRIENDNAME_DESC \u003d \" \" + PREFIX_FRIEND_NAME + \"Tom $% Arthur\";","lastModifiedDate":"2022-03-17"},{"lineNumber":132,"author":{"gitId":"AryanSarswat"},"content":"    public static final String INVALID_EVENT_ADDFRIEND_DESC \u003d \" \" + PREFIX_ADD_FRIENDNAME + \"Jack,Hilary\";","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"AryanSarswat"},"content":"    public static final String INVALID_EVENT_REMOVE_DESC \u003d \" \" + PREFIX_REMOVE_FRIENDNAME + \"Tom,Arthur\";","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"dionegoh"},"content":"    public static final String INVALID_LOG_TITLE_TOO_LONG_DESC \u003d \" \" + PREFIX_TITLE","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"dionegoh"},"content":"            + \"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\";","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":152,"author":{"gitId":"AryanSarswat"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":153,"author":{"gitId":"AryanSarswat"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":154,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":155,"author":{"gitId":"AryanSarswat"},"content":"    static {","lastModifiedDate":"2022-03-16"},{"lineNumber":156,"author":{"gitId":"AryanSarswat"},"content":"        DESC_A \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":157,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":158,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION)","lastModifiedDate":"2022-03-16"},{"lineNumber":159,"author":{"gitId":"AryanSarswat"},"content":"                .withAddFriend(VALID_NAME_AMY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":160,"author":{"gitId":"AryanSarswat"},"content":"        DESC_B \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_OTHER)","lastModifiedDate":"2022-03-16"},{"lineNumber":161,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME_OTHER)","lastModifiedDate":"2022-03-16"},{"lineNumber":162,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION_OTHER)","lastModifiedDate":"2022-03-16"},{"lineNumber":163,"author":{"gitId":"AryanSarswat"},"content":"                .withAddFriend(VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":164,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":175,"author":{"gitId":"AryanSarswat"},"content":"            System.out.println(result.getFeedbackToUser());","lastModifiedDate":"2022-03-16"},{"lineNumber":176,"author":{"gitId":"AryanSarswat"},"content":"            System.out.println(expectedCommandResult.getFeedbackToUser());","lastModifiedDate":"2022-03-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2022-03-16"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2022-03-16"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2022-03-16"},{"lineNumber":189,"author":{"gitId":"AryanSarswat"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2022-03-16"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2022-03-16"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"AryanSarswat"},"content":"    public static void assertEventCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2022-03-16"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":200,"author":{"gitId":"AryanSarswat"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, true);","lastModifiedDate":"2022-03-16"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":205,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":210,"author":{"gitId":"limweiliang"},"content":"     * - the address book, filtered person list and events list in {@code actualModel} remain unchanged","lastModifiedDate":"2022-03-16"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":216,"author":{"gitId":"limweiliang"},"content":"        List\u003cPerson\u003e expectedPersonList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2022-03-16"},{"lineNumber":217,"author":{"gitId":"limweiliang"},"content":"        List\u003cEvent\u003e expectedEventList \u003d new ArrayList\u003c\u003e(actualModel.getEventsList());","lastModifiedDate":"2022-03-16"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":221,"author":{"gitId":"limweiliang"},"content":"        assertEquals(expectedPersonList, actualModel.getFilteredPersonList());","lastModifiedDate":"2022-03-16"},{"lineNumber":222,"author":{"gitId":"limweiliang"},"content":"        assertEquals(expectedEventList, actualModel.getEventsList());","lastModifiedDate":"2022-03-16"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"dionegoh":32,"tanyjnaaman":14,"AryanSarswat":46,"-":133,"limweiliang":13}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"    public void execute_deleteValidName_success() {","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getName());","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"    public void execute_deleteInvalidName_throwsCommandException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        //Tommy Ang does not exist in the sample model that is used for testing here","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        Person personToDelete \u003d new Person(new FriendName(\"Tommy Ang\"));","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getName());","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_PERSON_DOES_NOT_EXIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"    public void execute_invalidPositiveIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new FriendName(\"Sprigatito\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"AryanSarswat"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new FriendName(\"Quaxly\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteThirdCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteFourthCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        assertTrue(deleteThirdCommand.equals(deleteThirdCommand));","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"AryanSarswat"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new FriendName(\"Sprigatito\"));","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteThirdCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"dionegoh"},"content":"        assertTrue(deleteThirdCommandCopy.equals(deleteThirdCommandCopy));","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"dionegoh"},"content":"        //different types of deletion -\u003e returns false","lastModifiedDate":"2022-03-17"},{"lineNumber":120,"author":{"gitId":"dionegoh"},"content":"        assertFalse(new DeleteCommand(INDEX_FIRST_PERSON).equals(new DeleteCommand(model.getFilteredPersonList()","lastModifiedDate":"2022-03-17"},{"lineNumber":121,"author":{"gitId":"dionegoh"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased()).getName())));","lastModifiedDate":"2022-03-17"},{"lineNumber":122,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":131,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"dionegoh"},"content":"        //different index -\u003e returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"dionegoh"},"content":"        assertFalse(deleteThirdCommand.equals(deleteFourthCommand));","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"dionegoh":23,"AryanSarswat":5,"-":116}},{"path":"src/test/java/seedu/address/logic/commands/DeleteLogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalPersons.KAREN;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":" * Contains integration tests (interaction with Model) and unit tests for","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":" * {@code DeleteLogCommand}.","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"public class DeleteLogCommandTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_SUCCESS \u003d DeleteLogCommand.MESSAGE_DELETE_LOG_SUCCESS;","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_PERSON_NOT_FOUND \u003d DeleteLogCommand.MESSAGE_PERSON_NOT_FOUND;","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_LOG_NOT_FOUND \u003d DeleteLogCommand.MESSAGE_LOG_NOT_FOUND;","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    // \u003d\u003d\u003d\u003d\u003d UNIT TESTS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_invalidArguments_failure() {","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"        FriendName personName \u003d new FriendName(VALID_NAME_AMY);","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        // all flag should not have logIndex","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(AssertionError.class, () -\u003e new DeleteLogCommand(","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"                true, true, personIndex, logIndex));","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        // not for one person should not have person index","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(AssertionError.class, () -\u003e new DeleteLogCommand(","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"                false, false, personIndex, logIndex));","lastModifiedDate":"2022-03-10"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        // not for one person should not have person name","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(AssertionError.class, () -\u003e new DeleteLogCommand(","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"                false, false, personName, logIndex));","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"    public void equals() {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand command;","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand other;","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-10"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d new FriendName(VALID_NAME_AMY);","lastModifiedDate":"2022-03-17"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"        // all flags equal","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true);","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new DeleteLogCommand(true);","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-10"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        // uses index comparison","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true, true, personIndex, null);","lastModifiedDate":"2022-03-10"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new DeleteLogCommand(true, true, personIndex, null);","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-10"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        // uses name comparison","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true, true, name, null);","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new DeleteLogCommand(true, true, name, null);","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"    // \u003d\u003d\u003d\u003d\u003d INTEGRATION TESTS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_validPersonValidLog_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-10"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-10"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        Person personWithLog \u003d KAREN; // has one log","lastModifiedDate":"2022-03-10"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        Person removedLogPerson \u003d new PersonBuilder(KAREN).withLogs().build(); // no logs","lastModifiedDate":"2022-03-10"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(personWithLog, removedLogPerson);","lastModifiedDate":"2022-03-10"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-10"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-10"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(9), // ninth person in typical address book","lastModifiedDate":"2022-03-10"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(1)); // first log","lastModifiedDate":"2022-03-10"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-10"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        removedLogPerson \u003d new PersonBuilder(KAREN).withLogs().build(); // no logs","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(personWithLog, removedLogPerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"                KAREN.getName(), // has one log","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(1)); // first log","lastModifiedDate":"2022-03-15"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_indexBasedValidPersonAll_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-10"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-10"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-10"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS SOME LOGS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-10"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-10"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        Person personWithLog \u003d KAREN; // has one log","lastModifiedDate":"2022-03-10"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        Person removedLogPerson \u003d new PersonBuilder(KAREN).withLogs().build(); // no logs","lastModifiedDate":"2022-03-10"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(personWithLog, removedLogPerson);","lastModifiedDate":"2022-03-10"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-10"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-10"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(9), // ninth person in typical address book","lastModifiedDate":"2022-03-10"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-10"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-10"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS NO LOGS \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-10"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation, no difference expected","lastModifiedDate":"2022-03-10"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-10"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-10"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"                INDEX_FIRST_PERSON, // first person in typical address book has no logs","lastModifiedDate":"2022-03-10"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-10"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-10"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_nameBasedValidPersonAll_success() {","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS SOME LOGS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"        Person personWithLog \u003d KAREN; // has one log","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"        Person removedLogPerson \u003d new PersonBuilder(KAREN).withLogs().build(); // no logs","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(personWithLog, removedLogPerson);","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"                KAREN.getName(), // has one log","lastModifiedDate":"2022-03-15"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS NO LOGS \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation, no difference expected","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"                ALICE.getName(), // has no logs","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_validAll_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-10"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-10"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-10"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-10"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        Person removedLogPerson;","lastModifiedDate":"2022-03-10"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d SOME PEOPLE HAVE LOGS, SOME DON\u0027T \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-10"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-10"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"        for (Person p : expectedModel.getFilteredPersonList()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"            removedLogPerson \u003d new PersonBuilder(p).withLogs().build(); // no logs","lastModifiedDate":"2022-03-10"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"            expectedModel.setPerson(p, removedLogPerson);","lastModifiedDate":"2022-03-10"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-10"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-10"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d NO PERSONS IN ADDRESS BOOK \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"        // instantiate model","lastModifiedDate":"2022-03-10"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager();","lastModifiedDate":"2022-03-10"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"        // expectation","lastModifiedDate":"2022-03-10"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-03-10"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-10"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-10"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":247,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_indexBasedInvalidPerson_throwsCommandException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":248,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":249,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-10"},{"lineNumber":250,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-10"},{"lineNumber":251,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-10"},{"lineNumber":252,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":253,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d NON-EMPTY ADDRESS BOOK BUT PERSON NOT IN LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":254,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":255,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":256,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-10"},{"lineNumber":257,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(2000), // not in address book","lastModifiedDate":"2022-03-10"},{"lineNumber":258,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-10"},{"lineNumber":259,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":260,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-10"},{"lineNumber":261,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":262,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d EMPTY ADDRESS BOOK \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-10"},{"lineNumber":263,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager();","lastModifiedDate":"2022-03-10"},{"lineNumber":264,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":265,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-10"},{"lineNumber":266,"author":{"gitId":"tanyjnaaman"},"content":"                INDEX_FIRST_PERSON, // first person, but empty address book","lastModifiedDate":"2022-03-10"},{"lineNumber":267,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-10"},{"lineNumber":268,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":269,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-10"},{"lineNumber":270,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":271,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":272,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":273,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":274,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_nameBasedInvalidPerson_throwsCommandException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":275,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":276,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-10"},{"lineNumber":277,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-10"},{"lineNumber":278,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-10"},{"lineNumber":279,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":280,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d NON-EMPTY ADDRESS BOOK BUT PERSON NOT IN LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":281,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":282,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":283,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-15"},{"lineNumber":284,"author":{"gitId":"AryanSarswat"},"content":"                new FriendName(\"some random bloke\"), // not in address book","lastModifiedDate":"2022-03-17"},{"lineNumber":285,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":286,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":287,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":288,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":289,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d EMPTY ADDRESS BOOK \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":290,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager();","lastModifiedDate":"2022-03-15"},{"lineNumber":291,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":292,"author":{"gitId":"tanyjnaaman"},"content":"                true,","lastModifiedDate":"2022-03-15"},{"lineNumber":293,"author":{"gitId":"tanyjnaaman"},"content":"                ALICE.getName(), // first person usually, but empty address book","lastModifiedDate":"2022-03-15"},{"lineNumber":294,"author":{"gitId":"tanyjnaaman"},"content":"                null); // no log specified","lastModifiedDate":"2022-03-15"},{"lineNumber":295,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":296,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":297,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":298,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":299,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":300,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":301,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_indexBasedInvalidLog_throwsCommandException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":302,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":303,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-15"},{"lineNumber":304,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-15"},{"lineNumber":305,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-15"},{"lineNumber":306,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":307,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":308,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS LOGS BUT OUT OF BOUNDS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":309,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":310,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":311,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-10"},{"lineNumber":312,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(9), // has only 1 log","lastModifiedDate":"2022-03-10"},{"lineNumber":313,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(2)); // ask to delete 2nd log","lastModifiedDate":"2022-03-10"},{"lineNumber":314,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":315,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_LOG_NOT_FOUND);","lastModifiedDate":"2022-03-10"},{"lineNumber":316,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":317,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS NO LOGS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":318,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":319,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-10"},{"lineNumber":320,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-10"},{"lineNumber":321,"author":{"gitId":"tanyjnaaman"},"content":"                INDEX_FIRST_PERSON, // first person, but person has no logs","lastModifiedDate":"2022-03-10"},{"lineNumber":322,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(1)); // ask to delete 1st log","lastModifiedDate":"2022-03-10"},{"lineNumber":323,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":324,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_LOG_NOT_FOUND);","lastModifiedDate":"2022-03-10"},{"lineNumber":325,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":326,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":327,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":328,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":329,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_nameBasedInvalidLog_throwsCommandException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":330,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":331,"author":{"gitId":"tanyjnaaman"},"content":"        // initialize","lastModifiedDate":"2022-03-15"},{"lineNumber":332,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-15"},{"lineNumber":333,"author":{"gitId":"tanyjnaaman"},"content":"        Command command;","lastModifiedDate":"2022-03-15"},{"lineNumber":334,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":335,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":336,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS LOGS BUT OUT OF BOUNDS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":337,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":338,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":339,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-15"},{"lineNumber":340,"author":{"gitId":"tanyjnaaman"},"content":"                KAREN.getName(), // has only 1 log","lastModifiedDate":"2022-03-15"},{"lineNumber":341,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(2)); // ask to delete 2nd log","lastModifiedDate":"2022-03-15"},{"lineNumber":342,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":343,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_LOG_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":344,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":345,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON HAS NO LOGS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":346,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-15"},{"lineNumber":347,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new DeleteLogCommand(true,","lastModifiedDate":"2022-03-15"},{"lineNumber":348,"author":{"gitId":"tanyjnaaman"},"content":"                false,","lastModifiedDate":"2022-03-15"},{"lineNumber":349,"author":{"gitId":"tanyjnaaman"},"content":"                ALICE.getName(), // first person, but person has no logs","lastModifiedDate":"2022-03-15"},{"lineNumber":350,"author":{"gitId":"tanyjnaaman"},"content":"                Index.fromOneBased(1)); // ask to delete 1st log","lastModifiedDate":"2022-03-15"},{"lineNumber":351,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":352,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_LOG_NOT_FOUND);","lastModifiedDate":"2022-03-15"},{"lineNumber":353,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":354,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":355,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":356,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"tanyjnaaman":352,"AryanSarswat":4}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"                .withDescription(VALID_DESCRIPTION_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"                .withPhone(VALID_PHONE_BOB).withDescription(VALID_DESCRIPTION_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"dionegoh":4,"-":171}},{"path":"src/test/java/seedu/address/logic/commands/EditEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalAddressBookWithEvents;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditEventCommand.","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"public class EditEventCommandTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithEvents(), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_allFieldsSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        Event editedEvent \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setRemoveFriendNames(model.getEventsList().get(0).getFriendNames());","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand editCommand \u003d new EditEventCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        expectedModel.setEvent(model.getEventsList().get(0), editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"        assertEventCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"        Index indexLastEvent \u003d Index.fromOneBased(model.getEventsList().size());","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"        Event lastEvent \u003d model.getEventsList().get(indexLastEvent.getZeroBased());","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"        EventBuilder eventInList \u003d new EventBuilder(lastEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"        Event editedEvent \u003d eventInList.withName(VALID_EVENT_NAME).withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand editCommand \u003d new EditEventCommand(indexLastEvent, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        expectedModel.setEvent(lastEvent, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        assertEventCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_noFieldSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand editCommand \u003d new EditEventCommand(INDEX_FIRST_PERSON, new EditEventCommand.EditEventDescriptor());","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"        Event editedEvent \u003d model.getEventsList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"        assertEventCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_duplicateEvent_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"AryanSarswat"},"content":"        Event firstEvent \u003d model.getEventsList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand editCommand \u003d new EditEventCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"AryanSarswat"},"content":"        assertCommandFailure(editCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_invalidEventIndex_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"AryanSarswat"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getEventsList().size() + 1);","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand editCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"AryanSarswat"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-03-17"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"    public void equals() {","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_PERSON, DESC_A);","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"AryanSarswat"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor copyDescriptor \u003d new EditEventCommand.EditEventDescriptor(DESC_A);","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"AryanSarswat"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"AryanSarswat"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"AryanSarswat"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"AryanSarswat"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_PERSON, DESC_A)));","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"AryanSarswat"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_PERSON, DESC_B)));","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":124,"limweiliang":6}},{"path":"src/test/java/seedu/address/logic/commands/ShowEventsCommandTests.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":" * Contains integration tests (interaction with the Model) and unit tests for showfriends command.","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"public class ShowEventsCommandTests {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    private Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"     * Checks whether showevents executes properly.","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_showfriends_showsSameList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        assertEventCommandSuccess(new ShowEventsCommand(), model, ShowEventsCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"     * If model has no events but persons showevents should have an empty list.","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"    public void execute_noevents_showsEmptyList() {","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"        Model noEventModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"        assertEventCommandSuccess(new ShowEventsCommand(), noEventModel, ShowEventsCommand.MESSAGE_SUCCESS, noEventModel);","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        // Model has persons but no events, thus event list should be empty.","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(noEventModel.getFilteredPersonList().isEmpty());","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(noEventModel.getEventsList().isEmpty());","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"AryanSarswat":48,"limweiliang":1}},{"path":"src/test/java/seedu/address/logic/commands/ShowFriendCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-17"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-17"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"/**","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":" * {@code ShowFriendCommand}.","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":" */","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"public class ShowFriendCommandTest {","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    //ensures that GUI will only display single person if valid name is given","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"    public void execute_showValidFriendName_success() {","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        Person personToShow \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommand \u003d new ShowFriendCommand(personToShow);","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"        String expectedMessage \u003d String.format(ShowFriendCommand.MESSAGE_SUCCESS, personToShow.getName());","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"        expectedModel.updateFilteredPersonList(x -\u003e x.isSamePerson(personToShow));","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"        assert(expectedModel.getFilteredPersonList().size() \u003d\u003d 1);","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        assertCommandSuccess(showFriendCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    public void execute_showNameDoesNotExist_throwsCommandException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        //Tommy Ang does not exist in the sample model that is used for testing here","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        Person personToShow \u003d new Person(new FriendName(\"Tommy Ang\"));","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommand \u003d new ShowFriendCommand(personToShow);","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"        assertCommandFailure(showFriendCommand, model, Messages.MESSAGE_PERSON_DOES_NOT_EXIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"    public void execute_switchingWindows_success() {","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        Person personToShow \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommand \u003d new ShowFriendCommand(personToShow);","lastModifiedDate":"2022-03-17"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        String expectedMessage \u003d String.format(ShowFriendCommand.MESSAGE_SUCCESS, personToShow.getName());","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-17"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"        expectedModel.updateFilteredPersonList(x -\u003e x.isSamePerson(personToShow));","lastModifiedDate":"2022-03-17"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"        CommandResult commandResult \u003d null;","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"            commandResult \u003d showFriendCommand.execute(model);","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2022-03-17"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"            assertCommandFailure(showFriendCommand, model, Messages.MESSAGE_INVALID_COMMAND_FORMAT);","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"        //ensures that window is switched from normal to expanded","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"        assert (commandResult.isShowFriendCommand());","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"        assert (expectedModel.getFilteredPersonList().size() \u003d\u003d 1);","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"        assertCommandSuccess(showFriendCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"        //when that when a new command(not showfriend command) is made, the window is","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"        //switched from expanded to normal","lastModifiedDate":"2022-03-17"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"        ListCommand listCommand \u003d new ListCommand();","lastModifiedDate":"2022-03-17"},{"lineNumber":78,"author":{"gitId":"dionegoh"},"content":"        CommandResult listCommandResult \u003d listCommand.execute(model);","lastModifiedDate":"2022-03-17"},{"lineNumber":79,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":80,"author":{"gitId":"dionegoh"},"content":"        //ensures that window is switched from expanded to normal","lastModifiedDate":"2022-03-17"},{"lineNumber":81,"author":{"gitId":"dionegoh"},"content":"        assert (!listCommandResult.isShowFriendCommand());","lastModifiedDate":"2022-03-17"},{"lineNumber":82,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":84,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"    public void equals() {","lastModifiedDate":"2022-03-17"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"        Person one \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":89,"author":{"gitId":"dionegoh"},"content":"        Person two \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommandOne \u003d new ShowFriendCommand(one);","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommandTwo \u003d new ShowFriendCommand(two);","lastModifiedDate":"2022-03-17"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":93,"author":{"gitId":"dionegoh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"dionegoh"},"content":"        assertTrue(showFriendCommandOne.equals(showFriendCommandOne));","lastModifiedDate":"2022-03-17"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":96,"author":{"gitId":"dionegoh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-17"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommandOneCopy \u003d new ShowFriendCommand(one);","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"dionegoh"},"content":"        assertTrue(showFriendCommandOne.equals(showFriendCommandOneCopy));","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":100,"author":{"gitId":"dionegoh"},"content":"        // different friends -\u003e returns false","lastModifiedDate":"2022-03-17"},{"lineNumber":101,"author":{"gitId":"dionegoh"},"content":"        assertFalse(showFriendCommandOne.equals(showFriendCommandTwo));","lastModifiedDate":"2022-03-17"},{"lineNumber":102,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":103,"author":{"gitId":"dionegoh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-17"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"        assertFalse(showFriendCommandOne.equals(1));","lastModifiedDate":"2022-03-17"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":106,"author":{"gitId":"dionegoh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-17"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"        assertFalse(showFriendCommandOne.equals(null));","lastModifiedDate":"2022-03-17"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2022-03-17"},{"lineNumber":112,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":113,"author":{"gitId":"dionegoh"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2022-03-17"},{"lineNumber":114,"author":{"gitId":"dionegoh"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2022-03-17"},{"lineNumber":115,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":116,"author":{"gitId":"dionegoh"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2022-03-17"},{"lineNumber":117,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":118,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-17"},{"lineNumber":119,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"}],"authorContributionMap":{"dionegoh":119}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"dionegoh"},"content":"        Person expectedPersonNoTags \u003d new PersonBuilder(AMY).withTags().withDescription(VALID_DESCRIPTION_AMY).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"                        + DESCRIPTION_DESC_AMY,","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"dionegoh"},"content":"                new AddCommand(expectedPersonNoTags));","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"dionegoh"},"content":"        //no email","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"        Person expectedPersonNoEmail \u003d new PersonBuilder(AMY).withEmail(null)","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"                .withDescription(VALID_DESCRIPTION_AMY).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-03-09"},{"lineNumber":93,"author":{"gitId":"dionegoh"},"content":"                        + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"dionegoh"},"content":"                new AddCommand(expectedPersonNoEmail));","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"dionegoh"},"content":"        //no address","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"        Person expectedPersonNoAddress \u003d new PersonBuilder(BOB).withAddress(null)","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"dionegoh"},"content":"                .withDescription(VALID_DESCRIPTION_BOB).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"dionegoh"},"content":"                        + DESCRIPTION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"dionegoh"},"content":"                new AddCommand(expectedPersonNoAddress));","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"dionegoh"},"content":"        //no phone","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"        Person expectedPersonNoPhone \u003d new PersonBuilder(BOB).withPhone(null)","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"                .withDescription(VALID_DESCRIPTION_BOB).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"                        + DESCRIPTION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"                new AddCommand(expectedPersonNoPhone));","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        //no description","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"        Person expectedPersonNoDescription \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND,","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"dionegoh"},"content":"                new AddCommand(expectedPersonNoDescription));","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":133,"author":{"gitId":"AryanSarswat"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":153,"author":{"gitId":"AryanSarswat"},"content":"                FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"dionegoh":34,"AryanSarswat":3,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATETIME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATETIME_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESCRIPTION_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESCRIPTION_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_FRIEND_NAME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_FRIEND_NAME_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATETIME_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_FRIENDNAME_DESC;","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"public class AddEventCommandParserTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        Event expectedEvent \u003d new EventBuilder().withName(VALID_EVENT_NAME).withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).withNames(VALID_NAME_AMY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"        // whitespace only preamble","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, new AddEventCommand(expectedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_B + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, new AddEventCommand(expectedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"        // multiple datetimes - last datetime accepted","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_B + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, new AddEventCommand(expectedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"        // multiple descriptions - last description accepted","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_DESCRIPTION_DESC_B","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, new AddEventCommand(expectedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"        // multiple friend names - all accepted","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"        Event expectedEventMultipleFriendNames \u003d new EventBuilder(expectedEvent)","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"                .withNames(VALID_NAME_AMY, VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_DESCRIPTION_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"                + EVENT_FRIEND_NAME_DESC_A + EVENT_FRIEND_NAME_DESC_B,","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"                new AddEventCommand(expectedEventMultipleFriendNames));","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"        Event expectedEventNoTags \u003d new EventBuilder().withName(VALID_EVENT_NAME).withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).withNames().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_DESCRIPTION_DESC_A,","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"                new AddEventCommand(expectedEventNoTags));","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"        //no description","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"        Event expectedEventNoDescription \u003d new EventBuilder().withName(VALID_EVENT_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"                .withDateTime(VALID_EVENT_DATETIME).withDescription(null).withNames(VALID_NAME_AMY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_FRIEND_NAME_DESC_A,","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"                new AddEventCommand(expectedEventNoDescription));","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"        // missing name prefix","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + EVENT_DATETIME_DESC_A, expectedMessage);","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"        // missing datetime prefix","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_A + VALID_EVENT_DATETIME, expectedMessage);","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"        // all prefixes missing","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME + VALID_EVENT_DATETIME, expectedMessage);","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"    // TODO Update with new constraints for event name and description","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"        // invalid name","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"        // invalid datetime","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_A + INVALID_EVENT_DATETIME_DESC","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"        // invalid description","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"                + INVALID_EVENT_DESCRIPTION_DESC + EVENT_FRIEND_NAME_DESC_A, Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"        // invalid friend name","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + INVALID_EVENT_FRIENDNAME_DESC + EVENT_FRIEND_NAME_DESC_A,","lastModifiedDate":"2022-03-17"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"                FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + INVALID_EVENT_DATETIME_DESC","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":120,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"limweiliang"},"content":"        // non-empty preamble","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"limweiliang"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"limweiliang"},"content":"                        + EVENT_DESCRIPTION_DESC_A + EVENT_FRIEND_NAME_DESC_A,","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"limweiliang"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":126}},{"path":"src/test/java/seedu/address/logic/parser/AddLogCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_EMPTY_STRING_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_ONLY_SPACES_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_TOO_LONG_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC_PRECEDING_SPACE;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.AddLogCommandParser.MESSAGE_INVALID_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.LogName;","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    private static final String MESSAGE_INVALID_TITLE \u003d LogName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    private final AddLogCommandParser parser \u003d new AddLogCommandParser();","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        // no index or name specified","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        // both index and name specified","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d INDEX_FIRST_PERSON.getOneBased() + NAME_DESC_AMY + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        // no title specified","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + LOG_DESCRIPTION_DESC; // with description","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        // no index and no title specified","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        /*","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        Preamble (i.e. argument before any /PREFIX) used as index. User could throw garbage input.","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        // negative index","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"-5\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        // zero index, since list should be 1-indexed","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"0\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"somegarbagepreamble\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invaildPrefixesPresent_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        // random garbage input","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/ string\";","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/string /g something else\";","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        // invalid titles","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_EMPTY_STRING_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_ONLY_SPACES_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_TOO_LONG_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        // prefixes without actual arguments","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + \" \" + PREFIX_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + \" \" + PREFIX_TITLE + \" \" + PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + \" \" + PREFIX_TITLE + \" \" + PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + INVALID_LOG_TITLE_EMPTY_STRING_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + INVALID_LOG_TITLE_ONLY_SPACES_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + INVALID_LOG_TITLE_TOO_LONG_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        // prefixes without actual arguments","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_TITLE;","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_TITLE + \" \" + PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_TITLE + \" \" + PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_allFieldsValid_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        Command expectedCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        // another valid title","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC_PRECEDING_SPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":170,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_AMY);","lastModifiedDate":"2022-03-16"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title","lastModifiedDate":"2022-03-15"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"        // another valid title","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + LOG_TITLE_DESC_PRECEDING_SPACE;","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-15"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title and description","lastModifiedDate":"2022-03-15"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"        String args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_TITLE_DESC_PRECEDING_SPACE","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"                + LOG_DESCRIPTION_DESC + LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION_OTHER);","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"        // expected to take last name","lastModifiedDate":"2022-03-15"},{"lineNumber":213,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_BOB);","lastModifiedDate":"2022-03-16"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + NAME_DESC_BOB + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleInvalidFieldsButLastValid_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"        String args \u003d targetIndex.getOneBased() + INVALID_LOG_TITLE_EMPTY_STRING_DESC + LOG_TITLE_DESC_PRECEDING_SPACE","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"                + LOG_DESCRIPTION_DESC + LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION_OTHER);","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d WITH NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"        // expected to take last name","lastModifiedDate":"2022-03-15"},{"lineNumber":237,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_BOB);","lastModifiedDate":"2022-03-16"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d INVALID_NAME_DESC + NAME_DESC_BOB + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-15"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-15"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetName, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":241,"AryanSarswat":6}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand;","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"    public void parseCommandByName_deletefriend() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(\"deletefriend n/Dummy Name\");","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(new DeleteCommand(new FriendName(\"Dummy Name\")), command);","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"    public void parseCommandByIndex_deletefriend() throws Exception {","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(DeleteCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"            + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2022-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2022-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"    public void parseCommand_editEvent() throws Exception {","lastModifiedDate":"2022-03-17"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-17"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(event).build();","lastModifiedDate":"2022-03-17"},{"lineNumber":86,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand command \u003d (EditEventCommand) parser.parseCommand(EditEventCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-17"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"n/Default Event \" + \"dt/12-5-2022 1500 \" + \"d/Default Description \"","lastModifiedDate":"2022-03-17"},{"lineNumber":88,"author":{"gitId":"AryanSarswat"},"content":"                + \"af/Amy Bee af/Alex Yeoh\");","lastModifiedDate":"2022-03-17"},{"lineNumber":89,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(new EditEventCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"    public void parseCommand_addLog() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        String validAddLogCommand \u003d AddLogCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-10"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"                + targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        // expected command","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command \u003d new AddLogCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, parser.parseCommand(validAddLogCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(parser.parseCommand(validAddLogCommand) instanceof AddLogCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"dionegoh":5,"tanyjnaaman":24,"AryanSarswat":17,"-":100}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INDEX_IS_NOT_NON_ZERO_UNSIGNED_INTEGER;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"    public void parse_validArgsName_returnsDeleteCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d personToDelete.getName();","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getName());","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, \" n/\" + name.fullName, deleteCommand);","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    public void parse_noNameGiven_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \" n/\", FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"    public void parse_invalidArgsName_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \" n/\" + \"!@\", FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"    public void parse_validArgsIndex_returnsDeleteCommand() {","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"    public void parse_invalidIndex_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"-1\", MESSAGE_INDEX_IS_NOT_NON_ZERO_UNSIGNED_INTEGER);","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"/n\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"   \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"dionegoh":36,"AryanSarswat":4,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/DeleteLogCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOG_INDEX;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.DeleteLogCommandParser.MESSAGE_INVALID_FORMAT;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.DeleteLogCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"public class DeleteLogCommandParserTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    private static final DeleteLogCommandParser parser \u003d new DeleteLogCommandParser();","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_INDEX \u003d ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidFormat_failure() {","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        // missing person index/name without all flag","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"\" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"        // both index and name present","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        // valid person (name) and log index but all flag present","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \"","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"                + NAME_DESC_AMY + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        // missing log index without all flag","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"\" + personIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        // valid person (index) and log index but all flag present","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + PREFIX_LOG_INDEX","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"                + logIndex.getOneBased() + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        // valid person (name) and log index but all flag present","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_LOG_INDEX + logIndex.getOneBased() + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        // arguments after all flag","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d FLAG_ALL + \"some garbage\";","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidPersonIndex_failure() {","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        // empty string person index","lastModifiedDate":"2022-03-09"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"\" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        // non-numeric person index","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"qwerty\" + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"qwerty\" + \" \" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        // negative person index","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"-5\" + \" \" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"-5\" + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidPersonName_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d INVALID_NAME_DESC + PREFIX_LOG_INDEX + INDEX_FIRST_LOG.getOneBased();","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidLogIndex_failure() {","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INDEX BASED \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        // empty string log index","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + PREFIX_LOG_INDEX + \"\";","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        // non-numeric log index","lastModifiedDate":"2022-03-09"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + PREFIX_LOG_INDEX + \"qwerty\";","lastModifiedDate":"2022-03-09"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        // negative log index","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + PREFIX_LOG_INDEX + \"-5\";","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-09"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d NAME BASED \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        // empty string log index","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_LOG_INDEX + \"\";","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        // non-numeric log index","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_LOG_INDEX + \"qwerty\";","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        // negative log index","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_LOG_INDEX + \"-5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidPrefixesPresent_failure() {","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        // random garbage input","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/ string\";","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/string /g something else\";","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_validFormat_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand expectedCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: person and log","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-09"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, personIndex, logIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"        // case 2: all of person","lastModifiedDate":"2022-03-09"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":166,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, true, personIndex, null);","lastModifiedDate":"2022-03-09"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d PERSON NAME \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_AMY);","lastModifiedDate":"2022-03-17"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: person and log","lastModifiedDate":"2022-03-16"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-16"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, targetName, logIndex);","lastModifiedDate":"2022-03-16"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"        // case 2: all of person","lastModifiedDate":"2022-03-16"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-16"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, true, targetName, null);","lastModifiedDate":"2022-03-16"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d SHARED \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: all persons","lastModifiedDate":"2022-03-16"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \" \" + FLAG_ALL;","lastModifiedDate":"2022-03-09"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true);","lastModifiedDate":"2022-03-15"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand expectedCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex1 \u003d INDEX_FIRST_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex2 \u003d INDEX_SECOND_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: logs","lastModifiedDate":"2022-03-16"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + logIndex1.getOneBased() + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + logIndex2.getOneBased() + \" \";","lastModifiedDate":"2022-03-09"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, personIndex, logIndex2);","lastModifiedDate":"2022-03-09"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"        // case 2: multiple person names","lastModifiedDate":"2022-03-16"},{"lineNumber":204,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_BOB);","lastModifiedDate":"2022-03-17"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d NAME_DESC_AMY + \" \" + NAME_DESC_BOB + \" \"","lastModifiedDate":"2022-03-16"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + logIndex1.getOneBased();","lastModifiedDate":"2022-03-16"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, targetName, logIndex1);","lastModifiedDate":"2022-03-16"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleRepeatedInvalidFieldsButLastValid_success() {","lastModifiedDate":"2022-03-09"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        DeleteLogCommand expectedCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        Index personIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-09"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"        String invalidLogIndex \u003d \" \";","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"        Index logIndex \u003d INDEX_SECOND_LOG;","lastModifiedDate":"2022-03-09"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-09"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"        // case 1: log","lastModifiedDate":"2022-03-16"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d personIndex.getOneBased() + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + invalidLogIndex + \" \"","lastModifiedDate":"2022-03-09"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + logIndex.getOneBased() + \" \";","lastModifiedDate":"2022-03-09"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, personIndex, logIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":225,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"        // case 2: multiple person names","lastModifiedDate":"2022-03-16"},{"lineNumber":228,"author":{"gitId":"AryanSarswat"},"content":"        FriendName targetName \u003d new FriendName(VALID_NAME_BOB);","lastModifiedDate":"2022-03-17"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d INVALID_NAME_DESC + \" \" + NAME_DESC_BOB + \" \"","lastModifiedDate":"2022-03-16"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"                + PREFIX_LOG_INDEX + logIndex.getOneBased();","lastModifiedDate":"2022-03-16"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new DeleteLogCommand(true, false, targetName, logIndex);","lastModifiedDate":"2022-03-16"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-09"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"tanyjnaaman":231,"AryanSarswat":4}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_ADDRESS_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_EMAIL_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_NAME_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_PHONE_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_TAG_DESC;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_DESCRIPTION_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_DESCRIPTION_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_NAME_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_NAME_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_PHONE_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_PHONE_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_TAG_DESC_HUSBAND;","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"    private static final String NEW_TAG_EMPTY \u003d \" \" + PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_NAME_DESC, FriendName.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); //invalid description","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_PHONE_DESC + NEW_EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + NEW_PHONE_DESC_BOB + INVALID_NEW_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + NEW_TAG_DESC_FRIEND + NEW_TAG_DESC_HUSBAND + NEW_TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + NEW_TAG_DESC_FRIEND + NEW_TAG_EMPTY + NEW_TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + NEW_TAG_EMPTY + NEW_TAG_DESC_FRIEND + NEW_TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_NAME_DESC + INVALID_NEW_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"AryanSarswat"},"content":"                FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":121,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + NEW_PHONE_DESC_BOB + NEW_TAG_DESC_HUSBAND","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"dionegoh"},"content":"                + NEW_EMAIL_DESC_AMY + NEW_ADDRESS_DESC_AMY + NEW_NAME_DESC_AMY + NEW_TAG_DESC_FRIEND","lastModifiedDate":"2022-03-15"},{"lineNumber":123,"author":{"gitId":"dionegoh"},"content":"                + NEW_DESCRIPTION_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"dionegoh"},"content":"                .withDescription(VALID_DESCRIPTION_AMY)","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":137,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + NEW_PHONE_DESC_BOB + NEW_EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + NEW_NAME_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + NEW_PHONE_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + NEW_EMAIL_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + NEW_ADDRESS_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"dionegoh"},"content":"        //description","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + NEW_DESCRIPTION_DESC_AMY;","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMY).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"dionegoh"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + NEW_TAG_DESC_FRIEND;","lastModifiedDate":"2022-03-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + NEW_PHONE_DESC_AMY + NEW_ADDRESS_DESC_AMY + NEW_EMAIL_DESC_AMY","lastModifiedDate":"2022-03-15"},{"lineNumber":190,"author":{"gitId":"dionegoh"},"content":"                + NEW_TAG_DESC_FRIEND + NEW_PHONE_DESC_AMY + NEW_ADDRESS_DESC_AMY + NEW_EMAIL_DESC_AMY + NEW_TAG_DESC_FRIEND","lastModifiedDate":"2022-03-15"},{"lineNumber":191,"author":{"gitId":"dionegoh"},"content":"                + NEW_PHONE_DESC_BOB + NEW_ADDRESS_DESC_BOB + NEW_EMAIL_DESC_BOB + NEW_TAG_DESC_HUSBAND","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"dionegoh"},"content":"                + NEW_DESCRIPTION_DESC_AMY + NEW_DESCRIPTION_DESC_BOB;","lastModifiedDate":"2022-03-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"dionegoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDescription(VALID_DESCRIPTION_BOB)","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"dionegoh"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":205,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":206,"author":{"gitId":"dionegoh"},"content":"        //name","lastModifiedDate":"2022-03-16"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":208,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_NEW_NAME_DESC + NEW_NAME_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":209,"author":{"gitId":"dionegoh"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":213,"author":{"gitId":"dionegoh"},"content":"        // phone","lastModifiedDate":"2022-03-16"},{"lineNumber":214,"author":{"gitId":"dionegoh"},"content":"        targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":215,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NEW_PHONE_DESC + NEW_PHONE_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":216,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":217,"author":{"gitId":"dionegoh"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":218,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":219,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":220,"author":{"gitId":"dionegoh"},"content":"        // address","lastModifiedDate":"2022-03-16"},{"lineNumber":221,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NEW_ADDRESS_DESC + NEW_ADDRESS_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":222,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":223,"author":{"gitId":"dionegoh"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":224,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":225,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":226,"author":{"gitId":"dionegoh"},"content":"        // email","lastModifiedDate":"2022-03-16"},{"lineNumber":227,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NEW_EMAIL_DESC + NEW_EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":228,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":229,"author":{"gitId":"dionegoh"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":230,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":231,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":232,"author":{"gitId":"dionegoh"},"content":"        //description","lastModifiedDate":"2022-03-16"},{"lineNumber":233,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NEW_DESCRIPTION_DESC + NEW_DESCRIPTION_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":234,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withDescription(VALID_DESCRIPTION_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":235,"author":{"gitId":"dionegoh"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":236,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":237,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":238,"author":{"gitId":"dionegoh"},"content":"        //combination of arguments","lastModifiedDate":"2022-03-16"},{"lineNumber":239,"author":{"gitId":"dionegoh"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NEW_ADDRESS_DESC + INVALID_NEW_EMAIL_DESC","lastModifiedDate":"2022-03-16"},{"lineNumber":240,"author":{"gitId":"dionegoh"},"content":"                + NEW_ADDRESS_DESC_BOB + INVALID_NEW_NAME_DESC + NEW_NAME_DESC_BOB + NEW_PHONE_DESC_BOB","lastModifiedDate":"2022-03-16"},{"lineNumber":241,"author":{"gitId":"dionegoh"},"content":"                + NEW_EMAIL_DESC_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":242,"author":{"gitId":"dionegoh"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_BOB).withName(VALID_NAME_BOB)","lastModifiedDate":"2022-03-16"},{"lineNumber":243,"author":{"gitId":"dionegoh"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":244,"author":{"gitId":"dionegoh"},"content":"        System.out.println(descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":252,"author":{"gitId":"dionegoh"},"content":"        String userInput \u003d targetIndex.getOneBased() + NEW_TAG_EMPTY;","lastModifiedDate":"2022-03-15"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"dionegoh":93,"AryanSarswat":4,"-":162}},{"path":"src/test/java/seedu/address/logic/parser/EditEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDFRIEND_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDFRIEND_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATETIME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATETIME_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESCRIPTION_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESCRIPTION_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_REMOVEFRIEND_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_REMOVEFRIEND_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_ADDFRIEND_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATETIME_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_REMOVE_DESC;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand;","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"public class EditEventCommandParserTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    private static final String ADDFRIENDS_EMPTY \u003d \" \" + PREFIX_ADD_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"    private static final String REMOVEFRIENDS_EMPTY \u003d \" \" + PREFIX_REMOVE_FRIENDNAME;","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    private EditEventCommandParser parser \u003d new EditEventCommandParser();","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"        // no index specified","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"        // no field specified","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\", EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        // no index and no field specified","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        // negative index","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"-5\" + VALID_EVENT_NAME, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        // zero index","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"0\" + VALID_EVENT_DESCRIPTION, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC, EventName.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2022-03-17"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATETIME_DESC, DateTime.MESSAGE_CONSTRAINTS); // invalid Datetime","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_EVENT_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid Description","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_ADDFRIEND_DESC, FriendName.MESSAGE_CONSTRAINTS); // invalid Name","lastModifiedDate":"2022-03-17"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_REMOVE_DESC, FriendName.MESSAGE_CONSTRAINTS); // invalid Name","lastModifiedDate":"2022-03-17"},{"lineNumber":88,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"AryanSarswat"},"content":"        // invalid Datetime followed by valid description","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATETIME_DESC + VALID_EVENT_DESCRIPTION, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"AryanSarswat"},"content":"        // valid Datetime followed by invalid description. The test case for invalid description followed by valid Datetime","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"AryanSarswat"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + EVENT_DESCRIPTION_DESC_A + INVALID_EVENT_DATETIME_DESC, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"AryanSarswat"},"content":"        // parsing it together with a valid Addfriend list results in error","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + EVENT_ADDFRIEND_DESC_A + EVENT_ADDFRIEND_DESC_B + ADDFRIENDS_EMPTY, FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + EVENT_REMOVEFRIEND_DESC_A + REMOVEFRIENDS_EMPTY + EVENT_REMOVEFRIEND_DESC_B, FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + ADDFRIENDS_EMPTY + EVENT_ADDFRIEND_DESC_A + EVENT_REMOVEFRIEND_DESC_A, FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":100,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"AryanSarswat"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"AryanSarswat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + INVALID_EVENT_DATETIME_DESC + VALID_EVENT_DESCRIPTION,","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"AryanSarswat"},"content":"                EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":104,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"AryanSarswat"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"AryanSarswat"},"content":"        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"AryanSarswat"},"content":"                + EVENT_DESCRIPTION_DESC_A + EVENT_ADDFRIEND_DESC_A + EVENT_REMOVEFRIEND_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"AryanSarswat"},"content":"                .withName(VALID_EVENT_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION)","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"AryanSarswat"},"content":"                .withAddFriend(VALID_NAME_AMY)","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"AryanSarswat"},"content":"                .withRemoveFriend(VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":119,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":120,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":121,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":122,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":123,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":124,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":125,"author":{"gitId":"AryanSarswat"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":126,"author":{"gitId":"AryanSarswat"},"content":"        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":127,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":128,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":129,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":130,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":131,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":132,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":133,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"AryanSarswat"},"content":"        // name","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"AryanSarswat"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"AryanSarswat"},"content":"        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":141,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"AryanSarswat"},"content":"        // Datetime","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"AryanSarswat"},"content":"        userInput \u003d targetIndex.getOneBased() + EVENT_DATETIME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withDateTime(VALID_EVENT_DATETIME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"AryanSarswat"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":148,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":149,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":150,"author":{"gitId":"AryanSarswat"},"content":"        // Description","lastModifiedDate":"2022-03-16"},{"lineNumber":151,"author":{"gitId":"AryanSarswat"},"content":"        userInput \u003d targetIndex.getOneBased() + EVENT_DESCRIPTION_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":152,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withDescription(VALID_EVENT_DESCRIPTION).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":153,"author":{"gitId":"AryanSarswat"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":154,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":155,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":156,"author":{"gitId":"AryanSarswat"},"content":"        // Addfriends","lastModifiedDate":"2022-03-16"},{"lineNumber":157,"author":{"gitId":"AryanSarswat"},"content":"        userInput \u003d targetIndex.getOneBased() + EVENT_ADDFRIEND_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":158,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withAddFriend(VALID_NAME_AMY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":159,"author":{"gitId":"AryanSarswat"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":160,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":161,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":162,"author":{"gitId":"AryanSarswat"},"content":"        // RemoveFriends","lastModifiedDate":"2022-03-16"},{"lineNumber":163,"author":{"gitId":"AryanSarswat"},"content":"        userInput \u003d targetIndex.getOneBased() + EVENT_REMOVEFRIEND_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":164,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withRemoveFriend(VALID_NAME_AMY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"AryanSarswat"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":166,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":167,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":168,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":169,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-03-16"},{"lineNumber":171,"author":{"gitId":"AryanSarswat"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":172,"author":{"gitId":"AryanSarswat"},"content":"        String userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_DESCRIPTION_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":173,"author":{"gitId":"AryanSarswat"},"content":"                 + EVENT_NAME_DESC_A + EVENT_DATETIME_DESC_A + EVENT_DESCRIPTION_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":174,"author":{"gitId":"AryanSarswat"},"content":"                 + EVENT_NAME_DESC_B + EVENT_DATETIME_DESC_B + EVENT_DESCRIPTION_DESC_B","lastModifiedDate":"2022-03-16"},{"lineNumber":175,"author":{"gitId":"AryanSarswat"},"content":"                + EVENT_ADDFRIEND_DESC_B + EVENT_REMOVEFRIEND_DESC_B;","lastModifiedDate":"2022-03-16"},{"lineNumber":176,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":177,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_OTHER)","lastModifiedDate":"2022-03-16"},{"lineNumber":178,"author":{"gitId":"AryanSarswat"},"content":"                .withDateTime(VALID_EVENT_DATETIME_OTHER).withDescription(VALID_EVENT_DESCRIPTION_OTHER)","lastModifiedDate":"2022-03-16"},{"lineNumber":179,"author":{"gitId":"AryanSarswat"},"content":"                .withAddFriend(VALID_NAME_BOB)","lastModifiedDate":"2022-03-16"},{"lineNumber":180,"author":{"gitId":"AryanSarswat"},"content":"                .withRemoveFriend(VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":181,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":182,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":183,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":184,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":185,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":186,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":187,"author":{"gitId":"AryanSarswat"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2022-03-16"},{"lineNumber":188,"author":{"gitId":"AryanSarswat"},"content":"        // no other valid values specified","lastModifiedDate":"2022-03-16"},{"lineNumber":189,"author":{"gitId":"AryanSarswat"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-16"},{"lineNumber":190,"author":{"gitId":"AryanSarswat"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_EVENT_NAME_DESC + EVENT_NAME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":191,"author":{"gitId":"AryanSarswat"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":192,"author":{"gitId":"AryanSarswat"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":193,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":194,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":195,"author":{"gitId":"AryanSarswat"},"content":"        // other valid values specified","lastModifiedDate":"2022-03-16"},{"lineNumber":196,"author":{"gitId":"AryanSarswat"},"content":"        userInput \u003d targetIndex.getOneBased() + EVENT_NAME_DESC_A + INVALID_EVENT_DATETIME_DESC + EVENT_DESCRIPTION_DESC_A","lastModifiedDate":"2022-03-16"},{"lineNumber":197,"author":{"gitId":"AryanSarswat"},"content":"                + EVENT_DATETIME_DESC_A;","lastModifiedDate":"2022-03-16"},{"lineNumber":198,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME).withDateTime(VALID_EVENT_DATETIME)","lastModifiedDate":"2022-03-16"},{"lineNumber":199,"author":{"gitId":"AryanSarswat"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":200,"author":{"gitId":"AryanSarswat"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":201,"author":{"gitId":"AryanSarswat"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-03-16"},{"lineNumber":202,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":203,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":203}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFriendName((String) null));","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFriendName(INVALID_NAME));","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        FriendName expectedName \u003d new FriendName(VALID_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(expectedName, ParserUtil.parseFriendName(VALID_NAME));","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        FriendName expectedName \u003d new FriendName(VALID_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(expectedName, ParserUtil.parseFriendName(nameWithWhitespace));","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"AryanSarswat":7,"-":189}},{"path":"src/test/java/seedu/address/logic/parser/ShowFriendCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-17"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import seedu.address.logic.commands.ShowFriendCommand;","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"public class ShowFriendCommandParserTest {","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    private ShowFriendCommandParser parser \u003d new ShowFriendCommandParser();","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"    public void parse_validName_returnsShowFriendCommand() {","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        Person personToShow \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"        FriendName name \u003d personToShow.getName();","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommand \u003d new ShowFriendCommand(personToShow);","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, \" n/\" + name.fullName, showFriendCommand);","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    public void parse_noNameGiven_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \" n/\", FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    public void parse_invalidNameArgs_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \" n/\" + \"$12345\", FriendName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    public void parse_validNameWithoutFlag_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        //valid name input but without \u0027n/\u0027 flag","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        Person personToShow \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"        String fullName \u003d personToShow.getName().fullName;","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, fullName, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowFriendCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"    public void parse_multipleNamesOnlyLastValidNameShown_success() {","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        Person personOneToShow \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"        Person personTwoToShow \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"        String fullNameOne \u003d personOneToShow.getName().fullName;","lastModifiedDate":"2022-03-17"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        String fullNameTwo \u003d personTwoToShow.getName().fullName;","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"        ShowFriendCommand showFriendCommand \u003d new ShowFriendCommand(personTwoToShow);","lastModifiedDate":"2022-03-17"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, \" n/\" + fullNameOne + \" n/\" + fullNameTwo, showFriendCommand);","lastModifiedDate":"2022-03-17"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        //random input of special characters","lastModifiedDate":"2022-03-17"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"@%^\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowFriendCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowFriendCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"        assertParseFailure(parser, \"   \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowFriendCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-17"}],"authorContributionMap":{"dionegoh":76}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"        @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"-":102,"limweiliang":6}},{"path":"src/test/java/seedu/address/model/common/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.common;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"public class DescriptionTest {","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"        String invalidDescription \u003d \"\";","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"    public void constructor_invalidDescriptionEmptySpaces_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"        String invalidDescription \u003d \" \";","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"    public void isValidDescription() {","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        // invalid description","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"        // valid description","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        assertTrue(Description.isValidDescription(\"tE394 !!11    descrIptioe394~!\"));","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        assertTrue(Description.isValidDescription(\"-\")); // one character","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"        assertTrue(Description.isValidDescription(\"this is going to be a looooooooooooooooooojjiïirjdorirth\"","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"                + \"looooooooooooooooooooooooooontg description with special characterS~~!3$54^\u0026*((peoœø!! and\"","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"                + \"punctuations ++2049.....!!!  !! \u003d\u003d :\u003e\u003e :)\")); // long address","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"}","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"dionegoh":37,"AryanSarswat":2}},{"path":"src/test/java/seedu/address/model/event/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"class DateTimeTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"        String invalidDateTime \u003d \"\";","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"    void isValidDateTime() {","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"        // null date time","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"        // invalid date times","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"\")); // empty string","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15-02-2020\")); // date only","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15/02/2020 1600\")); // wrong format","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15-02-2020 16:00\")); // wrong format","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15 Jan 2020 1200\")); // wrong format","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15-13-2020 1200\")); // out of range","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"        assertFalse(DateTime.isValidDateTime(\"15-12-2020 2469\")); // out of range","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"        // valid date times","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"        assertTrue(DateTime.isValidDateTime(\"15-02-2020 1600\"));","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"        assertTrue(DateTime.isValidDateTime(\"5-8-2023 0859\"));","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"    void toInputFormat() {","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        String validInput \u003d \"15-12-2020 2359\";","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        DateTime dateTime \u003d new DateTime(validInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"        assertEquals(dateTime, new DateTime(dateTime.toInputFormat()));","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":43}},{"path":"src/test/java/seedu/address/model/event/EventNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"public class EventNameTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventName(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"        // null name","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e EventName.isValidEventName(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"        // invalid name","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(EventName.isValidEventName(\"\")); // empty string","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(EventName.isValidEventName(\" \")); // spaces only","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(EventName.isValidEventName(\"^\")); // only one special character","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(EventName.isValidEventName(\"\u0026peter*\")); // starts with special character","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(EventName.isValidEventName(\"Correct but wrong\\n\")); // starts with special character","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        // valid name","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(EventName.isValidEventName(\"12345\")); // numbers only","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(EventName.isValidEventName(\"peter\u0027s birthday\")); // apostrophe","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(EventName.isValidEventName(\"The first \\\"Shakespeare\\\" play\")); // double quotes","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(EventName.isValidEventName(\"Capital \u0027Tan\u0027\")); // single quotes","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(EventName.isValidEventName(\"Going to a #Awesome Festival\")); // long names","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":42}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.model.event;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME_AMY_DIFF_TIME;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_OTHER;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.TypicalEvents.EVENT_AMY_BIRTHDAY;","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.testutil.TypicalEvents.EVENT_NO_DESCRIPTION;","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"class EventTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e event.getFriendNames().remove(0));","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"    void areFriendNamesValid() {","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"        // Not going to write a test for this for the time being because this might change.","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"    void isSameEvent() {","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"        assertTrue(EVENT_AMY_BIRTHDAY.isSameEvent(EVENT_AMY_BIRTHDAY));","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        assertFalse(EVENT_AMY_BIRTHDAY.isSameEvent(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"        // same name and date, all other attributes different -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"        Event editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY).withNames(VALID_NAME_BOB)","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        assertTrue(editedEvent.isSameEvent(EVENT_AMY_BIRTHDAY));","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY).withName(VALID_EVENT_NAME_OTHER).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        assertFalse(EVENT_AMY_BIRTHDAY.isSameEvent(editedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"        // different date, all other attributes same -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY)","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"                .withDateTime(VALID_EVENT_DATETIME_OTHER).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"        assertFalse(EVENT_AMY_BIRTHDAY.isSameEvent(editedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"        // different time, all other attributes same -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY)","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"                .withDateTime(VALID_EVENT_DATETIME_AMY_DIFF_TIME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"        assertTrue(EVENT_AMY_BIRTHDAY.isSameEvent(editedEvent));","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"    void testEquals() {","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"        Event eventCopy \u003d new EventBuilder(EVENT_AMY_BIRTHDAY).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"        assertEquals(EVENT_AMY_BIRTHDAY, eventCopy);","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"        assertTrue(EVENT_AMY_BIRTHDAY.isSameEvent(EVENT_AMY_BIRTHDAY));","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"        assertFalse(EVENT_AMY_BIRTHDAY.isSameEvent(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(5, EVENT_AMY_BIRTHDAY);","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(EVENT_AMY_BIRTHDAY, EVENT_NO_DESCRIPTION);","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"        Event editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY)","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"                .withName(VALID_EVENT_NAME_OTHER).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(EVENT_AMY_BIRTHDAY, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        // different datetime -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY)","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"                .withDateTime(VALID_EVENT_DATETIME_AMY_DIFF_TIME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(EVENT_AMY_BIRTHDAY, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY)","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"                .withDescription(VALID_EVENT_DESCRIPTION_OTHER).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(EVENT_AMY_BIRTHDAY, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"        // different friends -\u003e returns false","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"        editedEvent \u003d new EventBuilder(EVENT_AMY_BIRTHDAY).withNames(VALID_NAME_BOB).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"        assertNotEquals(EVENT_AMY_BIRTHDAY, editedEvent);","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":100}},{"path":"src/test/java/seedu/address/model/person/FriendNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"public class FriendNameTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e new FriendName(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new FriendName(invalidName));","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"        // null name","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e FriendName.isValidFriendName(null));","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"        // invalid name","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(FriendName.isValidFriendName(\"\")); // empty string","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(FriendName.isValidFriendName(\" \")); // spaces only","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(FriendName.isValidFriendName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(FriendName.isValidFriendName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(FriendName.isValidFriendName(\"12345\")); // numbers only","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        // valid name","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(FriendName.isValidFriendName(\"peter jack\")); // alphabets only","lastModifiedDate":"2022-03-15"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(FriendName.isValidFriendName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(FriendName.isValidFriendName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(FriendName.isValidFriendName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2022-03-15"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"AryanSarswat":40}},{"path":"src/test/java/seedu/address/model/person/LogNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"public class LogNameTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LogName(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new LogName(invalidName));","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"    public void isValidName() {","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"        // null name","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e LogName.isValidLogName(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"        // invalid name","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\"\")); // empty string","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\" \")); // spaces only","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\"ajdhfgos;hdgoi;asdhgio;asdhgiosdhgioshdigoshdioghsi\")); // 51 characters","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"        // valid name","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"12345\")); // numbers only","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"ajdhfgos;hdgoi;asdhgio;asdhgiosdhgioshdigosdioghsi\")); // 50 characters","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"peter\u0027s bar mitzvah\")); // contains non-alphanumeric characters","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"First time meeting jack\")); // alphabets only","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"3rd time meeting peter\")); // alphanumeric characters","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"The \\\"Capital\\\" incident\")); // with capital letters","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"#BestDayEver\")); // long names","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":41}},{"path":"src/test/java/seedu/address/model/person/LogTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"public class LogTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    public void isValidLogTitle() {","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"        // null","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"        assertThrows(NullPointerException.class, () -\u003e LogName.isValidLogName(null));","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"        // blank title","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\"\")); // empty string","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\"              \")); // spaces only","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        // valid length?","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        String longTitle \u003d \"\";","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"        for (int i \u003d 0; i \u003c LogName.TITLE_LENGTH_CONSTRAINT; i++) {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"            longTitle +\u003d \"c\";","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(longTitle)); // exactly as many characters","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(longTitle + \"c\")); // \u003elimit characters","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"        assertFalse(LogName.isValidLogName(\" peter jack\")); // start with space","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        // valid","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"12345\")); // numbers only","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"David Roger Jackson Ray Jr 2nd\")); // long name","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        assertTrue(LogName.isValidLogName(\"`~!@#$%^\u0026*()_-+\u003d{[}]|\\\\:;\\\"\\\u0027\u003c,\u003e.?/\")); // random characters","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Log(null, null));","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(\"\", null)); // empty","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(\"      \", null)); // spaces only","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        String longTitle \u003d \"\";","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"        for (int i \u003d 0; i \u003c LogName.TITLE_LENGTH_CONSTRAINT + 1; i++) {","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"            longTitle +\u003d \"c\";","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        final String tooLongTitle \u003d longTitle;","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(tooLongTitle, null)); // too many characters","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_noDescription_defaultDescription() {","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"title\";","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(new Log(title, Log.DEFAULT_NO_DESCRIPTION), new Log(title, null));","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_haveDescription_givenDescription() {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"title\";","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d \"description\";","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        Log testLog \u003d new Log(title, description);","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(testLog.getTitle(), new LogName(title));","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"        assertEquals(testLog.getDescription(), new Description(description));","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":57,"AryanSarswat":17}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.TypicalLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        // different logs (titles \u0026\u0026 description must match) -\u003e returns false","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withLogs(TypicalLogs.getTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        Person editedAliceWithDifferentDescriptions \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"                .withLogs(TypicalLogs.getIdenticalButDifferentTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(ALICE.equals(editedAliceWithDifferentDescriptions));","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"    public void hasSameName() {","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        // no other fields","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"AryanSarswat"},"content":"        FriendName name \u003d new FriendName(\"some valid name\");","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"AryanSarswat"},"content":"        FriendName repeatedName \u003d new FriendName(\"some valid name\");","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        Person person \u003d new Person(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        Person otherPerson \u003d new Person(repeatedName);","lastModifiedDate":"2022-03-15"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(person.hasSameName(otherPerson));","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        // returns true even with different attributes","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withLogs(TypicalLogs.getTypicalLogs()).build();","lastModifiedDate":"2022-03-15"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(ALICE.hasSameName(editedAlice));","lastModifiedDate":"2022-03-15"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        // returns false","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(ALICE.hasSameName(BOB));","lastModifiedDate":"2022-03-15"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tanyjnaaman":27,"AryanSarswat":2,"-":91}},{"path":"src/test/java/seedu/address/model/person/UniqueLogListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.DuplicateLogException;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.LogNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"public class UniqueLogListTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.contains(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_logNotInList_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        Log toFind \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty, test add separately","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.contains(toFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_logInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        Log identical \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(identical));","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.containsExactly(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_logNotInList_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        Log toFind \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty, test add separately","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.containsExactly(toFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_logInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        Log identical \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(identical));","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public void add_nullLog_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.addLog(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void add_duplicateLog_throwsDuplicateLogException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        Log similarLog \u003d new Log(\"title\", \"some description\"); // similar \u003d\u003d same title","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        Log anotherSimilarLog \u003d new Log(\"title\", \"some other description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(DuplicateLogException.class, () -\u003e uniqueLogList.addLog(similarLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(DuplicateLogException.class, () -\u003e uniqueLogList.addLog(anotherSimilarLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLog_targetLogNotInside_throwsLogNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        Log editedLog \u003d new Log(\"target\", \"now added description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        Log notTargetLog \u003d new Log(\"not target\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        // target not in empty list","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.setLog(target, editedLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        // target not in list","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(notTargetLog); // contains non-target log","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.setLog(target, editedLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLog_validEditContains_returnsTrue() {","lastModifiedDate":"2022-03-10"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        // target is inside, and edited log are identical","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        Log editedLog \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(target.equals(editedLog)); // identical logs","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLog(target, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(target)); // no change semantically, since setter sets identical thing","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        // target is inside, and edited log same title but different description","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        Log actuallyEditedLog \u003d new Log(\"target\", \"some different description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        Log actuallyEditedLogToFind \u003d new Log(\"target\", \"some different description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLog(target, actuallyEditedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(target)); // same title still inside","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.containsExactly(target)); // semantically different","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(actuallyEditedLogToFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.removeLog(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog_logNotInside_throwsLogNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        // empty log","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.removeLog(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        // not inside","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        Log nonTarget \u003d new Log(\"not target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(nonTarget);","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(nonTarget)); // not empty","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.removeLog(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog_validContains_returnsFalse() {","lastModifiedDate":"2022-03-10"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"not target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        Log toRemove \u003d new Log(\"not target\", \"description\"); // exact match to remove","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(target)); // target is inside","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.removeLog(toRemove);","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.contains(target)); // removed successfully","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":147}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.TypicalLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    private static final List\u003cJsonAdaptedLog\u003e VALID_LOGS \u003d TypicalLogs.getTypicalLogs().stream()","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            .map(JsonAdaptedLog::new)","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    public void toModelType_validPersonDetailsWithLogs_returnsPerson() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        Person bensonWithLogs \u003d new PersonBuilder(BENSON).withLogs(TypicalLogs.getTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson jsonPerson \u003d new JsonAdaptedPerson(bensonWithLogs);","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(bensonWithLogs, jsonPerson.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"                VALID_DESCRIPTION, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        String expectedMessage \u003d FriendName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-03-10"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"                VALID_ADDRESS, VALID_DESCRIPTION, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, FriendName.class.getSimpleName());","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-03-10"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"                VALID_ADDRESS, VALID_DESCRIPTION, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-03-10"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"                        VALID_DESCRIPTION, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"dionegoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,","lastModifiedDate":"2022-03-10"},{"lineNumber":96,"author":{"gitId":"dionegoh"},"content":"                VALID_DESCRIPTION, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"dionegoh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-03-10"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"                VALID_DESCRIPTION, invalidTags, VALID_LOGS);","lastModifiedDate":"2022-03-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"dionegoh":14,"tanyjnaaman":15,"AryanSarswat":3,"-":78}},{"path":"src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":" * A utility class to help with building EditEventDescriptor objects.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"public class EditEventDescriptorBuilder {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"    private EditEventDescriptor descriptor;","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder() {","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"        this.descriptor \u003d new EditEventDescriptor(descriptor);","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        descriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setName(event.getName());","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setDateTime(event.getDateTime());","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setDescription(event.getDescription());","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setAddFriendNames(event.getFriendNames());","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code Name} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder withName(String name) {","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setName(new EventName(name));","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code DateTime} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder withDateTime(String dateTime) {","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setDateTime(new DateTime(dateTime));","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code Description} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code addFriends} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder withAddFriend(String... addFriend) {","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e nameSet \u003d Stream.of(addFriend).map(FriendName::new).collect(Collectors.toSet());","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setAddFriendNames(nameSet);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code removeFriends} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptorBuilder withRemoveFriend(String... removeFriend) {","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"        Set\u003cFriendName\u003e nameSet \u003d Stream.of(removeFriend).map(FriendName::new).collect(Collectors.toSet());","lastModifiedDate":"2022-03-17"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setRemoveFriendNames(nameSet);","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"    public EditEventDescriptor build() {","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"AryanSarswat"},"content":"        return descriptor;","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":87}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getPhone().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getEmail().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getAddress().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getDescription().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"            descriptor.setDescription(person.getDescription());","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"        descriptor.setName(new FriendName(name));","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"     * Sets the {@code Description} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2022-03-15"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"    public EditPersonDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"dionegoh"},"content":"        return this;","lastModifiedDate":"2022-03-15"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"dionegoh":17,"tanyjnaaman":2,"AryanSarswat":3,"-":85}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"import java.util.List;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":" * A utility class to help with building Event objects.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"public class EventBuilder {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"    public static final String DEFAULT_NAME \u003d \"Default Event\";","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"    public static final String DEFAULT_DATE_TIME \u003d \"12-5-2022 1500\";","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Default Description\";","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"    public static final List\u003cFriendName\u003e DEFAULT_FRIENDLIST \u003d List.of(new FriendName(\"Amy Bee\"), new FriendName(\"Alex Yeoh\"));","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"    private EventName name;","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"    private DateTime dateTime;","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"    private Description description;","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"    private Set\u003cFriendName\u003e friendNames \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder() {","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"        name \u003d new EventName(DEFAULT_NAME);","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"        dateTime \u003d new DateTime(DEFAULT_DATE_TIME);","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"        friendNames.addAll(DEFAULT_FRIENDLIST);","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"        name \u003d eventToCopy.getName();","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"        dateTime \u003d eventToCopy.getDateTime();","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"        description \u003d eventToCopy.getDescription();","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"        friendNames.addAll(eventToCopy.getFriendNames());","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder withName(String name) {","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"        this.name \u003d new EventName(name);","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"     * Parses the {@code names} into a {@code Set\u003cName\u003e} and set it to the {@code Event} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder withNames(String ... names) {","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"        this.friendNames \u003d SampleDataUtil.getNameSet(names);","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder withDateTime(String dateTime) {","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"AryanSarswat"},"content":"        this.dateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"AryanSarswat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"AryanSarswat"},"content":"     * Sets the {@code Description} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"AryanSarswat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"AryanSarswat"},"content":"    public EventBuilder withDescription(String description) {","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"AryanSarswat"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"AryanSarswat"},"content":"        return this;","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"AryanSarswat"},"content":"    public Event build() {","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"AryanSarswat"},"content":"        return new Event(name, dateTime, description, friendNames);","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":84}},{"path":"src/test/java/seedu/address/testutil/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"/**","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":" * A default model stub that has all of the methods failing.","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":" */","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"    public ObservableList\u003cEvent\u003e getEventsList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"limweiliang"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"limweiliang"},"content":"    public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2022-03-16"},{"lineNumber":65,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":66,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":67,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":68,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":69,"author":{"gitId":"limweiliang"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-03-16"},{"lineNumber":70,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":71,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":72,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":73,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":74,"author":{"gitId":"limweiliang"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":76,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"limweiliang"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"limweiliang"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"limweiliang"},"content":"    public void deleteEvent(Event target) {","lastModifiedDate":"2022-03-16"},{"lineNumber":90,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"limweiliang"},"content":"    public void setEvent(Event target, Event editedPerson) {","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"limweiliang"},"content":"    public boolean areEventFriendsValid(Event toAdd) {","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":103,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":104,"author":{"gitId":"limweiliang"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-03-16"},{"lineNumber":105,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":106,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":108,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":109,"author":{"gitId":"limweiliang"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"    @Override","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"limweiliang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-03-16"},{"lineNumber":116,"author":{"gitId":"limweiliang"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"}","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"limweiliang":118}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.common.Description;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.person.FriendName;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.UniqueLogList;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d null;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"    private FriendName name;","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"    private Description description;","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    private List\u003cLog\u003e logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        name \u003d new FriendName(DEFAULT_NAME);","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        logs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"        description \u003d personToCopy.getDescription();","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        logs \u003d personToCopy.getLogs();","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"AryanSarswat"},"content":"        this.name \u003d new FriendName(name);","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":105,"author":{"gitId":"dionegoh"},"content":"     * Sets the {@code Description} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-10"},{"lineNumber":106,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":107,"author":{"gitId":"dionegoh"},"content":"    public PersonBuilder withDescription(String description) {","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"dionegoh"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"dionegoh"},"content":"        return this;","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"     * Sets the {@code Log} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-10"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"    public PersonBuilder withLogs(Log ... logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLogs(List.of(logs));","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs \u003d uniqueLogList.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        return this;","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"     * Sets the {@code Log} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-10"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"    public PersonBuilder withLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLogs(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs \u003d uniqueLogList.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        return this;","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":133,"author":{"gitId":"dionegoh"},"content":"        return new Person(name, phone, email, address, description, tags, logs);","lastModifiedDate":"2022-03-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"dionegoh":13,"tanyjnaaman":23,"AryanSarswat":5,"-":94}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_ADDRESS;","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_DESCRIPTION;","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_EMAIL;","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PHONE;","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getPhone().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getEmail().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getAddress().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"        if (!(person.getDescription().value \u003d\u003d null)) {","lastModifiedDate":"2022-03-15"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"            sb.append(PREFIX_DESCRIPTION + person.getDescription().value + \" \");","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NEW_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_NEW_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_NEW_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_NEW_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_NEW_DESCRIPTION).append(description.value).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"                sb.append(PREFIX_NEW_TAG);","lastModifiedDate":"2022-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_NEW_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2022-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":77,"author":{"gitId":"dionegoh"},"content":"        System.out.println(sb.toString());","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"dionegoh":24,"-":56}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATETIME_AMY;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"import java.util.List;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"public class TypicalEvents {","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"    public static final String AMY_NAME \u003d \"Amy Koh\";","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"    public static final String ALEX_NAME \u003d \"Alex Yeoh\";","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"    // TODO alter to reflect new restrictions after refactoring of name and description classes","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"    public static final Event EVENT_AMY_BIRTHDAY \u003d new EventBuilder().withName(\"Amy Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"            .withDateTime(VALID_EVENT_DATETIME_AMY)","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"            .withNames(AMY_NAME)","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"            .withDescription(\"This is Amy\u0027s Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"            .build();","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"    public static final Event EVENT_NO_DESCRIPTION \u003d new EventBuilder().withName(\"Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"            .withDateTime(\"12-5-2022 1520\")","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"            .withNames(AMY_NAME, ALEX_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"    public static final Event EVENT_WITH_DESCRIPTION \u003d new EventBuilder().withName(\"2nd Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"            .withDateTime(\"12-3-2022 1520\")","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"            .withDescription(\"This is a description\")","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"            .withNames(AMY_NAME, ALEX_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"    public static final Event EVENT_NO_FRIENDS \u003d new EventBuilder().withName(\"3rd Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"            .withDateTime(\"11-5-2022 1520\")","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"            .withDescription(\"This is a description\").build();","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"    public static final Event EVENT_WITH_DIFF_DESCRIPTION \u003d new EventBuilder().withName(\"4th Birthday\")","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"            .withDateTime(\"17-5-2022 2020\")","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"            .withDescription(\"This is a another description\")","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"limweiliang"},"content":"            .withNames(AMY_NAME, ALEX_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"limweiliang"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(AMY_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"limweiliang"},"content":"    public static final Person ALEX \u003d new PersonBuilder().withName(ALEX_NAME).build();","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"    private TypicalEvents() {}","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"limweiliang"},"content":"    public static AddressBook getTypicalAddressBookWithEvents() {","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"limweiliang"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"AryanSarswat"},"content":"        for (Event event: getTypicalEvents()) {","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"limweiliang"},"content":"            ab.addEvent(event);","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"AryanSarswat"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"limweiliang"},"content":"        // So that friend name check does not fail","lastModifiedDate":"2022-03-16"},{"lineNumber":54,"author":{"gitId":"limweiliang"},"content":"        ab.addPerson(AMY);","lastModifiedDate":"2022-03-16"},{"lineNumber":55,"author":{"gitId":"limweiliang"},"content":"        ab.addPerson(ALEX);","lastModifiedDate":"2022-03-16"},{"lineNumber":56,"author":{"gitId":"limweiliang"},"content":"        return ab;","lastModifiedDate":"2022-03-16"},{"lineNumber":57,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":58,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":59,"author":{"gitId":"AryanSarswat"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2022-03-16"},{"lineNumber":60,"author":{"gitId":"AryanSarswat"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(EVENT_NO_DESCRIPTION, EVENT_NO_FRIENDS, EVENT_WITH_DESCRIPTION,","lastModifiedDate":"2022-03-16"},{"lineNumber":61,"author":{"gitId":"AryanSarswat"},"content":"                EVENT_WITH_DIFF_DESCRIPTION));","lastModifiedDate":"2022-03-16"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":63,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":64,"author":{"gitId":"AryanSarswat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"AryanSarswat":37,"limweiliang":27}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Index INDEX_FIRST_LOG \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Index INDEX_SECOND_LOG \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Index INDEX_THIRD_LOG \u003d Index.fromOneBased(3);","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"tanyjnaaman":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalLogs.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"public class TypicalLogs {","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LOG_NO_DESCRIPTION \u003d new Log(\"met in 2013\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log SHORT_LOG \u003d new Log(\"birthday coming up\", \"maybe get a card\");","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LONG_LOG \u003d new Log(\"favourite movies\",","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"            \"1. Batman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"2. Superman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"Super super into movies, can probably get some themed gift for birthday.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log SHORT_LOG_DIFFERENT_DESC \u003d new Log(\"birthday coming up\",","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"            \"maybe get a card\" + \"difference\");","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LONG_LOG_DIFFERENT_DESC \u003d new Log(\"favourite movies\",","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"            \"1. Batman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"2. Superman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"Super super into movies, can probably get some themed gift for birthday.\"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nDifference\");","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"    private TypicalLogs() {} // prevents instantiation","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    public static List\u003cLog\u003e getTypicalLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(LOG_NO_DESCRIPTION, SHORT_LOG, LONG_LOG));","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    public static List\u003cLog\u003e getIdenticalButDifferentTypicalLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(LOG_NO_DESCRIPTION, SHORT_LOG_DIFFERENT_DESC, LONG_LOG_DIFFERENT_DESC));","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":34}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    // With logs","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person JAMES \u003d new PersonBuilder().withName(\"JAMES BOND\").withPhone(\"83382178\")","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"jb@example.com\").withAddress(\"Singapore street\")","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.LOG_NO_DESCRIPTION).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person KAREN \u003d new PersonBuilder().withName(\"KAREN K\").withPhone(\"99999999\")","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"kk@example.com\").withAddress(\"some street\")","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.LONG_LOG).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person LAUREN \u003d new PersonBuilder().withName(\"Lauren Wong\").withPhone(\"93829384\")","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"laurenwong@example.com\").withAddress(\"queen st.\")","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.SHORT_LOG).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person MAVIS \u003d new PersonBuilder().withName(\"Mavis Tan\").withPhone(\"96382727\")","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"mavis.tan@example.com\").withAddress(\"king st.\")","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.getTypicalLogs()).build(); // 3 logs","lastModifiedDate":"2022-03-10"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":81,"author":{"gitId":"limweiliang"},"content":"     * todo rename to getTypicalAddressBookWithPersons to distinguish from one with events.","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE,","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"                FIONA, GEORGE, JAMES, KAREN, LAUREN, MAVIS","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        ));","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"tanyjnaaman":20,"-":75,"limweiliang":1}}]
