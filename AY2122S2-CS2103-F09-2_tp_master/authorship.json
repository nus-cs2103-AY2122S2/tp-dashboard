[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"[![CI Status](https://github.com/AY2122S2-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S2-CS2103-F09-2/tp/actions)","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"_Find yourself having trouble managing all the important friendships in your university life?_","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"**Amigos** is here to help!","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"With **Amigos**, you can:","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"* Keep track of important details about your friends","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"* Maintain your friendships by keeping up-to-date logs about your friends, such as their likes/dislikes, aspirations and so on!","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"* Remember key events you are doing with friends","lastModifiedDate":"2022-02-25"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"Amigos is also _super fast_ to use, and optimized for keyboard input while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"For more information on how to get started, check out the **[Amigos User Guide](docs/UserGuide.md)**.","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"**Acknowledgements**: This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"limweiliang":15,"-":3}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at","lastModifiedDate":"2016-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html","lastModifiedDate":"2016-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":274,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":275,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":276,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":306,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":307,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":308,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":309,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":328,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":329,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":330,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":350,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":354,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":355,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":361,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":362,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":368,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":369,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":378,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":383,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":384,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":385,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":394,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":395,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":396,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":399,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":400,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanyjnaaman":1,"-":399}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"### Aryan Sarswat","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"\u003cimg src\u003d\"images/aryansarswat.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"[[github](https://github.com/AryanSarswat)]","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"[[portfolio](team/aryansarswat.md)]","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"* Role: Developer","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"* Responsibilities: Documentation (Developer Guide, User Guide[Show features])","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"### Dione Goh","lastModifiedDate":"2022-02-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"\u003cimg src\u003d\"images/dionegoh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"[[github](http://github.com/dionegoh)]","lastModifiedDate":"2022-02-24"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"[[portfolio](team/dionegoh.md)]","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"* Role: Developer","lastModifiedDate":"2022-02-24"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"* Responsibilities: [to be discussed]","lastModifiedDate":"2022-02-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"### Lim Wei Liang","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"\u003cimg src\u003d\"images/limweiliang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"[[github](http://github.com/limweiliang)] [[portfolio](team/limweiliang.md)]","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"limweiliang"},"content":"* Responsibilities: [To be discussed]","lastModifiedDate":"2022-02-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"### Naaman Tan","lastModifiedDate":"2022-02-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"\u003cimg src\u003d\"images/tanyjnaaman.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"[[github](http://github.com/tanyjnaaman)]","lastModifiedDate":"2022-02-26"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"[[portfolio](team/tanyjnaaman.md)]","lastModifiedDate":"2022-02-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"* Responsibilities:","lastModifiedDate":"2022-02-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dionegoh":6,"tanyjnaaman":5,"AryanSarswat":6,"-":30,"limweiliang":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"AryanSarswat"},"content":"* tech-savvy university students","lastModifiedDate":"2022-03-03"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"AryanSarswat"},"content":"* can type fast and has plenty of experience with CLI application","lastModifiedDate":"2022-03-03"},{"lineNumber":263,"author":{"gitId":"AryanSarswat"},"content":"* is often busy and struggles to manage important details about their relationships","lastModifiedDate":"2022-03-03"},{"lineNumber":264,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":265,"author":{"gitId":"AryanSarswat"},"content":"**Value proposition**: The program will help busy university students to manage their friendships by keeping track of important details. An example of possible features include the tracking of birthdays, money owed, upcoming meetings etc. and providing relevant reminders, in addition to basic functionalities.","lastModifiedDate":"2022-02-26"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"| Priority | As a …​        | I want to …​                                                                            | So that I can…​                                                                                             |","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"AryanSarswat"},"content":"|----------|----------------|-----------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-02-26"},{"lineNumber":275,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | list all my friends                                                                     | ensure that the information I have added is saved and check my friend\u0027s details                             |","lastModifiedDate":"2022-02-26"},{"lineNumber":276,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | add events relating to my friends                                                       | keep track of any future events                                                                             |","lastModifiedDate":"2022-02-26"},{"lineNumber":277,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | add new friends                                                                         | keep track of any new friends I make                                                                        |","lastModifiedDate":"2022-02-26"},{"lineNumber":278,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | remove friends I am no longer in contact with                                           | keep my friends list updated and remove irrelevant contact                                                  |","lastModifiedDate":"2022-02-26"},{"lineNumber":279,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | User           | review my events for the next day along with their relevant details                     | take note and be prepared for the next day                                                                  |","lastModifiedDate":"2022-02-26"},{"lineNumber":280,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | Forgetful user | keep track of things that my friend has recently talked about                           | appear invested in my relationship and not forget important things about my friends                         |","lastModifiedDate":"2022-02-26"},{"lineNumber":281,"author":{"gitId":"AryanSarswat"},"content":"| `* * *`  | Forgetful user | add descriptions and details about my friends that I would like to remember             | not stress about remember these details for the next time we meet                                           |","lastModifiedDate":"2022-02-26"},{"lineNumber":282,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | New User       | undo a command                                                                          | revert back accidental commands                                                                             | ","lastModifiedDate":"2022-02-26"},{"lineNumber":283,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | New User       | reset the application to its default state                                              | properly experiment with the application before using it properly                                           |","lastModifiedDate":"2022-02-26"},{"lineNumber":284,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Forgetful User | use a keyword search to find a note written about someone                               | find out who I spoke to about a certain issue                                                               | ","lastModifiedDate":"2022-02-26"},{"lineNumber":285,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Amateur User   | update details about my friends                                                         | keep my friends list up to date                                                                             |","lastModifiedDate":"2022-02-26"},{"lineNumber":286,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Amateur User   | shorten command lengths                                                                 | increase my efficiency while using this application                                                         |","lastModifiedDate":"2022-02-26"},{"lineNumber":287,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Seasoned User  | see which of my friends I am closest to and which of them I have not visited in a while | reflect more about how I spend my time with my friend and maybe catch up with ones I have not met in awhile | ","lastModifiedDate":"2022-02-26"},{"lineNumber":288,"author":{"gitId":"AryanSarswat"},"content":"| `* *`    | Seasoned User  | chain commands                                                                          | reduce the number of commands I need to type thereby increasing efficiency                                  |","lastModifiedDate":"2022-02-26"},{"lineNumber":289,"author":{"gitId":"AryanSarswat"},"content":"| `*`      | User           | tag friends under different categories                                                  | better classify and organise my friend circle                                                               | ","lastModifiedDate":"2022-02-26"},{"lineNumber":290,"author":{"gitId":"AryanSarswat"},"content":"| `*`      | New User       | know which features of the application I am not using as often                          | fully utilise the application to its maximum capability                                                     | ","lastModifiedDate":"2022-02-26"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"dionegoh"},"content":"(For all use cases below, the **System** is the `Amigos` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-02-24"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"dionegoh"},"content":"**Use case: F01 - Add a friend**","lastModifiedDate":"2022-02-28"},{"lineNumber":297,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":298,"author":{"gitId":"dionegoh"},"content":"**Guarantees** ","lastModifiedDate":"2022-02-28"},{"lineNumber":299,"author":{"gitId":"dionegoh"},"content":"* A new friend will be added into Amigos only if there does not already exist a friend with the same name in it.","lastModifiedDate":"2022-02-28"},{"lineNumber":300,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":301,"author":{"gitId":"dionegoh"},"content":"**MSS**","lastModifiedDate":"2022-02-28"},{"lineNumber":302,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":303,"author":{"gitId":"dionegoh"},"content":"1. User requests to add a friend.","lastModifiedDate":"2022-02-28"},{"lineNumber":304,"author":{"gitId":"dionegoh"},"content":"2. Amigos proceeds to add the friend.","lastModifiedDate":"2022-02-28"},{"lineNumber":305,"author":{"gitId":"dionegoh"},"content":"3. Amigos clears the user input.","lastModifiedDate":"2022-02-28"},{"lineNumber":306,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":307,"author":{"gitId":"dionegoh"},"content":"   Use case ends. ","lastModifiedDate":"2022-02-28"},{"lineNumber":308,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":309,"author":{"gitId":"dionegoh"},"content":"**Extensions**","lastModifiedDate":"2022-02-28"},{"lineNumber":310,"author":{"gitId":"dionegoh"},"content":"* 1a. A friend with the same name already exists in Amigos.","lastModifiedDate":"2022-02-28"},{"lineNumber":311,"author":{"gitId":"dionegoh"},"content":"    * 1a1. Amigos displays the existing friend with the same name and the corresponding error message.","lastModifiedDate":"2022-02-28"},{"lineNumber":312,"author":{"gitId":"dionegoh"},"content":"    * 1a2. Amigos clears the user input.","lastModifiedDate":"2022-02-28"},{"lineNumber":313,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":314,"author":{"gitId":"dionegoh"},"content":"    Use case ends","lastModifiedDate":"2022-02-28"},{"lineNumber":315,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":316,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":317,"author":{"gitId":"dionegoh"},"content":"**Use case: F02 - Edit a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":318,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":319,"author":{"gitId":"dionegoh"},"content":"**Guarantees**","lastModifiedDate":"2022-02-28"},{"lineNumber":320,"author":{"gitId":"dionegoh"},"content":"* The field(s) of an existing friend will be updated only if the user input is valid.","lastModifiedDate":"2022-03-03"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"dionegoh"},"content":"1.  User requests to list friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":325,"author":{"gitId":"dionegoh"},"content":"2.  Amigos shows a list of friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":326,"author":{"gitId":"dionegoh"},"content":"3.  User requests to edit details of a specific friend in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":327,"author":{"gitId":"dionegoh"},"content":"4.  Amigos edits the details of the friend accordingly and clears user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"dionegoh"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-24"},{"lineNumber":335,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":336,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":337,"author":{"gitId":"dionegoh"},"content":"* 3a. No name is entered by the user.","lastModifiedDate":"2022-02-24"},{"lineNumber":338,"author":{"gitId":"dionegoh"},"content":"    * 3a1. Amigos requests user to enter a name.","lastModifiedDate":"2022-02-28"},{"lineNumber":339,"author":{"gitId":"dionegoh"},"content":"    * 3a2. User reenters the command along with a valid name and other relevant fields (at least one) to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":342,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"dionegoh"},"content":"* 3b. Amigos finds no contact with the given name.","lastModifiedDate":"2022-02-28"},{"lineNumber":345,"author":{"gitId":"dionegoh"},"content":"    * 3b1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-28"},{"lineNumber":346,"author":{"gitId":"dionegoh"},"content":"    * 3b2. User reenters the command along with a valid name and other relevant fields (at least one) to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":349,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":350,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":351,"author":{"gitId":"dionegoh"},"content":"* 3c. A valid name is entered by user but no fields to edit are given.","lastModifiedDate":"2022-03-03"},{"lineNumber":352,"author":{"gitId":"dionegoh"},"content":"    * 3c1. Amigos requests user to enter at least one field to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":353,"author":{"gitId":"dionegoh"},"content":"    * 3c2. User reenters command and name, along with at least one field to edit.","lastModifiedDate":"2022-03-03"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"dionegoh"},"content":"  Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b/3c again.","lastModifiedDate":"2022-03-03"},{"lineNumber":356,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":357,"author":{"gitId":"dionegoh"},"content":"**Use case: F03 - Delete a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":359,"author":{"gitId":"dionegoh"},"content":"**Guarantees** ","lastModifiedDate":"2022-02-28"},{"lineNumber":360,"author":{"gitId":"dionegoh"},"content":"* An existing friend in Amigos will be deleted only if the name input matches that of an existing friend in Amigos.","lastModifiedDate":"2022-03-03"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"dionegoh"},"content":"1.  User requests to list friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":365,"author":{"gitId":"dionegoh"},"content":"2.  Amigos shows a list of friends.","lastModifiedDate":"2022-02-28"},{"lineNumber":366,"author":{"gitId":"dionegoh"},"content":"3.  User requests to delete a specific friend in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":367,"author":{"gitId":"dionegoh"},"content":"4.  Amigos deletes the friend and clears the user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"dionegoh"},"content":"    * Use case ends.","lastModifiedDate":"2022-02-24"},{"lineNumber":375,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":376,"author":{"gitId":"dionegoh"},"content":"* 2b. User requests to delete all friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":377,"author":{"gitId":"dionegoh"},"content":"   * 2b1. Amigos deletes all friends and clears the user input.","lastModifiedDate":"2022-03-03"},{"lineNumber":378,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"dionegoh"},"content":"* 3a. No name is entered by the user. ","lastModifiedDate":"2022-02-24"},{"lineNumber":383,"author":{"gitId":"dionegoh"},"content":"   * 3a1. Amigos requests user to enter a name.","lastModifiedDate":"2022-02-28"},{"lineNumber":384,"author":{"gitId":"dionegoh"},"content":"   * 3a2. User reenters the command along with a valid name.","lastModifiedDate":"2022-03-03"},{"lineNumber":385,"author":{"gitId":"dionegoh"},"content":"     ","lastModifiedDate":"2022-02-24"},{"lineNumber":386,"author":{"gitId":"dionegoh"},"content":"   Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b again. ","lastModifiedDate":"2022-03-03"},{"lineNumber":387,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":388,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":389,"author":{"gitId":"dionegoh"},"content":"* 3b. Amigos finds no contact with the given name.","lastModifiedDate":"2022-02-28"},{"lineNumber":390,"author":{"gitId":"dionegoh"},"content":"    * 3b1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-28"},{"lineNumber":391,"author":{"gitId":"dionegoh"},"content":"    * 3b2. User reenters the command along with a valid name. ","lastModifiedDate":"2022-03-03"},{"lineNumber":392,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":393,"author":{"gitId":"dionegoh"},"content":"    Use case resumes at step 4 if newly-entered user input is valid, otherwise it may reach 3a/3b again.","lastModifiedDate":"2022-03-03"},{"lineNumber":394,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"AryanSarswat"},"content":"**Use case: F04 - Checking details of a friend**","lastModifiedDate":"2022-03-03"},{"lineNumber":397,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":398,"author":{"gitId":"AryanSarswat"},"content":"**MSS**","lastModifiedDate":"2022-03-03"},{"lineNumber":399,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":400,"author":{"gitId":"AryanSarswat"},"content":"1. User requests to see all friends in Amigos.","lastModifiedDate":"2022-03-03"},{"lineNumber":401,"author":{"gitId":"AryanSarswat"},"content":"2. Amigos switches the GUI to the friends tab and shows all friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":402,"author":{"gitId":"AryanSarswat"},"content":"4. User requests to view full details of a particular friend.","lastModifiedDate":"2022-03-03"},{"lineNumber":403,"author":{"gitId":"AryanSarswat"},"content":"5. Amigos displays a page containing the full details of that particular friend accompanied by some logs.","lastModifiedDate":"2022-03-03"},{"lineNumber":404,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":405,"author":{"gitId":"AryanSarswat"},"content":"Use case ends","lastModifiedDate":"2022-03-03"},{"lineNumber":406,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":407,"author":{"gitId":"AryanSarswat"},"content":"**Extensions**","lastModifiedDate":"2022-03-03"},{"lineNumber":408,"author":{"gitId":"AryanSarswat"},"content":"* 3a. There are no existing friends.","lastModifiedDate":"2022-03-03"},{"lineNumber":409,"author":{"gitId":"AryanSarswat"},"content":"    * 3a.1 Amigos displays an empty interface with the message “No friends yet”.","lastModifiedDate":"2022-03-03"},{"lineNumber":410,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":411,"author":{"gitId":"AryanSarswat"},"content":"      Use case ends","lastModifiedDate":"2022-03-03"},{"lineNumber":412,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":413,"author":{"gitId":"AryanSarswat"},"content":"* 4a. User wants to see all the logs of a person","lastModifiedDate":"2022-03-03"},{"lineNumber":414,"author":{"gitId":"AryanSarswat"},"content":"    * 4a.1 Amigos displays a page containing the full details of that friend accompanied by all the logs","lastModifiedDate":"2022-03-03"},{"lineNumber":415,"author":{"gitId":"AryanSarswat"},"content":"      ","lastModifiedDate":"2022-03-03"},{"lineNumber":416,"author":{"gitId":"AryanSarswat"},"content":"      Use Case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":417,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":418,"author":{"gitId":"AryanSarswat"},"content":"* 4b. Amigos detects an issue in the input (e.g. incorrect input format, cannot find friend in the system)","lastModifiedDate":"2022-03-03"},{"lineNumber":419,"author":{"gitId":"AryanSarswat"},"content":"    * 4b.1 Amigos displays the error feedback to the user.","lastModifiedDate":"2022-03-03"},{"lineNumber":420,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-03-03"},{"lineNumber":421,"author":{"gitId":"AryanSarswat"},"content":"      Use case resumes at 4","lastModifiedDate":"2022-03-03"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L01 - Adding a new log to a friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":424,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":425,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":426,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, log will be added to friend details and saved in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":431,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to add a new log to a specific friend. ","lastModifiedDate":"2022-03-01"},{"lineNumber":432,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command ","lastModifiedDate":"2022-02-26"},{"lineNumber":433,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos displays the friend and the specific log, and clears the input","lastModifiedDate":"2022-03-01"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":440,"author":{"gitId":"tanyjnaaman"},"content":"  * 2a1. Amigos clears the input, and requests user to check input and reenter.","lastModifiedDate":"2022-03-01"},{"lineNumber":441,"author":{"gitId":"tanyjnaaman"},"content":"  * 2a2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":442,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":443,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":444,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":445,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":446,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that user has requested for a pop-up window in the command.","lastModifiedDate":"2022-03-01"},{"lineNumber":447,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos creates a separate window, allowing for long-form text to be keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":448,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in long form text into pop-up window, with first line as title.","lastModifiedDate":"2022-02-26"},{"lineNumber":449,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b3. User confirms entry, closing the window.","lastModifiedDate":"2022-02-26"},{"lineNumber":450,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":451,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":452,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":453,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":454,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that an invalid format of the command has been keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":455,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d1. Amigos clears the input and prompts the user with potential corrections, and requests for input.","lastModifiedDate":"2022-03-01"},{"lineNumber":456,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":457,"author":{"gitId":"tanyjnaaman"},"content":"  ","lastModifiedDate":"2022-02-26"},{"lineNumber":458,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":459,"author":{"gitId":"tanyjnaaman"},"content":"  ","lastModifiedDate":"2022-02-26"},{"lineNumber":460,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":461,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L02 - Editing a log of a single friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":462,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":463,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":464,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, specified log will be overwritten and saved in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":465,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":466,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":467,"author":{"gitId":"tanyjnaaman"},"content":"**MSS**","lastModifiedDate":"2022-02-26"},{"lineNumber":468,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":469,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":470,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to edit a log in a specific friend. ","lastModifiedDate":"2022-03-01"},{"lineNumber":471,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command. ","lastModifiedDate":"2022-02-26"},{"lineNumber":472,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos clears the input and displays the friend and the specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"tanyjnaaman"},"content":"**Extensions**","lastModifiedDate":"2022-02-26"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":480,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-26"},{"lineNumber":481,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a2. User corrects command (if desired), and keys in edited command.","lastModifiedDate":"2022-02-26"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":484,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":485,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":486,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that the user has not requested to edit a specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":487,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos clears the input and provides a list of all logs (their titles) and an accompanying index, asking the user to key in the index.","lastModifiedDate":"2022-03-01"},{"lineNumber":488,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in the index.","lastModifiedDate":"2022-02-26"},{"lineNumber":489,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":490,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":491,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":492,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":493,"author":{"gitId":"tanyjnaaman"},"content":"* 2c. Amigos detects that an invalid format of the command has been keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":494,"author":{"gitId":"tanyjnaaman"},"content":"    * 2c1. Amigos clears the input and prompts the user with potential corrections, and requests for input.","lastModifiedDate":"2022-03-01"},{"lineNumber":495,"author":{"gitId":"tanyjnaaman"},"content":"    * 2c2. User corrects command, and keys in edited command.","lastModifiedDate":"2022-03-01"},{"lineNumber":496,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":497,"author":{"gitId":"tanyjnaaman"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":498,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":499,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":500,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":501,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that user has requested for a pop-up window in the command.","lastModifiedDate":"2022-03-01"},{"lineNumber":502,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d1. Amigos creates a separate window, allowing for long-form text to be keyed in.","lastModifiedDate":"2022-03-01"},{"lineNumber":503,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d2. User keys in long form text into pop-up window in an appropriate format.","lastModifiedDate":"2022-03-01"},{"lineNumber":504,"author":{"gitId":"tanyjnaaman"},"content":"    * 2d3. User confirms entry, closing the window.","lastModifiedDate":"2022-02-26"},{"lineNumber":505,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":506,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":507,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":508,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":509,"author":{"gitId":"tanyjnaaman"},"content":"* 2e. Amigos detects that the requested friend has no logs to be edited.","lastModifiedDate":"2022-03-01"},{"lineNumber":510,"author":{"gitId":"tanyjnaaman"},"content":"    * 2e1. Amigos clears the input and notifies the user that this friend has no logs to be edited.","lastModifiedDate":"2022-03-01"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":512,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":515,"author":{"gitId":"tanyjnaaman"},"content":"**Use case: L03 - Deleting a log/logs from a friend**","lastModifiedDate":"2022-03-01"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":517,"author":{"gitId":"tanyjnaaman"},"content":"**Guarantees:**","lastModifiedDate":"2022-03-01"},{"lineNumber":518,"author":{"gitId":"tanyjnaaman"},"content":"* If successful, log will be deleted from friend and reflected in storage.","lastModifiedDate":"2022-03-01"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":520,"author":{"gitId":"tanyjnaaman"},"content":"**MSS**","lastModifiedDate":"2022-02-26"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":522,"author":{"gitId":"tanyjnaaman"},"content":"1. User decides to delete a log/logs in a specific friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":523,"author":{"gitId":"tanyjnaaman"},"content":"2. User keys in necessary details with the one-line command.","lastModifiedDate":"2022-02-26"},{"lineNumber":524,"author":{"gitId":"tanyjnaaman"},"content":"3. Amigos clears the input and provides feedback of deletion success.","lastModifiedDate":"2022-03-01"},{"lineNumber":525,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":526,"author":{"gitId":"tanyjnaaman"},"content":"   Use case ends.","lastModifiedDate":"2022-02-26"},{"lineNumber":527,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":528,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":529,"author":{"gitId":"tanyjnaaman"},"content":"**Extensions**","lastModifiedDate":"2022-02-26"},{"lineNumber":530,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":531,"author":{"gitId":"tanyjnaaman"},"content":"* 2a. Amigos finds no friend with the given name.","lastModifiedDate":"2022-03-01"},{"lineNumber":532,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a1. Amigos requests user to check input and reenter.","lastModifiedDate":"2022-02-26"},{"lineNumber":533,"author":{"gitId":"tanyjnaaman"},"content":"    * 2a2. User corrects command (if desired), and keys in edited command.","lastModifiedDate":"2022-02-26"},{"lineNumber":534,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":535,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":536,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":537,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":538,"author":{"gitId":"tanyjnaaman"},"content":"* 2b. Amigos detects that the user has not requested to delete a specific log.","lastModifiedDate":"2022-03-01"},{"lineNumber":539,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b1. Amigos clears the input and lists all logs of the friend with an index.","lastModifiedDate":"2022-03-01"},{"lineNumber":540,"author":{"gitId":"tanyjnaaman"},"content":"  * 2b2. User keys in index, and deletes the log.","lastModifiedDate":"2022-02-26"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":542,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":543,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":544,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":545,"author":{"gitId":"tanyjnaaman"},"content":"* 2c. Amigos detects User has requested to delete all logs of all friends.","lastModifiedDate":"2022-03-01"},{"lineNumber":546,"author":{"gitId":"tanyjnaaman"},"content":"  * 2c1. All logs in all friend are deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":547,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":548,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":549,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":550,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":551,"author":{"gitId":"tanyjnaaman"},"content":"* 2d. Amigos detects that User has requested to delete all logs of a friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":552,"author":{"gitId":"tanyjnaaman"},"content":"  * 2d1. Amigos deletes all logs of the friend.","lastModifiedDate":"2022-03-01"},{"lineNumber":553,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":554,"author":{"gitId":"tanyjnaaman"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-02-26"},{"lineNumber":555,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":556,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":557,"author":{"gitId":"tanyjnaaman"},"content":"* 2e. Amigos detects an invalid combination of arguments.","lastModifiedDate":"2022-03-01"},{"lineNumber":558,"author":{"gitId":"tanyjnaaman"},"content":"  * 2e1. Amigos clears the input and requests the user to check input and reenter if necessary.","lastModifiedDate":"2022-03-01"},{"lineNumber":559,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":560,"author":{"gitId":"tanyjnaaman"},"content":"* 2f. Amigos detects that the requested friend has no logs.","lastModifiedDate":"2022-03-01"},{"lineNumber":561,"author":{"gitId":"tanyjnaaman"},"content":"    * 2f1. Amigos clears the input and notifies the user that this friend has no logs to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"tanyjnaaman"},"content":"  Use case ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"limweiliang"},"content":"**Use Case: E01 - Adding a new event**","lastModifiedDate":"2022-03-03"},{"lineNumber":566,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":567,"author":{"gitId":"limweiliang"},"content":"**Preconditions**: User can remember the event details they want. (e.g. names of friends to add)","lastModifiedDate":"2022-03-02"},{"lineNumber":568,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":569,"author":{"gitId":"limweiliang"},"content":"**Guarantees**: A new event will be created in Amigos, as long as the command was executed successfully.","lastModifiedDate":"2022-03-02"},{"lineNumber":570,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":571,"author":{"gitId":"limweiliang"},"content":"**MSS**:","lastModifiedDate":"2022-03-02"},{"lineNumber":572,"author":{"gitId":"limweiliang"},"content":"1. User chooses to add a new event, entering the details accordingly.","lastModifiedDate":"2022-03-02"},{"lineNumber":573,"author":{"gitId":"limweiliang"},"content":"2. System applies the change and reflects the new event details to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":574,"author":{"gitId":"limweiliang"},"content":"3. System clears the user input.","lastModifiedDate":"2022-03-02"},{"lineNumber":575,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":576,"author":{"gitId":"limweiliang"},"content":"   Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":577,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":578,"author":{"gitId":"limweiliang"},"content":"**Extensions**:","lastModifiedDate":"2022-03-02"},{"lineNumber":579,"author":{"gitId":"limweiliang"},"content":"* 1a. System detects an issue in the given input. (e.g. missing/wrong flag, wrong formatting)","lastModifiedDate":"2022-03-02"},{"lineNumber":580,"author":{"gitId":"limweiliang"},"content":"    * 1a1. System displays the error feedback to the user. ","lastModifiedDate":"2022-03-02"},{"lineNumber":581,"author":{"gitId":"limweiliang"},"content":"    * 1a2. User edits and resends the input to the system. ","lastModifiedDate":"2022-03-02"},{"lineNumber":582,"author":{"gitId":"limweiliang"},"content":"    ","lastModifiedDate":"2022-03-02"},{"lineNumber":583,"author":{"gitId":"limweiliang"},"content":"  Use case resumes at 1 but may reach 1a again if the input remains erroneous.","lastModifiedDate":"2022-03-02"},{"lineNumber":584,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":585,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":586,"author":{"gitId":"limweiliang"},"content":"* 1b. System detects that an event with the same details already exists. ","lastModifiedDate":"2022-03-02"},{"lineNumber":587,"author":{"gitId":"limweiliang"},"content":"  * 1b1. System displays the duplicate event to the user and the corresponding error message. ","lastModifiedDate":"2022-03-02"},{"lineNumber":588,"author":{"gitId":"limweiliang"},"content":"  * 1b2. User cancels the operation.","lastModifiedDate":"2022-03-02"},{"lineNumber":589,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":590,"author":{"gitId":"limweiliang"},"content":"  Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":591,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":592,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":593,"author":{"gitId":"limweiliang"},"content":"* 3a. User realises they made a mistake in the event details. ","lastModifiedDate":"2022-03-02"},{"lineNumber":594,"author":{"gitId":"limweiliang"},"content":"  * 3a1. User \u003cu\u003eedits the event details (E02)\u003c/u\u003e.","lastModifiedDate":"2022-03-02"},{"lineNumber":595,"author":{"gitId":"limweiliang"},"content":"  ","lastModifiedDate":"2022-03-02"},{"lineNumber":596,"author":{"gitId":"limweiliang"},"content":"  Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":597,"author":{"gitId":"limweiliang"},"content":"       ","lastModifiedDate":"2022-03-02"},{"lineNumber":598,"author":{"gitId":"limweiliang"},"content":"**Use Case: E02 - Editing an existing event**","lastModifiedDate":"2022-03-03"},{"lineNumber":599,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":600,"author":{"gitId":"limweiliang"},"content":"**Preconditions**: The event has already been created, and the user can remember what they want to change the event details to.","lastModifiedDate":"2022-03-02"},{"lineNumber":601,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":602,"author":{"gitId":"limweiliang"},"content":"**Guarantees**: An existing event will be edited, as long as the command is executed successfully.","lastModifiedDate":"2022-03-02"},{"lineNumber":603,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":604,"author":{"gitId":"limweiliang"},"content":"**MSS**:","lastModifiedDate":"2022-03-02"},{"lineNumber":605,"author":{"gitId":"limweiliang"},"content":"   1. User chooses to search for the details of a specific event.","lastModifiedDate":"2022-03-02"},{"lineNumber":606,"author":{"gitId":"limweiliang"},"content":"   2. System shows the search results to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":607,"author":{"gitId":"limweiliang"},"content":"   3. User edits the details of an existing event through the system input.","lastModifiedDate":"2022-03-02"},{"lineNumber":608,"author":{"gitId":"limweiliang"},"content":"   4. System applies the change and reflects the updated event details to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":609,"author":{"gitId":"limweiliang"},"content":"   5. System clears the user input.","lastModifiedDate":"2022-03-02"},{"lineNumber":610,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":611,"author":{"gitId":"limweiliang"},"content":"      Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":612,"author":{"gitId":"limweiliang"},"content":"   ","lastModifiedDate":"2022-03-02"},{"lineNumber":613,"author":{"gitId":"limweiliang"},"content":"**Extensions:**","lastModifiedDate":"2022-03-02"},{"lineNumber":614,"author":{"gitId":"limweiliang"},"content":"   * 3a. System detects an issue in the given input (e.g. missing/wrong flag, wrong formatting).","lastModifiedDate":"2022-03-02"},{"lineNumber":615,"author":{"gitId":"limweiliang"},"content":"     * 3a1. System displays the error feedback to the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":616,"author":{"gitId":"limweiliang"},"content":"     * 3a2. User resends the command to the system.","lastModifiedDate":"2022-03-02"},{"lineNumber":617,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":618,"author":{"gitId":"limweiliang"},"content":"     Use case resumes at 3 but may reach 3a again if the command remains erroneous.","lastModifiedDate":"2022-03-02"},{"lineNumber":619,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":620,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":621,"author":{"gitId":"limweiliang"},"content":"   * 3b. System detects that an event with the same details already exists. ","lastModifiedDate":"2022-03-02"},{"lineNumber":622,"author":{"gitId":"limweiliang"},"content":"     * 3b1. System displays the duplicate event to the user and the corresponding error message. ","lastModifiedDate":"2022-03-02"},{"lineNumber":623,"author":{"gitId":"limweiliang"},"content":"     * 3b2. User cancels the operation.","lastModifiedDate":"2022-03-02"},{"lineNumber":624,"author":{"gitId":"limweiliang"},"content":"     ","lastModifiedDate":"2022-03-02"},{"lineNumber":625,"author":{"gitId":"limweiliang"},"content":"     Use case ends.","lastModifiedDate":"2022-03-02"},{"lineNumber":626,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":627,"author":{"gitId":"limweiliang"},"content":"**Use case: E03 - Checking all events**","lastModifiedDate":"2022-03-03"},{"lineNumber":628,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":629,"author":{"gitId":"AryanSarswat"},"content":"**Guarantees**","lastModifiedDate":"2022-03-03"},{"lineNumber":630,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":631,"author":{"gitId":"AryanSarswat"},"content":"* If any events exist within the system they will be displayed.","lastModifiedDate":"2022-03-03"},{"lineNumber":632,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":633,"author":{"gitId":"AryanSarswat"},"content":"**MSS**","lastModifiedDate":"2022-03-03"},{"lineNumber":634,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":635,"author":{"gitId":"AryanSarswat"},"content":"1. User requests to show all events","lastModifiedDate":"2022-03-03"},{"lineNumber":636,"author":{"gitId":"AryanSarswat"},"content":"2. Amigos switches the GUI to the events tab and displays all possible events.","lastModifiedDate":"2022-03-03"},{"lineNumber":637,"author":{"gitId":"AryanSarswat"},"content":"    ","lastModifiedDate":"2022-03-03"},{"lineNumber":638,"author":{"gitId":"AryanSarswat"},"content":"   Use case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":639,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":640,"author":{"gitId":"AryanSarswat"},"content":"**Extensions**","lastModifiedDate":"2022-03-03"},{"lineNumber":641,"author":{"gitId":"AryanSarswat"},"content":"* 2a. There are no events to show.","lastModifiedDate":"2022-03-03"},{"lineNumber":642,"author":{"gitId":"AryanSarswat"},"content":"    * 2a1. Amigos displays an empty interface with the message “No events”.","lastModifiedDate":"2022-03-03"},{"lineNumber":643,"author":{"gitId":"AryanSarswat"},"content":"    ","lastModifiedDate":"2022-03-03"},{"lineNumber":644,"author":{"gitId":"AryanSarswat"},"content":"    Use case ends.","lastModifiedDate":"2022-03-03"},{"lineNumber":645,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"AryanSarswat"},"content":"2. Should be able to hold up to 200 friends with up to 100 events/logs per person without a noticeable sluggishness in performance for typical usage (time taken to process any one command is 1 second at most).","lastModifiedDate":"2022-03-03"},{"lineNumber":650,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"AryanSarswat"},"content":"4. The project only supports managing of the user friendships and not other types of relationships.","lastModifiedDate":"2022-03-03"},{"lineNumber":652,"author":{"gitId":"AryanSarswat"},"content":"5. The application should work with different screen sizes, resolutions and window sizes.","lastModifiedDate":"2022-03-03"},{"lineNumber":653,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":655,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":656,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":657,"author":{"gitId":"AryanSarswat"},"content":"* **Log**: Details of interaction between user and friend","lastModifiedDate":"2022-02-26"},{"lineNumber":658,"author":{"gitId":"AryanSarswat"},"content":"* **Event**: Upcoming meeting/ date of significance for a friend","lastModifiedDate":"2022-02-26"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":668,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":671,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":676,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":677,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":679,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":682,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":683,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":684,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":685,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":686,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":687,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":688,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":689,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":690,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":691,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":692,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":693,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":694,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":695,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":700,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":701,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"dionegoh":73,"tanyjnaaman":118,"AryanSarswat":70,"-":388,"limweiliang":62}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep track of important details. It is optimized for use via a Command Line interface while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"# Quick start","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"2. Download the latest `amigos.jar` from [here](https://github.com/AY2122S2-CS2103-F09-2/tp/releases/tag/v1.1).","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your application.","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"5. Type the command in the command box and press Enter to execute it. e.g:","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"   * **`showfriends`** : Lists all friends.","lastModifiedDate":"2022-03-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"# Features","lastModifiedDate":"2022-02-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"limweiliang"},"content":"  e.g. in `addfriend n/NAME`, `NAME` is a parameter which can be used as `addfriend n/John Doe`.","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":52,"author":{"gitId":"limweiliang"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `showfriends`, `showevents` and `exit`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":53,"author":{"gitId":"AryanSarswat"},"content":"  e.g. if the command specifies `showfriends 123`, it will be interpreted as `showfriends`.","lastModifiedDate":"2022-03-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"limweiliang"},"content":"## Friend Management","lastModifiedDate":"2022-03-04"},{"lineNumber":58,"author":{"gitId":"limweiliang"},"content":"Amigos is designed to help you keep track of the friends in your life.","lastModifiedDate":"2022-03-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"### Adding a friend: `addfriend`","lastModifiedDate":"2022-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"AryanSarswat"},"content":"Adds a new friend to Amigos. A friend has:","lastModifiedDate":"2022-03-04"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"* ***(compulsory)*** name","lastModifiedDate":"2022-02-23"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"* *(optional)* phone number","lastModifiedDate":"2022-02-23"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"* *(optional)* email","lastModifiedDate":"2022-02-23"},{"lineNumber":66,"author":{"gitId":"dionegoh"},"content":"* *(optional)* address","lastModifiedDate":"2022-02-23"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"* *(optional)* description","lastModifiedDate":"2022-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"Format: `addfriend n/[NAME]  p/[PHONE_NUMBER] e/[EMAIL]  a/[ADDRESS] d/[DESCRIPTION]`","lastModifiedDate":"2022-03-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"dionegoh"},"content":"* Note that `NAME` field is minimally compulsory. `p/`, `em/`, `a/` and `d/` flags and their arguments are optional.","lastModifiedDate":"2022-03-03"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"* Note that there can be no duplicate friends having the same name.","lastModifiedDate":"2022-02-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"dionegoh"},"content":"* `addfriend n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Physics Major, Sarah’s friend. Met at Freshman Dinner.`","lastModifiedDate":"2022-02-23"},{"lineNumber":76,"author":{"gitId":"dionegoh"},"content":"* `addfriend n/John Doe`","lastModifiedDate":"2022-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"dionegoh"},"content":"### Editing a friend : `editfriend`","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":80,"author":{"gitId":"AryanSarswat"},"content":"Edits an existing friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":82,"author":{"gitId":"dionegoh"},"content":"Format: `editfriend cn/[CURRENT_NAME] nn/[NEW_NAME]  np/[NEW_PHONE_NUMBER] ne/[NEW_EMAIL] na/[NEW_ADDRESS] nd/[NEW_DESCRIPTION]`","lastModifiedDate":"2022-03-03"},{"lineNumber":83,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":84,"author":{"gitId":"AryanSarswat"},"content":"* Edits an existing friend in Amigos. Field `CURRENT_NAME` is compulsory to identify the existing friend.","lastModifiedDate":"2022-03-04"},{"lineNumber":85,"author":{"gitId":"dionegoh"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"dionegoh"},"content":"* Existing values will be overwritten to the input values.","lastModifiedDate":"2022-03-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-03-03"},{"lineNumber":90,"author":{"gitId":"dionegoh"},"content":"* `editfriend cn/John Doe na/John street, block 456, #01-01 ne/johndoe@example.com` edits the address","lastModifiedDate":"2022-03-03"},{"lineNumber":91,"author":{"gitId":"dionegoh"},"content":"  and email of John Doe to be `John street, block 456, #01-01` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-03-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"dionegoh"},"content":"### Deleting a friend : `deletefriend`","lastModifiedDate":"2022-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"AryanSarswat"},"content":"Deletes a friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"dionegoh"},"content":"Format: `deletefriend n/[NAME]`","lastModifiedDate":"2022-03-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"dionegoh"},"content":"* `NAME` field must be provided unless all friends are being deleted then just the -a flag is needed.","lastModifiedDate":"2022-03-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"dionegoh"},"content":"* `deletefriend n/John Doe`","lastModifiedDate":"2022-02-23"},{"lineNumber":104,"author":{"gitId":"dionegoh"},"content":"* `deletefriend -a`","lastModifiedDate":"2022-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"limweiliang"},"content":"### Show a specific friend: `showfriend`","lastModifiedDate":"2022-03-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"AryanSarswat"},"content":"Shows page containing the full details related to an existing friend in Amigos. By default, only the latest 10 logs are displayed in this page.","lastModifiedDate":"2022-03-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"limweiliang"},"content":"Format: `showfriend n/NAME -alllogs`","lastModifiedDate":"2022-03-03"},{"lineNumber":112,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":113,"author":{"gitId":"limweiliang"},"content":"* NAME field **must** be provided.","lastModifiedDate":"2022-03-03"},{"lineNumber":114,"author":{"gitId":"limweiliang"},"content":"* If the `-alllogs` flag is provided all the logs contained in that person will be displayed instead of the default 10 logs.","lastModifiedDate":"2022-03-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"limweiliang"},"content":"* `showfriend n/John Doe` Will open up the page containing full details related to John Doe - his name, address, phone number, email, description, logs, and upcoming events with him.","lastModifiedDate":"2022-03-03"},{"lineNumber":118,"author":{"gitId":"limweiliang"},"content":"* `showfriend n/John Doe -alllogs` Will do the same as above except every single log will be displayed","lastModifiedDate":"2022-03-03"},{"lineNumber":119,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":120,"author":{"gitId":"dionegoh"},"content":"### Show all friends : `showfriends`","lastModifiedDate":"2022-03-03"},{"lineNumber":121,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":122,"author":{"gitId":"AryanSarswat"},"content":"Shows all friends in Amigos. Switches GUI to the friends tab.","lastModifiedDate":"2022-03-04"},{"lineNumber":123,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":124,"author":{"gitId":"dionegoh"},"content":"Format: `showfriends`","lastModifiedDate":"2022-03-03"},{"lineNumber":125,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":126,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"## Logs management","lastModifiedDate":"2022-03-03"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"Amigos provides functionality to manage logs, which are essentially detailed notes about a specific friend.","lastModifiedDate":"2022-03-03"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"### Adding a log: `addlog`","lastModifiedDate":"2022-02-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"Adds a log to an existing friend at the specified `INDEX` in Amigos.","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"The `INDEX` refers to the index number shown in the displayed person\u0027s list.","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"Format: `addlog INDEX t/[TITLE] d/[DESCRIPTION]`","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"* The `INDEX` field is compulsory.","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"* If the `TITLE` argument is provided, then the `DESCRIPTON` argument is optional.","lastModifiedDate":"2022-02-26"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"* If neither `TITLE` nor `DESCRIPTION` arguments are provided, then a GUI","lastModifiedDate":"2022-02-26"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"  pop up will prompt the user to key in the title and longer-form text as the description.","lastModifiedDate":"2022-02-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"* `addlog 1 t/has a pet named poki`","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"* `addlog 2 t/recommended movies d/the martian, interstellar, three idiots`","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"### Editing a log: `editlog`","lastModifiedDate":"2022-02-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"AryanSarswat"},"content":"Edits an existing log of an existing friend in Amigos.","lastModifiedDate":"2022-03-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"Format: `editlog n/[NAME] id/[LOG_INDEX] nt/[NEW_TITLE] nd/[NEW_DESCRIPTION]`","lastModifiedDate":"2022-02-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"* The `NAME` field is compulsory.","lastModifiedDate":"2022-02-26"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"* If `LOG_INDEX` is not provided, then all logs, each with an accompanying index, will allow a user to","lastModifiedDate":"2022-02-26"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"  choose which log to apply the changes to.","lastModifiedDate":"2022-02-26"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"* At least one of the `NEW_TITLE` or `NEW_DESCRIPTION` arguments must be provided.","lastModifiedDate":"2022-02-26"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"  Both will directly overwrite the current values.","lastModifiedDate":"2022-02-26"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"* If neither `NEW_TITLE` nor `NEW_DESCRIPTION` arguments are provided, then a GUI","lastModifiedDate":"2022-02-26"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"  pop up will prompt the user to key in the title and longer-form text as the description.","lastModifiedDate":"2022-02-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"* `editlog n/John Doe id/1 nt/has a pet named Poki`","lastModifiedDate":"2022-02-26"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"* `editlog n/Andrew Tan id/1 nt/recommended movies and shows nd/the martian, interstellar, three idiots, peaky blinders`","lastModifiedDate":"2022-02-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"### Deleting a log: `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"Deletes an existing log of an existing friend in Amigos.","lastModifiedDate":"2022-02-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"Format: `deletelog INDEX id/LOG_INDEX -a`","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* The `INDEX` field is compulsory.","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"* If `INDEX` is provided as well as a `-a` flag, then all logs of tht person will","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"  be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"* If `LOG_INDEX` is not provided and there is no `-a` flat, then all logs, each with an","lastModifiedDate":"2022-02-26"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"  accompanying index, will allow a user to choose one log to delete.","lastModifiedDate":"2022-02-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"* If no `INDEX` or `LOG_INDEX` is provided, but `-a` is provided, then all possible logs","lastModifiedDate":"2022-03-09"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"  of all friends will be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"limweiliang"},"content":"## Event Management [Coming Soon!]","lastModifiedDate":"2022-02-26"},{"lineNumber":178,"author":{"gitId":"limweiliang"},"content":"Amigos also allows you to keep track of your social events!","lastModifiedDate":"2022-02-26"},{"lineNumber":179,"author":{"gitId":"limweiliang"},"content":"![Events Page](images/EventPage.png)","lastModifiedDate":"2022-02-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"limweiliang"},"content":"### Creating an event: `addevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":182,"author":{"gitId":"limweiliang"},"content":"Adds a new event, which can be optionally linked to existing friends.","lastModifiedDate":"2022-02-26"},{"lineNumber":183,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":184,"author":{"gitId":"dionegoh"},"content":"**Format**: `addevent n/[EVENT_NAME] dt/[DATE_TIME] dd/[DESCRIPTION] f/[FRIEND_NAME1, FRIEND_NAME2…]`","lastModifiedDate":"2022-03-03"},{"lineNumber":185,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":186,"author":{"gitId":"limweiliang"},"content":"* The `EVENT_NAME` and `DATE_TIME` fields are **compulsory**, while the remaining fields are **optional**.","lastModifiedDate":"2022-02-26"},{"lineNumber":187,"author":{"gitId":"limweiliang"},"content":"* There **cannot** be any duplicate events with the same name and date.","lastModifiedDate":"2022-02-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":189,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":190,"author":{"gitId":"limweiliang"},"content":"* `addevent n/John’s Birthday dt/15-08-2021 1700 dd/Remember to get a present! f/John, Abe, Bob`","lastModifiedDate":"2022-02-26"},{"lineNumber":191,"author":{"gitId":"limweiliang"},"content":"* `addevent n/Christmas Party dt/25-12-2022`","lastModifiedDate":"2022-02-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":193,"author":{"gitId":"limweiliang"},"content":"### Editing an event: `editevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":194,"author":{"gitId":"limweiliang"},"content":"Edits an existing event.","lastModifiedDate":"2022-02-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":196,"author":{"gitId":"dionegoh"},"content":"**Format**: `editevent n/[EVENT_NAME] dt/[DATE] nn/[NEW_EVENT_NAME] ndt/[NEW_DATE_TIME] ndd/[NEW_DESCRIPTION]  af/[ADD_FRIEND_NAME1, ADD_FRIEND_NAME2…] rf/[REMOVE_FRIEND_NAME1, REMOVE_FRIEND_NAME2…]`","lastModifiedDate":"2022-03-03"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":198,"author":{"gitId":"limweiliang"},"content":"* The `EVENT_NAME` and `DATE` fields are **compulsory** and uniquely identify the event to be edited.","lastModifiedDate":"2022-02-26"},{"lineNumber":199,"author":{"gitId":"limweiliang"},"content":"* The `NEW_EVENT_NAME`, `NEW_DATE_TIME` and `NEW_DESCRIPTION` arguments are **optional**. If provided, they directly overwrite the existing details.","lastModifiedDate":"2022-02-26"},{"lineNumber":200,"author":{"gitId":"limweiliang"},"content":"* The `ADD_FRIEND_NAME` and `REMOVE_FRIEND_NAME` arguments are also **optional** and add/remove friends tied to the event respectively.","lastModifiedDate":"2022-02-26"},{"lineNumber":201,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":202,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":203,"author":{"gitId":"limweiliang"},"content":"* `editevent n/John’s Birthday dt/15-08-2021 ndt/16-08-2021 1600 af/Bob rf/Sarah, Edison`","lastModifiedDate":"2022-02-26"},{"lineNumber":204,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":205,"author":{"gitId":"limweiliang"},"content":"### Deleting events: `deleteevent`","lastModifiedDate":"2022-02-26"},{"lineNumber":206,"author":{"gitId":"limweiliang"},"content":"Delete existing event(s).","lastModifiedDate":"2022-02-26"},{"lineNumber":207,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":208,"author":{"gitId":"dionegoh"},"content":"**Format**: `deleteevent n/[EVENT_NAME] dt/[DATE] -a`","lastModifiedDate":"2022-03-03"},{"lineNumber":209,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":210,"author":{"gitId":"limweiliang"},"content":"* When at least one of `EVENT_NAME` and `DATE` are provided:","lastModifiedDate":"2022-02-26"},{"lineNumber":211,"author":{"gitId":"limweiliang"},"content":"  * If only a single event matches the argument(s), it will be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":212,"author":{"gitId":"limweiliang"},"content":"  * If multiple events match the argument(s), the `-a` flag is required for all to be deleted.","lastModifiedDate":"2022-02-26"},{"lineNumber":213,"author":{"gitId":"limweiliang"},"content":"* If only the `-a` flag is given, all events will be cleared.","lastModifiedDate":"2022-02-26"},{"lineNumber":214,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":215,"author":{"gitId":"limweiliang"},"content":"**Examples**:","lastModifiedDate":"2022-02-26"},{"lineNumber":216,"author":{"gitId":"limweiliang"},"content":"* `deleteevent n/John’s Birthday dt/15-08-2021`","lastModifiedDate":"2022-02-26"},{"lineNumber":217,"author":{"gitId":"limweiliang"},"content":"* `deleteevent n/Weekly Boardgames -a`","lastModifiedDate":"2022-02-26"},{"lineNumber":218,"author":{"gitId":"limweiliang"},"content":"* `deleteevent -a`","lastModifiedDate":"2022-02-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"AryanSarswat"},"content":"### Show all events : `showevents`","lastModifiedDate":"2022-03-03"},{"lineNumber":221,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":222,"author":{"gitId":"AryanSarswat"},"content":"Shows all events stored in Amigos. Switches GUI to the events tab.","lastModifiedDate":"2022-03-04"},{"lineNumber":223,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":224,"author":{"gitId":"AryanSarswat"},"content":"Format: `showevents`","lastModifiedDate":"2022-03-03"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"AryanSarswat"},"content":"* `deletelog n/John Doe id/1`","lastModifiedDate":"2022-03-03"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"* `deletelog n/John Doe -a `","lastModifiedDate":"2022-02-26"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"* `deletelog -a`","lastModifiedDate":"2022-02-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":231,"author":{"gitId":"limweiliang"},"content":"## Miscellaneous","lastModifiedDate":"2022-03-04"},{"lineNumber":232,"author":{"gitId":"limweiliang"},"content":"### Viewing help : `help`","lastModifiedDate":"2022-03-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":234,"author":{"gitId":"limweiliang"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2022-03-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":236,"author":{"gitId":"limweiliang"},"content":"Format: `help`","lastModifiedDate":"2022-03-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2022-03-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2022-03-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2022-03-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2022-03-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":246,"author":{"gitId":"limweiliang"},"content":"Amigos data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-03-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2022-03-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":250,"author":{"gitId":"limweiliang"},"content":"Amigos data is saved as a JSON file `[JAR file location]/data/amigos.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-03-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2022-03-04"},{"lineNumber":253,"author":{"gitId":"limweiliang"},"content":"If your changes to the data file makes its format invalid, Amigos will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-03-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-03-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"AryanSarswat"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Amigos home folder.","lastModifiedDate":"2022-03-04"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2022-02-26"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":268,"author":{"gitId":"dionegoh"},"content":"| Action                     | Format, Examples                                                                                                                                                                                                                                                                               |","lastModifiedDate":"2022-02-26"},{"lineNumber":269,"author":{"gitId":"limweiliang"},"content":"|----------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":270,"author":{"gitId":"dionegoh"},"content":"| **Add Friend**             | `addfriend n/[NAME] p/[PHONE_NUMBER] e/[EMAIL]  a/[ADDRESS] d/[DESCRIPTION]` \u003cbr\u003e e.g., `addfriend n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/Physics Major, Sarah’s friend. Met at Freshman Dinner`                                                         |","lastModifiedDate":"2022-03-03"},{"lineNumber":271,"author":{"gitId":"dionegoh"},"content":"| **Edit friend**            | `editfriend cn[CURRENT_NAME] nn/[NEW_NAME]  np/[NEW_PHONE_NUMBER] ne/[NEW_EMAIL] na/[NEW_ADDRESS] nd/[NEW_DESCRIPTION]`\u003cbr\u003e e.g., `editfriend cn/John Doe na/John street, block 456, #01-01 ne/johndoe@example.com`                                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":272,"author":{"gitId":"dionegoh"},"content":"| **Delete Friend**          | `deletefriend n/[NAME]` \u003cbr\u003e `deletefriend -a` \u003cbr\u003e e.g., `deletefriend n/John Doe`                                                                                                                                                                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":273,"author":{"gitId":"dionegoh"},"content":"| **Show a specific friend** | `showfriend n/NAME -alllogs`                                                                                                                                                                                                                                                                   |","lastModifiedDate":"2022-03-03"},{"lineNumber":274,"author":{"gitId":"dionegoh"},"content":"| **Show all friends**       | `showfriends`                                                                                                                                                                                                                                                                                  |","lastModifiedDate":"2022-03-03"},{"lineNumber":275,"author":{"gitId":"tanyjnaaman"},"content":"| **Add log**                | `addlog n/[NAME] t/[TITLE] d/[DESCRIPTION]`                                                                                                                                                                                                                                                    |","lastModifiedDate":"2022-03-03"},{"lineNumber":276,"author":{"gitId":"tanyjnaaman"},"content":"| **Edit log**               | `editlog n/[NAME] id/[LOG_INDEX] nt/[NEW_TITLE] nd/[NEW_DESCRIPTION]`                                                                                                                                                                                                                          |","lastModifiedDate":"2022-03-03"},{"lineNumber":277,"author":{"gitId":"tanyjnaaman"},"content":"| **Delete log**             | `deletelog n/[NAME] id/[LOG_INDEX] -a`                                                                                                                                                                                                                                                         |","lastModifiedDate":"2022-03-03"},{"lineNumber":278,"author":{"gitId":"dionegoh"},"content":"| **Add Event**              | `addevent n/[EVENT_NAME] dt/[DATE_TIME] dd/[DESCRIPTION] f/[FRIEND_NAME1, FRIEND_NAME2…]` \u003cbr\u003e e.g.,`addevent n/John’s Birthday dt/15-08-2021 1700 dd/Remember to get a present! f/John, Abe, Bob`                                                                                             |","lastModifiedDate":"2022-03-03"},{"lineNumber":279,"author":{"gitId":"dionegoh"},"content":"| **Edit Event**             | `editevent n/[EVENT_NAME] dt/[DATE] nn/[NEW_EVENT_NAME] ndt/[NEW_DATE_TIME] ndd/[NEW_DESCRIPTION]  af/[ADD_FRIEND_NAME1, ADD_FRIEND_NAME2…] rf/[REMOVE_FRIEND_NAME1, REMOVE_FRIEND_NAME2…]` \u003cbr\u003e e.g., `editevent n/John’s Birthday dt/15-08-2021 ndt/16-08-2021 1600 af/Bob rf/Sarah, Edison` |","lastModifiedDate":"2022-03-03"},{"lineNumber":280,"author":{"gitId":"dionegoh"},"content":"| **Delete Event**           | `deleteevent n/[EVENT_NAME] dt/[DATE] -a` \u003cbr\u003e e.g., `deleteevent n/John’s Birthday dt/15-08-2021` \u003cbr\u003e e.g., `deleteevent n/Weekly Boardgames -a`                                                                                                                                             |","lastModifiedDate":"2022-03-03"},{"lineNumber":281,"author":{"gitId":"AryanSarswat"},"content":"| **Show all events**        | `showevents`                                                                                                                                                                                                                                                                                   |","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"dionegoh":41,"tanyjnaaman":36,"AryanSarswat":17,"-":127,"limweiliang":60}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"dionegoh"},"content":"    content: \"Amigos\";","lastModifiedDate":"2022-02-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"dionegoh":1,"-":294}},{"path":"docs/team/aryansarswat.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AryanSarswat"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":2,"author":{"gitId":"AryanSarswat"},"content":"layout: page","lastModifiedDate":"2022-02-23"},{"lineNumber":3,"author":{"gitId":"AryanSarswat"},"content":"title: Aryan Sarswat\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-23"},{"lineNumber":4,"author":{"gitId":"AryanSarswat"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":5,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":6,"author":{"gitId":"AryanSarswat"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-23"},{"lineNumber":7,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":8,"author":{"gitId":"AryanSarswat"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep track of important details. It is optimized for use via a Command Line interface while still having the benefits of a Graphical User Interface (GUI). The user enters commands through the GUI which is built using JavaFX. It is written in Java and has over 10kLoC.","lastModifiedDate":"2022-02-23"},{"lineNumber":9,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":10,"author":{"gitId":"AryanSarswat"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-23"},{"lineNumber":11,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":12,"author":{"gitId":"AryanSarswat"},"content":"* **showfriends**: Added the ability to view all friends stored.","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"AryanSarswat"},"content":"  * What it does:","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"AryanSarswat"},"content":"  * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"AryanSarswat"},"content":"  * Highlights","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"AryanSarswat"},"content":"  * Credits: ","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"AryanSarswat"},"content":"* **showfriend**: Added the ability to view a particular friends and all their details.","lastModifiedDate":"2022-02-23"},{"lineNumber":19,"author":{"gitId":"AryanSarswat"},"content":"  * What it does:","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"AryanSarswat"},"content":"  * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"AryanSarswat"},"content":"  * Highlights","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"AryanSarswat"},"content":"  * Credits:","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"AryanSarswat"},"content":"* **showevents**: Added the ability to view all upcoming events.","lastModifiedDate":"2022-02-23"},{"lineNumber":24,"author":{"gitId":"AryanSarswat"},"content":"  * What it does:","lastModifiedDate":"2022-02-23"},{"lineNumber":25,"author":{"gitId":"AryanSarswat"},"content":"  * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":26,"author":{"gitId":"AryanSarswat"},"content":"  * Highlights","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"AryanSarswat"},"content":"  * Credits:","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"AryanSarswat"},"content":"  ","lastModifiedDate":"2022-02-23"},{"lineNumber":29,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"AryanSarswat"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003daryansarswat\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-23"},{"lineNumber":31,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":32,"author":{"gitId":"AryanSarswat"},"content":"* **Project management**:","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":34,"author":{"gitId":"AryanSarswat"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"AryanSarswat"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-23"},{"lineNumber":37,"author":{"gitId":"AryanSarswat"},"content":"    * User Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":38,"author":{"gitId":"AryanSarswat"},"content":"        * Added documentation for the features `showfriends`, `showfriend` and `showevents` [\\#72]()","lastModifiedDate":"2022-02-23"},{"lineNumber":39,"author":{"gitId":"AryanSarswat"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2022-02-23"},{"lineNumber":40,"author":{"gitId":"AryanSarswat"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":41,"author":{"gitId":"AryanSarswat"},"content":"        * Added User Stories, Glossary and Non-functional requirements","lastModifiedDate":"2022-02-23"},{"lineNumber":42,"author":{"gitId":"AryanSarswat"},"content":"        * Added Use cases for `showfriends`, `showfriend` and `showevents` [\\#74]()","lastModifiedDate":"2022-02-23"},{"lineNumber":43,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":44,"author":{"gitId":"AryanSarswat"},"content":"* **Community**:","lastModifiedDate":"2022-02-23"},{"lineNumber":45,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":46,"author":{"gitId":"AryanSarswat"},"content":"* **Tools**:","lastModifiedDate":"2022-02-23"},{"lineNumber":47,"author":{"gitId":"AryanSarswat"},"content":"","lastModifiedDate":"2022-02-23"}],"authorContributionMap":{"AryanSarswat":47}},{"path":"docs/team/dionegoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"dionegoh"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":2,"author":{"gitId":"dionegoh"},"content":"layout: page","lastModifiedDate":"2022-02-23"},{"lineNumber":3,"author":{"gitId":"dionegoh"},"content":"title: Dione Goh\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-23"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"---","lastModifiedDate":"2022-02-23"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-23"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"Amigos is a desktop application to help tech-savvy university students manage their friendships by helping them to keep","lastModifiedDate":"2022-02-23"},{"lineNumber":8,"author":{"gitId":"dionegoh"},"content":"track of important details. It is optimized for use via a Command Line interface while still having the benefits of a ","lastModifiedDate":"2022-02-23"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"Graphical User Interface (GUI). The user enters commands through the GUI which is built using JavaFX. ","lastModifiedDate":"2022-02-23"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"It is written in Java and has over 10kLoC.","lastModifiedDate":"2022-02-23"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-23"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"* **addfriend**: Added the functionality to allow user to add a friend into the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to add a friend into address book by typing in the relevant command into the GUI.","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    * Highlights: ","lastModifiedDate":"2022-02-23"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"    * Credits: ","lastModifiedDate":"2022-02-23"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"* **deletefriend**: Added the functionality to allow user to delete a friend from the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to delete a friend from the address book by typing in the relevant command into the GUI. ","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"dionegoh"},"content":"    * Highlights:","lastModifiedDate":"2022-02-23"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"    * Credits: ","lastModifiedDate":"2022-02-23"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"* **editfriend**: Added the functionality to allow user to edit details of a friend from the address book.","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    * What it does: Allows users to edit a friend from the address book by typing in the relevant command into the GUI.","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"    * Justification:","lastModifiedDate":"2022-02-23"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"    * Highlights:","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"    * Credits:","lastModifiedDate":"2022-02-23"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003ddionegoh\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"* **Project management**:","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    * Update site-wide settings [\\#21](https://github.com/AY2122S2-CS2103-F09-2/tp/pull/21)","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-23"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    *","lastModifiedDate":"2022-02-23"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-23"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    * User Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        * Added documentation for the features `addfriend`, `deletefriend`, and `editfriend`\u0027 ","lastModifiedDate":"2022-02-23"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"      [\\#22](https://github.com/AY2122S2-CS2103-F09-2/tp/pull/22)","lastModifiedDate":"2022-02-23"},{"lineNumber":44,"author":{"gitId":"dionegoh"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-23"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"        * Added use cases for `addfriend`, `deletefriend`, and `editfriend`.","lastModifiedDate":"2022-02-23"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"* **Community**:","lastModifiedDate":"2022-02-23"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"    * PRs reviewed (with non-trivial review comments): ","lastModifiedDate":"2022-02-23"},{"lineNumber":49,"author":{"gitId":"dionegoh"},"content":"    * Contributed to forum discussions (examples: )","lastModifiedDate":"2022-02-23"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: )","lastModifiedDate":"2022-02-23"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"* **Tools**:","lastModifiedDate":"2022-02-23"}],"authorContributionMap":{"dionegoh":52}},{"path":"docs/team/limweiliang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"limweiliang"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":2,"author":{"gitId":"limweiliang"},"content":"layout: page","lastModifiedDate":"2022-02-26"},{"lineNumber":3,"author":{"gitId":"limweiliang"},"content":"title: Lim Wei Liang\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-26"},{"lineNumber":4,"author":{"gitId":"limweiliang"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":5,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":6,"author":{"gitId":"limweiliang"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-26"},{"lineNumber":7,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":8,"author":{"gitId":"limweiliang"},"content":"Amigos is a desktop application that helps tech-savvy university students manage their friendships by helping them track important details. It is optimized for use via a CLI and has a GUI created with JavaFX. It is written in Java and has X kLoC.","lastModifiedDate":"2022-02-26"},{"lineNumber":9,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":10,"author":{"gitId":"limweiliang"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"limweiliang"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dlimweiliang\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"limweiliang"},"content":"* **New features**: (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"limweiliang"},"content":"  * What it does:","lastModifiedDate":"2022-02-26"},{"lineNumber":16,"author":{"gitId":"limweiliang"},"content":"  * Justification:","lastModifiedDate":"2022-02-26"},{"lineNumber":17,"author":{"gitId":"limweiliang"},"content":"  * Highlights: ","lastModifiedDate":"2022-02-26"},{"lineNumber":18,"author":{"gitId":"limweiliang"},"content":"  * Credits:","lastModifiedDate":"2022-02-26"},{"lineNumber":19,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":20,"author":{"gitId":"limweiliang"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-26"},{"lineNumber":21,"author":{"gitId":"limweiliang"},"content":"  * Updated XXX (Pull requests [\\#XX](), [\\#XX]())","lastModifiedDate":"2022-02-26"},{"lineNumber":22,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":23,"author":{"gitId":"limweiliang"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-26"},{"lineNumber":24,"author":{"gitId":"limweiliang"},"content":"  * User Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":25,"author":{"gitId":"limweiliang"},"content":"    * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":26,"author":{"gitId":"limweiliang"},"content":"  * Developer Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":27,"author":{"gitId":"limweiliang"},"content":"    * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":28,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":29,"author":{"gitId":"limweiliang"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-02-26"},{"lineNumber":30,"author":{"gitId":"limweiliang"},"content":"  * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":31,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":32,"author":{"gitId":"limweiliang"},"content":"* **Review/Mentoring contributions**:","lastModifiedDate":"2022-02-26"},{"lineNumber":33,"author":{"gitId":"limweiliang"},"content":"  * (to be added soon)","lastModifiedDate":"2022-02-26"},{"lineNumber":34,"author":{"gitId":"limweiliang"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":35,"author":{"gitId":"limweiliang"},"content":"* **Contributions to the wider community**:","lastModifiedDate":"2022-02-26"},{"lineNumber":36,"author":{"gitId":"limweiliang"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#XX](), ","lastModifiedDate":"2022-02-26"},{"lineNumber":37,"author":{"gitId":"limweiliang"},"content":"  * Contributed to forum discussions (examples: [X]())","lastModifiedDate":"2022-02-26"}],"authorContributionMap":{"limweiliang":37}},{"path":"docs/team/tanyjnaaman.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"layout: page","lastModifiedDate":"2022-02-26"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"title: Naaman Tan\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-26"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"---","lastModifiedDate":"2022-02-26"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"### Project: Amigos","lastModifiedDate":"2022-02-26"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"Amigos is a desktop application to help tech-savvy university students","lastModifiedDate":"2022-02-26"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"manage their friendships by helping them to keep track of important","lastModifiedDate":"2022-02-26"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"details. It is optimized for use via a Command Line interface while","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"### Summary of contributions","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"* **New Feature: Logs** Added the ability to create, edit and delete log.","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    * What it does:","lastModifiedDate":"2022-02-26"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    * Justification:","lastModifiedDate":"2022-02-26"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    * Highlights:","lastModifiedDate":"2022-02-26"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"* **Enhancement: todo**","lastModifiedDate":"2022-02-26"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dtanyjnaaman\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-26"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-26"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    * User Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        * Added documentation for the features `addlog`, `editlog` and `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-26"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        * Added documentation for use cases of the features `addlog`, `editlog` and `deletelog`","lastModifiedDate":"2022-02-26"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"* **Team-based tasks**","lastModifiedDate":"2022-02-26"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    * Set up GitHub team org/repo and maintained issue tracker for milestone v1.1","lastModifiedDate":"2022-02-26"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-02-26"}],"authorContributionMap":{"tanyjnaaman":31}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_INVALID_PERSON_NAME \u003d \"The name provided is not a valid name!\";","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":1,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/AddLogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":" * Adds a log to a person in the address book.","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommand extends Command {","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String COMMAND_WORD \u003d \"addlog\";","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a log to an existing friend in Amigos. \"","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"            + \"INDEX \"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_TITLE + \"TITLE\"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"            + \" [\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"            + PREFIX_TITLE + \"Likes apples\";","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_ADD_LOG_SUCCESS \u003d \"New log added!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_DUPLICATE_LOG \u003d \"This log already exists for this friend.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    private final Index index;","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"    private final AddLogDescriptor addLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates an AddLogCommand to add the specified {@code Log} to the","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"     * specified {@code Person}.","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"    public AddLogCommand(Index index, AddLogDescriptor addLogDescriptor) {","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(index, addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        this.addLogDescriptor \u003d addLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        // get list of persons from model","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        // get person and modify","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        if (this.index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-10"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        Person personToEdit \u003d lastShownList.get(this.index.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson \u003d createAddedLogPerson(personToEdit, this.addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        // add to address book","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        model.setPerson(personToEdit, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        return new CommandResult(MESSAGE_ADD_LOG_SUCCESS);","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"     * Creates a {@code Person} with the details of {@code personToEdit}, with logs modified by","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code addLogDescriptor}.","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws CommandException if {@code addLogDescriptor} results in an invalid {@code Log}","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"     *                          being created.","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"    private static Person createAddedLogPerson(Person personToEdit, AddLogDescriptor addLogDescriptor)","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"            throws CommandException {","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(personToEdit, addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        Name name \u003d personToEdit.getName();","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        Phone phone \u003d personToEdit.getPhone();","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"        Email email \u003d personToEdit.getEmail();","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        Address address \u003d personToEdit.getAddress();","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        Set\u003cTag\u003e tags \u003d personToEdit.getTags();","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cLog\u003e updatedLogs \u003d addLogDescriptor.getLogsAfterAdd(personToEdit); // main logic encompassed here","lastModifiedDate":"2022-03-10"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        return new Person(name, phone, email, address, tags, updatedLogs);","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"            return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        if (!(other instanceof AddLogCommand)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"            return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        // cast","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand a \u003d (AddLogCommand) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        return this.index.equals(a.index)","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 this.addLogDescriptor.equals(a.addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        return \"Index: \" + this.index.toString() + \"\\nContent:\\n\" + this.addLogDescriptor.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"     * Stores the details of the edited log to edit a person\u0027s logs with, as well as the person\u0027s","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"     * original details.","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"    public static class AddLogDescriptor {","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        private String newTitle;","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        private String newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"         * Constructs a new {@code AddLogDescriptor} object.","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        public AddLogDescriptor() {","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"            this.newTitle \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"            this.newDescription \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        public void setNewTitle(String newTitle) {","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"            this.newTitle \u003d newTitle;","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        public void setNewDescription(String newDescription) {","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"            this.newDescription \u003d newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns true if title has been edited.","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"        public boolean isTitleEdited() {","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"            return this.newTitle !\u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns a list of {@code Log} objects that include the {@code Person}\u0027s original logs","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"         * as well as the new logs.","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public List\u003cLog\u003e getLogsAfterAdd(Person personToEdit) throws CommandException {","lastModifiedDate":"2022-03-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            // sanity checks","lastModifiedDate":"2022-03-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            assert (this.newTitle !\u003d null);","lastModifiedDate":"2022-03-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            assert (Log.isValidTitle(this.newTitle));","lastModifiedDate":"2022-03-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"            Log toAdd \u003d new Log(this.newTitle, this.newDescription); // create log to be added","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"            if (personToEdit.containsLog(toAdd)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_LOG); // ensure not a duplicate log being inserted","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            List\u003cLog\u003e newLogs \u003d new ArrayList\u003c\u003e(personToEdit.getLogs());","lastModifiedDate":"2022-03-10"},{"lineNumber":168,"author":{"gitId":"tanyjnaaman"},"content":"            newLogs.add(toAdd); // add log","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return newLogs;","lastModifiedDate":"2022-03-10"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"            // short circuit if same object","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"                return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"            // instanceof","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"            if (!(other instanceof AddLogDescriptor)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"                return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"            // cast and check by wrapping into log object","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"            AddLogDescriptor a \u003d (AddLogDescriptor) other;","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"            Log thisLog \u003d new Log(this.newTitle, this.newDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"            Log otherLog \u003d new Log(a.newTitle, a.newDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"            return thisLog.equals(otherLog);","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"        @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"        public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"            return \"Title: \" + this.newTitle + \"\\nDescription: \\n\" + this.newDescription;","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":177,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"dionegoh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"deletefriend\";","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"dionegoh"},"content":"            + \": Deletes the friend identified by name.\\n\"","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"            + PREFIX_NAME + \"NAME (must be name of a friend who exists in Amigos)\\n\"","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"John Doe\";","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted friend: %1$s\";","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"    //these dummy fields are needed to instantiate a person to be used to check if such a name entered exists","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"    // in the address book","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"    private static final Phone dummyPhone \u003d new Phone(\"12345678\");","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    private static final Email dummyEmail \u003d new Email(\"dummyemail@gmail.com\");","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"    private static final Address dummyAddress \u003d new Address(\"Dummy Address\");","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"dionegoh"},"content":"    private final Name nameOfPersonToDelete;","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"dionegoh"},"content":"    public DeleteCommand(Name nameOfPersonToDelete) {","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"dionegoh"},"content":"        this.nameOfPersonToDelete \u003d nameOfPersonToDelete;","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"        Person personWithNameToDelete \u003d new Person(nameOfPersonToDelete, dummyPhone,","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"dionegoh"},"content":"                dummyEmail, dummyAddress, new HashSet\u003cTag\u003e(), new ArrayList\u003cLog\u003e());","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"dionegoh"},"content":"        if (!model.hasPerson(personWithNameToDelete)) { //model.hasPerson considers 2 Persons with same name","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"dionegoh"},"content":"            //to be the same Person","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_NAME);","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"        ObservableList\u003cPerson\u003e personList \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2022-03-10"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":65,"author":{"gitId":"dionegoh"},"content":"        final Person[] personToDelete \u003d new Person[1];","lastModifiedDate":"2022-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"dionegoh"},"content":"        personList.forEach((person) -\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":68,"author":{"gitId":"dionegoh"},"content":"            if (person.isSamePerson(personWithNameToDelete)) {","lastModifiedDate":"2022-03-10"},{"lineNumber":69,"author":{"gitId":"dionegoh"},"content":"                personToDelete[0] \u003d person;","lastModifiedDate":"2022-03-10"},{"lineNumber":70,"author":{"gitId":"dionegoh"},"content":"                model.deletePerson(person);","lastModifiedDate":"2022-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"dionegoh"},"content":"        });","lastModifiedDate":"2022-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"dionegoh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete[0]));","lastModifiedDate":"2022-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"dionegoh"},"content":"                \u0026\u0026 nameOfPersonToDelete.equals(((DeleteCommand) other).nameOfPersonToDelete)); // state check","lastModifiedDate":"2022-03-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"dionegoh":43,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param index                of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e updatedLogs \u003d editPersonDescriptor.getLogs().orElse(personToEdit.getLogs());","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedLogs);","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        private List\u003cLog\u003e logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"            setLogs(toCopy.logs);","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-07"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"         * Sets {@code logs} to this object\u0027s {@code logs}.","lastModifiedDate":"2022-03-07"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-07"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"        public void setLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"            this.logs \u003d logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        /**","lastModifiedDate":"2022-03-07"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"         * Returns an unmodifiable list of logs, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-03-07"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-03-07"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"         *","lastModifiedDate":"2022-03-07"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"         * @return {@code Optional#empty()} if {@code logs} is null.","lastModifiedDate":"2022-03-07"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-07"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        public Optional\u003cList\u003cLog\u003e\u003e getLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"            return (logs !\u003d null) ? Optional.of(Collections.unmodifiableList(logs)) : Optional.empty();","lastModifiedDate":"2022-03-07"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"tanyjnaaman":23,"-":224}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":" * Finds and lists all friends in address book whose name contains any of the argument keywords.","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"    public static final String COMMAND_WORD \u003d \"findfriend\";","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"dionegoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all friends whose names contain any of \"","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"dionegoh":3,"-":39}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e logList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, logList);","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"tanyjnaaman":5,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/AddLogCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.commands.AddLogCommand.AddLogDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":" * Parses input arguments and creates a new AddLogCommand object","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandParser implements Parser\u003cAddLogCommand\u003e {","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLogCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"     * Parses a string of arguments and creates an {@code AddLogCommand}.","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws ParseException if command string is formatted wrongly","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    public AddLogCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TITLE, PREFIX_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        Index index;","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        // ensure title prefix and index are present","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        // parse","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        try {","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT, pe);","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        // wrap new log into helper class","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogDescriptor addLogDescriptor \u003d new AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"            addLogDescriptor.setNewTitle(ParserUtil.parseTitle(argMultimap","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"                    .getValue(PREFIX_TITLE).get()));","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"            addLogDescriptor.setNewDescription(ParserUtil.parseDescription(argMultimap","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"                    .getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        // check validity","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        if (!addLogDescriptor.isTitleEdited()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        return new AddLogCommand(index, addLogDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":64,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteLogCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        case AddLogCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"            return new AddLogCommandParser().parse(arguments);","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case DeleteLogCommand.COMMAND_WORD:","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new DeleteLogCommandParser().parse(arguments);","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tanyjnaaman":3,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ttl/\");","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\"); // TODO: 7/3/2022  modify documentation accordingly","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_LOG_INDEX \u003d new Prefix(\"id/\");","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix FLAG_ALL \u003d new Prefix(\"-a\");","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tanyjnaaman":2,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"dionegoh"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"dionegoh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"dionegoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"dionegoh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"dionegoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        return new DeleteCommand(name);","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"dionegoh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-03-10"},{"lineNumber":38,"author":{"gitId":"dionegoh"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-03-10"},{"lineNumber":39,"author":{"gitId":"dionegoh"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":40,"author":{"gitId":"dionegoh"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"dionegoh":21,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"tanyjnaaman":1,"-":82}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"     * Parses a String title.","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws ParseException if the given {@code title} is invalid.","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"    public static String parseTitle(String title) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        if (!Log.isValidTitle(title)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"            throw new ParseException(Log.TITLE_CONSTRAINTS);","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        return title; // TODO: 8/3/2022 refactor into Title object next time","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"    // TODO: 8/3/2022  refactor into Description object","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"    public static String parseDescription(String description) throws ParseException {","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        return description; // no restrictions on description at the moment","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tanyjnaaman":21,"-":125}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanyjnaaman":2,"-":150}},{"path":"src/main/java/seedu/address/model/person/Log.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":" * Represents a note or log tied to a Person in the address book.","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"public class Log {","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"    // default values","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String DEFAULT_NO_DESCRIPTION \u003d \"\";","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    // constraints","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"    public static final int TITLE_LENGTH_CONSTRAINT \u003d 50;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String TITLE_CONSTRAINTS \u003d \"Titles of logs must satisfy:\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"            + \"1. Not be trivial (i.e. not empty or contain only spaces\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"            + \"2. Be at most \" + Log.TITLE_LENGTH_CONSTRAINT + \" characters long. \"","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"            + \"This is because of display limitations.\";","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    // immutable attributes","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"    private final String title;","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    private final String description;","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a Log object.","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"     * @param title       Title of the log.","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"     * @param description Description tied to the log. Can be null.","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    public Log(String title, String description) {","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        checkArgument(isValidTitle(title), Log.TITLE_CONSTRAINTS);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        this.description \u003d Objects.requireNonNullElse(description, Log.DEFAULT_NO_DESCRIPTION);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if a given string is a valid title.","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    public static boolean isValidTitle(String title) {","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        return (title.length() \u003e 0) // not empty string","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (title.split(\" \").length \u003e 0) // at least one non-space item","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (title.length() \u003c Log.TITLE_LENGTH_CONSTRAINT); // within length limit","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"    public String getDescription() {","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(this.description);","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        return this.description;","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    public String getTitle() {","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(this.title);","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        return this.title;","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if other Log is considered the same as this Log.","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"     * By convention, we consider two Logs the same if their titles are the same.","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"     * @param other The other log.","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"     * @return True if other log is considered the same.","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean isSameLog(Log other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        return this.getTitle().equals(other.getTitle());","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"    public String toString() {","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        return this.title + \"\\n\" + this.description + \"\\n\\n\";","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"                || (other instanceof Log","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (this.getTitle().equals(((Log) other).getTitle())) //getters ensure non-null","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 (this.getDescription().equals(((Log) other).getDescription())));","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        return this.title.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":91}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    private final UniqueLogList logs \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(name, phone, email, address, tags, logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs.setLogs(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    public List\u003cLog\u003e getLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        return this.logs.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean containsLog(Log log) {","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        return this.logs.contains(log);","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"                \u0026\u0026 otherPerson.getLogs().equals(getLogs());","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        return Objects.hash(name, phone, email, address, tags, logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        List\u003cLog\u003e logs \u003d this.getLogs();","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        if (!logs.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"            builder.append(\": Logs: \\n\");","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"            logs.forEach(builder::append);","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tanyjnaaman":20,"-":120}},{"path":"src/main/java/seedu/address/model/person/UniqueLogList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.DuplicateLogException;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.LogNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":" * A list of Logs that enforces the uniqueness between its elements and does not","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":" * allow nulls.","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":" * \u003cp\u003eA log is considered unique by comparing {@code Log#isSameLog(Log)}. As such, adding and updating","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":" * of Logs uses Log#isSameLog(Log) for equality to ensure that the Log being added or updated is unique","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":" * in terms of \"identity\" in the UniqueLogList.Deleting of Logs uses Log#equals(Object) for equality to ensure","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":" * that the Log being deleted is exactly correct.","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":" * \u003cp\u003eSupports a minimal set of list operations.","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":" *","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":" * @see Log#isSameLog(Log)","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"public class UniqueLogList {","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    // observable list allows Java FX listeners to track changes","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    private final ObservableList\u003cLog\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    private final ObservableList\u003cLog\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if the list contains an equivalent log as the given argument.","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean contains(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.stream().anyMatch(log::isSameLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if the list contains a log that matches exactly the","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"     * given {@code Log}. A stronger form of contains.","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean containsExactly(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.stream().anyMatch(log::equals);","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"     * Adds a log to the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"     * An identical log must not already exist in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"    public void addLog(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        if (this.contains(log)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        internalList.add(log);","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"     * Replaces the {@code target} in the list with the {@code editedLog}.","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"     * The {@code target} log must exist in the list, and the identity of the {@code editedLog}","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"     * must be different from all existing logs in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLog(Log targetLog, Log editedLog) {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(targetLog, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        if (!targetLog.isSameLog(editedLog) \u0026\u0026 this.contains(editedLog)) { // trying to insert something already inside","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        int index \u003d this.internalList.indexOf(targetLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"            throw new LogNotFoundException();","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        this.internalList.set(index, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"     * Removes the equivalent log from the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"     * The log must exist in the list.","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog(Log toRemove) {","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        if (!this.internalList.remove(toRemove)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"            throw new LogNotFoundException();","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"     * Replaces the contents of the list with all of {@code logs}.","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"     * {@code logs} must not contain duplicate log.","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        requireAllNonNull(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        if (!this.logsAreUnique(logs)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"            throw new DuplicateLogException();","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        this.internalList.setAll(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns true if and only if {@code logs} contains only unique (by title) logs.","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"    public boolean logsAreUnique(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        int n \u003d logs.size();","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        for (int i \u003d 0; i \u003c n - 1; i++) { // iterate like N choose 2","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"            for (int j \u003d i + 1; j \u003c n; j++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"                if (logs.get(i).isSameLog(logs.get(j))) {","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"                    return false;","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"                }","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        return true;","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"     * Returns the list of logs as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"    public ObservableList\u003cLog\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalUnmodifiableList;","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"    @Override","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"    public int hashCode() {","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        return this.internalList.hashCode();","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":132}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateLogException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":" * identity).","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"public class DuplicateLogException extends RuntimeException {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"    public DuplicateLogException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"        super(\"Operation would result in duplicate logs\");","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/LogNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":" * Signals that the operation is unable to find the specified log.","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"public class LogNotFoundException extends RuntimeException {}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"    public static final List\u003cLog\u003e EMPTY_LOG_LIST \u003d new ArrayList\u003cLog\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"friends\"), EMPTY_LOG_LIST),","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"colleagues\", \"friends\"), EMPTY_LOG_LIST),","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"neighbours\"), EMPTY_LOG_LIST),","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"family\"), EMPTY_LOG_LIST),","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"classmates\"), EMPTY_LOG_LIST),","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"                getTagSet(\"colleagues\"), EMPTY_LOG_LIST)","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"tanyjnaaman":11,"-":55}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedLog.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":" * Jackson-friendly version of {@link Log}","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"public class JsonAdaptedLog {","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"    private final String title;","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    private final String description;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a {@code JsonAdaptedLog} with the given {@code title} and {@code desccription}.","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"     * Assumes that title and description are both valid and non-null.","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"    @JsonCreator","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"    public JsonAdaptedLog(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description) {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"     * Constructs a {@code JsonAdaptedLog} with the given {@code Log}.","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    public JsonAdaptedLog(Log log) {","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        this.title \u003d log.getTitle();","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        this.description \u003d log.getDescription();","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"     * Converts a {@code JsonAdoptedLog} to a {@code Log} object.","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"     * @throws IllegalValueException if constructed {@code Log} contains","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"     *                               illegal values.","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    public Log toModelType() throws IllegalValueException {","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        if (!Log.isValidTitle(this.title)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"            throw new IllegalValueException(Log.TITLE_CONSTRAINTS);","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        return new Log(this.title, this.description);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":47}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    private final List\u003cJsonAdaptedLog\u003e logs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"                             @JsonProperty(\"logs\") List\u003cJsonAdaptedLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        if (logs !\u003d null) {","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"            this.logs.addAll(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        logs.addAll(source.getLogs().stream()","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"                .map(JsonAdaptedLog::new)","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cLog\u003e personLogs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        for (JsonAdaptedLog log : logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"            personLogs.add(log.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"        final List\u003cLog\u003e modelLogs \u003d personLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelLogs);","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tanyjnaaman":22,"-":104}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":60,"author":{"gitId":"dionegoh"},"content":"    public void execute_invalidExecutionError_throwsCommandException() {","lastModifiedDate":"2022-03-10"},{"lineNumber":61,"author":{"gitId":"dionegoh"},"content":"        //System.out.println(model.getAddressBook().getPersonList().size());","lastModifiedDate":"2022-03-10"},{"lineNumber":62,"author":{"gitId":"dionegoh"},"content":"        //personList is empty","lastModifiedDate":"2022-03-10"},{"lineNumber":63,"author":{"gitId":"dionegoh"},"content":"        String deleteCommand \u003d \"deletefriend n/fakename\";","lastModifiedDate":"2022-03-10"},{"lineNumber":64,"author":{"gitId":"dionegoh"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_NAME);","lastModifiedDate":"2022-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"dionegoh":6,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/AddLogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"/**","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AddLogCommand.","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":" */","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLogCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_INDEX \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    // \u003d\u003d\u003d\u003d\u003d UNIT TESTS \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand other;","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor otherDescriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        Index otherIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"some title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        String otherTitle \u003d \"some other title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, command);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, \"some other type\");","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(otherIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"        otherDescriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"        otherDescriptor.setNewTitle(otherTitle);","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand(targetIndex, otherDescriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(command, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"    /* \u003d\u003d\u003d\u003d\u003d INTEGRATION TESTS WITH MODEL \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"    Integration tests with Model component. Note that we do tests for both filtered and unfiltered lists","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"    as these states control what the user sees, but regardless the changes apply to the true underlying","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"    data state of the model.","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_validIInputUnfilteredList_success() {","lastModifiedDate":"2022-03-10"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        String expectedMessage \u003d AddLogCommand.MESSAGE_ADD_LOG_SUCCESS;","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        Log log;","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        Person basePerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        // only title","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        // title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        log \u003d new Log(title, description);","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void execute_validInputFilteredList_success() {","lastModifiedDate":"2022-03-10"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        String expectedMessage \u003d AddLogCommand.MESSAGE_ADD_LOG_SUCCESS;","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        Log log;","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        Person basePerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"        Person addedLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        Model expectedModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        // only title","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        log \u003d new Log(title, null);","lastModifiedDate":"2022-03-10"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"        // title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        log \u003d new Log(title, description);","lastModifiedDate":"2022-03-10"},{"lineNumber":167,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":170,"author":{"gitId":"tanyjnaaman"},"content":"        basePerson \u003d expectedModel.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"tanyjnaaman"},"content":"        addedLogPerson \u003d new PersonBuilder(basePerson).withLogs(log).build();","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"tanyjnaaman"},"content":"        expectedModel.setPerson(basePerson, addedLogPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"tanyjnaaman"},"content":"    public void execute_duplicateLog_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"tanyjnaaman"},"content":"        Log log \u003d new Log(title, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"tanyjnaaman"},"content":"        Model testModel;","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"tanyjnaaman"},"content":"        Person withLogPerson;","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d UNFILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-08"},{"lineNumber":197,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":198,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-08"},{"lineNumber":199,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":205,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":206,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-08"},{"lineNumber":207,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":208,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d FILTERED LIST \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":209,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":210,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":211,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":212,"author":{"gitId":"tanyjnaaman"},"content":"        // add log into list","lastModifiedDate":"2022-03-08"},{"lineNumber":213,"author":{"gitId":"tanyjnaaman"},"content":"        testModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":214,"author":{"gitId":"tanyjnaaman"},"content":"        withLogPerson \u003d new PersonBuilder().withLogs(log).build(); // build person with log","lastModifiedDate":"2022-03-08"},{"lineNumber":215,"author":{"gitId":"tanyjnaaman"},"content":"        testModel.setPerson((model.getFilteredPersonList().get(targetIndex.getZeroBased())), withLogPerson); // add him in","lastModifiedDate":"2022-03-08"},{"lineNumber":216,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":217,"author":{"gitId":"tanyjnaaman"},"content":"        // try to add again","lastModifiedDate":"2022-03-08"},{"lineNumber":218,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":219,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":220,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":221,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, testModel, AddLogCommand.MESSAGE_DUPLICATE_LOG);","lastModifiedDate":"2022-03-08"},{"lineNumber":222,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":223,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":224,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void execute_invalidInputUnfilteredList_failure() {","lastModifiedDate":"2022-03-10"},{"lineNumber":226,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":227,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":228,"author":{"gitId":"tanyjnaaman"},"content":"        String invalidTitle \u003d \"\";","lastModifiedDate":"2022-03-08"},{"lineNumber":229,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command;","lastModifiedDate":"2022-03-08"},{"lineNumber":230,"author":{"gitId":"tanyjnaaman"},"content":"        Index outOfBoundIndex;","lastModifiedDate":"2022-03-08"},{"lineNumber":231,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":232,"author":{"gitId":"tanyjnaaman"},"content":"        Model model;","lastModifiedDate":"2022-03-08"},{"lineNumber":233,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":234,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INVALID INDEX \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":235,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":236,"author":{"gitId":"tanyjnaaman"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-08"},{"lineNumber":237,"author":{"gitId":"tanyjnaaman"},"content":"        outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-03-08"},{"lineNumber":238,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":239,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":240,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":241,"author":{"gitId":"tanyjnaaman"},"content":"        command \u003d new AddLogCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":242,"author":{"gitId":"tanyjnaaman"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-03-08"},{"lineNumber":243,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":244,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d INVALID TITLE \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":245,"author":{"gitId":"tanyjnaaman"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON); // apply filter","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            Model m \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            AddLogCommand.AddLogDescriptor d \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-10"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            d.setNewTitle(invalidTitle);","lastModifiedDate":"2022-03-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            Command c \u003d new AddLogCommand(INDEX_FIRST_PERSON, d);","lastModifiedDate":"2022-03-10"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            c.execute(m);","lastModifiedDate":"2022-03-10"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2022-03-10"},{"lineNumber":254,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"tanyjnaaman"},"content":"        // \u003d\u003d\u003d\u003d\u003d MISSING TITLE \u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e {","lastModifiedDate":"2022-03-10"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            Command c \u003d new AddLogCommand(INDEX_FIRST_PERSON, new AddLogCommand.AddLogDescriptor());","lastModifiedDate":"2022-03-10"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            Model m \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            c.execute(m);","lastModifiedDate":"2022-03-10"},{"lineNumber":260,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2022-03-10"},{"lineNumber":262,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":263,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"},{"lineNumber":264,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":230,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/AddLogDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-08"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogDescriptorTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"    public void equals() {","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor other;","lastModifiedDate":"2022-03-08"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"some title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"        String differentTitle \u003d \"other title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d \"some description\";","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"        String differentDescription \u003d \"some other description\";","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        // same title -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        // same title and description -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, null);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, \"string object\");","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        // different title same desc -\u003e returns true","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(differentTitle);","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        // same title different desc -\u003e returns false","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        other \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(description);","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewTitle(title);","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        other.setNewDescription(differentDescription);","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        assertNotEquals(descriptor, other);","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":63}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE \u003d \"some valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE_PRECEDING_SPACE \u003d \" still a valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED \u003d \"still a valid title\";","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_DESCRIPTION \u003d \"some description!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String VALID_LOG_DESCRIPTION_OTHER \u003d \"some other description!\";","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_TITLE_DESC \u003d \" \" + PREFIX_TITLE + VALID_LOG_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_TITLE_DESC_PRECEDING_SPACE \u003d \" \" + PREFIX_TITLE + VALID_LOG_TITLE_PRECEDING_SPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String LOG_DESCRIPTION_DIFFERENT_DESC \u003d \" \" + PREFIX_DESCRIPTION + VALID_LOG_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String INVALID_LOG_TITLE_EMPTY_STRING_DESC \u003d \" \" + PREFIX_TITLE + \"\";","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String INVALID_LOG_TITLE_ONLY_SPACES_DESC \u003d \" \" + PREFIX_TITLE + \"     \";","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"    public static final String INVALID_LOG_TITLE_TOO_LONG_DESC \u003d \" \" + PREFIX_TITLE + \"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\";","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tanyjnaaman":14,"-":130}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"dionegoh"},"content":"    public void execute_deleteValidName_success() {","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getName());","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Name(\"Sprigatito\"));","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Name(\"Quaxly\"));","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Name(\"Sprigatito\"));","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"dionegoh":6,"-":63}},{"path":"src/test/java/seedu/address/logic/parser/AddLogCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-03-08"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_EMPTY_STRING_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_ONLY_SPACES_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOG_TITLE_TOO_LONG_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC_PRECEDING_SPACE;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION_OTHER;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.AddLogCommandParser.MESSAGE_INVALID_FORMAT;","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-03-08"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-03-08"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"public class AddLogCommandParserTest {","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"    private static final String MESSAGE_INVALID_TITLE \u003d Log.TITLE_CONSTRAINTS;","lastModifiedDate":"2022-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddLogCommandParser parser \u003d new AddLogCommandParser();","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"        // no index specified","lastModifiedDate":"2022-03-08"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        // no title specified","lastModifiedDate":"2022-03-08"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + LOG_DESCRIPTION_DESC; // with description","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\";","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        // no index and no title specified","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"        /*","lastModifiedDate":"2022-03-08"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"        Preamble (i.e. argument before any /PREFIX) used as index. User could throw garbage input.","lastModifiedDate":"2022-03-08"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"         */","lastModifiedDate":"2022-03-08"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"        // negative index","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"-5\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        // zero index, since list should be 1-indexed","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"0\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"somegarbagepreamble\" + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invaildPrefixesPresent_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        // random garbage input","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/ string\";","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1 i/string /g something else\";","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        // invalid titles","lastModifiedDate":"2022-03-08"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_EMPTY_STRING_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_ONLY_SPACES_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + INVALID_LOG_TITLE_TOO_LONG_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        // prefixes without actual arguments","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + \" \" + PREFIX_TITLE;","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d \"1\" + \" \" + PREFIX_TITLE + \" \" + PREFIX_DESCRIPTION;","lastModifiedDate":"2022-03-08"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseFailure(parser, args, MESSAGE_INVALID_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_allFieldsValid_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        Command expectedCommand;","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        String args;","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor;","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title","lastModifiedDate":"2022-03-08"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        // another valid title","lastModifiedDate":"2022-03-08"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC_PRECEDING_SPACE;","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        // valid title and description","lastModifiedDate":"2022-03-08"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"        expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        String args \u003d targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_TITLE_DESC_PRECEDING_SPACE","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"                + LOG_DESCRIPTION_DESC + LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION_OTHER);","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"tanyjnaaman"},"content":"    public void parse_multipleInvalidFieldsButLastValid_success() {","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"tanyjnaaman"},"content":"        String args \u003d targetIndex.getOneBased() + INVALID_LOG_TITLE_EMPTY_STRING_DESC + LOG_TITLE_DESC_PRECEDING_SPACE","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"tanyjnaaman"},"content":"                + LOG_DESCRIPTION_DESC + LOG_DESCRIPTION_DIFFERENT_DESC;","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE_PRECEDING_SPACE_TRIMMED);","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION_OTHER);","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand expectedCommand \u003d new AddLogCommand(targetIndex, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"tanyjnaaman"},"content":"        assertParseSuccess(parser, args, expectedCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-08"}],"authorContributionMap":{"tanyjnaaman":144,"-":20}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOG_TITLE_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_DESCRIPTION;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOG_TITLE;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddLogCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"dionegoh"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"dionegoh"},"content":"    public void parseCommand_deletefriend() throws Exception {","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(\"deletefriend n/Dummy Name\");","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"dionegoh"},"content":"        assertEquals(new DeleteCommand(new Name(\"Dummy Name\")), command);","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"dionegoh"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-08"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"    public void parseCommand_addLog() throws Exception {","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        // command","lastModifiedDate":"2022-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String validAddLogCommand \u003d AddLogCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2022-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                + targetIndex.getOneBased() + LOG_TITLE_DESC + LOG_DESCRIPTION_DESC;","lastModifiedDate":"2022-03-10"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        // expected command","lastModifiedDate":"2022-03-08"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand.AddLogDescriptor descriptor \u003d new AddLogCommand.AddLogDescriptor();","lastModifiedDate":"2022-03-08"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewTitle(VALID_LOG_TITLE);","lastModifiedDate":"2022-03-08"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        descriptor.setNewDescription(VALID_LOG_DESCRIPTION);","lastModifiedDate":"2022-03-08"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        AddLogCommand command \u003d new AddLogCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-03-08"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(command, parser.parseCommand(validAddLogCommand));","lastModifiedDate":"2022-03-08"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(parser.parseCommand(validAddLogCommand) instanceof AddLogCommand);","lastModifiedDate":"2022-03-08"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"dionegoh":7,"tanyjnaaman":17,"-":102}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"dionegoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"dionegoh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"dionegoh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"dionegoh"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"dionegoh"},"content":"        Name name \u003d personToDelete.getName();","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"dionegoh"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getName());","lastModifiedDate":"2022-03-10"},{"lineNumber":35,"author":{"gitId":"dionegoh"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":36,"author":{"gitId":"dionegoh"},"content":"        assertParseSuccess(parser, \" n/\" + name.fullName, deleteCommand);","lastModifiedDate":"2022-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"dionegoh":12,"-":31}},{"path":"src/test/java/seedu/address/model/person/LogTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"public class LogTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"    public void isValidLogTitle() {","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"        // null","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e Log.isValidTitle(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"        // blank title","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(Log.isValidTitle(\"\")); // empty string","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(Log.isValidTitle(\"              \")); // spaces only","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"        // valid length?","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"        String longTitle \u003d \"\";","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        for (int i \u003d 0; i \u003c Log.TITLE_LENGTH_CONSTRAINT - 1; i++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"            longTitle +\u003d \"c\";","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(longTitle)); // exactly as many characters","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(Log.isValidTitle(longTitle + \"c\")); // \u003elimit characters","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"        // valid","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\" peter jack\")); // start with space","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\"12345\")); // numbers only","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long name","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(Log.isValidTitle(\"`~!@#$%^\u0026*()_-+\u003d{[}]|\\\\:;\\\"\\\u0027\u003c,\u003e.?/\")); // random characters","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Log(null, null));","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(\"\", null)); // empty","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(\"      \", null)); // spaces only","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"        String longTitle \u003d \"\";","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"        for (int i \u003d 0; i \u003c Log.TITLE_LENGTH_CONSTRAINT; i++) {","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"            longTitle +\u003d \"c\";","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        final String tooLongTitle \u003d longTitle;","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Log(tooLongTitle, null)); // too many characters","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_noDescription_defaultDescription() {","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"title\";","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(new Log(title, Log.DEFAULT_NO_DESCRIPTION), new Log(title, null));","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"    public void constructor_haveDescription_givenDescription() {","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        String title \u003d \"title\";","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"        String description \u003d \"description\";","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        Log testLog \u003d new Log(title, description);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(testLog.getDescription(), description);","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(testLog.getTitle(), title);","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":69,"-":3}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.TypicalLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"        // different logs (titles \u0026\u0026 description must match) -\u003e returns false","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withLogs(TypicalLogs.getTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        Person editedAliceWithDifferentDescriptions \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"                .withLogs(TypicalLogs.getIdenticalButDifferentTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tanyjnaaman":8,"-":91}},{"path":"src/test/java/seedu/address/model/person/UniqueLogListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"tanyjnaaman"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.DuplicateLogException;","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.exceptions.LogNotFoundException;","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"public class UniqueLogListTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.contains(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_logNotInList_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"        Log toFind \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty, test add separately","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.contains(toFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    public void contains_logInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"        Log identical \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(identical));","lastModifiedDate":"2022-03-07"},{"lineNumber":35,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":36,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.containsExactly(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":41,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":42,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_logNotInList_returnsFalse() {","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"tanyjnaaman"},"content":"        Log toFind \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":46,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty, test add separately","lastModifiedDate":"2022-03-07"},{"lineNumber":47,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.containsExactly(toFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    public void containsExactly_logInList_returnsTrue() {","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        Log identical \u003d new Log(\"title\", \"some description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(identical));","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public void add_nullLog_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.addLog(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"    public void add_duplicateLog_throwsDuplicateLogException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"tanyjnaaman"},"content":"        Log toAdd \u003d new Log(\"title\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":69,"author":{"gitId":"tanyjnaaman"},"content":"        Log similarLog \u003d new Log(\"title\", \"some description\"); // similar \u003d\u003d same title","lastModifiedDate":"2022-03-07"},{"lineNumber":70,"author":{"gitId":"tanyjnaaman"},"content":"        Log anotherSimilarLog \u003d new Log(\"title\", \"some other description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":71,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":72,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(toAdd);","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(DuplicateLogException.class, () -\u003e uniqueLogList.addLog(similarLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(DuplicateLogException.class, () -\u003e uniqueLogList.addLog(anotherSimilarLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":78,"author":{"gitId":"tanyjnaaman"},"content":"    public void setLog_targetLogNotInside_throwsLogNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":79,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":80,"author":{"gitId":"tanyjnaaman"},"content":"        Log editedLog \u003d new Log(\"target\", \"now added description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        Log notTargetLog \u003d new Log(\"not target\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":83,"author":{"gitId":"tanyjnaaman"},"content":"        // target not in empty list","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.setLog(target, editedLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":87,"author":{"gitId":"tanyjnaaman"},"content":"        // target not in list","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(notTargetLog); // contains non-target log","lastModifiedDate":"2022-03-07"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.setLog(target, editedLog));","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setLog_validEditContains_returnsTrue() {","lastModifiedDate":"2022-03-10"},{"lineNumber":95,"author":{"gitId":"tanyjnaaman"},"content":"        // target is inside, and edited log are identical","lastModifiedDate":"2022-03-07"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"tanyjnaaman"},"content":"        Log editedLog \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":98,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(target.equals(editedLog)); // identical logs","lastModifiedDate":"2022-03-07"},{"lineNumber":99,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":100,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLog(target, editedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(target)); // no change semantically, since setter sets identical thing","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        // target is inside, and edited log same title but different description","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        Log actuallyEditedLog \u003d new Log(\"target\", \"some different description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"        Log actuallyEditedLogToFind \u003d new Log(\"target\", \"some different description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLog(target, actuallyEditedLog);","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(target)); // same title still inside","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.containsExactly(target)); // semantically different","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(actuallyEditedLogToFind));","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog_null_throwsNullPointerException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLogList.removeLog(null));","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"    public void removeLog_logNotInside_throwsLogNotFoundException() {","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"tanyjnaaman"},"content":"        // empty log","lastModifiedDate":"2022-03-07"},{"lineNumber":123,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.removeLog(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"tanyjnaaman"},"content":"        // not inside","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"tanyjnaaman"},"content":"        Log nonTarget \u003d new Log(\"not target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(nonTarget);","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.contains(nonTarget)); // not empty","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"tanyjnaaman"},"content":"        assertThrows(LogNotFoundException.class, () -\u003e uniqueLogList.removeLog(target));","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":134,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void removeLog_validContains_returnsFalse() {","lastModifiedDate":"2022-03-10"},{"lineNumber":137,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"tanyjnaaman"},"content":"        Log target \u003d new Log(\"not target\", \"description\");","lastModifiedDate":"2022-03-07"},{"lineNumber":139,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList(); // initially empty","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.addLog(target);","lastModifiedDate":"2022-03-07"},{"lineNumber":141,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":142,"author":{"gitId":"tanyjnaaman"},"content":"        Log toRemove \u003d new Log(\"not target\", \"description\"); // exact match to remove","lastModifiedDate":"2022-03-07"},{"lineNumber":143,"author":{"gitId":"tanyjnaaman"},"content":"        assertTrue(uniqueLogList.containsExactly(target)); // target is inside","lastModifiedDate":"2022-03-07"},{"lineNumber":144,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.removeLog(toRemove);","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"tanyjnaaman"},"content":"        assertFalse(uniqueLogList.contains(target)); // removed successfully","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":143,"-":4}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"import seedu.address.testutil.TypicalLogs;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"tanyjnaaman"},"content":"    private static final List\u003cJsonAdaptedLog\u003e VALID_LOGS \u003d TypicalLogs.getTypicalLogs().stream()","lastModifiedDate":"2022-03-07"},{"lineNumber":38,"author":{"gitId":"tanyjnaaman"},"content":"            .map(JsonAdaptedLog::new)","lastModifiedDate":"2022-03-07"},{"lineNumber":39,"author":{"gitId":"tanyjnaaman"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"tanyjnaaman"},"content":"    @Test","lastModifiedDate":"2022-03-07"},{"lineNumber":49,"author":{"gitId":"tanyjnaaman"},"content":"    public void toModelType_validPersonDetailsWithLogs_returnsPerson() throws Exception {","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"        Person bensonWithLogs \u003d new PersonBuilder(BENSON).withLogs(TypicalLogs.getTypicalLogs()).build();","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson jsonPerson \u003d new JsonAdaptedPerson(bensonWithLogs);","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"        assertEquals(bensonWithLogs, jsonPerson.toModelType());","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"tanyjnaaman"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"tanyjnaaman"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"tanyjnaaman"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"tanyjnaaman"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_LOGS);","lastModifiedDate":"2022-03-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tanyjnaaman":24,"-":100}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"tanyjnaaman":2,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniqueLogList;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    private List\u003cLog\u003e logs;","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"tanyjnaaman"},"content":"        logs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"        logs \u003d personToCopy.getLogs();","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Sets the {@code Log} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":102,"author":{"gitId":"tanyjnaaman"},"content":"    public PersonBuilder withLogs(Log ... logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":103,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":104,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLogs(List.of(logs));","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs \u003d uniqueLogList.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":106,"author":{"gitId":"tanyjnaaman"},"content":"        return this;","lastModifiedDate":"2022-03-07"},{"lineNumber":107,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":108,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Sets the {@code Log} of the {@code Person} that we are building.","lastModifiedDate":"2022-03-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":112,"author":{"gitId":"tanyjnaaman"},"content":"    public PersonBuilder withLogs(List\u003cLog\u003e logs) {","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"tanyjnaaman"},"content":"        UniqueLogList uniqueLogList \u003d new UniqueLogList();","lastModifiedDate":"2022-03-07"},{"lineNumber":114,"author":{"gitId":"tanyjnaaman"},"content":"        uniqueLogList.setLogs(logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":115,"author":{"gitId":"tanyjnaaman"},"content":"        this.logs \u003d uniqueLogList.asUnmodifiableObservableList();","lastModifiedDate":"2022-03-07"},{"lineNumber":116,"author":{"gitId":"tanyjnaaman"},"content":"        return this;","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":120,"author":{"gitId":"tanyjnaaman"},"content":"        return new Person(name, phone, email, address, tags, logs);","lastModifiedDate":"2022-03-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"tanyjnaaman":20,"-":103}},{"path":"src/test/java/seedu/address/testutil/TypicalLogs.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanyjnaaman"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":3,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"tanyjnaaman"},"content":"import java.util.List;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Log;","lastModifiedDate":"2022-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"tanyjnaaman"},"content":"public class TypicalLogs {","lastModifiedDate":"2022-03-07"},{"lineNumber":10,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":11,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LOG_NO_DESCRIPTION \u003d new Log(\"met in 2013\", null);","lastModifiedDate":"2022-03-07"},{"lineNumber":12,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log SHORT_LOG \u003d new Log(\"birthday coming up\", \"maybe get a card\");","lastModifiedDate":"2022-03-07"},{"lineNumber":13,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LONG_LOG \u003d new Log(\"favourite movies\",","lastModifiedDate":"2022-03-07"},{"lineNumber":14,"author":{"gitId":"tanyjnaaman"},"content":"            \"1. Batman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"2. Superman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"Super super into movies, can probably get some themed gift for birthday.\");","lastModifiedDate":"2022-03-07"},{"lineNumber":17,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log SHORT_LOG_DIFFERENT_DESC \u003d new Log(\"birthday coming up\",","lastModifiedDate":"2022-03-07"},{"lineNumber":18,"author":{"gitId":"tanyjnaaman"},"content":"            \"maybe get a card\" + \"difference\");","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Log LONG_LOG_DIFFERENT_DESC \u003d new Log(\"favourite movies\",","lastModifiedDate":"2022-03-07"},{"lineNumber":20,"author":{"gitId":"tanyjnaaman"},"content":"            \"1. Batman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":21,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"2. Superman\\n\"","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"Super super into movies, can probably get some themed gift for birthday.\"","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"tanyjnaaman"},"content":"                    + \"\\nDifference\");","lastModifiedDate":"2022-03-07"},{"lineNumber":24,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":25,"author":{"gitId":"tanyjnaaman"},"content":"    private TypicalLogs() {} // prevents instantiation","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":27,"author":{"gitId":"tanyjnaaman"},"content":"    public static List\u003cLog\u003e getTypicalLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":28,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(LOG_NO_DESCRIPTION, SHORT_LOG, LONG_LOG));","lastModifiedDate":"2022-03-07"},{"lineNumber":29,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":30,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":31,"author":{"gitId":"tanyjnaaman"},"content":"    public static List\u003cLog\u003e getIdenticalButDifferentTypicalLogs() {","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(LOG_NO_DESCRIPTION, SHORT_LOG_DIFFERENT_DESC, LONG_LOG_DIFFERENT_DESC));","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"tanyjnaaman"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":34,"author":{"gitId":"tanyjnaaman"},"content":"}","lastModifiedDate":"2022-03-07"}],"authorContributionMap":{"tanyjnaaman":32,"-":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"tanyjnaaman"},"content":"    // With logs","lastModifiedDate":"2022-03-07"},{"lineNumber":52,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person JAMES \u003d new PersonBuilder().withName(\"JAMES BOND\").withPhone(\"83382178\")","lastModifiedDate":"2022-03-07"},{"lineNumber":53,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"jb@example.com\").withAddress(\"Singapore street\")","lastModifiedDate":"2022-03-07"},{"lineNumber":54,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.LOG_NO_DESCRIPTION).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":56,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person KAREN \u003d new PersonBuilder().withName(\"KAREN K\").withPhone(\"99999999\")","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"kk@example.com\").withAddress(\"some street\")","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.LONG_LOG).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":60,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person LAUREN \u003d new PersonBuilder().withName(\"Lauren Wong\").withPhone(\"93829384\")","lastModifiedDate":"2022-03-07"},{"lineNumber":61,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"laurenwong@example.com\").withAddress(\"queen st.\")","lastModifiedDate":"2022-03-07"},{"lineNumber":62,"author":{"gitId":"tanyjnaaman"},"content":"            .withLogs(TypicalLogs.SHORT_LOG).build(); // single log","lastModifiedDate":"2022-03-07"},{"lineNumber":63,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"tanyjnaaman"},"content":"    public static final Person MAVIS \u003d new PersonBuilder().withName(\"Mavis Tan\").withPhone(\"96382727\")","lastModifiedDate":"2022-03-07"},{"lineNumber":65,"author":{"gitId":"tanyjnaaman"},"content":"            .withEmail(\"mavis.tan@example.com\").withAddress(\"king st.\")","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .withLogs(TypicalLogs.getTypicalLogs()).build(); // 3 logs","lastModifiedDate":"2022-03-10"},{"lineNumber":67,"author":{"gitId":"tanyjnaaman"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"tanyjnaaman"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE,","lastModifiedDate":"2022-03-07"},{"lineNumber":92,"author":{"gitId":"tanyjnaaman"},"content":"                FIONA, GEORGE, JAMES, KAREN, LAUREN, MAVIS","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"tanyjnaaman"},"content":"        ));","lastModifiedDate":"2022-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"tanyjnaaman":19,"-":76}}]
