[{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"### Tay Yan Han","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2020-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[homepage](http://www.comp.nus.edu.sg/~damithch)]","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[github](https://github.com/tyanhan)]","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Ong Han Qin","lastModifiedDate":"2022-02-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"\u003cimg src\u003d\"images/hanqinilnix.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"[[github](https://github.com/hanqinilnix)]","lastModifiedDate":"2022-02-14"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"[[portfolio](team/hanqinilnix.md)]","lastModifiedDate":"2022-02-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"### Vishandi Rudy Keneta","lastModifiedDate":"2022-02-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"vishandi"},"content":"\u003cimg src\u003d\"images/vishandi.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"vishandi"},"content":"[[github](http://github.com/vishandi)] [[portfolio](team/vishandi.md)]","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"### Mark Biju George","lastModifiedDate":"2022-02-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2020-06-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[github](http://github.com/johndoe)]","lastModifiedDate":"2020-06-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"vishandi":2,"-":47,"hanqinilnix":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"vishandi"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) ","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"vishandi"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student, ","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"vishandi"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-02-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":172,"author":{"gitId":"vishandi"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-02-20"},{"lineNumber":173,"author":{"gitId":"vishandi"},"content":"## New/Modified Features (Coming in V1.2)","lastModifiedDate":"2022-02-20"},{"lineNumber":174,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":175,"author":{"gitId":"vishandi"},"content":"### Adding a person: `add`","lastModifiedDate":"2022-02-20"},{"lineNumber":176,"author":{"gitId":"vishandi"},"content":"Adds a person to UniGenda without needing complete information about the person.","lastModifiedDate":"2022-02-20"},{"lineNumber":177,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":178,"author":{"gitId":"vishandi"},"content":"Format: `add n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [ig/INSTAGRAM_ID] [tele/TELEGRAM_HANDLE] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":179,"author":{"gitId":"vishandi"},"content":"* Duplicates of (Name, Phone Number) contacts will be detected; you cannot have two people with the same combination of (Name, Phone Number).","lastModifiedDate":"2022-02-20"},{"lineNumber":180,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":181,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":182,"author":{"gitId":"vishandi"},"content":"* add n/John Doe p/98765432","lastModifiedDate":"2022-02-20"},{"lineNumber":183,"author":{"gitId":"vishandi"},"content":"* add n/Betsy Crow t/friend p/1234567 a/Newgate Prison t/Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":184,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":185,"author":{"gitId":"vishandi"},"content":"### Deleting a tag: `deleteTag`","lastModifiedDate":"2022-02-20"},{"lineNumber":186,"author":{"gitId":"vishandi"},"content":"Deletes a tag that a contact has.","lastModifiedDate":"2022-02-20"},{"lineNumber":187,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":188,"author":{"gitId":"vishandi"},"content":"Format: `deleteTag INDEX t/TAGTOBEDELETED`","lastModifiedDate":"2022-02-20"},{"lineNumber":189,"author":{"gitId":"vishandi"},"content":"* Edits the person’s tag at the specified INDEX. The INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":190,"author":{"gitId":"vishandi"},"content":"* TAGTOBEDELETED is case-insensitive. Eg. criminal will match Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":191,"author":{"gitId":"vishandi"},"content":"* Only fully-named-tag will be matched. Eg. crim will not be matched with Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":192,"author":{"gitId":"vishandi"},"content":"* TAGTOBEDELETED must be one of the tags that the person at index INDEX has.","lastModifiedDate":"2022-02-20"},{"lineNumber":193,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":194,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":195,"author":{"gitId":"vishandi"},"content":"* `deleteTag 2 t/Criminal`","lastModifiedDate":"2022-02-20"},{"lineNumber":196,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":197,"author":{"gitId":"vishandi"},"content":"### Adding a person’s schedule: `addEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":198,"author":{"gitId":"vishandi"},"content":"Adds an event to the specified indexed contact.","lastModifiedDate":"2022-02-20"},{"lineNumber":199,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":200,"author":{"gitId":"vishandi"},"content":"Format: `addEvent INDEX ed/EVENT_DESCRIPTION da/DATE [ti/TIME] [du/DURATION] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":201,"author":{"gitId":"vishandi"},"content":"* INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":202,"author":{"gitId":"vishandi"},"content":"* If TIME is not specified, it will be considered as a full-day event.","lastModifiedDate":"2022-02-20"},{"lineNumber":203,"author":{"gitId":"vishandi"},"content":"* If DURATION is specified, TIME also needs to be specified.","lastModifiedDate":"2022-02-20"},{"lineNumber":204,"author":{"gitId":"vishandi"},"content":"D* URATION should be in the format -H-M","lastModifiedDate":"2022-02-20"},{"lineNumber":205,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":206,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":207,"author":{"gitId":"vishandi"},"content":"* `addSchedule 3 da/20-12-2022 ti/1000 du/2`","lastModifiedDate":"2022-02-20"},{"lineNumber":208,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":209,"author":{"gitId":"vishandi"},"content":"### Deleting a person\u0027s schedule: `deleteEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":210,"author":{"gitId":"vishandi"},"content":"Deletes an event from the specified indexed contact.","lastModifiedDate":"2022-02-20"},{"lineNumber":211,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":212,"author":{"gitId":"vishandi"},"content":"Format: `deleteEvent INDEX EVENT_NUMBER`","lastModifiedDate":"2022-02-20"},{"lineNumber":213,"author":{"gitId":"vishandi"},"content":"* INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":214,"author":{"gitId":"vishandi"},"content":"* EVENT_NUMBER refers to the index of schedules. The schedule_number must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":215,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":216,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":217,"author":{"gitId":"vishandi"},"content":"* `deleteSchedule 3 3`","lastModifiedDate":"2022-02-20"},{"lineNumber":218,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":219,"author":{"gitId":"vishandi"},"content":"### Editing a person’s schedule: `editEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":220,"author":{"gitId":"vishandi"},"content":"Edits the schedule assigned to a person.","lastModifiedDate":"2022-02-20"},{"lineNumber":221,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":222,"author":{"gitId":"vishandi"},"content":"Format: `editSchedule INDEX EVENT_INDEX [ed/EVENT_DESCRIPTION] [da/DATE] [ti/TIME] [du/DURATION] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":223,"author":{"gitId":"vishandi"},"content":"* Edits an event assigned to a person.","lastModifiedDate":"2022-02-20"},{"lineNumber":224,"author":{"gitId":"vishandi"},"content":"* At least one of the optional fields must be provided","lastModifiedDate":"2022-02-20"},{"lineNumber":225,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":226,"author":{"gitId":"vishandi"},"content":"Example:","lastModifiedDate":"2022-02-20"},{"lineNumber":227,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 3 da/21-12-2022`","lastModifiedDate":"2022-02-20"},{"lineNumber":228,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 1 ed/CS2103T tutorial da/18-12-2022 ti/1400 du/2`","lastModifiedDate":"2022-02-20"},{"lineNumber":229,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 1 ed/CS2103T lecture`","lastModifiedDate":"2022-02-20"},{"lineNumber":230,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":231,"author":{"gitId":"vishandi"},"content":"### Viewing a person’s schedule: `viewSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":232,"author":{"gitId":"vishandi"},"content":"Shows the schedule of a specified person.","lastModifiedDate":"2022-02-20"},{"lineNumber":233,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":234,"author":{"gitId":"vishandi"},"content":"Format: `viewSchedule INDEX`","lastModifiedDate":"2022-02-20"},{"lineNumber":235,"author":{"gitId":"vishandi"},"content":"* Shows the schedule of a specific person at INDEX","lastModifiedDate":"2022-02-20"},{"lineNumber":236,"author":{"gitId":"vishandi"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2022-02-20"},{"lineNumber":237,"author":{"gitId":"vishandi"},"content":"* The index must be positive. Eg. 1, 2, 3…","lastModifiedDate":"2022-02-20"},{"lineNumber":238,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":239,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":240,"author":{"gitId":"vishandi"},"content":"* `viewSchedule 5`","lastModifiedDate":"2022-02-20"},{"lineNumber":241,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":242,"author":{"gitId":"vishandi"},"content":"### Get friends who are free: `freeSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":243,"author":{"gitId":"vishandi"},"content":"Retrieves information of friends who are free at the specified time or date.","lastModifiedDate":"2022-02-20"},{"lineNumber":244,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":245,"author":{"gitId":"vishandi"},"content":"Format: `freeSchedule ti/TIME [da/ DATE]`","lastModifiedDate":"2022-02-20"},{"lineNumber":246,"author":{"gitId":"vishandi"},"content":"* Shows the friends who are free at the time specified today","lastModifiedDate":"2022-02-20"},{"lineNumber":247,"author":{"gitId":"vishandi"},"content":"* Shows the friends who are free at the time on the date specified","lastModifiedDate":"2022-02-20"},{"lineNumber":248,"author":{"gitId":"vishandi"},"content":"* TIME is the time at which the user want to find out if the person is free","lastModifiedDate":"2022-02-20"},{"lineNumber":249,"author":{"gitId":"vishandi"},"content":"* TIME should be specified in 24h format","lastModifiedDate":"2022-02-20"},{"lineNumber":250,"author":{"gitId":"vishandi"},"content":"* DATE should not be specified if TIME is not specified","lastModifiedDate":"2022-02-20"},{"lineNumber":251,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":252,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":253,"author":{"gitId":"vishandi"},"content":"* `freeSchedule ti/ 1200`","lastModifiedDate":"2022-02-20"},{"lineNumber":254,"author":{"gitId":"vishandi"},"content":"* `freeSchedule ti/ 1400 da/14-02-2021`","lastModifiedDate":"2022-02-20"},{"lineNumber":255,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":256,"author":{"gitId":"vishandi"},"content":"### Get team’s common free timing: `freeGroupSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":257,"author":{"gitId":"vishandi"},"content":"Gets the common timing of a group of friends is free (by tag)","lastModifiedDate":"2022-02-20"},{"lineNumber":258,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":259,"author":{"gitId":"vishandi"},"content":"Format: `freeGroupSchedule t/TAG`","lastModifiedDate":"2022-02-20"},{"lineNumber":260,"author":{"gitId":"vishandi"},"content":"* Show the overlapping timings that a group of friends with the same tags are free","lastModifiedDate":"2022-02-20"},{"lineNumber":261,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":262,"author":{"gitId":"vishandi"},"content":"### View contacts by tags: `viewGroup`","lastModifiedDate":"2022-02-20"},{"lineNumber":263,"author":{"gitId":"vishandi"},"content":"Shows the names of friends with the same tag","lastModifiedDate":"2022-02-20"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"vishandi"},"content":"Format: `viewGroup t/TAG`","lastModifiedDate":"2022-02-20"},{"lineNumber":266,"author":{"gitId":"vishandi"},"content":"* Shows contacts sharing the same tag","lastModifiedDate":"2022-02-20"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"vishandi":98,"-":189}},{"path":"docs/team/hanqinilnix.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"---","lastModifiedDate":"2022-02-24"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"layout: page","lastModifiedDate":"2022-02-24"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"title: Ong Han Qin\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-24"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"---","lastModifiedDate":"2022-02-24"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"### Project: UniGenda","lastModifiedDate":"2022-02-24"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI)","lastModifiedDate":"2022-02-24"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student,","lastModifiedDate":"2022-02-24"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-24"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-24"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"* **New Feature**:","lastModifiedDate":"2022-02-24"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dhanqinilnix\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-24"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"* **Project management**:","lastModifiedDate":"2022-02-24"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-24"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"* **Community**:","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"* **Tools**:","lastModifiedDate":"2022-02-24"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"}],"authorContributionMap":{"hanqinilnix":32}},{"path":"docs/team/vishandi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vishandi"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"vishandi"},"content":"layout: page","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"vishandi"},"content":"title: Vishandi Rudy Keneta\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"vishandi"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"vishandi"},"content":"### Project: UniGenda","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"vishandi"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI)","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"vishandi"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student,","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"vishandi"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"vishandi"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"vishandi"},"content":"* **New Feature**: ","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"vishandi"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dvishandi\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"vishandi"},"content":"* **Project management**:","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"vishandi"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"vishandi"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"vishandi"},"content":"* **Community**:","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"vishandi"},"content":"* **Tools**:","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"vishandi":32}},{"path":"src/main/java/seedu/address/logic/commands/schedule/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \": Adds an event to the indexed person\u0027s schedule in the address book. \"","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"tyanhan"},"content":"            + \"INDEX (must be a positive integer) \"","lastModifiedDate":"2022-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"EVENT_DESCRIPTION \"","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_TIME + \"TIME \"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_DURATION + \"DURATION \"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"tyanhan"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"3 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"CS2103T Tutorial \"","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_DATE + \"2022-12-28 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_TIME + \"10:00 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_DURATION + \"3 \";","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added %1$s to %2$s\u0027s schedule\";","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final Event toAdd;","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddEventCommand(Index targetIndex, Event event) {","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(targetIndex, event);","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        toAdd \u003d event;","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Schedule scheduleToEdit \u003d personToEdit.getSchedule();","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        scheduleToEdit.addEvent(toAdd);","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editPersonDescriptor.setSchedule(scheduleToEdit);","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        System.out.println(personToEdit.getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, personToEdit.getName()));","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Schedule updatedSchedule \u003d editPersonDescriptor.getSchedule().orElse(personToEdit.getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSchedule, updatedTags);","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":3,"-":99}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"        Person person \u003d new Person(name, phone, email, address, new Schedule(new ArrayList\u003c\u003e()), tagList);","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"tyanhan":3,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.schedule.AddEventCommand;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.EventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                PREFIX_TIME, PREFIX_DURATION)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EventDescription eventDescription \u003d ParserUtil.parseEventDescription(argMultimap.getValue(","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                PREFIX_EVENT_DESCRIPTION).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Event event \u003d new Event(eventDescription, date, time, duration);","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new AddEventCommand(index, event);","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":1,"-":63}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"tyanhan"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Schedule schedule, Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Schedule getSchedule() {","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(getAddress())","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tyanhan":1,"-":130}},{"path":"src/main/java/seedu/address/model/schedule/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a scheduled Event.","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Event {","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Events should be of format EVENT_DESCRIPTION YYYY-MM-DD HH:MM\";","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"    private static final String PLACEHOLDER_EVENT_DESCRIPTION \u003d \"Event Description\";","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final EventDescription eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final LocalDate date;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final LocalTime time;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Duration duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"    private Event() {","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"        this.eventDescription \u003d new EventDescription(PLACEHOLDER_EVENT_DESCRIPTION);","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"tyanhan"},"content":"        this.date \u003d LocalDate.now();","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"tyanhan"},"content":"        this.time \u003d LocalTime.now();","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"tyanhan"},"content":"        this.duration \u003d Duration.ZERO;","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Event(EventDescription eventDescription, LocalDate date, LocalTime time, Duration duration) {","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.eventDescription \u003d eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return date;","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return time;","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public EventDescription getEventDescription() {","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"tyanhan"},"content":"     * Returns true if the given event is valid.","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"tyanhan"},"content":"    public static boolean isValidEvent(Event event) {","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"tyanhan"},"content":"        return EventDescription.isValidEventDescription(event.getEventDescription().toString());","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if both schedules have the same list of events.","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return otherEvent.getEventDescription().equals(getEventDescription())","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getDate().equals(getDate())","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getTime().equals(getTime())","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getDuration().equals(getDuration());","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return String.format(\"%s %s %s %s\", eventDescription, date, time, duration);","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":17,"-":69}},{"path":"src/main/java/seedu/address/model/schedule/EventDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class EventDescription {","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"            \"Event descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public final String eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"    private EventDescription() {","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"        this.eventDescription \u003d \"\";","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param eventDescription A valid eventDescription.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EventDescription(String eventDescription) {","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(eventDescription);","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(isValidEventDescription(eventDescription), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.eventDescription \u003d eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid eventDescription.","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static boolean isValidEventDescription(String test) {","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 eventDescription.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return eventDescription.hashCode();","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":4,"-":56}},{"path":"src/main/java/seedu/address/model/schedule/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Schedule {","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"tyanhan"},"content":"            \"A Schedule\u0027s Events must have alphanumeric event descriptions, date formats YYYY-MM-DD, \"","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"                    + \"time formats HH:MM and duration format in hours\";","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private List\u003cEvent\u003e events;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"tyanhan"},"content":"    private Schedule() {","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"tyanhan"},"content":"        this.events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Schedule(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.events \u003d events;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":30,"author":{"gitId":"tyanhan"},"content":"     * Returns a List of Event objects in the Schedule.","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":32,"author":{"gitId":"tyanhan"},"content":"     * @return a List of Event objects in the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public List\u003cEvent\u003e getEvents() {","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableList(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"tyanhan"},"content":"     * Adds an Event to the Schedule.","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"     * @param event the Event to add to the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        events.add(event);","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"     * Sets the List of Event objects in the Schedule to the corresponding List.","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"tyanhan"},"content":"     * @param events the List of Event objects to be set in the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.events \u003d events;","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"tyanhan"},"content":"     * Returns true if the given event is valid.","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"tyanhan"},"content":"    public static boolean isValidSchedule(Schedule schedule) {","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"tyanhan"},"content":"        for (Event event : schedule.getEvents()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"tyanhan"},"content":"            if (!Event.isValidEvent(event)) {","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"tyanhan"},"content":"                return false;","lastModifiedDate":"2022-02-18"},{"lineNumber":63,"author":{"gitId":"tyanhan"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":64,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":65,"author":{"gitId":"tyanhan"},"content":"        return true;","lastModifiedDate":"2022-02-18"},{"lineNumber":66,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":67,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns true if both schedules have the same list of events.","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof Schedule)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Schedule otherSchedule \u003d (Schedule) other;","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return otherSchedule.getEvents().equals(getEvents());","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Objects.hash(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        int counter \u003d 1;","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (Event event : events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            builder.append(String.format(\"%s. %s\\n\", counter, event));","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            counter +\u003d 1;","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":35,"-":69}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"tyanhan":3,"-":54,"hanqinilnix":6}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"tyanhan"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"            @JsonProperty(\"schedule\") Schedule schedule,","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d source.getSchedule();","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"tyanhan"},"content":"        if (schedule \u003d\u003d null) {","lastModifiedDate":"2022-02-18"},{"lineNumber":111,"author":{"gitId":"tyanhan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-02-23"},{"lineNumber":112,"author":{"gitId":"tyanhan"},"content":"                    Schedule.class.getSimpleName()));","lastModifiedDate":"2022-02-23"},{"lineNumber":113,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":114,"author":{"gitId":"tyanhan"},"content":"        if (!Schedule.isValidSchedule(schedule)) {","lastModifiedDate":"2022-02-18"},{"lineNumber":115,"author":{"gitId":"tyanhan"},"content":"            throw new IllegalValueException(Schedule.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-02-18"},{"lineNumber":116,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":117,"author":{"gitId":"tyanhan"},"content":"        final Schedule modelSchedule \u003d schedule;","lastModifiedDate":"2022-02-23"},{"lineNumber":118,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":121,"author":{"gitId":"tyanhan"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelSchedule, modelTags);","lastModifiedDate":"2022-02-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":16,"-":108}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"public class JsonSerializableAddressBook {","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":1,"-":59}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"tyanhan"},"content":"    private static final String INVALID_SCHEDULE \u003d \"\";","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"tyanhan"},"content":"    private static final Schedule VALID_SCHEDULE \u003d BENSON.getSchedule();","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":56,"author":{"gitId":"tyanhan"},"content":"                VALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":65,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":73,"author":{"gitId":"tyanhan"},"content":"                VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":82,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,","lastModifiedDate":"2022-02-23"},{"lineNumber":90,"author":{"gitId":"tyanhan"},"content":"                VALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":99,"author":{"gitId":"tyanhan"},"content":"                        INVALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":107,"author":{"gitId":"tyanhan"},"content":"                null, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SCHEDULE, invalidTags);","lastModifiedDate":"2022-02-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":20,"-":101}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"tyanhan"},"content":"    private Schedule schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d new Schedule(new ArrayList\u003c\u003e());","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d new Schedule(personToCopy.getSchedule().getEvents());","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":98,"author":{"gitId":"tyanhan"},"content":"     * Parses the {@code schedule} into a {@code Schedule} and set it to the {@code Person} that we are building.","lastModifiedDate":"2022-02-18"},{"lineNumber":99,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":100,"author":{"gitId":"tyanhan"},"content":"    public PersonBuilder withSchedule(Schedule schedule) {","lastModifiedDate":"2022-02-18"},{"lineNumber":101,"author":{"gitId":"tyanhan"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":102,"author":{"gitId":"tyanhan"},"content":"        return this;","lastModifiedDate":"2022-02-18"},{"lineNumber":103,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":104,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":106,"author":{"gitId":"tyanhan"},"content":"        return new Person(name, phone, email, address, schedule, tags);","lastModifiedDate":"2022-02-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"tyanhan":14,"-":95}}]
