[{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"### Tay Yan Han","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"\u003cimg src\u003d\"images/tyanhan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[github](https://github.com/tyanhan)]","lastModifiedDate":"2022-02-14"},{"lineNumber":17,"author":{"gitId":"tyanhan"},"content":"[[portfolio](team/tyanhan.md)]","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Ong Han Qin","lastModifiedDate":"2022-02-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"\u003cimg src\u003d\"images/hanqinilnix.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"[[github](https://github.com/hanqinilnix)]","lastModifiedDate":"2022-02-14"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"[[portfolio](team/hanqinilnix.md)]","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Vishandi Rudy Keneta","lastModifiedDate":"2022-02-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"vishandi"},"content":"\u003cimg src\u003d\"images/vishandi.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"vishandi"},"content":"[[github](http://github.com/vishandi)] [[portfolio](team/vishandi.md)]","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Mark Biju George","lastModifiedDate":"2022-02-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2020-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"[[github](http://github.com/johndoe)]","lastModifiedDate":"2020-06-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2022-02-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tyanhan":2,"vishandi":2,"-":44,"hanqinilnix":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"vishandi"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) ","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"vishandi"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student, ","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"vishandi"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-02-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":172,"author":{"gitId":"vishandi"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-02-20"},{"lineNumber":173,"author":{"gitId":"vishandi"},"content":"## New/Modified Features (Coming in V1.2)","lastModifiedDate":"2022-02-20"},{"lineNumber":174,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":175,"author":{"gitId":"vishandi"},"content":"### Adding a person: `add`","lastModifiedDate":"2022-02-20"},{"lineNumber":176,"author":{"gitId":"vishandi"},"content":"Adds a person to UniGenda without needing complete information about the person.","lastModifiedDate":"2022-02-20"},{"lineNumber":177,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":178,"author":{"gitId":"vishandi"},"content":"Format: `add n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [ig/INSTAGRAM_ID] [tele/TELEGRAM_HANDLE] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":179,"author":{"gitId":"vishandi"},"content":"* Duplicates of (Name, Phone Number) contacts will be detected; you cannot have two people with the same combination of (Name, Phone Number).","lastModifiedDate":"2022-02-20"},{"lineNumber":180,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":181,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":182,"author":{"gitId":"vishandi"},"content":"* add n/John Doe p/98765432","lastModifiedDate":"2022-02-20"},{"lineNumber":183,"author":{"gitId":"vishandi"},"content":"* add n/Betsy Crow t/friend p/1234567 a/Newgate Prison t/Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":184,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":185,"author":{"gitId":"vishandi"},"content":"### Deleting a tag: `deleteTag`","lastModifiedDate":"2022-02-20"},{"lineNumber":186,"author":{"gitId":"vishandi"},"content":"Deletes a tag that a contact has.","lastModifiedDate":"2022-02-20"},{"lineNumber":187,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":188,"author":{"gitId":"vishandi"},"content":"Format: `deleteTag INDEX t/TAGTOBEDELETED`","lastModifiedDate":"2022-02-20"},{"lineNumber":189,"author":{"gitId":"vishandi"},"content":"* Edits the person’s tag at the specified INDEX. The INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":190,"author":{"gitId":"vishandi"},"content":"* TAGTOBEDELETED is case-insensitive. Eg. criminal will match Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":191,"author":{"gitId":"vishandi"},"content":"* Only fully-named-tag will be matched. Eg. crim will not be matched with Criminal","lastModifiedDate":"2022-02-20"},{"lineNumber":192,"author":{"gitId":"vishandi"},"content":"* TAGTOBEDELETED must be one of the tags that the person at index INDEX has.","lastModifiedDate":"2022-02-20"},{"lineNumber":193,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":194,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":195,"author":{"gitId":"vishandi"},"content":"* `deleteTag 2 t/Criminal`","lastModifiedDate":"2022-02-20"},{"lineNumber":196,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":197,"author":{"gitId":"vishandi"},"content":"### Adding a person’s schedule: `addEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":198,"author":{"gitId":"vishandi"},"content":"Adds an event to the specified indexed contact.","lastModifiedDate":"2022-02-20"},{"lineNumber":199,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":200,"author":{"gitId":"vishandi"},"content":"Format: `addEvent INDEX ed/EVENT_DESCRIPTION da/DATE [ti/TIME] [du/DURATION] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":201,"author":{"gitId":"vishandi"},"content":"* INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":202,"author":{"gitId":"vishandi"},"content":"* If TIME is not specified, it will be considered as a full-day event.","lastModifiedDate":"2022-02-20"},{"lineNumber":203,"author":{"gitId":"vishandi"},"content":"* If DURATION is specified, TIME also needs to be specified.","lastModifiedDate":"2022-02-20"},{"lineNumber":204,"author":{"gitId":"vishandi"},"content":"D* URATION should be in the format -H-M","lastModifiedDate":"2022-02-20"},{"lineNumber":205,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":206,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":207,"author":{"gitId":"vishandi"},"content":"* `addSchedule 3 da/20-12-2022 ti/1000 du/2`","lastModifiedDate":"2022-02-20"},{"lineNumber":208,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":209,"author":{"gitId":"vishandi"},"content":"### Deleting a person\u0027s schedule: `deleteEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":210,"author":{"gitId":"vishandi"},"content":"Deletes an event from the specified indexed contact.","lastModifiedDate":"2022-02-20"},{"lineNumber":211,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":212,"author":{"gitId":"vishandi"},"content":"Format: `deleteEvent INDEX EVENT_NUMBER`","lastModifiedDate":"2022-02-20"},{"lineNumber":213,"author":{"gitId":"vishandi"},"content":"* INDEX refers to the index number shown in the displayed person list. The index must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":214,"author":{"gitId":"vishandi"},"content":"* EVENT_NUMBER refers to the index of schedules. The schedule_number must be a positive integer 1, 2, …","lastModifiedDate":"2022-02-20"},{"lineNumber":215,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":216,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":217,"author":{"gitId":"vishandi"},"content":"* `deleteSchedule 3 3`","lastModifiedDate":"2022-02-20"},{"lineNumber":218,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":219,"author":{"gitId":"vishandi"},"content":"### Editing a person’s schedule: `editEvent`","lastModifiedDate":"2022-02-20"},{"lineNumber":220,"author":{"gitId":"vishandi"},"content":"Edits the schedule assigned to a person.","lastModifiedDate":"2022-02-20"},{"lineNumber":221,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":222,"author":{"gitId":"vishandi"},"content":"Format: `editSchedule INDEX EVENT_INDEX [ed/EVENT_DESCRIPTION] [da/DATE] [ti/TIME] [du/DURATION] [t/TAG]`","lastModifiedDate":"2022-02-20"},{"lineNumber":223,"author":{"gitId":"vishandi"},"content":"* Edits an event assigned to a person.","lastModifiedDate":"2022-02-20"},{"lineNumber":224,"author":{"gitId":"vishandi"},"content":"* At least one of the optional fields must be provided","lastModifiedDate":"2022-02-20"},{"lineNumber":225,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":226,"author":{"gitId":"vishandi"},"content":"Example:","lastModifiedDate":"2022-02-20"},{"lineNumber":227,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 3 da/21-12-2022`","lastModifiedDate":"2022-02-20"},{"lineNumber":228,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 1 ed/CS2103T tutorial da/18-12-2022 ti/1400 du/2`","lastModifiedDate":"2022-02-20"},{"lineNumber":229,"author":{"gitId":"vishandi"},"content":"* `editSchedule 3 1 ed/CS2103T lecture`","lastModifiedDate":"2022-02-20"},{"lineNumber":230,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":231,"author":{"gitId":"vishandi"},"content":"### Viewing a person’s schedule: `viewSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":232,"author":{"gitId":"vishandi"},"content":"Shows the schedule of a specified person.","lastModifiedDate":"2022-02-20"},{"lineNumber":233,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":234,"author":{"gitId":"vishandi"},"content":"Format: `viewSchedule INDEX`","lastModifiedDate":"2022-02-20"},{"lineNumber":235,"author":{"gitId":"vishandi"},"content":"* Shows the schedule of a specific person at INDEX","lastModifiedDate":"2022-02-20"},{"lineNumber":236,"author":{"gitId":"vishandi"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2022-02-20"},{"lineNumber":237,"author":{"gitId":"vishandi"},"content":"* The index must be positive. Eg. 1, 2, 3…","lastModifiedDate":"2022-02-20"},{"lineNumber":238,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":239,"author":{"gitId":"vishandi"},"content":"Example: ","lastModifiedDate":"2022-02-20"},{"lineNumber":240,"author":{"gitId":"vishandi"},"content":"* `viewSchedule 5`","lastModifiedDate":"2022-02-20"},{"lineNumber":241,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":242,"author":{"gitId":"vishandi"},"content":"### Get friends who are free: `freeSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":243,"author":{"gitId":"vishandi"},"content":"Retrieves information of friends who are free at the specified time or date.","lastModifiedDate":"2022-02-20"},{"lineNumber":244,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":245,"author":{"gitId":"vishandi"},"content":"Format: `freeSchedule ti/TIME [da/ DATE]`","lastModifiedDate":"2022-02-20"},{"lineNumber":246,"author":{"gitId":"vishandi"},"content":"* Shows the friends who are free at the time specified today","lastModifiedDate":"2022-02-20"},{"lineNumber":247,"author":{"gitId":"vishandi"},"content":"* Shows the friends who are free at the time on the date specified","lastModifiedDate":"2022-02-20"},{"lineNumber":248,"author":{"gitId":"vishandi"},"content":"* TIME is the time at which the user want to find out if the person is free","lastModifiedDate":"2022-02-20"},{"lineNumber":249,"author":{"gitId":"vishandi"},"content":"* TIME should be specified in 24h format","lastModifiedDate":"2022-02-20"},{"lineNumber":250,"author":{"gitId":"vishandi"},"content":"* DATE should not be specified if TIME is not specified","lastModifiedDate":"2022-02-20"},{"lineNumber":251,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":252,"author":{"gitId":"vishandi"},"content":"Examples:","lastModifiedDate":"2022-02-20"},{"lineNumber":253,"author":{"gitId":"vishandi"},"content":"* `freeSchedule ti/ 1200`","lastModifiedDate":"2022-02-20"},{"lineNumber":254,"author":{"gitId":"vishandi"},"content":"* `freeSchedule ti/ 1400 da/14-02-2021`","lastModifiedDate":"2022-02-20"},{"lineNumber":255,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":256,"author":{"gitId":"vishandi"},"content":"### Get team’s common free timing: `freeGroupSchedule`","lastModifiedDate":"2022-02-20"},{"lineNumber":257,"author":{"gitId":"vishandi"},"content":"Gets the common timing of a group of friends is free (by tag)","lastModifiedDate":"2022-02-20"},{"lineNumber":258,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":259,"author":{"gitId":"vishandi"},"content":"Format: `freeGroupSchedule t/TAG`","lastModifiedDate":"2022-02-20"},{"lineNumber":260,"author":{"gitId":"vishandi"},"content":"* Show the overlapping timings that a group of friends with the same tags are free","lastModifiedDate":"2022-02-20"},{"lineNumber":261,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":262,"author":{"gitId":"vishandi"},"content":"### View contacts by tags: `viewGroup`","lastModifiedDate":"2022-02-20"},{"lineNumber":263,"author":{"gitId":"vishandi"},"content":"Shows the names of friends with the same tag","lastModifiedDate":"2022-02-20"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"vishandi"},"content":"Format: `viewGroup t/TAG`","lastModifiedDate":"2022-02-20"},{"lineNumber":266,"author":{"gitId":"vishandi"},"content":"* Shows contacts sharing the same tag","lastModifiedDate":"2022-02-20"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"vishandi":98,"-":189}},{"path":"docs/team/hanqinilnix.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"---","lastModifiedDate":"2022-02-24"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"layout: page","lastModifiedDate":"2022-02-24"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"title: Ong Han Qin\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-24"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"---","lastModifiedDate":"2022-02-24"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"### Project: UniGenda","lastModifiedDate":"2022-02-24"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI)","lastModifiedDate":"2022-02-24"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student,","lastModifiedDate":"2022-02-24"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-24"},{"lineNumber":11,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-24"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"* **New Feature**:","lastModifiedDate":"2022-02-24"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dhanqinilnix\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-24"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"* **Project management**:","lastModifiedDate":"2022-02-24"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-24"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-24"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"* **Community**:","lastModifiedDate":"2022-02-24"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"* **Tools**:","lastModifiedDate":"2022-02-24"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"    * to be added soon","lastModifiedDate":"2022-02-24"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"}],"authorContributionMap":{"tyanhan":1,"hanqinilnix":32}},{"path":"docs/team/tyanhan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tyanhan"},"content":"---","lastModifiedDate":"2022-02-27"},{"lineNumber":2,"author":{"gitId":"tyanhan"},"content":"layout: page","lastModifiedDate":"2022-02-27"},{"lineNumber":3,"author":{"gitId":"tyanhan"},"content":"title: Tay Yan Hans\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"tyanhan"},"content":"---","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"tyanhan"},"content":"### Project: UniGenda","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"tyanhan"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI)","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"tyanhan"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student,","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"tyanhan"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"tyanhan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"* **New Feature**: Added the ability to add an Event to a Person\u0027s Schedule.","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"tyanhan"},"content":"    * Justification: This feature is one of the core commands in our application, since it affords a Person to have a Schedule so that a user can check to see his/her contacts\u0027 availability.","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"tyanhan"},"content":"    * Highlights: I first had to implement the Schedule and Event classes to start off the project, before adding the AddEvent command. I had to make decisions regarding how the Schedule object should be added and stored, since it would affect future commands as well. The most challenging part was definitely getting the Storage to successfully save/load the changes to a Person\u0027s Schedule, because the Jackson library used by AB3 seemed to have problems loading a nested Json object. I spent a few days googling how I could get the Jackson library to work, and also considered alternative Json structures and libraries(such as GSON) to save/load the Schedule, before finding out that Jackson requires an empty constructor to initialise objects using a nested Json structure.","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"tyanhan"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dtyanhan\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"* **Project management**:","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"    * To be added","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"tyanhan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"tyanhan"},"content":"    * To be added","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"tyanhan"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"tyanhan"},"content":"    * User Guide:","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"tyanhan"},"content":"        * Added documentation for the features `AddEvent`","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"tyanhan"},"content":"    * Developer Guide:","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"tyanhan"},"content":"        * To be added","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"tyanhan"},"content":"* **Community**:","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"tyanhan"},"content":"    * Set up the team\u0027s organisation and repository","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"tyanhan"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"tyanhan"},"content":"* **Tools**:","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"tyanhan"},"content":"    * To be added","lastModifiedDate":"2022-02-27"}],"authorContributionMap":{"tyanhan":37}},{"path":"docs/team/vishandi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vishandi"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"vishandi"},"content":"layout: page","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"vishandi"},"content":"title: Vishandi Rudy Keneta\u0027s Project Portfolio Page","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"vishandi"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"vishandi"},"content":"### Project: UniGenda","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"vishandi"},"content":"UniGenda is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI)","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"vishandi"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you are an NUS student,","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"vishandi"},"content":"and you can type fast, UniGenda can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"vishandi"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"vishandi"},"content":"* **New Feature**: ","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"vishandi"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s2.github.io/tp-dashboard/?search\u003dvishandi\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"vishandi"},"content":"* **Project management**:","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"vishandi"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"vishandi"},"content":"* **Documentation**:","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"vishandi"},"content":"* **Community**:","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"vishandi"},"content":"  ","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"vishandi"},"content":"* **Tools**:","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"vishandi"},"content":"  * to be added soon","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"vishandi"},"content":"","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"tyanhan":1,"vishandi":32}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Schedule updatedSchedule \u003d editPersonDescriptor.getSchedule().orElse(personToEdit.getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSchedule, updatedTags);","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Schedule schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setSchedule(toCopy.schedule);","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, schedule, tags);","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setSchedule(Schedule schedule) {","lastModifiedDate":"2022-02-15"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.schedule \u003d schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public Optional\u003cSchedule\u003e getSchedule() {","lastModifiedDate":"2022-02-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(schedule);","lastModifiedDate":"2022-02-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":235,"author":{"gitId":"hanqinilnix"},"content":"                    \u0026\u0026 getSchedule().equals(e.getSchedule())","lastModifiedDate":"2022-02-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"-":238,"hanqinilnix":1}},{"path":"src/main/java/seedu/address/logic/commands/schedule/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-02-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \": Adds an event to the indexed person\u0027s schedule in the address book. \"","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"tyanhan"},"content":"            + \"INDEX (must be a positive integer) \"","lastModifiedDate":"2022-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"EVENT_DESCRIPTION \"","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_TIME + \"TIME \"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_DURATION + \"DURATION \"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"tyanhan"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"3 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"CS2103T Tutorial \"","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_DATE + \"2022-12-28 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_TIME + \"10:00 \"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_DURATION + \"3 \";","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added %1$s to %2$s\u0027s schedule\";","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final Event toAdd;","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddEventCommand(Index targetIndex, Event event) {","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(targetIndex, event);","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        toAdd \u003d event;","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Schedule scheduleToEdit \u003d personToEdit.getSchedule();","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        scheduleToEdit.addEvent(toAdd);","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editPersonDescriptor.setSchedule(scheduleToEdit);","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, personToEdit.getName()));","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Schedule updatedSchedule \u003d editPersonDescriptor.getSchedule().orElse(personToEdit.getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSchedule, updatedTags);","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":3,"-":98}},{"path":"src/main/java/seedu/address/logic/commands/schedule/EditEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"package seedu.address.logic.commands.schedule;","lastModifiedDate":"2022-02-27"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"import java.util.List;","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"import java.util.Optional;","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"import java.util.Set;","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.schedule.Event;","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.schedule.EventDescription;","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"hanqinilnix"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"hanqinilnix"},"content":" * Edits an event of an existing person in the schedule of address book.","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"hanqinilnix"},"content":"public class EditEventCommand extends Command {","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"    public static final String COMMAND_WORD \u003d \"editEvent\";","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"hanqinilnix"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a event of the person identified \"","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"hanqinilnix"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2022-02-27"},{"lineNumber":45,"author":{"gitId":"hanqinilnix"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"            + \"Parameters: INDICES (must be a positive integer) \"","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"            + \"[\" + PREFIX_EVENT_DESCRIPTION + \"EVENT DESCRIPTION] \"","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"hanqinilnix"},"content":"            + \"[\" + PREFIX_TIME + \"TIME] \"","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"hanqinilnix"},"content":"            + \"[\" + PREFIX_DURATION + \"DURATION] \"","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"hanqinilnix"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 \"","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"hanqinilnix"},"content":"            + PREFIX_TIME + \"10:00\";","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"hanqinilnix"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"%1$s\u0027s event edited successfully\";","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"hanqinilnix"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"hanqinilnix"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"hanqinilnix"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"hanqinilnix"},"content":"    private final Index targetEventIndex;","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"hanqinilnix"},"content":"    private final EditEventDescriptor editEventDescriptor;","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"hanqinilnix"},"content":"     * @param targetIndex of the person in the filtered person list to edit","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"hanqinilnix"},"content":"     * @param targetEventIndex of the event in the schedule to edit","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"hanqinilnix"},"content":"     * @param editEventDescriptor details to edit the event with","lastModifiedDate":"2022-02-27"},{"lineNumber":66,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":67,"author":{"gitId":"hanqinilnix"},"content":"    public EditEventCommand(Index targetIndex, Index targetEventIndex, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"hanqinilnix"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"hanqinilnix"},"content":"        this.targetEventIndex \u003d targetEventIndex;","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"hanqinilnix"},"content":"        this.editEventDescriptor \u003d editEventDescriptor;","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-27"},{"lineNumber":74,"author":{"gitId":"hanqinilnix"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"hanqinilnix"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"hanqinilnix"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":78,"author":{"gitId":"hanqinilnix"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":79,"author":{"gitId":"hanqinilnix"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-02-27"},{"lineNumber":80,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"hanqinilnix"},"content":"        Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"hanqinilnix"},"content":"        Schedule scheduleToEdit \u003d personToEdit.getSchedule();","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"hanqinilnix"},"content":"        if (targetEventIndex.getZeroBased() \u003e\u003d scheduleToEdit.getEvents().size()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":86,"author":{"gitId":"hanqinilnix"},"content":"            throw new CommandException(MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-02-27"},{"lineNumber":87,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":88,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":89,"author":{"gitId":"hanqinilnix"},"content":"        Schedule updatedSchedule \u003d createEditedSchedule(scheduleToEdit, targetEventIndex, editEventDescriptor);","lastModifiedDate":"2022-02-27"},{"lineNumber":90,"author":{"gitId":"hanqinilnix"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2022-02-27"},{"lineNumber":91,"author":{"gitId":"hanqinilnix"},"content":"        editPersonDescriptor.setSchedule(updatedSchedule);","lastModifiedDate":"2022-02-27"},{"lineNumber":92,"author":{"gitId":"hanqinilnix"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2022-02-27"},{"lineNumber":93,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":94,"author":{"gitId":"hanqinilnix"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-02-27"},{"lineNumber":95,"author":{"gitId":"hanqinilnix"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"hanqinilnix"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, personToEdit.getName()));","lastModifiedDate":"2022-02-27"},{"lineNumber":97,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":98,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":99,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":100,"author":{"gitId":"hanqinilnix"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2022-02-27"},{"lineNumber":101,"author":{"gitId":"hanqinilnix"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2022-02-27"},{"lineNumber":102,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":103,"author":{"gitId":"hanqinilnix"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-02-27"},{"lineNumber":104,"author":{"gitId":"hanqinilnix"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2022-02-27"},{"lineNumber":105,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":106,"author":{"gitId":"hanqinilnix"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2022-02-27"},{"lineNumber":107,"author":{"gitId":"hanqinilnix"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2022-02-27"},{"lineNumber":108,"author":{"gitId":"hanqinilnix"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2022-02-27"},{"lineNumber":109,"author":{"gitId":"hanqinilnix"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2022-02-27"},{"lineNumber":110,"author":{"gitId":"hanqinilnix"},"content":"        Schedule updatedSchedule \u003d editPersonDescriptor.getSchedule().orElse(personToEdit.getSchedule());","lastModifiedDate":"2022-02-27"},{"lineNumber":111,"author":{"gitId":"hanqinilnix"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":113,"author":{"gitId":"hanqinilnix"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSchedule, updatedTags);","lastModifiedDate":"2022-02-27"},{"lineNumber":114,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":115,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":116,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"hanqinilnix"},"content":"     * Creates and returns an {@code Event} with the details of {@code eventToEdit}","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"hanqinilnix"},"content":"     * edited with {@code editEventDescriptor}.","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"hanqinilnix"},"content":"    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"hanqinilnix"},"content":"        assert eventToEdit !\u003d null;","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"hanqinilnix"},"content":"        EventDescription updatedEventDescription \u003d","lastModifiedDate":"2022-02-27"},{"lineNumber":124,"author":{"gitId":"hanqinilnix"},"content":"                editEventDescriptor.getEventDescription().orElse(eventToEdit.getEventDescription());","lastModifiedDate":"2022-02-27"},{"lineNumber":125,"author":{"gitId":"hanqinilnix"},"content":"        LocalDate updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getDate());","lastModifiedDate":"2022-02-27"},{"lineNumber":126,"author":{"gitId":"hanqinilnix"},"content":"        LocalTime updatedTime \u003d editEventDescriptor.getTime().orElse(eventToEdit.getTime());","lastModifiedDate":"2022-02-27"},{"lineNumber":127,"author":{"gitId":"hanqinilnix"},"content":"        Duration updatedDuration \u003d editEventDescriptor.getDuration().orElse(eventToEdit.getDuration());","lastModifiedDate":"2022-02-27"},{"lineNumber":128,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":129,"author":{"gitId":"hanqinilnix"},"content":"        return new Event(updatedEventDescription, updatedDate, updatedTime, updatedDuration);","lastModifiedDate":"2022-02-27"},{"lineNumber":130,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":131,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":132,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":133,"author":{"gitId":"hanqinilnix"},"content":"     * Creates and returns a {@code Schedule} with the details of {@code scheduleToEdit}","lastModifiedDate":"2022-02-27"},{"lineNumber":134,"author":{"gitId":"hanqinilnix"},"content":"     * edited with {@code editPersonDescriptor} at {@code targetEventIndex}.","lastModifiedDate":"2022-02-27"},{"lineNumber":135,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":136,"author":{"gitId":"hanqinilnix"},"content":"    private static Schedule createEditedSchedule(","lastModifiedDate":"2022-02-27"},{"lineNumber":137,"author":{"gitId":"hanqinilnix"},"content":"            Schedule scheduleToEdit, Index targetEventIndex, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2022-02-27"},{"lineNumber":138,"author":{"gitId":"hanqinilnix"},"content":"        assert scheduleToEdit !\u003d null;","lastModifiedDate":"2022-02-27"},{"lineNumber":139,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":140,"author":{"gitId":"hanqinilnix"},"content":"        List\u003cEvent\u003e scheduleEvents \u003d scheduleToEdit.getEvents();","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"hanqinilnix"},"content":"        ArrayList\u003cEvent\u003e updatedEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-27"},{"lineNumber":142,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"hanqinilnix"},"content":"        int counter \u003d 0;","lastModifiedDate":"2022-02-27"},{"lineNumber":144,"author":{"gitId":"hanqinilnix"},"content":"        for (Event toEditEvent : scheduleEvents) {","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"hanqinilnix"},"content":"            Event updatedEvent;","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"hanqinilnix"},"content":"            if (counter \u003d\u003d targetEventIndex.getZeroBased()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"hanqinilnix"},"content":"                updatedEvent \u003d createEditedEvent(toEditEvent, editEventDescriptor);","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"hanqinilnix"},"content":"            } else {","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"hanqinilnix"},"content":"                updatedEvent \u003d toEditEvent;","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"hanqinilnix"},"content":"            }","lastModifiedDate":"2022-02-27"},{"lineNumber":151,"author":{"gitId":"hanqinilnix"},"content":"            updatedEvents.add(updatedEvent);","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"hanqinilnix"},"content":"            counter++;","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":154,"author":{"gitId":"hanqinilnix"},"content":"        scheduleToEdit.setEvents(updatedEvents);","lastModifiedDate":"2022-02-27"},{"lineNumber":155,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":156,"author":{"gitId":"hanqinilnix"},"content":"        return scheduleToEdit;","lastModifiedDate":"2022-02-27"},{"lineNumber":157,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":158,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":159,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-27"},{"lineNumber":160,"author":{"gitId":"hanqinilnix"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-27"},{"lineNumber":161,"author":{"gitId":"hanqinilnix"},"content":"        // short circuit if same object","lastModifiedDate":"2022-02-27"},{"lineNumber":162,"author":{"gitId":"hanqinilnix"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-27"},{"lineNumber":163,"author":{"gitId":"hanqinilnix"},"content":"            return true;","lastModifiedDate":"2022-02-27"},{"lineNumber":164,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":165,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":166,"author":{"gitId":"hanqinilnix"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-02-27"},{"lineNumber":167,"author":{"gitId":"hanqinilnix"},"content":"        if (!(other instanceof EditEventCommand)) {","lastModifiedDate":"2022-02-27"},{"lineNumber":168,"author":{"gitId":"hanqinilnix"},"content":"            return false;","lastModifiedDate":"2022-02-27"},{"lineNumber":169,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":170,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":171,"author":{"gitId":"hanqinilnix"},"content":"        // state check","lastModifiedDate":"2022-02-27"},{"lineNumber":172,"author":{"gitId":"hanqinilnix"},"content":"        EditEventCommand e \u003d (EditEventCommand) other;","lastModifiedDate":"2022-02-27"},{"lineNumber":173,"author":{"gitId":"hanqinilnix"},"content":"        return targetIndex.equals(e.targetIndex)","lastModifiedDate":"2022-02-27"},{"lineNumber":174,"author":{"gitId":"hanqinilnix"},"content":"                \u0026\u0026 targetEventIndex.equals(e.targetEventIndex)","lastModifiedDate":"2022-02-27"},{"lineNumber":175,"author":{"gitId":"hanqinilnix"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);","lastModifiedDate":"2022-02-27"},{"lineNumber":176,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":177,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":178,"author":{"gitId":"hanqinilnix"},"content":"    public static class EditEventDescriptor {","lastModifiedDate":"2022-02-27"},{"lineNumber":179,"author":{"gitId":"hanqinilnix"},"content":"        private EventDescription eventDescription;","lastModifiedDate":"2022-02-27"},{"lineNumber":180,"author":{"gitId":"hanqinilnix"},"content":"        private LocalDate date;","lastModifiedDate":"2022-02-27"},{"lineNumber":181,"author":{"gitId":"hanqinilnix"},"content":"        private LocalTime time;","lastModifiedDate":"2022-02-27"},{"lineNumber":182,"author":{"gitId":"hanqinilnix"},"content":"        private Duration duration;","lastModifiedDate":"2022-02-27"},{"lineNumber":183,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":184,"author":{"gitId":"hanqinilnix"},"content":"        public EditEventDescriptor() {","lastModifiedDate":"2022-02-27"},{"lineNumber":185,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":186,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":187,"author":{"gitId":"hanqinilnix"},"content":"        /**","lastModifiedDate":"2022-02-27"},{"lineNumber":188,"author":{"gitId":"hanqinilnix"},"content":"         * Copy constructor.","lastModifiedDate":"2022-02-27"},{"lineNumber":189,"author":{"gitId":"hanqinilnix"},"content":"         */","lastModifiedDate":"2022-02-27"},{"lineNumber":190,"author":{"gitId":"hanqinilnix"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {","lastModifiedDate":"2022-02-27"},{"lineNumber":191,"author":{"gitId":"hanqinilnix"},"content":"            setEventDescription(toCopy.eventDescription);","lastModifiedDate":"2022-02-27"},{"lineNumber":192,"author":{"gitId":"hanqinilnix"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2022-02-27"},{"lineNumber":193,"author":{"gitId":"hanqinilnix"},"content":"            setTime(toCopy.time);","lastModifiedDate":"2022-02-27"},{"lineNumber":194,"author":{"gitId":"hanqinilnix"},"content":"            setDuration(toCopy.duration);","lastModifiedDate":"2022-02-27"},{"lineNumber":195,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":196,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":197,"author":{"gitId":"hanqinilnix"},"content":"        /**","lastModifiedDate":"2022-02-27"},{"lineNumber":198,"author":{"gitId":"hanqinilnix"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2022-02-27"},{"lineNumber":199,"author":{"gitId":"hanqinilnix"},"content":"         */","lastModifiedDate":"2022-02-27"},{"lineNumber":200,"author":{"gitId":"hanqinilnix"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-02-27"},{"lineNumber":201,"author":{"gitId":"hanqinilnix"},"content":"            return CollectionUtil.isAnyNonNull(eventDescription, date, time, duration);","lastModifiedDate":"2022-02-27"},{"lineNumber":202,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":203,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":204,"author":{"gitId":"hanqinilnix"},"content":"        public void setEventDescription(EventDescription eventDescription) {","lastModifiedDate":"2022-02-27"},{"lineNumber":205,"author":{"gitId":"hanqinilnix"},"content":"            this.eventDescription \u003d eventDescription;","lastModifiedDate":"2022-02-27"},{"lineNumber":206,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":207,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":208,"author":{"gitId":"hanqinilnix"},"content":"        public Optional\u003cEventDescription\u003e getEventDescription() {","lastModifiedDate":"2022-02-27"},{"lineNumber":209,"author":{"gitId":"hanqinilnix"},"content":"            return Optional.ofNullable(eventDescription);","lastModifiedDate":"2022-02-27"},{"lineNumber":210,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":211,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":212,"author":{"gitId":"hanqinilnix"},"content":"        public void setDate(LocalDate date) {","lastModifiedDate":"2022-02-27"},{"lineNumber":213,"author":{"gitId":"hanqinilnix"},"content":"            this.date \u003d date;","lastModifiedDate":"2022-02-27"},{"lineNumber":214,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":215,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":216,"author":{"gitId":"hanqinilnix"},"content":"        public Optional\u003cLocalDate\u003e getDate() {","lastModifiedDate":"2022-02-27"},{"lineNumber":217,"author":{"gitId":"hanqinilnix"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2022-02-27"},{"lineNumber":218,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":219,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":220,"author":{"gitId":"hanqinilnix"},"content":"        public void setTime(LocalTime time) {","lastModifiedDate":"2022-02-27"},{"lineNumber":221,"author":{"gitId":"hanqinilnix"},"content":"            this.time \u003d time;","lastModifiedDate":"2022-02-27"},{"lineNumber":222,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":223,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":224,"author":{"gitId":"hanqinilnix"},"content":"        public Optional\u003cLocalTime\u003e getTime() {","lastModifiedDate":"2022-02-27"},{"lineNumber":225,"author":{"gitId":"hanqinilnix"},"content":"            return Optional.ofNullable(time);","lastModifiedDate":"2022-02-27"},{"lineNumber":226,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":227,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":228,"author":{"gitId":"hanqinilnix"},"content":"        public void setDuration(Duration duration) {","lastModifiedDate":"2022-02-27"},{"lineNumber":229,"author":{"gitId":"hanqinilnix"},"content":"            this.duration \u003d duration;","lastModifiedDate":"2022-02-27"},{"lineNumber":230,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":231,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":232,"author":{"gitId":"hanqinilnix"},"content":"        public Optional\u003cDuration\u003e getDuration() {","lastModifiedDate":"2022-02-27"},{"lineNumber":233,"author":{"gitId":"hanqinilnix"},"content":"            return Optional.ofNullable(duration);","lastModifiedDate":"2022-02-27"},{"lineNumber":234,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":235,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":236,"author":{"gitId":"hanqinilnix"},"content":"        @Override","lastModifiedDate":"2022-02-27"},{"lineNumber":237,"author":{"gitId":"hanqinilnix"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-02-27"},{"lineNumber":238,"author":{"gitId":"hanqinilnix"},"content":"            // short circuit if same object","lastModifiedDate":"2022-02-27"},{"lineNumber":239,"author":{"gitId":"hanqinilnix"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-27"},{"lineNumber":240,"author":{"gitId":"hanqinilnix"},"content":"                return true;","lastModifiedDate":"2022-02-27"},{"lineNumber":241,"author":{"gitId":"hanqinilnix"},"content":"            }","lastModifiedDate":"2022-02-27"},{"lineNumber":242,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":243,"author":{"gitId":"hanqinilnix"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-02-27"},{"lineNumber":244,"author":{"gitId":"hanqinilnix"},"content":"            if (!(other instanceof EditEventDescriptor)) {","lastModifiedDate":"2022-02-27"},{"lineNumber":245,"author":{"gitId":"hanqinilnix"},"content":"                return false;","lastModifiedDate":"2022-02-27"},{"lineNumber":246,"author":{"gitId":"hanqinilnix"},"content":"            }","lastModifiedDate":"2022-02-27"},{"lineNumber":247,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":248,"author":{"gitId":"hanqinilnix"},"content":"            // state check","lastModifiedDate":"2022-02-27"},{"lineNumber":249,"author":{"gitId":"hanqinilnix"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;","lastModifiedDate":"2022-02-27"},{"lineNumber":250,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":251,"author":{"gitId":"hanqinilnix"},"content":"            return getEventDescription().equals(e.getEventDescription())","lastModifiedDate":"2022-02-27"},{"lineNumber":252,"author":{"gitId":"hanqinilnix"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())","lastModifiedDate":"2022-02-27"},{"lineNumber":253,"author":{"gitId":"hanqinilnix"},"content":"                    \u0026\u0026 getTime().equals(e.getTime())","lastModifiedDate":"2022-02-27"},{"lineNumber":254,"author":{"gitId":"hanqinilnix"},"content":"                    \u0026\u0026 getDuration().equals(e.getDuration());","lastModifiedDate":"2022-02-27"},{"lineNumber":255,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":256,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":257,"author":{"gitId":"hanqinilnix"},"content":"}","lastModifiedDate":"2022-02-27"}],"authorContributionMap":{"hanqinilnix":257}},{"path":"src/main/java/seedu/address/logic/commands/schedule/FreeScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"package seedu.address.logic.commands.schedule;","lastModifiedDate":"2022-02-24"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-24"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-24"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-02-24"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2022-02-24"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-02-24"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-02-24"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.schedule.IsPersonFreePredicate;","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"public class FreeScheduleCommand extends Command {","lastModifiedDate":"2022-02-24"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"    public static final String COMMAND_WORD \u003d \"freeSchedule\";","lastModifiedDate":"2022-02-24"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-02-24"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"            + \": Retrieves information of friends \"","lastModifiedDate":"2022-02-24"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"            + \"who are free at the specified time or date\\n\"","lastModifiedDate":"2022-02-24"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-02-24"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"            + PREFIX_TIME + \"TIME\"","lastModifiedDate":"2022-02-24"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"            + \"[\" + PREFIX_DATE + \"DATE]\\n\"","lastModifiedDate":"2022-02-24"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2022-02-24"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"            + PREFIX_TIME + \"12:00 \"","lastModifiedDate":"2022-02-24"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"            + PREFIX_DATE + \"2022-02-14\";","lastModifiedDate":"2022-02-24"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"    private final IsPersonFreePredicate predicate;","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"    public FreeScheduleCommand(IsPersonFreePredicate predicate) {","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-24"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-02-24"},{"lineNumber":36,"author":{"gitId":"hanqinilnix"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"hanqinilnix"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"        return new CommandResult(","lastModifiedDate":"2022-02-25"},{"lineNumber":39,"author":{"gitId":"hanqinilnix"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2022-02-25"},{"lineNumber":40,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"hanqinilnix"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"hanqinilnix"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"hanqinilnix"},"content":"                || (other instanceof FreeScheduleCommand // instanceof handles nulls","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"                \u0026\u0026 predicate.equals(((FreeScheduleCommand) other).predicate)); // state check","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-24"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"}","lastModifiedDate":"2022-02-24"}],"authorContributionMap":{"hanqinilnix":48}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"        Person person \u003d new Person(name, phone, email, address, new Schedule(new ArrayList\u003c\u003e()), tagList);","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"tyanhan":3,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.schedule.AddEventCommand;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.EventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2022-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                PREFIX_TIME, PREFIX_DURATION)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EventDescription eventDescription \u003d ParserUtil.parseEventDescription(argMultimap.getValue(","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                PREFIX_EVENT_DESCRIPTION).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Event event \u003d new Event(eventDescription, date, time, duration);","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new AddEventCommand(index, event);","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":1,"-":63}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.schedule.AddEventCommand;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.schedule.EditEventCommand;","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.schedule.FreeScheduleCommand;","lastModifiedDate":"2022-02-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"hanqinilnix"},"content":"        case FreeScheduleCommand.COMMAND_WORD:","lastModifiedDate":"2022-02-24"},{"lineNumber":78,"author":{"gitId":"hanqinilnix"},"content":"            return new FreeScheduleCommandParser().parse(arguments);","lastModifiedDate":"2022-02-25"},{"lineNumber":79,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-24"},{"lineNumber":80,"author":{"gitId":"hanqinilnix"},"content":"        case EditEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"hanqinilnix"},"content":"            return new EditEventCommandParser().parse(arguments);","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tyanhan":1,"-":80,"hanqinilnix":8}},{"path":"src/main/java/seedu/address/logic/parser/EditEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-02-27"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"import java.util.List;","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.schedule.EditEventCommand;","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.schedule.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":" * Parses input arguments and creates a new EditEventCommand object","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEventCommand","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"     * and returns an EditEventCommand object for execution.","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"    public EditEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE, PREFIX_TIME, PREFIX_DURATION);","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"        List\u003cIndex\u003e indices;","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"hanqinilnix"},"content":"        try {","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"            indices \u003d ParserUtil.parseIndices(argMultimap.getPreamble());","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"hanqinilnix"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"hanqinilnix"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"hanqinilnix"},"content":"        if (indices.size() !\u003d 2) {","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"hanqinilnix"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2022-02-27"},{"lineNumber":45,"author":{"gitId":"hanqinilnix"},"content":"        if (argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"            editEventDescriptor.setEventDescription(","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"                    ParserUtil.parseEventDescription(argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).get()));","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"hanqinilnix"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"hanqinilnix"},"content":"            editEventDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"hanqinilnix"},"content":"        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"hanqinilnix"},"content":"            editEventDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"hanqinilnix"},"content":"        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"hanqinilnix"},"content":"            editEventDescriptor.setDuration(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"hanqinilnix"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"hanqinilnix"},"content":"            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"hanqinilnix"},"content":"        return new EditEventCommand(indices.get(0), indices.get(1), editEventDescriptor);","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"hanqinilnix"},"content":"}","lastModifiedDate":"2022-02-27"}],"authorContributionMap":{"hanqinilnix":65}},{"path":"src/main/java/seedu/address/logic/parser/FreeScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.commands.schedule.FreeScheduleCommand;","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-02-25"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.schedule.IsPersonFreePredicate;","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"public class FreeScheduleCommandParser implements Parser\u003cFreeScheduleCommand\u003e {","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"    public FreeScheduleCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_TIME, PREFIX_DATE);","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"        boolean hasTimePrefix \u003d argMultimap.getValue(PREFIX_TIME).isPresent();","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"        boolean hasDatePrefix \u003d argMultimap.getValue(PREFIX_DATE).isPresent();","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"        if (hasTimePrefix \u0026\u0026 hasDatePrefix) {","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"            LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"            LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"            return new FreeScheduleCommand(new IsPersonFreePredicate(time, date));","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"        } else if (hasTimePrefix) {","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"            LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"            return new FreeScheduleCommand(new IsPersonFreePredicate(time, LocalDate.now()));","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"        } else {","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"hanqinilnix"},"content":"            throw new ParseException(","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeScheduleCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-02-25"},{"lineNumber":36,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"hanqinilnix":38}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":"import java.util.List;","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.EventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"     * Parses {@code oneBasedIndices} into a {@code List\u003cIndex\u003e} and returns it. Leading and trailing whitespaces will","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"     * be trimmed.","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"     * @throws ParseException if any specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"hanqinilnix"},"content":"    public static List\u003cIndex\u003e parseIndices (String oneBasedIndices) throws ParseException {","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"hanqinilnix"},"content":"        String[] indices \u003d oneBasedIndices.split(\" \");","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"hanqinilnix"},"content":"        ArrayList\u003cIndex\u003e trimmedIndices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"hanqinilnix"},"content":"        for (String index : indices) {","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"hanqinilnix"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(index.trim())) {","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"hanqinilnix"},"content":"                throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"hanqinilnix"},"content":"            }","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"hanqinilnix"},"content":"            trimmedIndices.add(Index.fromOneBased(Integer.parseInt(index)));","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"hanqinilnix"},"content":"        return trimmedIndices;","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Parses a {@code String eventDescription} into an {@code EventDescription}.","lastModifiedDate":"2022-02-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code eventDescription} is invalid.","lastModifiedDate":"2022-02-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static EventDescription parseEventDescription(String eventDescription) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        requireNonNull(eventDescription);","lastModifiedDate":"2022-02-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String trimmedEventDescription \u003d eventDescription.trim();","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!EventDescription.isValidEventDescription(trimmedEventDescription)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new ParseException(EventDescription.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return new EventDescription(eventDescription);","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Parses a {@code String date} into a {@code LocalDate}.","lastModifiedDate":"2022-02-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-02-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2022-02-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public static LocalDate parseDate(String date) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireNonNull(date);","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return LocalDate.parse(trimmedDate);","lastModifiedDate":"2022-02-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2022-02-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Parses a {@code String time} into an {@code LocalTime}.","lastModifiedDate":"2022-02-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-02-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code time} is invalid.","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public static LocalTime parseTime(String time) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        requireNonNull(time);","lastModifiedDate":"2022-02-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2022-02-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return LocalTime.parse(trimmedTime);","lastModifiedDate":"2022-02-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2022-02-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Parses a {@code String duration} into an {@code Duration}.","lastModifiedDate":"2022-02-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-02-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code duration} is invalid.","lastModifiedDate":"2022-02-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public static Duration parseDuration(String duration) throws ParseException {","lastModifiedDate":"2022-02-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        requireNonNull(duration);","lastModifiedDate":"2022-02-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String trimmedDuration \u003d duration.trim();","lastModifiedDate":"2022-02-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Duration.ofHours(Integer.parseInt(trimmedDuration));","lastModifiedDate":"2022-02-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException | NumberFormatException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2022-02-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"-":192,"hanqinilnix":19}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"tyanhan"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-02-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Schedule schedule, Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Schedule getSchedule() {","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(getAddress())","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getSchedule());","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tyanhan":1,"-":130}},{"path":"src/main/java/seedu/address/model/schedule/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a scheduled Event.","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Event {","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Events should be of format EVENT_DESCRIPTION YYYY-MM-DD HH:MM\";","lastModifiedDate":"2022-02-23"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"    private static final String PLACEHOLDER_EVENT_DESCRIPTION \u003d \"Event Description\";","lastModifiedDate":"2022-02-23"},{"lineNumber":15,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final EventDescription eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final LocalDate date;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final LocalTime time;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Duration duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"    private Event() {","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"        this.eventDescription \u003d new EventDescription(PLACEHOLDER_EVENT_DESCRIPTION);","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"tyanhan"},"content":"        this.date \u003d LocalDate.now();","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"tyanhan"},"content":"        this.time \u003d LocalTime.now();","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"tyanhan"},"content":"        this.duration \u003d Duration.ZERO;","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Event(EventDescription eventDescription, LocalDate date, LocalTime time, Duration duration) {","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.eventDescription \u003d eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return date;","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return time;","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"    public LocalTime getEndTime() {","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"        return time.plus(duration);","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return duration;","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public EventDescription getEventDescription() {","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"tyanhan"},"content":"     * Returns true if the given event is valid.","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"tyanhan"},"content":"    public static boolean isValidEvent(Event event) {","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"tyanhan"},"content":"        return EventDescription.isValidEventDescription(event.getEventDescription().toString());","lastModifiedDate":"2022-02-18"},{"lineNumber":63,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":64,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if both schedules have the same list of events.","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return otherEvent.getEventDescription().equals(getEventDescription())","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getDate().equals(getDate())","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getTime().equals(getTime())","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherEvent.getDuration().equals(getDuration());","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return String.format(\"%s %s %s %s\", eventDescription, date, time, duration);","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":17,"-":69,"hanqinilnix":4}},{"path":"src/main/java/seedu/address/model/schedule/EventDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class EventDescription {","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"            \"Event descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public final String eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"    private EventDescription() {","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"tyanhan"},"content":"        this.eventDescription \u003d \"\";","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param eventDescription A valid eventDescription.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EventDescription(String eventDescription) {","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(eventDescription);","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(isValidEventDescription(eventDescription), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.eventDescription \u003d eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid eventDescription.","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static boolean isValidEventDescription(String test) {","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return eventDescription;","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 eventDescription.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return eventDescription.hashCode();","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":4,"-":56}},{"path":"src/main/java/seedu/address/model/schedule/IsPersonFreePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanqinilnix"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"hanqinilnix"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"hanqinilnix"},"content":"import java.util.List;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"hanqinilnix"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"hanqinilnix"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"hanqinilnix"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"hanqinilnix"},"content":"/**","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"hanqinilnix"},"content":" * Tests that a {@code Person}\u0027s {@code Schedule} does not collide to given time and date.","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"hanqinilnix"},"content":" */","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"hanqinilnix"},"content":"public class IsPersonFreePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"hanqinilnix"},"content":"    private final LocalTime time;","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"hanqinilnix"},"content":"    private final LocalDate date;","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"hanqinilnix"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"hanqinilnix"},"content":"     * Constructor method of IsPersonFreePredicate","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"hanqinilnix"},"content":"     * @param time to check if there exist Events that collide with it","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"hanqinilnix"},"content":"     * @param date to check if there exist Events that collide with it","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"hanqinilnix"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"hanqinilnix"},"content":"    public IsPersonFreePredicate(LocalTime time, LocalDate date) {","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"hanqinilnix"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"hanqinilnix"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"hanqinilnix"},"content":"        Schedule schedule \u003d person.getSchedule();","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"        List\u003cEvent\u003e events \u003d schedule.getEvents();","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"hanqinilnix"},"content":"        if (events.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"hanqinilnix"},"content":"            return false;","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":36,"author":{"gitId":"hanqinilnix"},"content":"        Stream\u003cEvent\u003e eventsStream \u003d events.stream();","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"hanqinilnix"},"content":"        return eventsStream","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"                .filter(event -\u003e event.getDate().equals(date))","lastModifiedDate":"2022-02-25"},{"lineNumber":39,"author":{"gitId":"hanqinilnix"},"content":"                .allMatch(event -\u003e {","lastModifiedDate":"2022-02-25"},{"lineNumber":40,"author":{"gitId":"hanqinilnix"},"content":"                    LocalTime start \u003d event.getTime();","lastModifiedDate":"2022-02-25"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"                    LocalTime end \u003d event.getEndTime();","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"hanqinilnix"},"content":"                    return !(start.equals(time) || start.isBefore(time) \u0026\u0026 end.isAfter(time));","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"hanqinilnix"},"content":"                });","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"hanqinilnix"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"hanqinilnix"},"content":"    @Override","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"hanqinilnix"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-25"},{"lineNumber":49,"author":{"gitId":"hanqinilnix"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"hanqinilnix"},"content":"                || (other instanceof IsPersonFreePredicate // instanceof handles nulls","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"hanqinilnix"},"content":"                \u0026\u0026 time.equals(((IsPersonFreePredicate) other).time)); // state check","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"hanqinilnix"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"hanqinilnix"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"hanqinilnix":53}},{"path":"src/main/java/seedu/address/model/schedule/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Schedule {","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"tyanhan"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"tyanhan"},"content":"            \"A Schedule\u0027s Events must have alphanumeric event descriptions, date formats YYYY-MM-DD, \"","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"tyanhan"},"content":"                    + \"time formats HH:MM and duration format in hours\";","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private List\u003cEvent\u003e events;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"tyanhan"},"content":"    private Schedule() {","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"tyanhan"},"content":"        this.events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Schedule(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.events \u003d events;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":30,"author":{"gitId":"tyanhan"},"content":"     * Returns a List of Event objects in the Schedule.","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":32,"author":{"gitId":"tyanhan"},"content":"     * @return a List of Event objects in the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public List\u003cEvent\u003e getEvents() {","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableList(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"tyanhan"},"content":"     * Adds an Event to the Schedule.","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"     * @param event the Event to add to the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        events.add(event);","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"     * Sets the List of Event objects in the Schedule to the corresponding List.","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"tyanhan"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"tyanhan"},"content":"     * @param events the List of Event objects to be set in the Schedule","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.events \u003d events;","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"tyanhan"},"content":"     * Returns true if the given event is valid.","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"tyanhan"},"content":"    public static boolean isValidSchedule(Schedule schedule) {","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"tyanhan"},"content":"        for (Event event : schedule.getEvents()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"tyanhan"},"content":"            if (!Event.isValidEvent(event)) {","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"tyanhan"},"content":"                return false;","lastModifiedDate":"2022-02-18"},{"lineNumber":63,"author":{"gitId":"tyanhan"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":64,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":65,"author":{"gitId":"tyanhan"},"content":"        return true;","lastModifiedDate":"2022-02-18"},{"lineNumber":66,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":67,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns true if both schedules have the same list of events.","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof Schedule)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Schedule otherSchedule \u003d (Schedule) other;","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return otherSchedule.getEvents().equals(getEvents());","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Objects.hash(events);","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        int counter \u003d 1;","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (Event event : events) {","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            builder.append(String.format(\"%s. %s\\n\", counter, event));","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            counter +\u003d 1;","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"tyanhan":35,"-":69}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"hanqinilnix"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Schedule(new ArrayList\u003c\u003e()),","lastModifiedDate":"2022-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"tyanhan":3,"-":54,"hanqinilnix":6}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"tyanhan"},"content":"    private final Schedule schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"            @JsonProperty(\"schedule\") Schedule schedule,","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d source.getSchedule();","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"tyanhan"},"content":"        if (schedule \u003d\u003d null) {","lastModifiedDate":"2022-02-18"},{"lineNumber":111,"author":{"gitId":"tyanhan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-02-23"},{"lineNumber":112,"author":{"gitId":"tyanhan"},"content":"                    Schedule.class.getSimpleName()));","lastModifiedDate":"2022-02-23"},{"lineNumber":113,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":114,"author":{"gitId":"tyanhan"},"content":"        if (!Schedule.isValidSchedule(schedule)) {","lastModifiedDate":"2022-02-18"},{"lineNumber":115,"author":{"gitId":"tyanhan"},"content":"            throw new IllegalValueException(Schedule.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-02-18"},{"lineNumber":116,"author":{"gitId":"tyanhan"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":117,"author":{"gitId":"tyanhan"},"content":"        final Schedule modelSchedule \u003d schedule;","lastModifiedDate":"2022-02-23"},{"lineNumber":118,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":121,"author":{"gitId":"tyanhan"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelSchedule, modelTags);","lastModifiedDate":"2022-02-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":16,"-":108}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"tyanhan"},"content":"public class JsonSerializableAddressBook {","lastModifiedDate":"2022-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":1,"-":59}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"tyanhan"},"content":"    private static final String INVALID_SCHEDULE \u003d \"\";","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"tyanhan"},"content":"    private static final Schedule VALID_SCHEDULE \u003d BENSON.getSchedule();","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":48,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":56,"author":{"gitId":"tyanhan"},"content":"                VALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":65,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":73,"author":{"gitId":"tyanhan"},"content":"                VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-02-23"},{"lineNumber":82,"author":{"gitId":"tyanhan"},"content":"                        VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,","lastModifiedDate":"2022-02-23"},{"lineNumber":90,"author":{"gitId":"tyanhan"},"content":"                VALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":99,"author":{"gitId":"tyanhan"},"content":"                        INVALID_ADDRESS, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"tyanhan"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-02-23"},{"lineNumber":107,"author":{"gitId":"tyanhan"},"content":"                null, VALID_SCHEDULE, VALID_TAGS);","lastModifiedDate":"2022-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"tyanhan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SCHEDULE, invalidTags);","lastModifiedDate":"2022-02-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tyanhan":20,"-":101}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"tyanhan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"tyanhan"},"content":"import seedu.address.model.schedule.Schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"tyanhan"},"content":"    private Schedule schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d new Schedule(new ArrayList\u003c\u003e());","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"tyanhan"},"content":"        schedule \u003d new Schedule(personToCopy.getSchedule().getEvents());","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"tyanhan"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":98,"author":{"gitId":"tyanhan"},"content":"     * Parses the {@code schedule} into a {@code Schedule} and set it to the {@code Person} that we are building.","lastModifiedDate":"2022-02-18"},{"lineNumber":99,"author":{"gitId":"tyanhan"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":100,"author":{"gitId":"tyanhan"},"content":"    public PersonBuilder withSchedule(Schedule schedule) {","lastModifiedDate":"2022-02-18"},{"lineNumber":101,"author":{"gitId":"tyanhan"},"content":"        this.schedule \u003d schedule;","lastModifiedDate":"2022-02-18"},{"lineNumber":102,"author":{"gitId":"tyanhan"},"content":"        return this;","lastModifiedDate":"2022-02-18"},{"lineNumber":103,"author":{"gitId":"tyanhan"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":104,"author":{"gitId":"tyanhan"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":106,"author":{"gitId":"tyanhan"},"content":"        return new Person(name, phone, email, address, schedule, tags);","lastModifiedDate":"2022-02-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"tyanhan":14,"-":95}}]
